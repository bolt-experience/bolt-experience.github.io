{"version":3,"sources":["webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page-layer.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/general/pdf-collection.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page-layer-collection.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page-base.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/annotations/annotation-collection.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/enum.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/base/graphics-element.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/automatic-field.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/pdf-writer.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/pdf-main-object-collection.js","webpack:///./node_modules/@syncfusion/ej2-file-utils/src/stream-writer.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/pdf-document-base.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/page-added-event-arguments.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-section-page-collection.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/pdf-document-template.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-section-templates.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-section.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-section-collection.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-document-page-collection.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/general/pdf-cache-collection.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/pdf-document.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/string-layouter.js","webpack:///./node_modules/@syncfusion/ej2-compression/src/compression-writer.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/collections/utils.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/collections/dictionary.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/images/image-decoder.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-boolean.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/images/pdf-bitmap.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-pen.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/automatic-field-info.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/pdf-stream-writer.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-transformation-matrix.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/constants.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/automatic-field-info-collection.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-table-info.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-name-table.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-name-record.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-head-table.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-metrics.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-horizontal-header-table.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-OS2-Table.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-post-table.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-long-hor-metric.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-cmap-sub-table.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-cmap-table.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-glyph-info.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-loca-table.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-apple-cmap-sub-table.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-microsoft-cmap-sub-table.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-trimmed-cmap-sub-table.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-glyph-header.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/big-endian-writer.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/ttf-reader.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/unicode-true-type-font.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/rtl/rtl-text-shape.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/rtl/rtl-bidirectional.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/rtl-renderer.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-graphics.js","webpack:///./node_modules/@syncfusion/ej2-excel-export/src/worksheets.js","webpack:///./node_modules/@syncfusion/ej2-excel-export/src/worksheet.js","webpack:///./node_modules/@syncfusion/ej2-excel-export/src/cell-style.js","webpack:///./node_modules/@syncfusion/ej2-excel-export/src/column.js","webpack:///./node_modules/@syncfusion/ej2-excel-export/src/row.js","webpack:///./node_modules/@syncfusion/ej2-excel-export/src/cell.js","webpack:///./node_modules/@syncfusion/ej2-compression/src/zip-archive.js","webpack:///./node_modules/@syncfusion/ej2-excel-export/src/value-formatter.js","webpack:///./node_modules/@syncfusion/ej2-excel-export/src/csv-helper.js","webpack:///./node_modules/@syncfusion/ej2-excel-export/src/blob-helper.js","webpack:///./node_modules/@syncfusion/ej2-excel-export/src/workbook.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/images/byte-array.js","webpack:///./node_modules/@syncfusion/ej2-grids/src/grid/actions/reorder.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-standard-font-metrics-factory.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-standard-font.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-resources.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-name.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/brushes/pdf-solid-brush.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/unit-convertor.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/images/pdf-image.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/collections/object-object-pair/dictionary.js","webpack:///./node_modules/@syncfusion/ej2-grids/src/grid/actions/excel-export.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/brushes/pdf-brush.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/enum.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/cross-table.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/pdf-cross-table.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-dictionary.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page-template-element.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-string.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/pdf-template.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/enum.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-font-metrics.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/pdf-catalog.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-string-format.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/enum.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/base/element-layouter.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-color.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/styles/pdf-borders.js","webpack:///./node_modules/@syncfusion/ej2-inputs/src/form-validator/form-validator.js","webpack:///./node_modules/@syncfusion/ej2-grids/src/grid/renderer/inline-edit-renderer.js","webpack:///./node_modules/@syncfusion/ej2-grids/src/grid/renderer/batch-edit-renderer.js","webpack:///./node_modules/@syncfusion/ej2-grids/src/grid/renderer/dialog-edit-renderer.js","webpack:///./node_modules/@syncfusion/ej2-grids/src/grid/renderer/edit-renderer.js","webpack:///./node_modules/@syncfusion/ej2-grids/src/grid/renderer/boolean-edit-cell.js","webpack:///./node_modules/@syncfusion/ej2-grids/src/grid/renderer/dropdown-edit-cell.js","webpack:///./node_modules/@syncfusion/ej2-grids/src/grid/renderer/numeric-edit-cell.js","webpack:///./node_modules/@syncfusion/ej2-grids/src/grid/renderer/default-edit-cell.js","webpack:///./node_modules/@syncfusion/ej2-grids/src/grid/actions/normal-edit.js","webpack:///./node_modules/@syncfusion/ej2-grids/src/grid/actions/inline-edit.js","webpack:///./node_modules/@syncfusion/ej2-grids/src/grid/actions/batch-edit.js","webpack:///./node_modules/@syncfusion/ej2-grids/src/grid/actions/dialog-edit.js","webpack:///./node_modules/@syncfusion/ej2-grids/src/grid/renderer/datepicker-edit-cell.js","webpack:///./node_modules/@syncfusion/ej2-grids/src/grid/renderer/template-edit-cell.js","webpack:///./node_modules/@syncfusion/ej2-grids/src/grid/actions/edit.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/tables/light-tables/enum.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/styles/style.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/enum.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/layout-element.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/base/text-layouter.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/figures/text-element.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/annotations/annotation.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/annotations/link-annotation.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/annotations/action-link-annotation.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/actions/action.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/actions/uri-action.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/annotations/uri-annotation.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/annotations/pdf-text-web-link.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/layout/grid-layouter.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/pdf-grid-cell.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/pdf-grid-column.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/pdf-grid-row.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/pdf-grid.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-transparency.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-array.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/pdf-numbers-convertor.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/pdf-template-value-pair.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/multiple-value-field.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/pdf-page-number-field.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/composite-field.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/single-value-field.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/page-count-field.js","webpack:///./node_modules/@syncfusion/ej2-grids/src/grid/actions/pdf-export.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-font.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/pdf-dictionary-properties.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-number.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-reference.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/string-tokenizer.js","webpack:///./node_modules/@syncfusion/ej2-grids/src/grid/actions/export-helper.js","webpack:///./node_modules/@syncfusion/ej2-grids/src/grid/actions/toolbar.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-stream.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/drawing/pdf-drawing.js","webpack:///./node_modules/@syncfusion/ej2-file-utils/src/save.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page-size.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-margins.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page-settings.js","webpack:///./node_modules/@syncfusion/ej2-file-utils/src/encoding.js","webpack:///./node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/pdf-operators.js"],"names":["pdf_page_layer_PdfPageLayer","PdfPageLayer","page","streamClipPageTemplates","this","pdfColorSpace","graphics_enum","Rgb","isVisible","sublayer","contentLength","dictionaryProperties","pdf_dictionary_properties","pdfPage","clipPageTemplates","content","pdf_stream","Error","constructor","Object","defineProperty","prototype","get","set","value","enumerable","configurable","layerid","layerName","pdfGraphics","initializeGraphics","layer","pdf_page_layer_collection_PdfPageLayerCollection","add","name","sign","number","oPage","gr","pdf_graphics","size","mediaBoxUpperRightBound","sc","section","parent","colorSpace","document","isSame","origin","y","x","initializeCoordinates","clipRect","getActualBounds","margins","pageSettings","clipTranslateMargins","graphics","left","top","right","bottom","setLayer","PdfCollection","collection","length","__extends","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","create","_super","PdfPageLayerCollection","_this","call","parentLayerCount","optionalContent","pdf_dictionary","pdf_page_base_PdfPageBase","lPage","parseLayers","items","index","obj","list","firstArgument","secondArgument","push","addLayer","reference","pdf_reference","contents","insert","i","pop","insertLayer","loadedPage","getResources","crossTable","saveStream","restoreStream","saveState","restoreState","saveData","data","count","indexOf","PdfPageBase","dictionary","defLayerIndex","modified","pageDictionary","pdfSection","layers","defaultLayerIndex","returnlayer","layerCollection","resources","pdf_resources","setValue","getValue","pdf_array","setResources","res","annotation_collection_PdfAnnotationCollection","PdfAnnotationCollection","alreadyExistsAnnotationError","missingAnnotationException","internalAnnotations","lists","annotation","doAdd","destination","setPage","layout","string_layouter","layoutResult","text","font","stringFormat","pdf_drawing","bounds","lastPosition","lines","measureString","drawString","brush","width","height","setColor","annot","clone","cs","colours","color","toArray","c","__webpack_require__","__webpack_exports__","pdf_page_PdfPage","pdf_page_extends","PdfPage","annotationCollection","beginSave","initialize","result","defaultLayer","currentPage","parentDocument","annots","element","annotations","type","pdf_name","pageBeginDrawTemplate","setSection","resetProgress","isProgressOn","getClientSize","returnValue","pageBeginSave","doc","undefined","drawPageTemplates","hasBackTemplates","containsTemplates","backLayer","drawTemplates","automaticFields","fieldInfo","field","performDraw","location","scalingX","scalingY","hasFrontTemplates","frontLayer","PdfHorizontalAlignment","PdfVerticalAlignment","PdfTextAlignment","TextRenderingMode","PdfLineJoin","PdfLineCap","PdfDashStyle","PdfFillMode","PdfColorSpace","PdfBlendMode","PdfGraphicsUnit","PdfGridImagePosition","PdfTextDirection","PdfGraphicsElement","drawHelper","bNeedSave","gState","save","translateTransform","drawInternal","restore","automatic_field_PdfAutomaticField","PdfAutomaticField","internalBounds","internalTemplateSize","internalFont","internalBrush","internalPen","internalStringFormat","performDrawHelper","getFont","draw","arg1","arg2","arg3","location_1","info","automatic_field_info","getSize","getBrush","pdf_solid_brush","pdf_color","pdf_document","defaultFont","getPageFromGraphics","PdfWriter","stream","streamWriter","pdfDocument","buffer","write","overload","tempOverload","pdf_main_object_collection_PdfMainObjectCollection","PdfMainObjectCollection","objectCollections","mainObjectCollection","primitiveObjectCollection","isNew","objInfo","ObjectInfo","containsKey","position","status","input_output_enum","Registered","lookFor","oi","object","getReference","wasNew","trySetReference","found","setReference","destroy","_i","_a","pdfObject","isSaving","objectCollectionIndex","pdfReference","stream_writer_StreamWriter","StreamWriter","encoding","bufferBlob","Blob","bufferText","init","isMicrosoftBrowser","navigator","msSaveBlob","flush","enc","src_encoding","setBomByte","includeBom","arrayUnicode","ArrayBuffer","uint8","Uint8Array","arrayUtf8","utf8","fileName","bufferArray","getBytes","writeLine","pdf_document_base_PdfDocumentBase","PdfDocumentBase","isStreamCopied","pdf_document_PdfDocument","objects","pdfCrossTable","currentSavingObject","pdfCatalog","setMainObjectCollection","setCrossTable","cTable","setCatalog","catalog","filename","SW","encoding_1","SW_1","Promise","resolve","reject","blobData","docSave","PageAddedEventArgs","PdfSectionPageCollection","contains","remove","pdf_document_template_PdfDocumentTemplate","PdfDocumentTemplate","leftTemplate","checkElement","pages_enum","Left","topTemplate","Top","rightTemplate","Right","bottomTemplate","Bottom","evenLeft","evenTop","evenRight","evenBottom","oddLeft","oddTop","oddRight","oddBottom","getLeft","template","even","isEven","EvenLeft","OddLeft","getTop","EvenTop","OddTop","getRight","EvenRight","OddRight","getBottom","EvenBottom","OddBottom","pages","pageCollectionIndex","templateElement","None","PdfSectionTemplate","leftValue","topValue","rightValue","bottomValue","stampValue","pdf_section_PdfSection","PdfSection","pageAdded","pdfPages","settings","initialSettings","sectionCollection","pagesReferences","pageTemplate","pagesCollection","getPages","pointToNativePdf","point","setPageSettings","state","orientation","rotate","PageSettingsState","sectionBeginSave","pageCount","pdf_number","kids","foreground","documentHeaders","getDocumentTemplates","documentTemplates","headers","templates","applyDocumentTopTemplate","applyDocumentBottomTemplate","applyDocumentLeftTemplate","applyDocumentRightTemplate","page_1","pdf_page","r","checkPresence","pageAddedMethod","rh","args","onPageAdded","intValue","document_1","getActualSize","getLeftIndentWidth","top_1","getTopIndentHeight","getRightIndentWidth","getBottomIndentHeight","includeMargins","templateWidth","docTemplateWidth","Math","max","templateHeight","docTemplateHeight","removeAt","temproaryPages","j","applyPageSettings","container","parentSettings","mediaBox","fromRectangle","pdf_section_collection_PdfSectionCollection","rotateFactor","angle","writer","drawTemplatesHelper","len","pageOrientation","pageRotate","pageSize","pageOrigin","PdfSectionCollection","sections","sectionCount","pdfSectionCollection","section_1","checkSection","countPages","forEach","n","pdf_document_page_collection_PdfDocumentPageCollection","PdfDocumentPageCollection","pdfPageCollectionIndex","previousPageOrientation","Portrait","getLastSection","getPageByIndex","getPage","sectionStartIndex","pageIndex","numPages","len_1","pdf_cache_collection_PdfCacheCollection","PdfCacheCollection","referenceObjects","pdfFontCollection","search","group","getGroup","createNewGroup","tGroup","representative","equalsTo","removeGroup","slice","pdf_document_extends","PdfDocument","isMerging","defaultMargin","pdf_cross_table","pdf_catalog","documentPageCollection","cacheCollection","defaultStandardFont","pdf_standard_font","fonts_enum","Helvetica","pdf_page_settings","isCacheEnabled","Cmyk","GrayScale","checkPagesPresence","currentSavingObj","cache","pdfObjects","PdfStringLayouter","LineType","_drawing_pdf_drawing__WEBPACK_IMPORTED_MODULE_0__","_enum__WEBPACK_IMPORTED_MODULE_1__","_string_tokenizer__WEBPACK_IMPORTED_MODULE_2__","isOverloadWithPosition","arg4","arg5","arg6","arg7","clientSize","doLayout","clear","format","rectSize","pageHeight","rectangle","reader","close","PdfStringLayoutResult","lineResult","line","peekLine","lineIndent","getLineIndent","layoutLine","numSymbolsInserted","returnedValue","copyToResult","success","numInserted","read","readLine","finalizeResult","firstLine","firstLineIndent","paragraphIndent","min","getLineHeight","lineSpacing","getLineWidth","layoutLineHeight","maxWidth","lineWidth","lineType","FirstParagraphLine","readWord","round","addToLineResult","NewLineBreak","builder","curLine","curIndent","word","peekWord","curLineWidth","toString","getWrapType","WordOnly","textRemainder","substring","peek","wordWrap","Character","Word","ln","LayoutBreak","LastParagraphLine","layoutLines","breakType","LineInfo","actualSize","allowPartialLines","lineLimit","maxHeight","expHeight","lineHeight","trimLine","size1","end","readToEnd","rightToLeft","spaces","trim","wrapType","empty","CompressedStreamWriter","_syncfusion_ej2_file_utils__WEBPACK_IMPORTED_MODULE_0__","ARR_LITERAL_CODES","Int16Array","ARR_LITERAL_LENGTHS","ARR_DISTANCE_CODES","ARR_DISTANCE_LENGTHS","noWrap","pendingBuffer","pendingBufLength","pendingBufCache","pendingBufBitsInCache","bufferPosition","extraBits","currentHash","matchStart","matchLength","matchPrevAvail","blockStart","stringStart","lookAhead","totalBytesIn","inputOffset","inputEnd","windowSize","windowMask","hashSize","hashMask","hashShift","floor","maxDist","checkSum","isHuffmanTreeInitiated","initHuffmanTree","treeLiteral","CompressorHuffmanTree","treeDistances","treeCodeLengths","arrDistances","Uint16Array","arrLiterals","dataWindow","hashHead","hashPrevious","writeZLibHeader","compressedString","String","fromCharCode","apply","offset","encode","inputBuffer","ChecksumCalculator","checksumUpdate","pendingBufferFlush","compressData","headerDate","pendingBufferWriteShortBytes","s","finish","fillWindow","canFlush","compressSlow","lookAheadCompleted","slideWindow","prevMatch","prevLen","discardMatch","matchPreviousBest","matchPreviousAvailable","huffmanIsFull","insertString","findLongestMatch","huffmanTallyLit","huffmanTallyDist","huffmanFlushBlock","lastBlock","more","subarray","updateHash","m","match","hash","curMatch","chainLen","niceLen","scan","bestEnd","bestLength","limit","stringEnd","scanEnd1","scanEnd","literal","codeFrequencies","dist","lc","huffmanLengthCode","dc","huffmanDistanceCode","stored","storedOffset","storedLength","buildTree","calculateBLFreq","blTreeCodes","codeLengths","huffCodeLengthOrders","opt_len","getEncodedLength","static_len","huffmanFlushStoredBlock","pendingBufferWriteBits","setStaticCodes","huffmanCompressBlock","huffmanReset","huffmanSendAllTrees","pendingBufferAlignToByte","pendingBufferWriteShort","pendingBufferWriteByteBlock","code","distance","buildCodes","treeLength","rank","writeTree","reset","literalLen","writeCodeToStream","bits","uint","Uint32Array","pendingBufferFlushBits","isClose","array","bitReverse","elementCount","minCodes","maxLength","codeMinCount","codeFrequency","lengthCount","Int32Array","codeCount","codeLength","codes","lengths","temp","lengthTemp","nextCode","bitsCount","reverseBits","blTree","maxCount","minCount","curLen","nextLen","maxRepeatCount","minRepeatCount","currentRepeatCount","currentCodeLength","codesCount","arrTree","freq","pos","pPos","leafsCount","nodesCount","child","values","node","iIndex","constructHuffmanTree","buildLength","first","last","lastVal","path","second","minDepth","numNodes","numLeafs","overflow","calculateOptimalCodeLength","iIncreasableLength","recreateTree","nodePtr","childPtr","childIndex","bitLength","checksum","checksum_uint","s1","s2","checkSumBitOffset","steps","checksumIterationCount","checksumBase","defaultToString","item","dictionary_Dictionary","Dictionary","toStringFunction","table","nElements","toStr","key","pair","ret","k","previousElement","keys","keysArray","namesOfKeys","index1","pair1","valuesArray","namesOfValues","index2","pair2","retutnValue","ImageFormat","PdfBoolean","currentPosition","objectStatus","saving","rValue","boolToStr","newNumber","image_decoder_ImageDecoder","ImageDecoder","mFormat","Unknown","mbitsPerComponent","mStream","mHeight","mWidth","mImageData","internalBuffer","checkIfJpeg","Jpeg","parseJpegImage","byte_array","imgData","getBuffer","length_1","mJpegHeader","readByte","getImageDictionary","imageData","imageStream","isImage","tempString","decodedString","imageDataAsNumberArray","byteLength","compress","xObject","subtype","image","bitsPerComponent","filter","dctdecode","getColorSpace","decodeParms","getDecodeParams","deviceRgb","decodeParams","columns","blackIs1","predictor","mPngHeader","GIF_HEADER","BMP_HEADER","pdf_bitmap_PdfBitmap","PdfBitmap","encodedString","imageStatus","loadImage","initializeAsync","byteArray","writeFromBase64String","decoder","pdf_image","PdfPen","_pdf_color__WEBPACK_IMPORTED_MODULE_0__","_brushes_pdf_brush__WEBPACK_IMPORTED_MODULE_2__","pdfColor","dashOffsetValue","penDashPattern","pdfDashStyle","Solid","pdfLineCap","pdfLineJoin","penWidth","internalMiterLimit","setBrush","Custom","Dash","Dot","DashDot","DashDotDot","pen","sBrush","pdfBrush","monitorChanges","currentPen","currentColorSpace","matrix","diff","dashControl","setLineWidth","setLineJoin","lineJoin","setLineCap","lineCap","miterLimit","setMiterLimit","setColorAndSpace","pattern","getPattern","setLineDashPattern","dashOffset","dashPattern","PdfAutomaticFieldInfo","_automatic_field__WEBPACK_IMPORTED_MODULE_1__","scaleX","scaleY","pageNumberFieldLocation","pageNumberField","pdf_stream_writer_PdfStreamWriter","PdfStreamWriter","clearStream","setGraphicsState","dictionaryName","pdf_operators","whiteSpace","writeOperator","slash","executeObject","paintXObject","newLine","closePath","clipPath","useEvenOddRule","evenOdd","endPath","closeFillStrokePath","fillStrokePath","fillStroke","fillPath","fill","closeFillPath","closeStrokePath","setTextScaling","textScaling","floatToString","strokePath","stroke","restoreGraphicsState","saveGraphicsState","startNextLine","goToNextLine","writePoint","setCoords","showText","checkTextParam","writeText","setText","setLeading","leading","setTextLeading","beginPath","beginText","endText","appendRectangle","appendLineSegment","setTextRenderingMode","renderingMode","setRenderingMode","setCharacterSpacing","charSpacing","setCharacterSpace","setWordSpacing","wordSpacing","setWordSpace","showNextLineText","pdf_string","setTextOnNewLine","setColorSpace","temparg1","temparg2","op","selectcolorspaceforstroking","selectcolorspacefornonstroking","modifyCtm","setFont","opcode","pdfEncode","start","hexStringMark","stringMark","updateY","arg","string","writeComment","comment","forStroking","isEmpty","patternOffset","setLineDashPatternHelper","tempPattern","setDashPattern","lineCapStyle","setLineCapStyle","lineJoinStyle","setLineJoinStyle","pdf_transformation_matrix_PdfTransformationMatrix","PdfTransformationMatrix","radDegFactor","PI","transformationMatrix","pdf_transformation_matrix_Matrix","translate","offsetX","offsetY","scale","elements","cos","sin","whitespace","multiply","degreesToRadians","degreesX","degRadFactor","radiansToDegrees","radians","Matrix","metrixElements","transform","x2","y2","tempMatrix","dispose","ProcedureSets","pdf","imageB","imageC","imageI","PdfAutomaticFieldInfoCollection","automaticFieldsInformation","TtfTableInfo","TtfNameTable","TtfNameRecord","TtfHeadTable","TtfMetrics","macStyle","TtfHorizontalHeaderTable","TtfOS2Table","TtfPostTable","TtfLongHorMetric","TtfCmapSubTable","TtfCmapTable","TtfGlyphInfo","charCode","compareTo","glyph","TtfLocaTable","TtfAppleCmapSubTable","TtfMicrosoftCmapSubTable","TtfTrimmedCmapSubTable","TtfGlyphHeader","BigEndianWriter","capacity","int32Size","int16Size","int64Size","bufferLength","internalPosition","writeShort","bytes","writeInt","i1","i2","i3","i4","writeUInt","buff","writeString","charCodeAt","writeBytes","ttf_reader_TtfReader","TtfReader","fontData","isTtcFont","isMacTtf","metricsName","isMacTTF","missedGlyphs","tableNames","entrySelectors","macintoshDictionary","collections_dictionary","microsoftDictionary","internalMacintoshGlyphs","internalMicrosoftGlyphs","metrics","readFontDictionary","nameTable","readNameTable","headTable","readHeadTable","initializeFontName","checkPreambula","numTables","readInt16","tableDirectory","tableKey","readString","readInt32","lowestPosition","fixOffsets","minOffset","Number","MAX_VALUE","tableKeys","shift","version","fontTag","ttcIdentificationNumber","tableInfo","getTable","formatSelector","readUInt16","recordsCount","nameRecords","recordSize","record","platformID","encodingID","languageID","nameID","unicode","readFixed","fontRevision","checkSumAdjustment","readUInt32","magicNumber","flags","unitsPerEm","created","readInt64","xMin","yMin","xMax","yMax","lowestReadableSize","fontDirectionHint","indexToLocalFormat","glyphDataFormat","readHorizontalHeaderTable","ascender","descender","lineGap","advanceWidthMax","minLeftSideBearing","minRightSideBearing","xMaxExtent","caretSlopeRise","caretSlopeRun","metricDataFormat","numberOfHMetrics","readOS2Table","xAvgCharWidth","usWeightClass","usWidthClass","fsType","ySubscriptXSize","ySubscriptYSize","ySubscriptXOffset","ySubscriptYOffset","ySuperscriptXSize","ySuperscriptYSize","ySuperscriptXOffset","ySuperscriptYOffset","yStrikeoutSize","yStrikeoutPosition","sFamilyClass","panose","readBytes","ulUnicodeRange1","ulUnicodeRange2","ulUnicodeRange3","ulUnicodeRange4","vendorIdentifier","fsSelection","usFirstCharIndex","usLastCharIndex","sTypoAscender","sTypoDescender","sTypoLineGap","usWinAscent","usWinDescent","ulCodePageRange1","ulCodePageRange2","sxHeight","sCapHeight","usDefaultChar","usBreakChar","usMaxContext","readPostTable","formatType","italicAngle","underlinePosition","underlineThickness","isFixedPitch","minType42","maxType42","minType1","maxType1","readWidthTable","glyphCount","advanceWidth","lsb","glyphWidth","readCmapTable","tablesCount","subTables","subTable","readCmapSubTable","getCmapEncoding","Macintosh","Microsoft","Apple","readAppleCmapTable","readMicrosoftCmapTable","Trimmed","readTrimmedCmapTable","maxMacIndex","glyphInfo","getWidth","macintosh","addGlyph","Unicode","microsoft","segCountX2","searchRange","entrySelector","rangeShift","segCount","endCount","readUshortArray","reservedPad","startCount","idDelta","idRangeOffset","glyphID","codeOffset","id","Symbol","firstCode","entryCount","fontFamily","postScriptName","glyphCode","Undefined","Roman","microsoftGlyphs","macintoshGlyphs","initializeMetrics","horizontalHeadTable","os2Table","postTable","cmapTables","bSymbol","isSymbol","factor","winAscent","macAscent","capHeight","winDescent","macDescent","ceil","fontBox","stemV","widthTable","updateWidth","subScriptSizeFactor","superscriptSizeFactor","getGlyph","byteToProcess","unknown","space","getString","ch","getDefaultGlyph","string_tokenizer","readLocaTable","bShort","offsets","updateGlyphChars","glyphChars","locaTable","glyphCharKeys","nextKey","processCompositeGlyph","glyphOffset","glyphHeader","numberOfContours","skipBytes","entry","glyphIndex","MoreComponents","Arg1And2AreWords","WeHaveScale","WeHaveAnXyScale","WeHaveTwoByTwo","generateGlyphTable","newLocaTable","newGlyphTable","activeGlyphs","sort","a","glyphSize","glyphSizeAligned","align","nextGlyphOffset","nextGlyphIndex","oldGlyphOffset","oldNextGlyphOffset","glyphTableSize","updateLocaTable","bLocaIsShort","newLocaTableOut","newLocaUpdated","newLocaSize","getFontProgram","locaTableSize","getFontProgramLength","fontProgramLength","writeCheckSums","writeGlyphs","tableName","usedTablesSize","nextTableSize","calculateCheckSum","byte1","byte2","byte3","byte4","i_1","setOffset","createInternals","bIsLocaShort","obj1","isFontPresent","getGlyphChars","chars","charKeys","getAllGlyphs","allGlyphInfo","readFontProgram","result1","result2","fontProgram","convertString","getCharWidth","codeWidth","isUnicode","integer","sFraction","fraction","low","written","unicode_true_type_font_UnicodeTrueTypeFont","UnicodeTrueTypeFont","base64String","nameString","isCompress","isEmbedFont","cmapPrefix","cmapEndCodespaceRange","cmapBeginRange","cmapEndRange","cmapSuffix","fontSize","fontString","Initialize","ttfReader","charWidth","ttfMetrics","fontDictionary","cmap","descendantFont","pdf_font_metrics","subsetName","getFontName","createDescendantFont","createCmap","createFontDictionary","createFontProgram","getInternals","ascent","descent","isBold","random","formatName","fontName","replace","isFont","descendantFontBeginSave","cIDFontType2","baseFont","cIDToGIDMap","identity","dw","fontDescriptor","createFontDescriptor","systemInfo","createSystemInfo","cIDSystemInfo","descriptor","getDescriptorFlags","fontBBox","getBoundBox","missingWidth","avgWidth","fontFile2","xHeight","stemH","cmapBeginSave","fontDictionaryBeginSave","type0","identityH","descFonts","descendantFonts","fontProgramBeginSave","registry","ordering","supplement","usedChars","getDescendantWidth","w","generateCmap","toUnicode","generateFontProgram","chLen","firstGlyphIndex","lastGlyphIndex","firstGlyphIndexWasSet","widthDetails","middlePart","toHexString","nextRange","FixedPitch","Symbolic","Nonsymbolic","isItalic","Italic","ForceBold","rect","abs","isCaseChange","toUpperCase","setSymbols","rtl_text_shape_ArabicShapeRenderer","ArabicShapeRenderer","arabicCharTable","alef","alefHamza","alefHamzaBelow","alefMadda","lam","hamza","zeroWidthJoiner","hamzaAbove","hamzaBelow","wawHamza","yehHamza","waw","alefMaksura","yeh","farsiYeh","shadda","madda","lwa","lwawh","lwawhb","lwawm","bwhb","fathatan","superScriptalef","vowel","arabicMapTable","getCharacterShape","input","shape","level","str2","st","doShape","str","ligature","next","previous","ArabicShape","present","shapeCount","getShapeCount","Shapes","Value","append","Ligature","Type","shapeValue","shapeType","shapeVowel","shapeLigature","shapeShapes","rtl_bidirectional_Bidi","Bidi","indexes","indexLevels","mirroringShapeCharacters","update","doMirrorShaping","getLogicalToVisualString","inputText","isRtl","rtlCharacters","RtlCharacters","getVisualOrder","setDefaultIndexLevel","doOrder","resultBuilder","sIndex","eIndex","odd","pstart","pend","reArrange","types","textOrder","rtlCharacterTypes","L","LRE","LRO","R","AL","RLE","RLO","PDF","EN","ES","ET","AN","CS","NSM","BN","B","S","WS","ON","charTypes","getCharacterCode","doVisualOrder","levels","characterCodes","setDefaultLevels","setLevels","updateLevels","getEmbeddedCharactersLength","preview","preType","checkNSM","checkEmbeddedCharacters","startType","endType","charType","checkEuropeanDigits","checkArabicCharacters","checkEuropeanNumberSeparator","checkEuropeanNumberTerminator","l","getLength","checkOtherNeutrals","checkOtherCharacters","pst","checkCommanCharacters","validSet","t","byte","lt","tt","rt","rtl_renderer_RtlRenderer","RtlRenderer","openBracket","closeBracket","rtl","wordSpace","customLayout","splitLayout","words","system","customSplitLayout","getGlyphIndex","glyphs","custom","fail","renderer","fontInternal","textDirection","bidi","layouted","txt","split","addChars","toUnicodeArray","byteToString","reversedLine","pdf_graphics_PdfGraphics","GetResourceEventHandler","PdfGraphics","previousTextRenderingMode","Fill","previousCharacterSpacing","previousWordSpacing","previousTextScaling","procedureSets","isNormalRender","isUseFontSize","isEmfTextScaled","isEmf","isEmfPlus","isBaselineFormat","emfScalingFactor","colorSpaceChanged","isPointOverload","currentColorSpaces","isImageOptimized","graphicsState","istransparencySet","internalAutomaticFields","startCutIndex","pdfStreamWriter","canvasSize","pdfStringLayoutResult","internalMediaBoxUpperRightBound","clipBounds","pageLayer","bStateSaved","currentBrush","currentFont","bCSInitialized","currentStringFormat","requireProcedureSet","drawPdfTemplate","bNeedScale","getTranslateTransform","getScaleTransform","name_1","getName","g","newLocation","modify","arg8","arg9","pdf_font","pdf_pen","pdf_brush","pdf_string_format","temparg3","temparg4","temparg5","temparg6","temparg7","temparg8","temparg9","layouter","checkCorrectLayoutRectangle","drawStringLayoutResult","drawLine","stateControl","sw","drawRectangle","drawPath","Winding","isPen","isBrush","isEvenOdd","Alternate","drawImage","physicalDimension","name_2","resource","getLineBounds","lineIndex","layoutRectangle","lineCount","vShift","getTextVerticalAlignShift","hShift","getHorizontalAlignShift","shouldJustify","textSize","layoutedRectangle","alignment","Center","lineAlignment","Middle","pageSave","applyStringSettings","horizontalScalingFactor","subScript","subSuperScript","SubScript","getDescent","getAscent","resultHeight","remainingString","drawLayoutResult","underlineStrikeoutText","getNextPage","nextPage","setClip","mode","tm","getTextRenderingMode","characterSpacing","ws","textHeight","boundsHeight","vAlignShift","ttfFont","lineInfo","hAlignShift","drawUnicodeLine","drawAsciiLine","justifyLine","useWordSpace","Justify","rtlRender","blocks","rightAlign","RightToLeft","drawUnicodeBlocks","breakUnicodeLine","tokens","token","convertToUnicode","getUnicodeString","xShift","spaceWidth","tokenWidth","val","converted","ForceEncoding","Ascii","boundsWidth","hasWordSpacing","symbols","whitespacesCount","getCharsCount","difference","justifyStyle","goodWidth","hasSpaces","goodLineBreakStyle","underline","strikeout","linePen","createUnderlineStikeoutPen","underlineYOffset","strikeoutYOffset","getHeight","x1","FillStroke","Stroke","ClipFlag","layoutBounds","firstParagraphLine","lastDocumentCS","lastGraphicsCS","initCurrentColorSpace","penControl","brushControl","fontControl","colorspace","curSubSuper","prevSubSuper","setTransparency","Normal","trasparencies","object_object_pair_dictionary","transp","td","TransparencyData","pdf_transparency","name_3","clipArea","scaleTransform","rotateTransform","getRotateTransform","cropBox","pdf_graphics_PdfGraphicsState","textRenderingMode","doRestoreState","popState","pathTypesValuesMask","transparencyObject","sender","PdfGraphicsState","internalTextRenderingMode","internalCharacterSpacing","internalWordSpacing","internalTextScaling","pdfPen","pdfFont","alphaPen","alphaBrush","blendMode","Worksheets","arguments","worksheet_extends","Worksheet","isSummaryRowBelow","showGridLines","HyperLink","Grouping","FreezePane","MergeCell","MergeCells","mergeCell","inserted","mCell","isIntersecting","intersectingCell","Y","Width","X","Height","ref","base","compare","CellStyle","numFmtId","backColor","fontColor","italic","bold","wrapText","hAlign","vAlign","indent","rotation","numberFormat","borders","Borders","isGlobalStyle","Font","sz","u","CellXfs","Alignment","CellStyleXfs","CellStyles","xfId","NumFmt","formatCode","Border","mLine","mColor","lineStyle","all","Column","row_extends","Row","Rows","row","cell_extends","Cell","Cells","cell","CRC32TABLE","zip_archive_ZipArchive","ZipArchive","initCrc32Table","files","addItem","file","ZipArchiveItem","addDirectory","directoryName","getItem","zipArchive","saveInternal","then","saveAsBlob","blob","skipFileSave","zipData","dirLength","compressedObject","getCompressedData","constructZippedObject","isDirectory","writeZippedContent","promise","reader_1","FileReader","onload","crc32Value","compressedData","compressedSize","uncompressedDataSize","compressionType","calculateCrc32Value","readAsArrayBuffer","crc32Table","compressor","compression_writer","currentIndex","nextIndex","subArray","zipParts","extFileAttr","date","Date","header","writeHeader","localHeader","centralDir","writeCentralDirectory","zipHeader","getModifiedTime","getModifiedDate","localDirLen","cenDirLen","getArrayBuffer","writeFooter","externalFileAttribute","directoryHeader","centralLength","localLength","dirEnd","modTime","getHours","getMinutes","getSeconds","modiDate","getFullYear","getMonth","getDate","itemName","value_formatter_ValueFormatter","ValueFormatter","cultureName","intl","ej2_base","getFormatFunction","getDateFormat","getNumberFormat","toView","displayText","csv_helper_CsvHelper","CsvHelper","json","csvStr","formatter","styles","globalStyles","Map","worksheets","parseWorksheet","rows","parseRows","rows_1","parseRow","cells","parseCell","csv","style","parseCellValue","skeleton","has","dataUrl_1","window","URL","createObjectURL","dwlLink","createElementNS","download","href","event_1","createEvent","initEvent","dispatchEvent","setTimeout","revokeObjectURL","BlobHelper","parts","part","getBlob","workbook_Workbook","Workbook","saveType","culture","currencyString","sharedStringCount","unitsProportions","hyperlinkStyle","currency","mSaveType","mArchive","sharedString","mFonts","mBorders","mStyles","printTitles","cellStyles","mNumFmt","mFills","mCellXfs","mCellStyleXfs","cellStyle","parserCellStyle","cellStylesIn","tFormat","parserWorksheets","builtInProperties","BuiltInProperties","parserBuiltInProperties","csvHelper","jsonBuiltInProperties","author","comments","category","company","manager","subject","title","createdDate","modifiedDate","tags","jsonSheet","sheet","mergeCells","mergedCellsStyle","mHyperLinks","parserColumns","parserRows","freeze","parserFreezePanes","printTitle","parserPrintTitle","pageSetup","hyperLinks","mergeOptions","fromJson","toJson","applyProperties","sourceJson","destJson","getCellName","column","getColumnName","col","strColumnName","iCurrentDigit","titleRowName","titleColName","printTitleName","fromRow","toRow","fromColumn","toColumn","freezePanes","leftCell","columnsLength","rowsLength","rowId","parserRow","insertMergedCellsStyle","rowToInsert","createCell","insertIndex","splice","styleIndex","cellToInsert","refName","rowIndex","grouping","parseGrouping","parseCells","outlineLevel","isCollapsed","isHidden","cellsLength","spanMin","spanMax","cellId","jsonCell","rowSpan","colSpan","hyperlink","hyperLink","target","getCellValueType","rId","formula","parseCellType","processMergeCells","spans","applyGlobalStyle","cellType","defStyleIndex","parserBorder","leftBorder","rightBorder","topBorder","bottomBorder","toLowerCase","processCellStyle","switchNumberFormat","numFmt","cellStyleXfs","_b","_c","cellXfs","returnFormat","getNumberPattern","error","getDatePattern","border","processNumFormatId","compareResult","compareStyle","isNewFont","toCompareStyle","isNewBorder","bStyle","isAllBorder","toCompareBorder","allBorderStyle","baseStyle","toOADate","value_1","blobSaveType","proxyUrl","xlsxMatch","csvMatch","saveWorkbook","saveWorksheets","saveSharedString","saveStyles","saveApp","saveCore","saveContentType","saveTopLevelRelation","saveWorkbookRelation","workbookTemp","sheets","printTitle_1","addToArchive","saveWorksheet","sheetBlob","sheetString","saveSheetView","colString","pixelsToColumnWidth","rowString","pixelsToRowHeight","_d","_e","_f","_g","_h","_j","hLink","saveSheetRelations","pixels","dDigitWidth","trunc","relStr","paneString","sstStart","si","processString","updateCellXfsStyleXfs","styleTemp","saveNumberFormats","saveFonts","saveFills","saveBorders","saveCellStyleXfs","saveCellXfs","saveCellStyles","compareFontResult","fontId","fillId","borderId","applyAlignment","horizontal","vertical","numFmtStyle_1","fontStyle","fillsStyle","bordersStyle","cellStyleString","cellXfsStyle","cellStyleXf","saveAlignment","cellXf","alignString","appString","coreString","toISOString","topRelation","wbRelation","contentTypeString","sheetsOverride","xmlString","archiveItem","startCell","endCell","updatedMergedCellStyles","sCell","eCell","dateToTicks","year","month","day","ticksPerDay","daysToMonth365","daysToMonth366","days","isLeapYear","timeToTicks","hour","minute","totalSeconds","ticks","daysTo1899","doubleDateOffset","oaDateMinAsTicks","millisPerDay","ByteArray","mPosition","dataView","DataView","base64","arr","chr1","chr2","chr3","enc1","enc2","enc3","enc4","keyStr","resultIndex","totalLength","charAt","output","Reorder","_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__","_base_util__WEBPACK_IMPORTED_MODULE_1__","_base_constant__WEBPACK_IMPORTED_MODULE_2__","isDestroyed","on","headerDrop","enableAfterRender","onActionComplete","drag","dragStart","dragStop","createReorderElement","chkDropPosition","srcElem","destElem","getColumnByUid","firstElementChild","getAttribute","bool","lockColumn","parentElement","isEqualNode","getFrozenColumns","children","targetParentContainerIndex","chkDropAllCols","isFound","getHeaderCells","findColParent","cols","cnt","getColumnsModel","columnModel","subCols","concat","e","gObj","dropElement","querySelector","uId","allowReordering","destElemDiv","destElemUid","destColumn","enableColumnVirtualization","sourceUid_1","getColumns","uid","colMatchIndex_1","column_1","destUid_1","some","moveColumns","newIndex","destElement","oldIdx","column_2","isActionPrevent","destIndex","reorderByColumn","notify","instance","handler","getColParent","srcIdx","lockcolPositionCount","headerText","innerText","fromIndex","toIndex","requestType","flatColumns","frozenColumns","fTh","mTh","fHeaders","fRows","getHeaderTable","querySelectorAll","mRows","getHeaderContent","getElementsByClassName","isAvail","parents","reorderSingleColumn","fromFName","toFName","fColumn","getColumnByField","reorderMultipleColumns","fromFNames","getColumnIndexByField","getColumnByIndex","parent_1","moveTargetColumn","reorderSingleColumnByTarget","fieldName","reorderMultipleColumnByTarget","reorderColumns","reorderColumnByIndex","reorderColumnByTargetIndex","module","getModuleName","enable","upArrow","appendChild","createElement","className","attrs","downArrow","trigger","gridElement","off","closest","cloneElement","isLeft","event","getContent","scrollLeft","setDisplay","stopTimer","updateScrollPostion","updateArrowPosition","allowGrouping","draggableType","frzCols","cliRect","getBoundingClientRect","cliRectBaseLeft","cliRectBaseRight","scrollElem","timer","setInterval","setScrollLeft","clearInterval","cliRectBase","classList","cancel","display","pdf_standard_font_metrics_factory_PdfStandardFontMetricsFactory","PdfStandardFontMetricsFactory","getMetrics","getHelveticaMetrics","Courier","getCourierMetrics","TimesRoman","getTimesMetrics","getSymbolMetrics","ZapfDingbats","getZapfDingbatsMetrics","subSuperScriptFactor","Bold","helveticaBoldItalicAscent","helveticaBoldItalicDescent","helveticaBoldItalicName","arialBoldWidth","helveticaBoldAscent","helveticaBoldDescent","helveticaBoldName","helveticaItalicAscent","helveticaItalicDescent","helveticaItalicName","arialWidth","helveticaAscent","helveticaDescent","helveticaName","courierBoldItalicAscent","courierBoldItalicDescent","courierBoldItalicName","fixedWidth","courierBoldAscent","courierBoldDescent","courierBoldName","courierItalicAscent","courierItalicDescent","courierItalicName","courierAscent","courierDescent","courierName","timesBoldItalicAscent","timesBoldItalicDescent","timesBoldItalicName","timesRomanBoldItalicWidths","timesBoldAscent","timesBoldDescent","timesBoldName","timesRomanBoldWidth","timesItalicAscent","timesItalicDescent","timesItalicName","timesRomanItalicWidth","timesAscent","timesDescent","timesName","timesRomanWidth","symbolAscent","symbolDescent","symbolName","symbolWidth","zapfDingbatsAscent","zapfDingbatsDescent","zapfDingbatsName","zapfDingbatsWidth","pdf_standard_font_PdfStandardFont","PdfStandardFont","fontFamilyPrototype","encodings","Regular","pdfFontFamily","checkStyle","initializeInternals","setStyle","convert","getCharWidthInternal","charSizeMultiplier","applyFormatSettings","equalsToFont","equal","stFont","fontFamilyEqual","lineReducer","Underline","Strikeout","styleEqual","internals","setInternals","type1","WinAnsiEncoding","charOffset","PdfResources","_primitives_pdf_dictionary__WEBPACK_IMPORTED_MODULE_0__","_collections_object_object_pair_dictionary__WEBPACK_IMPORTED_MODULE_1__","_primitives_pdf_name__WEBPACK_IMPORTED_MODULE_2__","_primitives_pdf_array__WEBPACK_IMPORTED_MODULE_3__","_primitives_pdf_reference__WEBPACK_IMPORTED_MODULE_4__","_input_output_pdf_cross_table__WEBPACK_IMPORTED_MODULE_5__","_fonts_pdf_font__WEBPACK_IMPORTED_MODULE_6__","_figures_pdf_template__WEBPACK_IMPORTED_MODULE_7__","_brushes_pdf_brush__WEBPACK_IMPORTED_MODULE_8__","_pdf_transparency__WEBPACK_IMPORTED_MODULE_9__","_graphics_images_pdf_bitmap__WEBPACK_IMPORTED_MODULE_10__","_graphics_images_pdf_image__WEBPACK_IMPORTED_MODULE_11__","baseDictionary","properties","getNames","primitive","names","sName","generateName","pdfNames","fonts","dereference","procedureSetName","procSets","procset","removeFont","Guid","getNewGuidString","xobjects","savable","transDic","extGState","parentXObjects","hasSameImageStream","oldReference","values_1","stringValue","guid","temproaryString","randomString","randomNumber","substr","PdfName","stringStartMark","internalValue","isSaving6","position6","normalizeValue","status6","index6","escapeString","newName","delimiters","replacements","PdfSolidBrush","_pdf_brush__WEBPACK_IMPORTED_MODULE_2__","saveChanges","resetChanges","PdfUnitConverter","dpi","updateProportionsHelper","convertUnits","from","to","convertFromPixels","convertToPixels","proportions","pixelPerInch","horizontalResolution","verticalResolution","pdf_image_PdfImage","PdfImage","imageWidth","imageHeight","imagePhysicalDimension","getPointSize","dpiX","dpiY","ucX","ucY","ptWidth","Pixel","Point","ptHeight","TemporaryDictionary","mKeys","mValues","ReferenceError","RangeError","ExcelExport","_base_constant__WEBPACK_IMPORTED_MODULE_0__","_syncfusion_ej2_excel_export__WEBPACK_IMPORTED_MODULE_1__","_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_2__","_actions_data__WEBPACK_IMPORTED_MODULE_3__","_export_helper__WEBPACK_IMPORTED_MODULE_4__","_services_summary_model_generator__WEBPACK_IMPORTED_MODULE_5__","_base_enum__WEBPACK_IMPORTED_MODULE_6__","_syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_7__","_syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_8__","_base_util__WEBPACK_IMPORTED_MODULE_9__","book","workSheet","rowLength","expType","includeHiddenColumn","isCsvExport","isElementIdChanged","foreignKeyData","gridPool","helper","isExporting","footer","exportValueFormatter","locale","grid","exportProperties","isMultipleExport","workbook","isCsv","isBlob","isBlb","workbk","isMultiEx","childGrid","hierarchyExportMode","expandedRows","gridObject","processRecords","dataSource","dataManager","executeQuery","processInnerRecords","allPromise_1","getData","getQuery","getColumnData","blobPromise","catch","groupedColLength","groupSettings","blankRows","multipleExport","processExcelHeader","JSON","parse","stringify","childGridLevel","processGridExport","globalResolve","checkAndExport","organisedRows","organiseRows","processExcelFooter","initialIndex","childRows","excelRows","theme","hierarchyPrintMode","headerRow","getHeaders","groupIndent","processHeaderContent","exportType","processRecordContent","currentViewData","returnType","currentViewRecords","excelRow","processRecordRows","processGroupedRows","aggregates","processAggregates","startIndex","excelExportProperties","dataSource_1","isForeignKey","isForeignColumn","formatCellValue","getCaptionThemeStyle","captionModelGen","groupCaptionSummaryRows","generateRows","fillAggregates","childLevels","lIndex","hIndex","tCell","span","col_1","visible","getGridRowModel","gCell","Data","cellValue","fkData","getFData","foreignKeyValue","excelCellArgs","getColumnStyle","isPrinting","returnVal","createChildGrid","childGridObj","actionFailure","failureHandler","beforeDataBound","childGridCell","appendTo","rowObj","excelExportProps","gRow","intent","isExpand","rec","byGroup","summaryModel","groupSummaryModel","groupSummaryRows","sRows","customIndex","rows_2","DetailFooterIntent","isDataCell","footerTemplate","groupFooterTemplate","groupCaptionTemplate","Sum","Average","Max","Min","Count","TrueCount","FalseCount","getAggreateValue","CaptionSummary","GroupSummary","Summary","gridCellStyle","attributes","textAlign","row_1","dummyOutlineLevel","dummyGrouping","templateFn","columnName","textContent","JSON1","JSON2","attrname","columnIndex","gridRows","gridColumns","spannedCells","currentCellIndex","gridCell","HeaderIndent","DetailHeader","getIndex","spannedCell","getHeaderThemeStyle","headerTextAlign","excelHeaderCellArgs","parseStyles","getRecordThemeStyle","updateThemeStyle","themestyle","caption","noRows","headerRows","updatedCellIndex","footerRows","spannedCells_1","getConvertedWidth","PdfBrush","ObjectStatus","ObjectType","pdf_cross_table_PdfCrossTable","PdfCrossTable","maxGenNumIndex","objectCount","merging","internalTrailer","saveHead","mappedReferences","markTrailerReferences","saveObjects","saveCount","xrefPos","registerObject","prevXRef","xref","saveSections","saveTrailer","saveTheEndess","objectCollection","startxref","eof","trailer","setEncrypt","objectNum","prepareSubsection","saveSubsection","Free","generation","genNumber","isFree","returnString","addOffsetLength","addGenNumberLength","f","total","refString","generateFileVersion","iVersion","bNew","getSubReference","tempObj","objnumber","nextObjNumber","tempIndex","tempkey","objNumber","tempvalue","bForceNew","saveIndirectObject","root","tempArchive","getArchive","doSaveObject","endObj","free","pdf_cross_table_RegisteredObject","RegisteredObject","tempOffset","offsetNumber","tempReference","PdfDictionary","SaveSectionCollectionEventHandler","SaveDescendantFontEventHandler","SaveFontDictionaryEventHandler","SaveAnnotationEventHandler","SaveSectionEventHandler","SaveTemplateEventHandler","_collections_dictionary__WEBPACK_IMPORTED_MODULE_0__","_pdf_name__WEBPACK_IMPORTED_MODULE_1__","_input_output_pdf_operators__WEBPACK_IMPORTED_MODULE_2__","_input_output_pdf_dictionary_properties__WEBPACK_IMPORTED_MODULE_3__","position7","primitiveItems","prefix","suffix","archive","encrypt","freezeChanges","status7","isSaving7","index7","setArchive","getEncrypt","freezer","bChanged","newDict","onBeginSave","onFontDictionaryBeginSave","onDescendantFontBeginSave","onTemplateBeginSave","onBeginAnnotationSave","annotationBeginSave","onSectionBeginSave","saveEvent","bRaiseEvent","saveItems","PdfPageTemplateElement","_enum__WEBPACK_IMPORTED_MODULE_0__","_drawing_pdf_drawing__WEBPACK_IMPORTED_MODULE_1__","_graphics_figures_pdf_template__WEBPACK_IMPORTED_MODULE_2__","_pdf_page__WEBPACK_IMPORTED_MODULE_3__","pdfTemplate","dockStyle","resetAlignment","alignmentStyle","setAlignment","isForeground","currentLocation","templateType","updateDocking","dock","canBeSet","TopLeft","MiddleLeft","BottomLeft","TopCenter","TopRight","MiddleRight","BottomRight","BottomCenter","MiddleCenter","calculateBounds","getAlignmentBounds","getDockBounds","getSimpleAlignmentBounds","getTemplateAlignmentBounds","actualBounds","getSimpleDockBounds","getTemplateDockBounds","InternalEnum","PdfString","SourceType","bHex","position1","clonedObject1","bDecrypted","isParentDecrypted","isPacked","isFormField","isColorSpace","isHexString","status1","isSaving1","bConverted","bForceEncoding","bytesToHex","escapeSymbols","currentData","CrossTable","newString","bAddPrefix","hexFormatPattern","PdfTemplate","_primitives_pdf_stream__WEBPACK_IMPORTED_MODULE_0__","_input_output_pdf_dictionary_properties__WEBPACK_IMPORTED_MODULE_1__","_primitives_pdf_array__WEBPACK_IMPORTED_MODULE_2__","_pdf_graphics__WEBPACK_IMPORTED_MODULE_3__","_pdf_resources__WEBPACK_IMPORTED_MODULE_4__","_primitives_pdf_name__WEBPACK_IMPORTED_MODULE_5__","_drawing_pdf_drawing__WEBPACK_IMPORTED_MODULE_6__","writeTransformation","tempSize","setSize","templateSize","addType","addSubType","form","bBox","PdfPageOrientation","PdfPageRotateAngle","PdfNumberStyle","PdfDockStyle","PdfAlignmentStyle","TemplateType","PdfFontMetrics","StandardWidthTable","_pdf_font__WEBPACK_IMPORTED_MODULE_0__","getLineGap","clearTypeFonts","clearTypeFontCollection","SuperScript","WidthTable","internalWidthTable","widths","swt","PdfCatalog","_primitives_pdf_reference__WEBPACK_IMPORTED_MODULE_3__","tempDictionaryProperties","PdfStringFormat","_graphics_enum__WEBPACK_IMPORTED_MODULE_0__","_graphics_fonts_enum__WEBPACK_IMPORTED_MODULE_1__","scalingFactor","wordWrapType","internalLineLimit","textAlignment","verticalAlignment","direction","isRightToLeft","clip","pdfSubSuperScript","internalParagraphIndent","trailingSpaces","isNoClip","initialLineIndent","PdfFontStyle","PdfFontFamily","PdfFontType","PdfWordWrapType","PdfSubSuperScript","FontEncoding","TtfCmapFormat","TtfCmapEncoding","TtfPlatformID","TtfMicrosoftEncodingID","TtfMacintoshEncodingID","FontDescriptorFlags","TtfCompositeGlyphFlags","ElementLayouter","PdfLayoutFormat","PdfLayoutParams","PdfLayoutResult","layoutElement","getElement","param","layoutInternal","Layouter","baseFormat","break","paginateBounds","boundsSet","usePaginateBounds","layoutType","layoutPaginateBounds","layoutFormat","PdfColor","_input_output_pdf_operators__WEBPACK_IMPORTED_MODULE_1__","_collections_dictionary__WEBPACK_IMPORTED_MODULE_2__","_primitives_pdf_number__WEBPACK_IMPORTED_MODULE_3__","_primitives_pdf_array__WEBPACK_IMPORTED_MODULE_4__","color1","color2","color3","color4","redColor","greenColor","blueColor","grayColor","gray","alpha","filled","maxColourChannelValue","cyanColor","magentaColor","yellowColor","blackColor","assignCMYK","red","green","blue","black","cyan","magenta","yellow","rgbToString","ifStroking","colour","rgbStrings","grayStringsSroke","grayStringsFill","PdfBorders","PdfPaddings","_graphics_pdf_pen__WEBPACK_IMPORTED_MODULE_0__","_graphics_enum__WEBPACK_IMPORTED_MODULE_1__","_graphics_pdf_color__WEBPACK_IMPORTED_MODULE_2__","defaultBorderPenLeft","dashStyle","defaultBorderPenRight","defaultBorderPenTop","defaultBorderPenBottom","leftPen","rightPen","topPen","bottomPen","hasLeftPad","hasRightPad","hasTopPad","hasBottomPad","leftPad","rightPad","bottomPad","topPad","ErrorOption","inline_edit_renderer_InlineEditRender","InlineEditRender","addNew","mTbody","tbody","isEdit","frozenRows","getContentTable","editSettings","newRowPosition","insertBefore","firstChild","getEditElement","mEle","renderMovableform","setAttribute","getVisibleFrozenColumns","getVisibleColumns","constant","ele","cloneNode","movableForm","innerHTML","appendChildren","rowData","renderMovable","updateFreezeEdit","getFreezeRow","idx","parseInt","fCont","mCont","fHdr","mHdr","tdElement","refreshFreezeEdit","fCls","cont","mTd","getMovableRowByIndex","updateFrozenCont","getRowByIndex","removeChild","childElementCount","isFrozen","gLen","isDetail","detailTemplate","colspan","cellspacing","tr","isRowDragable","td_1","editType","commands","commandsTemplate","removeEventListener","dummyData","isAdd","util","getEditTemplate","batch_edit_renderer_BatchEditRender","BatchEditRender","columnObject","dialog_edit_renderer_DialogEditRender","DialogEditRender","serviceLocator","setLocaleObj","l10n","getService","createDialog","dialog","dialogObj","getConstant","primaryKeyValue","isModal","cssClass","showCloseIcon","allowDragging","dialogClose","bind","closeOnEscape","body","animationSettings","effect","buttons","click","btnClick","buttonModel","isPrimary","params","endEdit","closeEdit","div","editModule","checkColumnIsGrouped","dataCell","enableRtl","edit_renderer_EditRender","EditRender","Inline","Batch","Dialog","focus","getEditElements","convertWidget","isFocused","fForm","cols_1","valueAccessor","edit","focusElement","cellArgs","elem","chkBox","nextElementSibling","onClick","setSelectionRange","cellRendererFact","model","row_model_generator","cellRenderer","getCellRenderer","base_enum","CommandColumn","rowID","render","tArgs","editTemplate","e-mappinguid","isInput","tagName","complexFieldName","isPrimaryKey","isIdentity","boolean_edit_cell_BooleanEditCell","BooleanEditCell","activeClasses","classNames","checked","selectChkBox","chkState","editRow","getRowObjectFromUID","isSelected","check_box","label","disabled","change","checkBoxChange","removeAttribute","dropdown_edit_cell_DropDownEditCell","DropDownEditCell","isInline","drop_down_list","query","select","enabled","fields","actionComplete","ddActionComplete","placeholder","popupHeight","floatLabelType","open","dropDownOpen","sortOrder","ej2_instances","src_util","distinct","dlgElement","dlgObj","popup","zIndex","numeric_edit_cell_NumericEditCell","NumericEditCell","instances","getNumberParser","numerictextbox","parseFloat","default_edit_cell_DefaultEditCell","DefaultEditCell","inputargs","input_input","createInput","normal_edit_NormalEdit","NormalEdit","addEventListener","clickHandler","dblClickHandler","allowEditOnDblClick","startEdit","editComplete","isCheckBoxSelection","selectionSettings","isPersistSelection","selectRow","editRowIndex","primaryKeys","getPrimaryKeyFieldNames","primaryKeyValues","previousData","getCurrentViewRecords","primaryKey","clearSelection","selectionModule","preventFocus","applyFormValidation","allowTextWrap","case","updateRow","showSpinner","refresh","edFail","editFormValidate","form1","formObj","validate","form2","mFormObj","editedData","selectedRow","selectedRowIndex","isDlg","dlgWrapper","dlgForm","getCurrentEditedData","mForm","action","addedRowIndex","destroyElements","destroyWidgets","destroyForm","editHandler","edSucc","editSuccess","editFailure","updateCurrentViewData","requestSuccess","stopEditStatus","adaptor","isAdaptor","refreshRow","hideSpinner","row_renderer","changes","getForeignKeyColumns","getMovableRows","getRows","addRecord","defaultValue","deleteRecord","fieldname","dataLen","_loop_1","tmpRecord","contained","getSelectedRecords","getSelectedRows","mElem","editMElem","InlineEdit","batch_edit_BatchEdit","BatchEdit","cellDetails","onBeforeCellFocused","onCellFocused","dataBoundFunction","dataBound","keyDownHandler","editNextValCell","saveCell","setCellIdx","isNaN","editCell","isAddRow","validateFormObj","byClick","keyArgs","clickArgs","preventDefault","isContent","isHeader","byKey","cellIndex","isLastCellPrimaryKey","editCellFromIndex","getDataRows","rowIdx","cellIdx","getRowsObject","getMovableRowsObject","mTr","movObj","rowRenderer","isAdded","isDirty","removeRowObjectFromUID","ftr","renderModule","renderEmptyRow","models_row","isDataRow","models_cell","refreshRowIdx","bulkDelete","bulkAddRow","batchSave","deletedRecords","checkAllBox","totalRecordsCount","getBatchChanges","removeSelectedData","original","changedRecords","map","batchChanges","addedRecords","mergeBatchChanges","mRow","addRowObject","unshift","getIndexFromData","selectedRows","getMovableDataRows","uniqueid","nonMovableRows","allowAdding","defaultData","getDefaultData","modelData","Indent","forgetPrevious","findNextEditableCell","args1","isValOnly","validation","endIndex","validationRules","checkNPCell","allowEditing","dValues","boolean","datetime","mRowData","colIdx","getDataByIndex","getColIndex","getCellIdx","isColored","updateCell","refreshTD","setChanges","keys_1","cIdx","getColumnIndexByUid","rowcell","cell_renderer","colIndex","isForceSave","cloneEditedData","previousValue","visibleColumns","addCancelWhilePaging","dialog_edit_extends","DialogEdit","form_validator_extends","__decorate","decorators","desc","getOwnPropertyDescriptor","Reflect","decorate","regex","EMAIL","RegExp","DATE_ISO","DIGITS","PHONE","CREDITCARD","form_validator_FormValidator","FormValidator","options","validated","errorRules","allowSubmit","required","infoElement","inputElement","selectQuery","localyMessage","defaultMessages","email","url","dateIso","creditcard","digits","minLength","rangeLength","range","tel","equalTo","rules","localeFunc","afterLocalization","inputElements","createHTML5Rules","wireEvents","FormValidator_1","addRules","removeRules","selected","validateRules","rules_1","clearForm","getInputElement","unwireEvents","errorClass","validClass","elements_1","onPropertyChanged","newProp","oldProp","prop","setLocale","elements_2","getErrorElement","hideMessage","defRules","acceptedTypes","allRule","defRules_1","rule","defRule","annotationRule","ruleCon","ruleName","rulesList","ruleFirstName","ruleSecondName","minvalue","maxvalue","customMessage","message","annotationMessage","getErrorMessage","isCheckable","changeHandler","focusOutHandler","keyUpHandler","submitHandler","resetHandler","clearEvents","excludeKeys","which","hiddenType","validateHiddenType","vhPos","hPos","rules_2","errorMessage","errorRule","eventArgs","inputName","isValid","ignore","removeErrorRules","showMessage","createErrorElement","errorElement","optionalValidationStatus","refer","currentRule","formElement","fn","checkValidator","ruleValue","formats","for","errorOption","Message","errorContainer","outerHTML","hasAttribute","containerId","divElement","customPlacement","parentNode","nextSibling","checkRequired","inputType","option","test","getTime","uNum","Label","datepicker_edit_cell_DatePickerEditCell","DatePickerEditCell","datepicker","dateanddatetimerender","datetimepicker","TemplateEditCell","edit_Edit","Global","Edit","editCellType","dropdownedit","numericedit","datepickeredit","datetimepickeredit","booleanedit","defaultedit","templateedit","updateEditObj","createAlertDlg","createConfirmDlg","updateColTypeObj","templteCell","allowDeleting","initialEnd","tapEvent","getUserAgent","clearTimeout","userAgent","showDialog","alertDObj","refreshToolbar","showConfirmDialog","showDeleteConfirmDialog","deleteRow","endEditing","batchCancel","getCurrentEditCellData","dataBind","show","getValueFromType","destroyToolTip","dlgWidget","dlgOk","dlgCancel","alertClick","hide","btnOptions","executeAction","keyPressHandler","preventBatch","actionBeginFunction","onActionBegin","actionCompleteFunction","actions","blur","inputs","restrictedRequestTypes","destroyTemplate","hasGridChild","preventObj","mRules","createFormObj","validationComplete","valErrorPlacement","getElemTable","createTooltip","isFHdr","gcontent","isScroll","scrollHeight","clientHeight","scrollWidth","clientWidth","validationForBottomRowPos","arrow","client","inputClient","scrollTop","defaultView","getComputedStyle","getPropertyValue","offsetWidth","allowPaging","PdfBorderOverlapStyle","PdfHorizontalOverflowType","PdfGridStyleBase","gridBackgroundBrush","gridTextBrush","gridTextPen","gridFont","gridBackgroundImage","style_PdfGridStyle","PdfGridStyle","gridBorderOverlapStyle","Overlap","bAllowHorizontalOverflow","gridHorizontalOverflowType","LastPage","gridCellSpacing","gridCellPadding","pdf_borders","style_PdfGridCellStyle","PdfGridCellStyle","gridCellBorders","default","style_PdfGridRowStyle","PdfGridRowStyle","gridRowBackgroundBrush","setBackgroundBrush","getCell","backgroundBrush","gridRowTextBrush","setTextBrush","textBrush","gridRowTextPen","setTextPen","textPen","gridRowFont","gridRowBorder","setBorder","setParent","gridRowBackgroundImage","PdfLayoutType","PdfLayoutBreakType","layout_element_PdfLayoutElement","PdfLayoutElement","beginPageLayout","endPageLayout","onBeginPageLayout","onEndPageLayout","element_layouter","bEmbedFonts","text_layouter_extends","text_layouter_TextLayouter","TextLayouter","currentBounds","pageResult","TextPageLayoutResult","remainder","layoutOnPage","getLayoutResult","PdfTextLayoutResult","lastLineBounds","checkCorrectBounds","stringResult","textFinished","doesntFit","FitElement","pdf_text_web_link_PdfTextWebLink","getTextPageBounds","shiftedRect","verticalShift","remainderText","lastLineTextBounds","text_element_extends","text_element_PdfTextElement","PdfTextElement","elementValue","hasPointOverload","isPdfTextElement","drawText","stringLayoutResult","previousPosition","calculateResultBounds","lineSize","maximumWidth","startPosition","annotation_PdfAnnotation","PdfAnnotation","textFont","pdfDictionary","internalColor","darkness","nativeRectangle","initialHeight","tempLoacation","ca","link_annotation_extends","link_annotation_PdfLinkAnnotation","PdfLinkAnnotation","link","action_link_annotation_extends","PdfActionLinkAnnotation","pdfAction","getSetAction","action_PdfAction","PdfAction","uri_action_extends","uri_action_PdfUriAction","PdfUriAction","uri","uniformResourceIdentifier","uri_annotation_extends","uri_annotation_PdfUriAnnotation","PdfUriAnnotation","pdfUriAction","uriAction","pdf_text_web_link_extends","PdfTextWebLink","uniformResourceLocator","uriAnnotation","recalculateBounds","defaultBorder","previousFontStyle","drawMultipleLineWithPoint","drawMultipleLineWithBounds","grid_layouter_extends","grid_layouter_PdfGridLayouter","PdfGridLayouter","gridInitialWidth","gridSize","parentCellIndex","tempWidth","childheight","isChildGrid","hasRowSpanSpan","isRearranged","pageBounds","listOfNavigatePages","flag","columnRanges","breakRow","getFormat","gridLayoutFormat","currentPageBounds","currentGraphics","FitColumnsToPage","Grid","getRow","startLocation","hType","horizontalOverflowType","allowHorizontalOverflow","measureColumnsWidth","determineColumnDrawRanges","isRowHeightSet","startColumn","endColumn","cellWidths","availableWidth","getColumn","subWidths","endArgs","layoutedPages","startPage","cellBounds","cellStartIndex","cellEndIndex","returnObject","raiseBeforePageLayout","currentRowIndex","getHeader","drawRow","repeatRow","originalHeight","repeatRowIndex","rowResult","splitChildRowIndex","isrowFinish","ParentCell","isGridSplit","rowCollection","isFinish","tempResult","raisePageLayouted","allowRowBreakAcrossPages","getNextPageformat","cellPadding","rowBreakHeight","isRowBreaksNextPage","rowBreakHeightValue","i_2","noOfPageCount","repeatHeader","j_1","headerRepeat","j_2","tempResult1","i_3","i_4","pdf_grid_PdfGrid","OnePage","i_5","NestedGridLayoutResult","recalHeight","ReCalculateHeight","secion","pageGraphics","location_2","cellWidth","totalwidth","i_6","columnWidth","drawCellBorders","columnSpan","isPdfGrid","maximumCellBoundsWidth","largeNavigatePage","rowLayoutBoundsWidth","NextPage","reArrangePages","pageindex","CheckIfDefaultFormat","defaultFormat","measureTrailingSpaces","noClip","RaiseBeforeCellDraw","raiseBeginCellDraw","PdfGridBeginCellDrawEventArgs","onBeginCellDraw","raiseAfterCellDraw","cellstyle","raiseEndCellDraw","PdfGridEndCellDrawEventArgs","onEndCellDraw","count_1","repeatFlag","isChanged","PdfGridLayoutResult","newHeight","measureHeight","currentRow","raiseBeginPageLayout","PdfGridBeginPageLayoutEventArgs","startRowIndex","PdfGridEndPageLayoutEventArgs","raiseEndPageLayout","result_1","grid_layouter_RowLayoutResult","rowHeightWithSpan","rowSpanExists","maxSpan","currRowIndex","calculatedHeight","LayoutFormat","FitPage","drawRowWithBreak","repeatRowNumber","skipcell","location_4","cancelSpans","isCellMergeContinue","tempValue","rowOverflowIndex","cellSpacing","rowMergeComplete","calculateHeight","gridHeight","cellHeight","cellstyle1","FinishedDrawingCell","rowBreakPageHeightCellIndex","PdfGridLayoutFormat","GridCellEventArgs","gridRowIndex","gridCellIndex","gridBounds","bSkip","PdfCancelEventArgs","isCancel","BeginPageLayoutEventArgs","EndPageLayoutEventArgs","nextPdfPage","startRow","RowLayoutResult","layoutedBounds","bIsFinished","pdf_grid_cell_PdfGridCell","PdfGridCell","tempval","fontSpilt","finsh","rowSpanRemainingHeight","hasRowSpan","hasColSpan","gridRowSpan","gridRow","internalIsCellMergeContinue","internalIsRowMergeContinue","internalIsCellMergeStart","internalIsRowMergeStart","remaining","objectValue","isSingleGrid","rowCount","colCount","columnSpanExists","isComplete","measureWidth","slr","getTextFont","pdf_bitmap","webLink","drawCellBackground","getBackgroundBrush","backgroundImage","getBackgroundImage","adjustContentLayoutArea","returnBounds","cancelSubsequentSpans","adjustOuterLayoutArea","getTextPen","getTextBrush","strFormat","getStringFormat","innerLayoutArea","rowFontSplit","layoutRect","Paginate","setSpan","checkSpan","childGridResult","imageBounds","borderOverlapStyle","Inside","p1","p2","Square","currentColIndex","totalWidth","compWidth","totalHeight","calculateWidth","currentValue","internalWidth","PdfGridCellCollection","tempcell","pdf_grid_column_PdfGridColumn","PdfGridColumn","isCustomWidth","pdf_grid_column_PdfGridColumnCollection","PdfGridColumnCollection","internalColumns","initialWidth","isPageWidth","getDefaultWidths","subFactor","pdf_grid_row_PdfGridRow","PdfGridRow","gridRowOverflowIndex","rowHeight","rowWidth","isRowSpanRowHeightSet","isPageBreakRowSpanApplied","isRowMergeComplete","pdfGrid","bRowSpanExists","gridCells","rowStyle","gridRowBreakHeight","gridResult","bColumnSpanExists","cellIn","rowin","rowWid","pdf_grid_row_PdfGridRowCollection","PdfGridRowCollection","addRow","temprow","pdf_grid_row_PdfGridHeaderCollection","PdfGridHeaderCollection","pdf_grid_extends","PdfGrid","hasColumnSpan","beginCellDraw","endCellDraw","bRepeatHeader","gridHeaders","gridStyle","ispageWidth","ischildGrid","measure","parentCell","gridLocation","isRowMergeContinue","isCellMergeStart","isRowMergeStart","maximumRowSpan","cellcolSpan","cellrowSpan","cellmaxSpan","padding","columnCount","childGridColumnWidth","colCount_1","colCount_2","RowCount","ColCount","colWidth","childGridColWidth","PdfTransparency","_primitives_pdf_number__WEBPACK_IMPORTED_MODULE_1__","CA","BM","PdfArray","_pdf_number__WEBPACK_IMPORTED_MODULE_0__","startMark","endMark","position9","clonedObject9","internalElements","tempArray","tempNumberArray","pdfNumber","status9","isSaving9","index9","markedChange","tempElement","getItems","newArray","tempElements","markChanged","pdf_numbers_convertor_PdfNumbersConvertor","PdfNumbersConvertor","intArabic","numberStyle","Numeric","LowerLatin","arabicToLetter","LowerRoman","arabicToRoman","UpperLatin","UpperRoman","retval","generateNumber","arabic","stack","convertToLetter","num","appendChar","magnitude","letter","numberstring","letterLimit","acsiiStartIndex","PdfTemplateValuePair","multiple_value_field_PdfMultipleValueField","PdfMultipleValueField","pdf_template","drawLocation","automatic_field","pdf_page_number_field_extends","pdf_page_number_field_PdfPageNumberField","PdfPageNumberField","internalNumberStyle","internalGetValue","composite_field_extends","PdfCompositeField","internalText","automaticField","single_value_field_extends","single_value_field_PdfSingleValueField","PdfSingleValueField","painterGraphics","textValue","page_count_field_extends","page_count_field_PdfPageCountField","PdfPageCountField","pdf_export_PdfExport","PdfExport","hideColumnInclude","customDataSource","isGrouping","export_helper","exportWithData","pdfDoc","pdfExportProperties","processExport","actions_data","can","processSectionExportProperties","pdfPageSettings","Landscape","getPageSize","gridTheme","processExportProperties","pdf_grid","headerThemeStyle","headerFont","headerBrush","processGridHeaders","setColumnProperties","captionThemeStyle","getSummaryCaptionThemeStyle","processGroupedRecords","processRecord","summary_model_generator","records","getFontFamily","getFontStyle","penBrushColor","hexToRgb","borderCaption","getBorderStyle","groupIndex","dataSourceItems","captionSummaryModel","gridColumn","gridHeader","cellLength","pdfCell","Header","StackedHeader","getHorizontalAlignment","getVerticalAlignment","fromTop","drawPageTemplate","pdf_page_template_element","fromBottom","processContentValidation","drawPageNumber","src","points","y1","getBrushFromContent","textPenColor","penColor","setContentFormat","documentHeader","textBrushColor","brushColor","compositeField","pageNumber","getPageNumberStyle","pageNumberType","getPenFromContent","penSize","getDashStyle","isCaption","captionRow","sRows_1","leastCaptionSummaryIndex","getSummaryWithoutTemplate","getTemplateFunction","templateFunction","setRecordThemeStyle","borderRecord","spanCell","gridRow_1","backgroundColor","borderWidth","borderColor","verticalAlign","hex","bigint","PdfFont","_pdf_string_format__WEBPACK_IMPORTED_MODULE_2__","_string_layouter__WEBPACK_IMPORTED_MODULE_3__","_string_tokenizer__WEBPACK_IMPORTED_MODULE_4__","fontMetrics","pdfFontInternals","charactersFitted","linesFilled","layoutArea","realWidth","syncObject","DictionaryProperties","xyz","fit","dest","flatedecode","PdfNumber","position5","status5","isSaving5","index5","toFixed","z","PdfReference","PdfReferenceHolder","_input_output_pdf_dictionary_properties__WEBPACK_IMPORTED_MODULE_0__","_primitives_pdf_stream__WEBPACK_IMPORTED_MODULE_1__","_primitives_pdf_name__WEBPACK_IMPORTED_MODULE_4__","_primitives_pdf_dictionary__WEBPACK_IMPORTED_MODULE_5__","_primitives_pdf_string__WEBPACK_IMPORTED_MODULE_6__","index3","position3","status3","isSaving3","returnObject3","obj2","index4","position4","objectIndex","primitiveObject","status4","isSaving4","StringTokenizer","numSymbols","curIndex","text2","symbol","tab","whiteSpacePattern","ExportHelper","ExportValueFormatter","_models_row__WEBPACK_IMPORTED_MODULE_0__","_base_enum__WEBPACK_IMPORTED_MODULE_1__","_models_cell__WEBPACK_IMPORTED_MODULE_3__","_services_value_formatter__WEBPACK_IMPORTED_MODULE_4__","_syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_5__","_base_util__WEBPACK_IMPORTED_MODULE_6__","_base_grid__WEBPACK_IMPORTED_MODULE_7__","isRemote","generateQuery","requiresCount","take","generateCells","processColumns","generateCell","columns_1","gridObj","columnPromise","fColumns","isHideColumnInclude","colDepth","processHeaderCells","generateActualColumns","actualColumns","columns_2","getCellCount","appendGridCells","isIgnoreFirstCell","columnIndexes","getColumnIndexesInView","detailRowModule","getGridModel","parentID","parentPrimaryKeys","parentKeyField","queryString","parentKeyFieldValue","parentRowData","exportId","valueFormatter","internationalization","returnFormattedValue","customFormat","Toolbar","_syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_1__","_base_util__WEBPACK_IMPORTED_MODULE_3__","_services_focus_strategy__WEBPACK_IMPORTED_MODULE_4__","predefinedItems","gridID","preItems","preItems_1","itemStr","localeName","prefixIcon","tooltipText","Search","ColumnChooser","suffixIcon","createToolbar","getToolbar","toolbar","unWireEvent","clicked","toolbarClickHandler","enablePersistence","viewStr","registerTemp","toolbarTemplate","searchElement","wireEvent","refreshToolbarItems","searchSettings","updateSearchBox","enableItems","disableItems","hasData","toolbarItems","toolbarItems_1","getItemObject","itemObject","isEnable","items_1","gID","print","originalEvent","tarElement","targetEle","offsetTop","createColumnchooser","modelChanged","keyCode","searchBoxObj","PdfStream","SaveCmapEventHandler","SaveFontProgramEventHandler","_pdf_dictionary__WEBPACK_IMPORTED_MODULE_0__","_pdf_number__WEBPACK_IMPORTED_MODULE_1__","_pdf_name__WEBPACK_IMPORTED_MODULE_3__","_pdf_array__WEBPACK_IMPORTED_MODULE_4__","_pdf_reference__WEBPACK_IMPORTED_MODULE_5__","_syncfusion_ej2_compression__WEBPACK_IMPORTED_MODULE_6__","dicPrefix","dicSuffix","clonedObject2","bCompress","isImageStream","isFontStream","dataStream2","bCompress2","internalStream","onCmapBeginSave","onFontProgramBeginSave","compressContent","dataArray","getCompressedString","addFilter","filterName","bytesToString","PointF","SizeF","RectangleF","Rectangle","pointf","sizef","topLeft","Save","extension","lastIndexOf","mimeType","getMimeType","downloadLink","hasDownloadAttribute","isPopupBlocked","onloadend","readAsDataURL","pdf_page_size_PdfPageSize","PdfPageSize","note","legal","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a10","b0","b1","b2","b3","b4","b5","archE","archD","archC","archB","archA","flsa","halfLetter","letter11x17","ledger","PdfMargins","pdfMargin","setMargins","leftMargin","topMargin","rightMargin","bottomMargin","margin1","margin2","margin3","margin4","pdf_page_settings_PdfPageSettings","PdfPageSettings","pageMargins","rotateAngle","RotateAngle0","isRotation","updateSize","Encoding","validateNullOrUndefined","emitBOM","encodingType","initBOM","getByteCount","utf8Len","getByteCountInternal","codePoint","isHighSurrogate","codeUnit","toCodepoint","highCodeUnit","lowCodeUnit","charIndex","charCount","byteCount","isUtf8","high","getBytesOfUtf8Encoding","getBytesOfUnicodeEncoding","getBytesOfAnsiEncoding","out","byteCal","getStringOfUtf8Encoding","byteUnicode","getStringofUnicodeEncoding","bufview","charcode","uint16","byteUni","byte16","Operators","forTest","endStream","fillEvenOdd","fillStrokeEvenOdd","appendbeziercurve","modifyTM","setFlatnessTolerance","setHorizontalScaling","setTextRise","setTextWithFormatting","setrbgcolorforstroking","setrbgcolorfornonstroking","setcmykcolorforstroking","setcmykcolorfornonstroking","setgraycolorforstroking","setgraycolorfornonstroking","clipPathEvenOdd"],"mappings":"8LASIA,EAAY,WAChB,SAAAC,EAAAC,EAAAC,GA8BA,GAxBAC,KAAAC,cAA6BC,EAAA,KAAaC,IAM1CH,KAAAI,WAAA,EAMAJ,KAAAK,UAAA,EAMAL,KAAAM,cAAA,EAKAN,KAAAO,qBAAA,IAAwCC,EAAA,KACxC,qBAAAT,EACAC,KAAAS,QAAAX,EACAE,KAAAU,mBAAA,EACAV,KAAAW,QAAA,IAA+BC,EAAA,UAE/B,GAAAb,aAAoDa,EAAA,MAAS,OAAAb,EAAA,CAC7D,SAAAD,EACA,UAAAe,MAAA,8BAEA,SAAAd,EACA,UAAAc,MAAA,gCAEAb,KAAAS,QAAAX,EACAE,KAAAW,QAAAZ,OAGAC,KAAAc,YAAAhB,GACAE,KAAAU,kBAAAX,EAmLA,OAhLAgB,OAAAC,eAAAnB,EAAAoB,UAAA,cAMAC,IAAA,WACA,OAAAlB,KAAAC,eAEAkB,IAAA,SAAAC,GACApB,KAAAC,cAAAmB,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAnB,EAAAoB,UAAA,QAKAC,IAAA,WACA,OAAAlB,KAAAS,SAEAY,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAnB,EAAAoB,UAAA,WAKAC,IAAA,WACA,OAAAlB,KAAAuB,SAEAJ,IAAA,SAAAC,GACApB,KAAAuB,QAAAH,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAnB,EAAAoB,UAAA,QAKAC,IAAA,WACA,OAAAlB,KAAAwB,WAEAL,IAAA,SAAAC,GACApB,KAAAwB,UAAAJ,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAnB,EAAAoB,UAAA,WAKAC,IAAA,WACA,OAAAlB,KAAAI,WAEAe,IAAA,SAAAC,GACApB,KAAAI,UAAAgB,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAnB,EAAAoB,UAAA,YAKAC,IAAA,WAIA,OAHA,MAAAlB,KAAAyB,aACAzB,KAAA0B,mBAAA1B,KAAAF,MAEAE,KAAAyB,aAEAJ,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAnB,EAAAoB,UAAA,UAKAC,IAAA,WACA,aAAAlB,KAAA2B,OACA3B,KAAA2B,MAAA,IAAiCC,EAAsB5B,KAAAF,MACvDE,KAAA2B,MAAAtB,UAAA,EACAL,KAAA2B,OAGA3B,KAAA2B,OAGAN,YAAA,EACAC,cAAA,IAOAzB,EAAAoB,UAAAY,IAAA,WACA,IAAAF,EAAA,IAAA9B,EAAAG,KAAAS,SAEA,OADAkB,EAAAG,KAAA,GACAH,GAMA9B,EAAAoB,UAAAc,KAAA,SAAAC,GACA,WAAAA,EACA,EAEAA,EAAA,EACA,GAGA,GAOAnC,EAAAoB,UAAAS,mBAAA,SAAA5B,GACA,IAAAmC,EAAAnC,EACAoC,EAAA,IAAqBC,EAAA,KAAuBnC,KAAAF,MAI5C,GAFAE,KAAAyB,YAAA,IAA+BU,EAAA,KAAWrC,EAAAsC,KAAAF,EAAAlC,KAAAW,SAC1CX,KAAAyB,YAAAY,wBAAA,EACA,MAAAJ,EAAA,CACA,IAAAK,EAAAL,EAAAM,QAAAC,OACA,MAAAF,IACAtC,KAAAyB,YAAAgB,WAAAH,EAAAI,SAAAD,WACAzC,KAAAyC,WAAAH,EAAAI,SAAAD,YAIA,IAAAE,EAAA3C,KAAA+B,KAAAjC,EAAA8C,OAAAC,KAAA7C,KAAA+B,KAAAjC,EAAA8C,OAAAE,IAEAhD,EAAA8C,OAAAE,GAAA,GAAAhD,EAAA8C,OAAAC,GAAA,QACA7C,KAAAyB,YAAAsB,wBAKA,IAAAC,EAAAf,EAAAM,QAAAU,gBAAAhB,GAAA,GACAiB,EAAAjB,EAAAM,QAAAY,aAAAD,QACAlD,KAAAU,kBACAZ,EAAA8C,OAAAE,GAAA,GAAAhD,EAAA8C,OAAAC,GAAA,GACA7C,KAAAyB,YAAA2B,qBAAAJ,GAIAhD,KAAAqD,SAAAD,qBAAAJ,EAAAF,EAAAE,EAAAH,EAAAK,EAAAI,KAAAJ,EAAAK,IAAAL,EAAAM,MAAAN,EAAAO,QAEAzD,KAAAyB,YAAAiC,SAAA1D,OAGAe,OAAAC,eAAAnB,EAAAoB,UAAA,WAMAC,IAAA,WACA,OAAAlB,KAAAW,SAEAU,YAAA,EACAC,cAAA,IAEAzB,EAnOgB,GCLhB8D,EAAA,WAMA,SAAAA,KAgCA,OA7BA5C,OAAAC,eAAA2C,EAAA1C,UAAA,SAMAC,IAAA,WAIA,MAHA,qBAAAlB,KAAA4D,aACA5D,KAAA4D,WAAA,IAEA5D,KAAA4D,WAAAC,QAEAxC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA2C,EAAA1C,UAAA,QAKAC,IAAA,WAIA,MAHA,qBAAAlB,KAAA4D,aACA5D,KAAA4D,WAAA,IAEA5D,KAAA4D,YAEAvC,YAAA,EACAC,cAAA,IAEAqC,EAtCA,eCJAG,EAA6B,WAC7B,IAAAC,EAAA,SAAAC,EAAAC,GAIA,OAHAF,EAAAhD,OAAAmD,gBACA,CAAcC,UAAA,cAAgBC,OAAA,SAAAJ,EAAAC,GAAsCD,EAAAG,UAAAF,IACpE,SAAAD,EAAAC,GAA6B,QAAAI,KAAAJ,IAAAK,eAAAD,KAAAL,EAAAK,GAAAJ,EAAAI,KAC7BN,EAAAC,EAAAC,IAEA,gBAAAD,EAAAC,GAEA,SAAAM,IAAuBvE,KAAAc,YAAAkD,EADvBD,EAAAC,EAAAC,GAEAD,EAAA/C,UAAA,OAAAgD,EAAAlD,OAAAyD,OAAAP,IAAAM,EAAAtD,UAAAgD,EAAAhD,UAAA,IAAAsD,IAV6B,GAyBzB3C,EAAsB,SAAA6C,GAE1B,SAAAC,EAAA5E,GACA,IAAA6E,EAAAF,EAAAG,KAAA5E,YAkBA,GAZA2E,EAAAE,iBAAA,EAMAF,EAAAtE,UAAA,EAKAsE,EAAAG,gBAAA,IAAoCC,EAAA,KACpCjF,aAA4BkF,EAAW,CAIvCL,EAAA7E,OACA,IAAAmF,EAAAnF,EAEA6E,EAAAO,YAAAD,GAGA,OAAAN,EAuPA,OArRAb,EAAAY,EAAAD,GAgCAC,EAAAzD,UAAAkE,MAAA,SAAAC,EAAAhE,GACA,qBAAAgE,GAAA,qBAAAhE,EAAA,CACA,IAAAiE,EAAArF,KAAAsF,KAAAF,GACA,OAAAC,EAGA,SAAAjE,EACA,UAAAP,MAAA,gCAEA,GAAAO,EAAAtB,OAAAE,KAAAF,KACA,UAAAe,MAAA,yDAWA6D,EAAAzD,UAAAY,IAAA,SAAA0D,EAAAC,GACA,wBAAAD,EAAA,CACA,IAAA5D,EAAA,IAA4B/B,EAAYI,KAAAF,MAGxC,OAFA6B,EAAAG,KAAA,GACA9B,KAAA6B,IAAAF,GACAA,EAEA,GAAA4D,aAA0C3F,EAAY,CAKtD,IAAAwF,EAAApF,KAAAsF,KAAAG,KAAAF,GAGA,OADAvF,KAAA0F,SAAAN,EAAAG,GACAH,EAGA,UAOAV,EAAAzD,UAAAyE,SAAA,SAAAN,EAAAzD,GACA,IAAAgE,EAAA,IAA4BC,EAAA,KAAkBjE,GAC9C3B,KAAAF,KAAA+F,SAAAhE,IAAA8D,IAeAjB,EAAAzD,UAAA6E,OAAA,SAAAV,EAAAzD,GASA,IAFA,IAAA2D,EAAA,GACAzB,EAAA7D,KAAAsF,KAAAzB,OACAkC,EAAAX,EAA2BW,EAAAlC,EAAYkC,IACvCT,EAAAG,KAAAzF,KAAAsF,KAAAU,OAEAhG,KAAAsF,KAAAG,KAAA9D,GACA,IAAAoE,EAAA,EAAuBA,EAAAT,EAAAzB,OAAiBkC,IACxC/F,KAAAsF,KAAAG,KAAAH,EAAAS,IAGA/F,KAAAiG,YAAAb,EAAAzD,IAMA+C,EAAAzD,UAAAgF,YAAA,SAAAb,EAAAzD,GACA,SAAAA,EACA,UAAAd,MAAA,+BAEA,IAAA8E,EAAA,IAA4BC,EAAA,KAAkBjE,GAC9C3B,KAAAF,KAAA+F,SAAAC,OAAAV,EAAAO,IAOAjB,EAAAzD,UAAAiE,YAAA,SAAAgB,GAIA,IAAAL,EAAA7F,KAAAF,KAAA+F,SACA7F,KAAAF,KAAAqG,eAMAD,EAAAE,WAOA,IAAAC,EAAA,IAA6BzF,EAAA,KAC7B0F,EAAA,IAAgC1F,EAAA,KAChC2F,EAAA,IAEAC,EAAA,IAyGAC,EAAA,GACAA,EAAAhB,KAAAc,GACAF,EAAAK,KAAAD,EACAZ,EAAAC,OAAA,MAA+BF,EAAA,KAAkBS,IACjDI,EAAA,GACAA,EAAAhB,KAAAe,GACAF,EAAAI,KAAAD,EACAZ,EAAAC,OAAAD,EAAAc,MAAA,IAA4Cf,EAAA,KAAkBU,KAM9D5B,EAAAzD,UAAA2F,QAAA,SAAAjF,GACA,SAAAA,EACA,UAAAd,MAAA,gCAEA,IAAAuE,EAAApF,KAAAsF,KAAAsB,QAAAjF,GACA,OAAAyD,GAEAV,EAtR0B,CAuRxBf,eCvSEqB,EAAW,WAMf,SAAA6B,EAAAC,GAMA9G,KAAA+G,eAAA,EAMA/G,KAAAgH,UAAA,EAMAhH,KAAAO,qBAAA,IAAwCC,EAAA,KACxCR,KAAAiH,eAAAH,EAwIA,OAtIA/F,OAAAC,eAAA6F,EAAA5F,UAAA,WAMAC,IAAA,WAIA,OAAAlB,KAAAkH,YAEA/F,IAAA,SAAAC,GACApB,KAAAkH,WAAA9F,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA6F,EAAA5F,UAAA,cAKAC,IAAA,WACA,OAAAlB,KAAAiH,gBAEA5F,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA6F,EAAA5F,UAAA,WAKAC,IAAA,WACA,OAAAlB,KAAAiH,gBAEA5F,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA6F,EAAA5F,UAAA,gBAKAC,IAAA,WACA,IAAAS,EAAA3B,KAAAmH,OACA/B,EAAApF,KAAAoH,kBACAC,EAAA1F,EAAAwD,MAAAC,GACA,OAAAiC,GAEAhG,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA6F,EAAA5F,UAAA,qBAKAC,IAAA,WACA,OAAAlB,KAAAsH,gBAAAX,QAAA,IAAA3G,KAAA+G,cAAA,CACA,IAAApF,EAAA3B,KAAAsH,gBAAAzF,MACA7B,KAAA+G,cAAA/G,KAAAsH,gBAAAV,QAAAjF,GAEA,OAAA3B,KAAA+G,eAMA5F,IAAA,SAAAC,GACA,GAAAA,EAAA,GAAAA,EAAApB,KAAAmH,OAAAR,MAAA,EACA,UAAA9F,MAAA,6FAGAb,KAAA+G,cAAA3F,EACApB,KAAAgH,UAAA,GAGA3F,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA6F,EAAA5F,UAAA,UAKAC,IAAA,WAIA,OAHA,MAAAlB,KAAAsH,iBAAA,qBAAAtH,KAAAsH,kBACAtH,KAAAsH,gBAAA,IAA2C1F,EAAsB5B,OAEjEA,KAAAsH,iBAEAjG,YAAA,EACAC,cAAA,IAMAuF,EAAA5F,UAAAkF,aAAA,WAKA,OAJA,MAAAnG,KAAAuH,YACAvH,KAAAuH,UAAA,IAAiCC,EAAA,KACjCxH,KAAA8G,WAAA3B,MAAAsC,SAAAzH,KAAAO,qBAAAgH,UAAAvH,KAAAuH,YAEAvH,KAAAuH,WAEAxG,OAAAC,eAAA6F,EAAA5F,UAAA,YAKAC,IAAA,WACA,IAAAmE,EAAArF,KAAAiH,eAAA9B,MAAAuC,SAAA1H,KAAAO,qBAAAsF,UACAA,EAAAR,EAMA,OAJA,MAAAQ,IACAA,EAAA,IAA+B8B,EAAA,KAC/B3H,KAAAiH,eAAA9B,MAAAsC,SAAAzH,KAAAO,qBAAAsF,aAEAA,GAEAxE,YAAA,EACAC,cAAA,IAMAuF,EAAA5F,UAAA2G,aAAA,SAAAC,GACA7H,KAAAuH,UAAAM,EACA7H,KAAA8G,WAAA3B,MAAAsC,SAAAzH,KAAAO,qBAAAgH,UAAAvH,KAAAuH,WACAvH,KAAAgH,UAAA,GAEAH,EAjKe,uCCCXiB,EAAuB,WAC3B,SAAAC,EAAAjI,GAMAE,KAAAgI,6BAAA,mDAKAhI,KAAAiI,2BAAA,6CAKAjI,KAAAO,qBAAA,IAAwCC,EAAA,KAKxCR,KAAAkI,oBAAA,IAAuCP,EAAA,KAKvC3H,KAAAmI,MAAA,GACA,qBAAArI,IACAE,KAAAF,QA6GA,OA1GAiB,OAAAC,eAAA+G,EAAA9G,UAAA,eAKAC,IAAA,WACA,OAAAlB,KAAAkI,qBAEA/G,IAAA,SAAAC,GACApB,KAAAkI,oBAAA9G,GAEAC,YAAA,EACAC,cAAA,IAOAyG,EAAA9G,UAAAY,IAAA,SAAAuG,GAEApI,KAAAqI,MAAAD,IAOAL,EAAA9G,UAAAoH,MAAA,SAAAD,GACA,wBAAAA,EAAAE,YAoDA,OAFAF,EAAAG,QAAAvI,KAAAF,MACAE,KAAAkI,oBAAArG,IAAA,IAA6C+D,EAAA,KAAkBwC,IAC/DpI,KAAAmI,MAAA1C,KAAA2C,GAnDA,IAAAI,EAAA,IAA6BC,EAAA,KAC7BC,EAAAF,SAAAJ,EAAAO,KAAAP,EAAAQ,KAAAR,EAAAS,aAAA,IAA4GC,EAAA,KAAKV,EAAAW,OAAA,gBAA2CD,EAAA,KAAK,MACjKE,EAAAZ,EAAAW,OAAAlG,EACA,OAAA6F,EAAAO,MAAApF,OAAA,CACA,IAAAzB,EAAAgG,EAAAQ,KAAAM,cAAAR,EAAAO,MAAA,GAAAN,MACAP,EAAAW,OAAA,IAAwCD,EAAA,KAAU,IAAKA,EAAA,KAAMV,EAAAW,OAAAjG,EAAAkG,GAAA5G,GAC7DgG,EAAAO,KAAAD,EAAAO,MAAA,GAAAN,KAEA3I,KAAAF,KAAAuD,SAAA8F,WAAAf,EAAAO,KAAAP,EAAAQ,KAAA,KAAAR,EAAAgB,MAAAhB,EAAAW,OAAAjG,EAAAsF,EAAAW,OAAAlG,EAAAuF,EAAAW,OAAAM,MAAAjB,EAAAW,OAAAO,OAAA,MAEAlB,EAAAG,QAAAvI,KAAAF,MACAE,KAAAuJ,SAAAnB,GACApI,KAAAkI,oBAAArG,IAAA,IAAiD+D,EAAA,KAAkBwC,IACnEpI,KAAAmI,MAAA1C,KAAA2C,QAGA,QAAArC,EAAA,EAA+BA,EAAA2C,EAAAO,MAAApF,OAA+BkC,IAAA,CAC9D3D,EAAAgG,EAAAQ,KAAAM,cAAAR,EAAAO,MAAAlD,GAAA4C,MACA,OAAA5C,EACAqC,EAAAW,OAAA,IAAgDD,EAAA,KAAUV,EAAAW,OAAAjG,EAAAkG,EAAA5G,EAAAiH,MAAAjH,EAAAkH,QAC1DlB,EAAAO,KAAAD,EAAAO,MAAAlD,GAAA4C,KAEA3I,KAAAF,KAAAuD,SAAA8F,WAAAf,EAAAO,KAAAP,EAAAQ,KAAA,KAAAR,EAAAgB,MAAAhB,EAAAW,OAAAjG,EAAAkG,EAAA5G,EAAAiH,MAAAjH,EAAAkH,OAAA,MAEAlB,EAAAG,QAAAvI,KAAAF,MACAE,KAAAuJ,SAAAnB,GACApI,KAAAkI,oBAAArG,IAAA,IAAyD+D,EAAA,KAAkBwC,IAC3EpI,KAAAmI,MAAA1C,KAAA2C,GAEAY,GAAAZ,EAAAW,OAAAO,WAEA,CACA,IAAAE,EAAApB,EAAAqB,QACAD,EAAAT,OAAA,IAA2CD,EAAA,KAAU,IAAKA,EAAA,KAAMV,EAAAW,OAAAjG,EAAAkG,GAAA5G,GAChEoH,EAAAb,KAAAD,EAAAO,MAAAlD,GAAA4C,KAEA3I,KAAAF,KAAAuD,SAAA8F,WAAAK,EAAAb,KAAAa,EAAAZ,KAAA,KAAAY,EAAAJ,MAAAI,EAAAT,OAAAjG,EAAA0G,EAAAT,OAAAlG,EAAA2G,EAAAT,OAAAM,MAAAG,EAAAT,OAAAO,OAAA,MAEAE,EAAAjB,QAAAvI,KAAAF,MACAE,KAAAuJ,SAAAC,GACAxJ,KAAAkI,oBAAArG,IAAA,IAAyD+D,EAAA,KAAkB4D,IAC3ExJ,KAAAmI,MAAA1C,KAAA+D,GAEAR,GAAAQ,EAAAT,OAAAO,UAgBAvB,EAAA9G,UAAAsI,SAAA,SAAAnB,GACA,IAAAsB,EAAiBxJ,EAAA,KAAaC,IAC9BwJ,EAAAvB,EAAAwB,MAAAC,QAAAH,GACAtB,EAAAtB,WAAA3B,MAAAsC,SAAAzH,KAAAO,qBAAAuJ,EAAAH,IAEA5I,OAAAC,eAAA+G,EAAA9G,UAAA,WAMAC,IAAA,WACA,OAAAlB,KAAAkI,qBAEA7G,YAAA,EACAC,cAAA,IAEAyG,EA1I2B,GCV3BgC,EAAA/F,EAAAgG,EAAA,sBAAAC,IAAA,IAAIC,EAAyB,WAC7B,IAAAnG,EAAA,SAAAC,EAAAC,GAIA,OAHAF,EAAAhD,OAAAmD,gBACA,CAAcC,UAAA,cAAgBC,OAAA,SAAAJ,EAAAC,GAAsCD,EAAAG,UAAAF,IACpE,SAAAD,EAAAC,GAA6B,QAAAI,KAAAJ,IAAAK,eAAAD,KAAAL,EAAAK,GAAAJ,EAAAI,KAC7BN,EAAAC,EAAAC,IAEA,gBAAAD,EAAAC,GAEA,SAAAM,IAAuBvE,KAAAc,YAAAkD,EADvBD,EAAAC,EAAAC,GAEAD,EAAA/C,UAAA,OAAAgD,EAAAlD,OAAAyD,OAAAP,IAAAM,EAAAtD,UAAAgD,EAAAhD,UAAA,IAAAsD,IAV6B,GA0CzB0F,EAAO,SAAAxF,GAOX,SAAA0F,IACA,IAAAxF,EAAAF,EAAAG,KAAA5E,KAAA,IAA0C+E,EAAA,OAAa/E,KAevD,OARA2E,EAAAyF,qBAAA,KAMAzF,EAAA0F,UAAA,KACA1F,EAAA2F,aACA3F,EAmMA,OAzNIuF,EAASC,EAAA1F,GAwBb1D,OAAAC,eAAAmJ,EAAAlJ,UAAA,YAMAC,IAAA,WACA,cAAAlB,KAAAuC,SAAA,OAAAvC,KAAAuC,QAAAC,OACAxC,KAAAuC,QAAAC,OAAAE,SAGA,MAGArB,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAmJ,EAAAlJ,UAAA,YAwBAC,IAAA,WACA,IAAAqJ,EAAAvK,KAAAwK,aAAAnH,SAEA,OADAkH,EAAAE,YAAAzK,KACAuK,GAEAlJ,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAmJ,EAAAlJ,UAAA,cAKAC,IAAA,WACA,UAAAlB,KAAAuC,QACA,UAAA1B,MAAA,8CAEA,cAAAb,KAAAuC,QAAAC,OAAAxC,KAAAuC,QAAAmI,eAAAtE,WAAApG,KAAAuC,QAAAC,OAAAE,SAAA0D,YAEA/E,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAmJ,EAAAlJ,UAAA,QAKAC,IAAA,WACA,OAAAlB,KAAAuC,QAAAY,aAAAf,MAEAf,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAmJ,EAAAlJ,UAAA,UAKAC,IAAA,WACA,OAAAlB,KAAAuC,QAAAY,aAAAP,QAEAvB,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAmJ,EAAAlJ,UAAA,eAKAC,IAAA,WAQA,OAPA,MAAAlB,KAAAoK,uBACApK,KAAAoK,qBAAA,IAAgDtC,EAAuB9H,MAEvEA,KAAA8G,WAAA3B,MAAAsC,SAAAzH,KAAAO,qBAAAoK,OAAA3K,KAAAoK,qBAAAQ,SAEA5K,KAAAoK,qBAAAS,YAAA7K,KAAA8G,WAAA3B,MAAAuC,SAAA1H,KAAAO,qBAAAoK,SAEA3K,KAAAoK,sBAEA/I,YAAA,EACAC,cAAA,IAOA6I,EAAAlJ,UAAAqJ,WAAA,WACAtK,KAAA8G,WAAA3B,MAAAsC,SAAAzH,KAAAO,qBAAAuK,KAAA,IAA2EC,EAAA,KAAO,SAClF/K,KAAA8G,WAAAkE,sBAAA,IAAoDjG,EAAA,KAAwB/E,OAM5EmK,EAAAlJ,UAAAgK,WAAA,SAAA1I,GACAvC,KAAAuC,UACAvC,KAAA8G,WAAA3B,MAAAsC,SAAAzH,KAAAO,qBAAAiC,OAAA,IAA6EoD,EAAA,KAAkBrD,KAM/F4H,EAAAlJ,UAAAiK,cAAA,WACAlL,KAAAmL,cAAA,GAyBAhB,EAAAlJ,UAAAmK,cAAA,WACA,IAAAC,EAAArL,KAAAuC,QAAAU,gBAAAjD,MAAA,GACA,WAAmB8I,EAAA,KAAKuC,EAAAhC,MAAAgC,EAAA/B,SAMxBa,EAAAlJ,UAAAqK,cAAA,WACA,IAAAC,EAAAvL,KAAA0C,cACA8I,WAAAD,GAAA,MAAAA,GACAvL,KAAAyL,kBAAAF,GAEA,MAAAvL,KAAAqK,WAAA,qBAAArK,KAAAqK,WACArK,KAAAqK,UAAArK,OAOAmK,EAAAlJ,UAAAwK,kBAAA,SAAA/I,GAEA,IAAAgJ,EAAA1L,KAAAuC,QAAAoJ,kBAAAjJ,EAAA1C,MAAA,GACA,GAAA0L,EAAA,CACA,IAAAE,EAAA,IAAgChM,EAAYI,MAAA,GAG5C,GAFAA,KAAAmH,OAAArB,OAAA,EAAA8F,GACA5L,KAAAuC,QAAAsJ,cAAA7L,KAAA4L,EAAAlJ,GAAA,GACA,OAAAkJ,EAAAvI,UAAA,qBAAAuI,EAAAvI,SACA,QAAA0C,EAAA,EAA+BA,EAAA6F,EAAAvI,SAAAyI,gCAAAjI,OAA+DkC,IAAA,CAC9F,IAAAgG,EAAAH,EAAAvI,SAAAyI,gCAAA/F,GACAgG,EAAAC,MAAAC,YAAAL,EAAAvI,SAAA0I,EAAAG,SAAAH,EAAAI,SAAAJ,EAAAK,WAKA,IAAAC,EAAArM,KAAAuC,QAAAoJ,kBAAAjJ,EAAA1C,MAAA,GACA,GAAAqM,EAAA,CACA,IAAAC,EAAA,IAAiC1M,EAAYI,MAAA,GAC7CA,KAAAmH,OAAAtF,IAAAyK,GACAtM,KAAAuC,QAAAsJ,cAAA7L,KAAAsM,EAAA5J,GAAA,KAGAyH,EA1NW,CA2NTnF,wCCjQK,IAAAuH,EAsBAC,EAsBAC,EA2BAC,EAoDAC,EAsBAC,EAsBAC,EAqCAC,EAiBAC,EA2BAC,EAuFAC,EA0CAC,EA2BAC,EAxZPpD,EAAA/F,EAAAgG,EAAA,sBAAAwC,IAAAzC,EAAA/F,EAAAgG,EAAA,sBAAAyC,IAAA1C,EAAA/F,EAAAgG,EAAA,sBAAA0C,IAAA3C,EAAA/F,EAAAgG,EAAA,sBAAA4C,IAAA7C,EAAA/F,EAAAgG,EAAA,sBAAA6C,IAAA9C,EAAA/F,EAAAgG,EAAA,sBAAA8C,IAAA/C,EAAA/F,EAAAgG,EAAA,sBAAA+C,IAAAhD,EAAA/F,EAAAgG,EAAA,sBAAAgD,IAAAjD,EAAA/F,EAAAgG,EAAA,sBAAAiD,IAAAlD,EAAA/F,EAAAgG,EAAA,sBAAAmD,IAKA,SAAAZ,GAKAA,IAAA,kBAKAA,IAAA,sBAKAA,IAAA,oBAfA,CAgBCA,MAAA,KAMD,SAAAC,GAKAA,IAAA,gBAKAA,IAAA,sBAKAA,IAAA,sBAfA,CAgBCA,MAAA,KAMD,SAAAC,GAKAA,IAAA,kBAKAA,IAAA,sBAKAA,IAAA,oBAKAA,IAAA,wBApBA,CAqBCA,MAAA,KAMD,SAAAC,GAKAA,IAAA,kBAKAA,IAAA,sBAKAA,IAAA,8BAKAA,IAAA,kBAKAA,IAAA,0BAKAA,IAAA,0BAKAA,IAAA,8BAKAA,IAAA,sCAKAA,IAAA,kBA7CA,CA8CCA,MAAA,KAMD,SAAAC,GAKAA,IAAA,oBAKAA,IAAA,oBAKAA,IAAA,oBAfA,CAgBCA,MAAA,KAMD,SAAAC,GAKAA,IAAA,kBAKAA,IAAA,oBAKAA,IAAA,sBAfA,CAgBCA,MAAA,KAMD,SAAAC,GAKAA,IAAA,oBAKAA,IAAA,kBAKAA,IAAA,gBAKAA,IAAA,wBAKAA,IAAA,8BAKAA,IAAA,sBA9BA,CA+BCA,MAAA,KAMD,SAAAC,GAKAA,IAAA,wBAKAA,IAAA,4BAVA,CAWCA,MAAA,KAMD,SAAAC,GAKAA,IAAA,gBAKAA,IAAA,kBAKAA,IAAA,4BAKAA,IAAA,wBApBA,CAqBCA,MAAA,KAMD,SAAAC,GAKAA,IAAA,sBAKAA,IAAA,0BAKAA,IAAA,sBAKAA,IAAA,wBAKAA,IAAA,sBAKAA,IAAA,wBAKAA,IAAA,8BAKAA,IAAA,4BAKAA,IAAA,4BAKAA,IAAA,4BAKAA,IAAA,+BAKAA,IAAA,6BAKAA,IAAA,iBAKAA,IAAA,+BAKAA,IAAA,qBAKAA,IAAA,+BAhFA,CAiFCA,MAAA,KAMD,SAAAC,GAKAA,IAAA,8BAKAA,IAAA,kBAKAA,IAAA,oBAKAA,IAAA,oBAKAA,IAAA,kBAKAA,IAAA,0BAKAA,IAAA,8BAnCA,CAoCCA,MAAA,KAMD,SAAAC,GAKAA,IAAA,gBAKAA,IAAA,sBAKAA,IAAA,wBAKAA,IAAA,kBApBA,CAqBCA,MAAA,KAMD,SAAAC,GAKAA,IAAA,kBAKAA,IAAA,gCAKAA,IAAA,gCAfA,CAgBCA,MAAA,8FCtaDC,EAAA,WAEA,SAAAA,KAsBA,OAfAA,EAAAnM,UAAAoM,WAAA,SAAAhK,EAAAP,EAAAD,GACA,IAAAyK,EAAA,IAAAxK,GAAA,IAAAD,EACA0K,EAAA,KAEAD,IAEAC,EAAAlK,EAAAmK,OACAnK,EAAAoK,mBAAA3K,EAAAD,IAEA7C,KAAA0N,aAAArK,GACAiK,GAEAjK,EAAAsK,QAAAJ,IAGAH,EAxBA,eCHArD,EAAA/F,EAAAgG,EAAA,sBAAA4D,IAAA,IAAA9J,EAA6B,WAC7B,IAAAC,EAAA,SAAAC,EAAAC,GAIA,OAHAF,EAAAhD,OAAAmD,gBACA,CAAcC,UAAA,cAAgBC,OAAA,SAAAJ,EAAAC,GAAsCD,EAAAG,UAAAF,IACpE,SAAAD,EAAAC,GAA6B,QAAAI,KAAAJ,IAAAK,eAAAD,KAAAL,EAAAK,GAAAJ,EAAAI,KAC7BN,EAAAC,EAAAC,IAEA,gBAAAD,EAAAC,GAEA,SAAAM,IAAuBvE,KAAAc,YAAAkD,EADvBD,EAAAC,EAAAC,GAEAD,EAAA/C,UAAA,OAAAgD,EAAAlD,OAAAyD,OAAAP,IAAAM,EAAAtD,UAAAgD,EAAAhD,UAAA,IAAAsD,IAV6B,GAyBzBqJ,EAAiB,SAAAnJ,GAGrB,SAAAoJ,IACA,IAAAlJ,EAAAF,EAAAG,KAAA5E,YAIA,OAFA2E,EAAAmJ,eAAA,IAAmChF,EAAA,KAAU,SAC7CnE,EAAAoJ,qBAAA,IAAyCjF,EAAA,KAAK,KAC9CnE,EA4HA,OAnIAb,EAAA+J,EAAApJ,GASA1D,OAAAC,eAAA6M,EAAA5M,UAAA,UAEAC,IAAA,WACA,OAAAlB,KAAA8N,gBAEA3M,IAAA,SAAAC,GACApB,KAAA8N,eAAA1M,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA6M,EAAA5M,UAAA,QACAC,IAAA,WACA,WAAuB4H,EAAA,KAAK9I,KAAA+I,OAAAM,MAAArJ,KAAA+I,OAAAO,SAE5BnI,IAAA,SAAAC,GACApB,KAAA+I,OAAAM,MAAAjI,EAAAiI,MACArJ,KAAA+I,OAAAO,OAAAlI,EAAAkI,QAEAjI,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA6M,EAAA5M,UAAA,YACAC,IAAA,WACA,WAAuB4H,EAAA,KAAM9I,KAAA+I,OAAAjG,EAAA9C,KAAA+I,OAAAlG,IAE7B1B,IAAA,SAAAC,GACApB,KAAA+I,OAAAjG,EAAA1B,EAAA0B,EACA9C,KAAA+I,OAAAlG,EAAAzB,EAAAyB,GAEAxB,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA6M,EAAA5M,UAAA,QACAC,IAAA,WACA,OAAAlB,KAAAgO,cAEA7M,IAAA,SAAAC,GACApB,KAAAgO,aAAA5M,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA6M,EAAA5M,UAAA,SACAC,IAAA,WACA,OAAAlB,KAAAiO,eAEA9M,IAAA,SAAAC,GACApB,KAAAiO,cAAA7M,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA6M,EAAA5M,UAAA,OACAC,IAAA,WACA,OAAAlB,KAAAkO,aAEA/M,IAAA,SAAAC,GACApB,KAAAkO,YAAA9M,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA6M,EAAA5M,UAAA,gBACAC,IAAA,WACA,OAAAlB,KAAAmO,sBAEAhN,IAAA,SAAAC,GACApB,KAAAmO,qBAAA/M,GAEAC,YAAA,EACAC,cAAA,IAEAuM,EAAA5M,UAAAmN,kBAAA,SAAA/K,EAAA6I,EAAAC,EAAAC,GACA,OAAApM,KAAA+I,OAAAO,QAAA,IAAAtJ,KAAA+I,OAAAM,MAAA,CACA,IAAAV,EAAA3I,KAAA0H,SAAArE,GACArD,KAAA+N,qBAAA/N,KAAAqO,UAAAnF,cAAAP,EAAA3I,KAAAoC,KAAApC,KAAA6I,gBAGAgF,EAAA5M,UAAAqN,KAAA,SAAAC,EAAAC,EAAAC,GACA,wBAAAD,EAAA,CACA,IAAAE,EAAA,IAAiC5F,EAAA,KAAM,KACvC9I,KAAAsO,KAAAC,EAAAG,QAEA,GAAAF,aAAiC1F,EAAA,KACjC9I,KAAAsO,KAAAC,EAAAC,EAAA1L,EAAA0L,EAAA3L,OAEA,CACA7C,KAAAqN,WAAAkB,EAAAC,EAAAC,GACA,IAAAE,EAAA,IAA2BC,EAAA,KAAqB5O,KAAA,IAAW8I,EAAA,KAAM0F,EAAAC,IACjEF,EAAAzC,gBAAAjK,IAAA8M,KAGAd,EAAA5M,UAAA4N,QAAA,WACA,WAAA7O,KAAA+I,OAAAO,QAAA,IAAAtJ,KAAA+I,OAAAM,MACArJ,KAAA+N,qBAGA/N,KAAAoC,MAGAyL,EAAA5M,UAAAyM,aAAA,SAAArK,KAIAwK,EAAA5M,UAAA6N,SAAA,WACA,2BAAA9O,KAAAiO,eAAA,MAAAjO,KAAAiO,cAAA,IAA+Fc,EAAA,KAAa,IAAKC,EAAA,KAAQ,QAAAhP,KAAAiO,eAEzHJ,EAAA5M,UAAAoN,QAAA,WACA,2BAAArO,KAAAgO,cAAA,MAAAhO,KAAAgO,aAAyFiB,EAAA,KAAWC,YAAAlP,KAAAgO,cAGpGH,EAAA5M,UAAAkO,oBAAA,SAAA9L,GACA,wBAAAA,EAAAvD,MAAA,OAAAuD,EAAAvD,KAAA,CACA,IAAAA,EAAAuD,EAAAvD,KACA,OAAAA,EAGAA,EAAAuD,EAAAoH,YACA,OAAA3K,GAGA+N,EApIqB,CAqInBT,wCC1JF,IAAAgC,EAAA,WAKA,SAAAA,EAAAC,GACArP,KAAAsP,aAAAD,EA6DA,OA3DAtO,OAAAC,eAAAoO,EAAAnO,UAAA,YAMAC,IAAA,WACA,OAAAlB,KAAAuP,aAEApO,IAAA,SAAAC,GACApB,KAAAuP,YAAAnO,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAoO,EAAAnO,UAAA,YAKAC,IAAA,WACA,OAAAlB,KAAAsP,aAAAE,OAAApN,MAEAf,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAoO,EAAAnO,UAAA,UAKAC,IAAA,WACA,OAAAlB,KAAAsP,aAAAE,OAAApN,MAEAf,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAoO,EAAAnO,UAAA,UAKAC,IAAA,WACA,IAAAqJ,EAAAvK,KAAAsP,aACA,OAAA/E,GAEAlJ,YAAA,EACAC,cAAA,IAOA8N,EAAAnO,UAAAwO,MAAA,SAAAC,GACA,IACAC,EAAAD,EACA1P,KAAAsP,aAAAG,MAAAE,IAEAP,EAnEA,2BCKIQ,EAAuB,WAC3B,SAAAC,IAOA7P,KAAA8P,kBAAA,GAMA9P,KAAA+P,qBAAA,IAAwCjJ,EAAA,KAKxC9G,KAAAgQ,0BAAA,IAA6ClJ,EAAA,KA4G7C,OA1GA/F,OAAAC,eAAA6O,EAAA5O,UAAA,SAMAC,IAAA,WACA,OAAAlB,KAAA8P,kBAAAjM,QAEAxC,YAAA,EACAC,cAAA,IAMAuO,EAAA5O,UAAAkE,MAAA,SAAAC,GACA,OAAApF,KAAA8P,kBAAA1K,IAEArE,OAAAC,eAAA6O,EAAA5O,UAAA,YAMAC,IAAA,WACA,OAAAlB,KAAAiQ,OAEA5O,YAAA,EACAC,cAAA,IAMAuO,EAAA5O,UAAAY,IAAA,SAAA+I,GACA,IAAAsF,EAAA,IAAAC,EAAAvF,GACA5K,KAAA8P,kBAAArK,KAAAyK,GACAlQ,KAAAgQ,0BAAAI,YAAAxF,IACA5K,KAAAgQ,0BAAAvI,SAAAmD,EAAA5K,KAAA8P,kBAAAjM,OAAA,GAEA+G,EAAAyF,SAAArQ,KAAAoF,MAAApF,KAAA8P,kBAAAjM,OAAA,EACA+G,EAAA0F,OAAyBC,EAAA,KAAYC,YAMrCX,EAAA5O,UAAAwP,QAAA,SAAApL,GACA,IAAAD,GAAA,EACA,QAAAC,EAAAgL,SACA,OAAAhL,EAAAgL,SAEA,GAAArQ,KAAAgQ,0BAAAI,YAAA/K,IAAArF,KAAA2G,QAAA3G,KAAAgQ,0BAAA5N,OACAgD,EAAApF,KAAAgQ,0BAAAtI,SAAArC,QAGA,QAAAU,EAAA/F,KAAA2G,MAAA,EAAwCZ,GAAA,EAAQA,IAAA,CAChD,IAAA2K,EAAA1Q,KAAA8P,kBAAA/J,GACA,GAAA2K,EAAAC,SAAAtL,EAAA,CACAD,EAAAW,EACA,OAIA,OAAAX,GAMAyK,EAAA5O,UAAA2P,aAAA,SAAAxL,EAAA6K,GAEA,IAAAtK,EADA3F,KAAAoF,MAAApF,KAAAyQ,QAAArL,GAEApF,KAAAiQ,OAAA,EACA,IAAAS,EAAA1Q,KAAA8P,kBAAA9P,KAAAoF,OACAO,EAAA+K,EAAA/K,UACA,IAAAN,EAAA,CAAmBM,YAAAkL,OAAAZ,GACnB,OAAA5K,GAMAwK,EAAA5O,UAAA6P,gBAAA,SAAAzL,EAAAM,EAAAoL,GACA,IAAAxG,GAAA,EAEAvK,KAAAoF,MAAApF,KAAAyQ,QAAApL,GACA,IAAAqL,EAAA1Q,KAAA8P,kBAAA9P,KAAAoF,OAEA,OADAsL,EAAAM,aAAArL,GACA4E,GAEAsF,EAAA5O,UAAAgQ,QAAA,WACA,QAAAC,EAAA,EAAAC,EAAAnR,KAAA8P,kBAAqDoB,EAAAC,EAAAtN,OAAgBqN,IAAA,CACrE,IAAA7L,EAAA8L,EAAAD,QACA1F,IAAAnG,IACAA,EAAA+L,UAAAf,UAAA,EACAhL,EAAA+L,UAAAC,cAAA7F,EACAnG,EAAA+L,UAAAE,2BAAA9F,EACAnG,EAAA+L,UAAAf,cAAA7E,GAGAxL,KAAA8P,kBAAA,GACA9P,KAAA+P,qBAAA,IAAwCjJ,EAAA,KACxC9G,KAAAgQ,0BAAA,IAA6ClJ,EAAA,MAE7C+I,EA/H2B,GAkI3BM,EAAA,WACA,SAAAA,EAAA9K,EAAAM,GACA3F,KAAAoR,UAAA/L,EACArF,KAAAuR,aAAA5L,EAmCA,OAjCA5E,OAAAC,eAAAmP,EAAAlP,UAAA,UAMAC,IAAA,WACA,OAAAlB,KAAAoR,WAEAjQ,IAAA,SAAAC,GACApB,KAAAoR,UAAAhQ,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAmP,EAAAlP,UAAA,aAKAC,IAAA,WACA,OAAAlB,KAAAuR,cAEAlQ,YAAA,EACAC,cAAA,IAMA6O,EAAAlP,UAAA+P,aAAA,SAAArL,GACA3F,KAAAuR,aAAA5L,GAEAwK,EAtCA,2BChIIqB,EAAY,WAKhB,SAAAC,EAAAC,GACA1R,KAAA2R,WAAA,IAAAC,KAAA,MACA5R,KAAA6R,WAAA,GACA7R,KAAA8R,KAAAJ,GACQlE,EAAA,KAAIuE,qBAAAC,UAAAC,WA2HZ,OAzHAlR,OAAAC,eAAAyQ,EAAAxQ,UAAA,UAKAC,IAAA,WAEA,OADAlB,KAAAkS,QACAlS,KAAA2R,YAEAtQ,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAyQ,EAAAxQ,UAAA,YAKAC,IAAA,WACA,OAAAlB,KAAAmS,KAEA9Q,YAAA,EACAC,cAAA,IAEAmQ,EAAAxQ,UAAA6Q,KAAA,SAAAJ,GACA,OAAAA,QAAAlG,IAAAkG,GACA1R,KAAAmS,IAAA,IAA2BC,EAAA,MAAQ,GACnCpS,KAAAmS,IAAArH,KAAA,SAGA9K,KAAAmS,IAAAT,EACA1R,KAAAqS,eAMAZ,EAAAxQ,UAAAoR,WAAA,WACA,GAAArS,KAAA0R,SAAAY,WACA,OAAAtS,KAAA0R,SAAA5G,MACA,cACA,IAAAyH,EAAA,IAAAC,YAAA,GACAC,EAAA,IAAAC,WAAAH,GACAE,EAAA,OACAA,EAAA,OACAzS,KAAA2R,WAAA,IAAAC,KAAA,CAAAW,IACA,MACA,WACA,IAAAI,EAAA,IAAAH,YAAA,GACAI,EAAA,IAAAF,WAAAC,GACAC,EAAA,OACAA,EAAA,OACAA,EAAA,OACA5S,KAAA2R,WAAA,IAAAC,KAAA,CAAAe,IACA,MACA,QACA3S,KAAA2R,WAAA,IAAAC,KAAA,MACA,QASAH,EAAAxQ,UAAAuM,KAAA,SAAAqF,GACA,KAAA7S,KAAA6R,YACA7R,KAAAkS,QAEQ1E,EAAA,KAAIA,KAAAqF,EAAA7S,KAAAwP,SAOZiC,EAAAxQ,UAAAwO,MAAA,SAAArO,GACA,QAAAoK,IAAAxL,KAAA0R,SACA,UAAA7Q,MAAA,yDAEQE,OAAAqR,EAAA,KAAArR,CAAuBK,EAAA,UAC/BpB,KAAA6R,YAAAzQ,EACApB,KAAA6R,WAAAhO,QAAA,OACA7D,KAAAkS,SAGAT,EAAAxQ,UAAAiR,MAAA,WACA,QAAA1G,IAAAxL,KAAA6R,YAAA,OAAA7R,KAAA6R,YAAA,IAAA7R,KAAA6R,WAAAhO,OAAA,CAGA,IAAAiP,EAAA9S,KAAA0R,SAAAqB,SAAA/S,KAAA6R,WAAA,EAAA7R,KAAA6R,WAAAhO,QACA7D,KAAA6R,WAAA,GACA7R,KAAA2R,WAAA,IAAAC,KAAA,CAAA5R,KAAA2R,WAAAmB,MAOArB,EAAAxQ,UAAA+R,UAAA,SAAA5R,GACA,QAAAoK,IAAAxL,KAAA0R,SACA,UAAA7Q,MAAA,yDAEQE,OAAAqR,EAAA,KAAArR,CAAuBK,EAAA,UAC/BpB,KAAA6R,WAAA7R,KAAA6R,WAAAzQ,EAAA,OACApB,KAAA6R,WAAAhO,QAAA,OACA7D,KAAAkS,SAOAT,EAAAxQ,UAAAgQ,QAAA,WACAjR,KAAA2R,gBAAAnG,EACAxL,KAAA6R,gBAAArG,EACAxL,KAAAmS,eAAgCC,EAAA,MAChCpS,KAAAmS,IAAAlB,UAEAjR,KAAAmS,SAAA3G,GAEAiG,EApIgB,GCJZwB,EAAe,WACnB,SAAAC,EAAAxQ,GAKA1C,KAAAmT,gBAAA,EACAzQ,aAAgC0Q,IAChCpT,KAAA0C,YAqGA,OAlGA3B,OAAAC,eAAAkS,EAAAjS,UAAA,cAMAC,IAAA,WACA,OAAAlB,KAAAqT,SAEAhS,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAkS,EAAAjS,UAAA,cAKAC,IAAA,WACA,OAAAlB,KAAAsT,eAEAjS,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAkS,EAAAjS,UAAA,oBAKAC,IAAA,WACA,OAAAlB,KAAAuT,qBAEApS,IAAA,SAAAC,GACApB,KAAAuT,oBAAAnS,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAkS,EAAAjS,UAAA,WAKAC,IAAA,WACA,OAAAlB,KAAAwT,YAEArS,IAAA,SAAAC,GACApB,KAAAwT,WAAApS,GAEAC,YAAA,EACAC,cAAA,IAOA4R,EAAAjS,UAAAwS,wBAAA,SAAA1D,GACA/P,KAAAqT,QAAAtD,GAMAmD,EAAAjS,UAAAyS,cAAA,SAAAC,GACA3T,KAAAsT,cAAAK,GAMAT,EAAAjS,UAAA2S,WAAA,SAAAC,GACA7T,KAAAwT,WAAAK,GAEAX,EAAAjS,UAAAuM,KAAA,SAAAsG,GACA,IAAAnP,EAAA3E,KACA0R,EAAA,IAA2BU,EAAA,MAAQ,GACnC2B,EAAA,IAAqBvC,EAAYE,GACjC,wBAAAoC,EAAA,CACA,IAAAE,EAAA,IAAiC5B,EAAA,MAAQ,GACzC6B,EAAA,IAA2BzC,EAAYwC,GACvC,WAAAE,QAAA,SAAAC,EAAAC,GAEA,IAAA/O,EAAA,GACAA,EAAAgP,SAAA,IAAAzC,KAAA,CAAAjN,EAAAjC,SAAA4R,QAAAL,GAAA,KAA+EnJ,KAAA,oBAC/EqJ,EAAA9O,KAIArF,KAAA0C,SAAA4R,QAAAP,EAAAD,GAAA,IAOAZ,EAAAjS,UAAAwI,MAAA,WACA,OAAAzJ,KAAA0C,UAEAwQ,EA7GmB,2HCHnBqB,EAAA,WACA,SAAAA,EAAAzU,GAEAE,KAAAS,QADA,qBAAAX,EACAA,EAGA,KAcA,OAXAiB,OAAAC,eAAAuT,EAAAtT,UAAA,QAKAC,IAAA,WACA,OAAAlB,KAAAS,SAEAY,YAAA,EACAC,cAAA,IAEAiT,EApBA,eCAAC,EAAA,WAMA,SAAAA,EAAAjS,GAOA,GADAvC,KAAAkH,WAAA,KACA,MAAA3E,EACA,MAAA1B,MAAA,oCAEAb,KAAAuC,UAuCA,OArCAxB,OAAAC,eAAAwT,EAAAvT,UAAA,WAMAC,IAAA,WACA,OAAAlB,KAAAkH,YAEA/F,IAAA,SAAAC,GACApB,KAAAkH,WAAA9F,GAEAC,YAAA,EACAC,cAAA,IAOAkT,EAAAvT,UAAAwT,SAAA,SAAA3U,GACA,OAAAE,KAAAuC,QAAAkS,SAAA3U,IAMA0U,EAAAvT,UAAAyT,OAAA,SAAA5U,GACAE,KAAAuC,QAAAmS,OAAA5U,IAMA0U,EAAAvT,UAAAY,IAAA,WACA,OAAA7B,KAAAuC,QAAAV,OAEA2S,EAvDA,eCEIG,EAAmB,WAMvB,SAAAC,KA2RA,OAxRA7T,OAAAC,eAAA4T,EAAA3T,UAAA,QAOAC,IAAA,WACA,OAAAlB,KAAA6U,cAEA1T,IAAA,SAAAC,GACApB,KAAA6U,aAAA7U,KAAA8U,aAAA1T,EAAyD2T,EAAA,KAAYC,OAErE3T,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA4T,EAAA3T,UAAA,OAKAC,IAAA,WACA,OAAAlB,KAAAiV,aAEA9T,IAAA,SAAAC,GACApB,KAAAiV,YAAAjV,KAAA8U,aAAA1T,EAAwD2T,EAAA,KAAYG,MAEpE7T,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA4T,EAAA3T,UAAA,SAKAC,IAAA,WACA,OAAAlB,KAAAmV,eAEAhU,IAAA,SAAAC,GACApB,KAAAmV,cAAAnV,KAAA8U,aAAA1T,EAA0D2T,EAAA,KAAYK,QAEtE/T,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA4T,EAAA3T,UAAA,UAKAC,IAAA,WACA,OAAAlB,KAAAqV,gBAEAlU,IAAA,SAAAC,GACApB,KAAAqV,eAAArV,KAAA8U,aAAA1T,EAA2D2T,EAAA,KAAYO,SAEvEjU,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA4T,EAAA3T,UAAA,YAKAC,IAAA,WACA,OAAAlB,KAAAuV,UAEApU,IAAA,SAAAC,GACApB,KAAAuV,SAAAvV,KAAA8U,aAAA1T,EAAqD2T,EAAA,KAAYC,OAEjE3T,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA4T,EAAA3T,UAAA,WAKAC,IAAA,WACA,OAAAlB,KAAAwV,SAEArU,IAAA,SAAAC,GACApB,KAAAwV,QAAAxV,KAAA8U,aAAA1T,EAAoD2T,EAAA,KAAYG,MAEhE7T,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA4T,EAAA3T,UAAA,aAKAC,IAAA,WACA,OAAAlB,KAAAyV,WAEAtU,IAAA,SAAAC,GACApB,KAAAyV,UAAAzV,KAAA8U,aAAA1T,EAAsD2T,EAAA,KAAYK,QAElE/T,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA4T,EAAA3T,UAAA,cAKAC,IAAA,WACA,OAAAlB,KAAA0V,YAEAvU,IAAA,SAAAC,GACApB,KAAA0V,WAAA1V,KAAA8U,aAAA1T,EAAuD2T,EAAA,KAAYO,SAEnEjU,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA4T,EAAA3T,UAAA,WAKAC,IAAA,WACA,OAAAlB,KAAA2V,SAEAxU,IAAA,SAAAC,GACApB,KAAA2V,QAAA3V,KAAA8U,aAAA1T,EAAoD2T,EAAA,KAAYC,OAEhE3T,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA4T,EAAA3T,UAAA,UAKAC,IAAA,WACA,OAAAlB,KAAA4V,QAEAzU,IAAA,SAAAC,GACApB,KAAA4V,OAAA5V,KAAA8U,aAAA1T,EAAmD2T,EAAA,KAAYG,MAE/D7T,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA4T,EAAA3T,UAAA,YAKAC,IAAA,WACA,OAAAlB,KAAA6V,UAEA1U,IAAA,SAAAC,GACApB,KAAA6V,SAAA7V,KAAA8U,aAAA1T,EAAqD2T,EAAA,KAAYK,QAEjE/T,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA4T,EAAA3T,UAAA,aAKAC,IAAA,WACA,OAAAlB,KAAA8V,WAEA3U,IAAA,SAAAC,GACApB,KAAA8V,UAAA9V,KAAA8U,aAAA1T,EAAsD2T,EAAA,KAAYO,SAElEjU,YAAA,EACAC,cAAA,IAOAsT,EAAA3T,UAAA8U,QAAA,SAAAjW,GACA,SAAAA,EACA,UAAAe,MAAA,8BAEA,IAAAmV,EAAA,KAEAC,EAAAjW,KAAAkW,OAAApW,GAQA,OANAkW,EADAC,EACA,MAAAjW,KAAAmW,SAAAnW,KAAAmW,SAAAnW,KAAAsD,KAGA,MAAAtD,KAAAoW,QAAApW,KAAAoW,QAAApW,KAAAsD,KAGA0S,GAMApB,EAAA3T,UAAAoV,OAAA,SAAAvW,GACA,SAAAA,EACA,UAAAe,MAAA,8BAEA,IAAAmV,EAAA,KAEAC,EAAAjW,KAAAkW,OAAApW,GAQA,OANAkW,EADAC,EACA,MAAAjW,KAAAsW,QAAAtW,KAAAsW,QAAAtW,KAAAuD,IAGA,MAAAvD,KAAAuW,OAAAvW,KAAAuW,OAAAvW,KAAAuD,IAGAyS,GAMApB,EAAA3T,UAAAuV,SAAA,SAAA1W,GACA,SAAAA,EACA,UAAAe,MAAA,8BAEA,IAAAmV,EAAA,KAEAC,EAAAjW,KAAAkW,OAAApW,GAQA,OANAkW,EADAC,EACA,MAAAjW,KAAAyW,UAAAzW,KAAAyW,UAAAzW,KAAAwD,MAGA,MAAAxD,KAAA0W,SAAA1W,KAAA0W,SAAA1W,KAAAwD,MAGAwS,GAMApB,EAAA3T,UAAA0V,UAAA,SAAA7W,GACA,SAAAA,EACA,UAAAe,MAAA,8BAEA,IAAAmV,EAAA,KAEAC,EAAAjW,KAAAkW,OAAApW,GAQA,OANAkW,EADAC,EACA,MAAAjW,KAAA4W,WAAA5W,KAAA4W,WAAA5W,KAAAyD,OAGA,MAAAzD,KAAA6W,UAAA7W,KAAA6W,UAAA7W,KAAAyD,OAGAuS,GAMApB,EAAA3T,UAAAiV,OAAA,SAAApW,GACA,IAAAgX,EAAAhX,EAAAyC,QAAAG,SAAAoU,MACA1R,EAAA,EAEAA,EADA0R,EAAAC,oBAAA3G,YAAAtQ,GACAgX,EAAAC,oBAAArP,SAAA5H,GAAA,EAGAgX,EAAAlQ,QAAA9G,GAAA,EAEA,IAAAmW,EAAA7Q,EAAA,MACA,OAAA6Q,GAMArB,EAAA3T,UAAA6T,aAAA,SAAAkC,EAAAlM,GACA,SAAAkM,EAAA,CACA,wBAAAA,EAAAlM,MAAAkM,EAAAlM,OAA2FiK,EAAA,KAAYkC,KACvG,UAAApW,MAAA,wFAEAmW,EAAAlM,OAEA,OAAAkM,GAEApC,EAjSuB,GCNvB9Q,EAA6B,WAC7B,IAAAC,EAAA,SAAAC,EAAAC,GAIA,OAHAF,EAAAhD,OAAAmD,gBACA,CAAcC,UAAA,cAAgBC,OAAA,SAAAJ,EAAAC,GAAsCD,EAAAG,UAAAF,IACpE,SAAAD,EAAAC,GAA6B,QAAAI,KAAAJ,IAAAK,eAAAD,KAAAL,EAAAK,GAAAJ,EAAAI,KAC7BN,EAAAC,EAAAC,IAEA,gBAAAD,EAAAC,GAEA,SAAAM,IAAuBvE,KAAAc,YAAAkD,EADvBD,EAAAC,EAAAC,GAEAD,EAAA/C,UAAA,OAAAgD,EAAAlD,OAAAyD,OAAAP,IAAAM,EAAAtD,UAAAgD,EAAAhD,UAAA,IAAAsD,IAV6B,GAoB7B2S,EAAA,SAAAzS,GAOA,SAAAyS,IACA,IAAAvS,EAAAF,EAAAG,KAAA5E,YAEA,OADA2E,EAAAwS,UAAAxS,EAAAyS,SAAAzS,EAAA0S,WAAA1S,EAAA2S,YAAA3S,EAAA4S,YAAA,EACA5S,EAyEA,OAlFAb,EAAAoT,EAAAzS,GAWA1D,OAAAC,eAAAkW,EAAAjW,UAAA,6BAMAC,IAAA,WACA,OAAAlB,KAAAmX,WAEAhW,IAAA,SAAAC,GACApB,KAAAmX,UAAA/V,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAkW,EAAAjW,UAAA,4BAKAC,IAAA,WACA,OAAAlB,KAAAoX,UAEAjW,IAAA,SAAAC,GACApB,KAAAoX,SAAAhW,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAkW,EAAAjW,UAAA,8BAKAC,IAAA,WACA,OAAAlB,KAAAqX,YAEAlW,IAAA,SAAAC,GACApB,KAAAqX,WAAAjW,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAkW,EAAAjW,UAAA,+BAKAC,IAAA,WACA,OAAAlB,KAAAsX,aAEAnW,IAAA,SAAAC,GACApB,KAAAsX,YAAAlW,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAkW,EAAAjW,UAAA,uBAKAC,IAAA,WACA,OAAAlB,KAAAuX,YAEApW,IAAA,SAAAC,GACApB,KAAAuX,WAAAnW,GAEAC,YAAA,EACAC,cAAA,IAEA4V,EAnFA,CAoFEvC,GCxFE6C,EAAU,WACd,SAAAC,EAAA/U,EAAAS,GAOAnD,KAAA0X,UAAA,IAA6BnD,EAK7BvU,KAAA2X,SAAA,GAKA3X,KAAAO,qBAAA,IAAwCC,EAAA,KACxC,qBAAA2C,EACAnD,KAAAc,YAAA4B,IAAAS,eAGAnD,KAAAuP,YAAA7M,EACA1C,KAAA4X,SAAAzU,EAAAsG,QACAzJ,KAAA6X,gBAAA7X,KAAA4X,SAAAnO,QACAzJ,KAAAsK,cA6bA,OA1bAvJ,OAAAC,eAAAyW,EAAAxW,UAAA,UAMAC,IAAA,WACA,OAAAlB,KAAA8X,mBAEA3W,IAAA,SAAAC,GACApB,KAAA8X,kBAAA1W,EACApB,KAAAuC,QAAA4C,MAAAsC,SAAAzH,KAAAO,qBAAAiC,OAAA,IAA8EoD,EAAA,KAAkBxE,KAEhGC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAyW,EAAAxW,UAAA,kBAKAC,IAAA,WACA,OAAAlB,KAAAuP,aAEAlO,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAyW,EAAAxW,UAAA,gBAKAC,IAAA,WACA,OAAAlB,KAAA4X,UAEAzW,IAAA,SAAAC,GACA,SAAAA,EAIA,MAAAP,MAAA,0BAHAb,KAAA4X,SAAAxW,GAMAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAyW,EAAAxW,UAAA,WAKAC,IAAA,WACA,OAAAlB,KAAAuC,SAEAlB,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAyW,EAAAxW,UAAA,SAKAC,IAAA,WACA,OAAAlB,KAAA+X,gBAAApR,OAEAtF,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAyW,EAAAxW,UAAA,YAKAC,IAAA,WAIA,OAHA,MAAAlB,KAAAgY,eACAhY,KAAAgY,aAAA,IAAwCd,GAExClX,KAAAgY,cAEA7W,IAAA,SAAAC,GACApB,KAAAgY,aAAA5W,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAyW,EAAAxW,UAAA,YAKAC,IAAA,WACA,OAAAlB,KAAA8X,kBAAApV,UAEArB,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAyW,EAAAxW,UAAA,SAKAC,IAAA,WAIA,OAHA,MAAAlB,KAAAiY,iBAAA,qBAAAjY,KAAAiY,kBACAjY,KAAAiY,gBAAA,IAA2CzD,EAAwBxU,OAEnEA,KAAAiY,iBAEA5W,YAAA,EACAC,cAAA,IAOAmW,EAAAxW,UAAAiX,SAAA,WACA,OAAAlY,KAAA2X,UAMAF,EAAAxW,UAAAkX,iBAAA,SAAArY,EAAAsY,GACA,IAAArP,EAAA/I,KAAAiD,gBAAAnD,GAAA,GAGA,OAFAsY,EAAAtV,GAAAiG,EAAAjG,EACAsV,EAAAvV,EAAA7C,KAAAmD,aAAAmG,OAAA8O,EAAA,EACAA,GAOAX,EAAAxW,UAAAoX,gBAAA,SAAAT,GACA5X,KAAA4X,WACA5X,KAAAsY,MAAAC,YAAAX,EAAAW,YACAvY,KAAAsY,MAAAE,OAAAZ,EAAAY,OACAxY,KAAAsY,MAAAlW,KAAAwV,EAAAxV,KACApC,KAAAsY,MAAA1V,OAAAgV,EAAAhV,QAMA6U,EAAAxW,UAAAqJ,WAAA,WACAtK,KAAA+X,gBAAA,IAAmCpQ,EAAA,KACnC3H,KAAAuC,QAAA,IAA2BwC,EAAA,KAC3B/E,KAAAsY,MAAA,IAAAG,EAAAzY,KAAAuP,aACAvP,KAAAuC,QAAAmW,iBAAA,IAA4C3T,EAAA,KAAuB/E,UAAAsY,OACnEtY,KAAA2Y,UAAA,IAA6BC,EAAA,KAAS,GACtC5Y,KAAAuC,QAAA4C,MAAAsC,SAAAzH,KAAAO,qBAAAoG,MAAA3G,KAAA2Y,WACA3Y,KAAAuC,QAAA4C,MAAAsC,SAAAzH,KAAAO,qBAAAuK,KAAA,IAAwEC,EAAA,KAAO/K,KAAAO,qBAAAuW,QAC/E9W,KAAAuC,QAAA4C,MAAAsC,SAAAzH,KAAAO,qBAAAsY,KAAA7Y,KAAA+X,kBAUAN,EAAAxW,UAAA0K,kBAAA,SAAAjJ,EAAA5C,EAAAgZ,GACA,IAAAC,EAAA/Y,KAAAgZ,qBAAAtW,EAAA5C,GAAA,EAAAgZ,GACAG,EAAAjZ,KAAAgZ,qBAAAtW,EAAA5C,GAAA,EAAAgZ,GACArE,EAAAsE,EAAAlV,OAAA,GAAAoV,EAAApV,OAAA,EACA,OAAA4Q,GAYAgD,EAAAxW,UAAA+X,qBAAA,SAAAtW,EAAA5C,EAAAoZ,EAAAJ,GACA,IAAAK,EAAA,GAuBA,OAtBAD,IACAlZ,KAAAgW,SAAAoD,0BAAA,MAAA1W,EAAAsT,SAAAK,OAAAvW,MACA4C,EAAAsT,SAAAK,OAAAvW,GAAAgZ,gBAAApW,EAAAsT,SAAAK,OAAAvW,GAAAgZ,gBACAK,EAAA1T,KAAA/C,EAAAsT,SAAAK,OAAAvW,IAGAE,KAAAgW,SAAAqD,6BAAA,MAAA3W,EAAAsT,SAAAW,UAAA7W,MACA4C,EAAAsT,SAAAW,UAAA7W,GAAAgZ,gBAAApW,EAAAsT,SAAAW,UAAA7W,GAAAgZ,gBACAK,EAAA1T,KAAA/C,EAAAsT,SAAAW,UAAA7W,IAGAE,KAAAgW,SAAAsD,2BAAA,MAAA5W,EAAAsT,SAAAD,QAAAjW,MACA4C,EAAAsT,SAAAD,QAAAjW,GAAAgZ,gBAAApW,EAAAsT,SAAAD,QAAAjW,GAAAgZ,gBACAK,EAAA1T,KAAA/C,EAAAsT,SAAAD,QAAAjW,IAGAE,KAAAgW,SAAAuD,4BAAA,MAAA7W,EAAAsT,SAAAQ,SAAA1W,MACA4C,EAAAsT,SAAAQ,SAAA1W,GAAAgZ,gBAAApW,EAAAsT,SAAAQ,SAAA1W,GAAAgZ,gBACAK,EAAA1T,KAAA/C,EAAAsT,SAAAQ,SAAA1W,KAIAqZ,GAOA1B,EAAAxW,UAAAY,IAAA,SAAA/B,GACA,wBAAAA,EAAA,CACA,IAAA0Z,EAAA,IAA6BC,EAAA,KAE7B,OADAzZ,KAAA6B,IAAA2X,GACAA,EAGA,IAAAE,EAAA1Z,KAAA2Z,cAAA7Z,GACAE,KAAA2X,SAAAlS,KAAA3F,GACAE,KAAA+X,gBAAAlW,IAAA6X,GACA5Z,EAAAmL,WAAAjL,MACAF,EAAAoL,gBACAlL,KAAA4Z,gBAAA9Z,IAOA2X,EAAAxW,UAAA0Y,cAAA,SAAA7Z,GAIA,IAHA,IAAA+Z,EAAA,IAAqBjU,EAAA,KAAkB9F,GACvC2U,GAAA,EACAnS,EAAAtC,KAAAwC,OACA4C,EAAA,EAA2BA,EAAA9C,EAAAC,QAAAsB,OAA2BuB,IAAA,CACtD,IAAA7C,EAAAD,EAAAC,QAAA6C,GACAqP,KAAAlS,EAAAkS,SAAA3U,GAEA,OAAA+Z,GAMApC,EAAAxW,UAAAwT,SAAA,SAAA3U,GACA,IAAAsF,EAAApF,KAAA4G,QAAA9G,GACA,UAAAsF,GAMAqS,EAAAxW,UAAA2F,QAAA,SAAA9G,GACA,QAAAsF,EAAA,EAA2BA,EAAApF,KAAA2X,SAAA9T,OAA8BuB,IACzD,GAAApF,KAAA2X,SAAAvS,KAAAtF,EACA,OAAAE,KAAA2X,SAAA/Q,QAAA9G,GAGA,IAAA4Z,EAAA,IAAoB9T,EAAA,KAAkB9F,GACtC,OAAAE,KAAA+X,gBAAAnR,QAAA8S,IAOAjC,EAAAxW,UAAA2Y,gBAAA,SAAA9Z,GAEA,IAAAga,EAAA,IAAuBvF,EAAkBzU,GACzCE,KAAA+Z,YAAAD,GACA,IAAAtX,EAAAxC,KAAAwC,OACAA,EAAAE,SAAAoU,MAAAiD,YAAAD,GACA9Z,KAAA2Y,UAAAqB,SAAAha,KAAA2G,OAOA8Q,EAAAxW,UAAA8Y,YAAA,SAAAD,KAGArC,EAAAxW,UAAAgC,gBAAA,SAAAsL,EAAAC,EAAAC,GACA,GAAAF,aAA4BkL,EAAA,MAAO,mBAAAjL,EAAA,CACnC,IAAAjE,OAAA,EACA0P,EAAAja,KAAAwC,OAAAE,SAEA,OADA6H,EAAAvK,KAAAiD,gBAAAgX,EAAA1L,EAAAC,GACAjE,EAGAgE,IACAC,IACAC,IACA,IAAA1F,EAAA,IAA6BD,EAAA,KAAU,SACvCC,EAAAO,OAAA,EAAAtJ,KAAAmD,aAAAf,KAAAkH,OAAAtJ,KAAAmD,aAAA+W,gBAAA5Q,OACAP,EAAAM,MAAA,EAAArJ,KAAAmD,aAAAf,KAAAiH,MAAArJ,KAAAmD,aAAA+W,gBAAA7Q,MACA,IAAA/F,EAAAtD,KAAAma,mBAAA5L,EAAAC,EAAAC,GACA2L,EAAApa,KAAAqa,mBAAA9L,EAAAC,EAAAC,GACAjL,EAAAxD,KAAAsa,oBAAA/L,EAAAC,EAAAC,GACAhL,EAAAzD,KAAAua,sBAAAhM,EAAAC,EAAAC,GAKA,OAJA1F,EAAAjG,GAAAQ,EACAyF,EAAAlG,GAAAuX,EACArR,EAAAM,OAAA/F,EAAAE,EACAuF,EAAAO,QAAA8Q,EAAA3W,EACAsF,GAOA0O,EAAAxW,UAAAkZ,mBAAA,SAAAzX,EAAA5C,EAAA0a,GACA,SAAA9X,EACA,UAAA7B,MAAA,kCAEA,SAAAf,EACA,UAAAe,MAAA,8BAEA,IAAAO,EAAA,EAAApB,KAAAmD,aAAAD,QAAAI,KAAA,EACAmX,EAAA,MAAAza,KAAAgW,SAAAD,QAAAjW,GAAAE,KAAAgW,SAAAD,QAAAjW,GAAAuJ,MAAA,EACAqR,EAAA,MAAAhY,EAAAsT,SAAAD,QAAAjW,GAAA4C,EAAAsT,SAAAD,QAAAjW,GAAAuJ,MAAA,EAEA,OADAjI,GAAApB,KAAAgW,SAAA,0BAAA2E,KAAAC,IAAAH,EAAAC,GAAAD,EACArZ,GAMAqW,EAAAxW,UAAAoZ,mBAAA,SAAA3X,EAAA5C,EAAA0a,GACA,SAAA9X,EACA,UAAA7B,MAAA,kCAEA,SAAAf,EACA,UAAAe,MAAA,8BAEA,IAAAO,EAAA,EAAApB,KAAAmD,aAAAD,QAAAK,IAAA,EACAsX,EAAA,MAAA7a,KAAAgW,SAAAK,OAAAvW,GAAAE,KAAAgW,SAAAK,OAAAvW,GAAAwJ,OAAA,EACAwR,EAAA,MAAApY,EAAAsT,SAAAK,OAAAvW,GAAA4C,EAAAsT,SAAAK,OAAAvW,GAAAwJ,OAAA,EAEA,OADAlI,GAAApB,KAAAgW,SAAA,yBAAA2E,KAAAC,IAAAC,EAAAC,GAAAD,EACAzZ,GAMAqW,EAAAxW,UAAAqZ,oBAAA,SAAA5X,EAAA5C,EAAA0a,GACA,SAAA9X,EACA,UAAA7B,MAAA,kCAEA,SAAAf,EACA,UAAAe,MAAA,8BAEA,IAAAO,EAAA,EAAApB,KAAAmD,aAAAD,QAAAM,MAAA,EACAiX,EAAA,MAAAza,KAAAgW,SAAAQ,SAAA1W,GAAAE,KAAAgW,SAAAQ,SAAA1W,GAAAuJ,MAAA,EACAqR,EAAA,MAAAhY,EAAAsT,SAAAQ,SAAA1W,GAAA4C,EAAAsT,SAAAQ,SAAA1W,GAAAuJ,MAAA,EAEA,OADAjI,GAAApB,KAAAgW,SAAA,2BAAA2E,KAAAC,IAAAH,EAAAC,GAAAD,EACArZ,GAMAqW,EAAAxW,UAAAsZ,sBAAA,SAAA7X,EAAA5C,EAAA0a,GACA,SAAA9X,EACA,UAAA7B,MAAA,kCAEA,SAAAf,EACA,UAAAe,MAAA,8BAEA,IAAAO,EAAA,EAAApB,KAAAmD,aAAAD,QAAAO,OAAA,EACAoX,EAAA,MAAA7a,KAAAgW,SAAAW,UAAA7W,GAAAE,KAAAgW,SAAAW,UAAA7W,GAAAwJ,OAAA,EACAwR,EAAA,MAAApY,EAAAsT,SAAAW,UAAA7W,GAAA4C,EAAAsT,SAAAW,UAAA7W,GAAAwJ,OAAA,EAEA,OADAlI,GAAApB,KAAAgW,SAAA,4BAAA2E,KAAAC,IAAAC,EAAAC,GAAAD,EACAzZ,GAMAqW,EAAAxW,UAAAyT,OAAA,SAAA5U,GACA,SAAAA,EACA,MAAAe,MAAA,iCAEA,IAAAuE,EAAApF,KAAA2X,SAAA/Q,QAAA9G,GACAE,KAAA+X,gBAAAgD,SAAA3V,GAEA,IADA,IAAA4V,EAAA,GACAC,EAAA,EAAuBA,EAAA7V,EAAW6V,IAClCD,EAAAvV,KAAAzF,KAAA2X,SAAAsD,IAEA,IAAAA,EAAA7V,EAAA,EAA+B6V,EAAAjb,KAAA2X,SAAA9T,OAA0BoX,IACzDD,EAAAvV,KAAAzF,KAAA2X,SAAAsD,IAEAjb,KAAA2X,SAAAqD,GAMAvD,EAAAxW,UAAAia,kBAAA,SAAAC,EAAAC,EAAA9C,GACA,IAAAvP,EAAA,IAAyBD,EAAA,KAAUwP,EAAA1V,OAAA0V,EAAAlW,MACnC+Y,EAAAhW,MAAAsC,SAAAzH,KAAAO,qBAAA8a,SAAqE1T,EAAA,KAAQ2T,cAAAvS,IAC7E,IAAAyP,EAAA,EACAA,EAAiB+C,EAAoBC,aAAAlD,EAAAE,OACrC,IAAAiD,EAAA,IAAwB7C,EAAA,KAASJ,GACjC2C,EAAAhW,MAAAsC,SAAAzH,KAAAO,qBAAAiY,OAAAiD,IAOAhE,EAAAxW,UAAAoJ,UAAA,SAAAiO,EAAAoD,GACA,IAAAnQ,EAAAmQ,EAAAhZ,SACA1C,KAAAkb,kBAAAlb,KAAAuC,QAAAgJ,EAAApI,aAAAmV,IAMAb,EAAAxW,UAAA4K,cAAA,SAAA/L,EAAA6B,EAAAe,EAAAoW,GACA,IAAAC,EAAA/Y,KAAAgZ,qBAAAtW,EAAA5C,GAAA,EAAAgZ,GACAG,EAAAjZ,KAAAgZ,qBAAAtW,EAAA5C,GAAA,EAAAgZ,GAEA9Y,KAAA2b,oBAAAha,EAAAe,EAAAqW,GACA/Y,KAAA2b,oBAAAha,EAAAe,EAAAuW,IAWAxB,EAAAxW,UAAA0a,oBAAA,SAAAha,EAAAe,EAAAyW,GACA,SAAAA,KAAAtV,OAAA,EAEA,IADA,IAAA+X,EAAAzC,EAAAtV,OACAkC,EAAA,EAA2BA,EAAA6V,EAAS7V,IAAA,CACpC,IAAAiQ,EAAAmD,EAAApT,GACAiQ,EAAA1H,KAAA3M,EAAAe,KAIA+U,EAvdc,GA0ddgB,EAAA,WAMA,SAAAA,EAAA/V,GACA1C,KAAA6b,gBAAAnZ,EAAAS,aAAAoV,YACAvY,KAAA8b,WAAApZ,EAAAS,aAAAqV,OACAxY,KAAA+b,SAAArZ,EAAAS,aAAAf,KACApC,KAAAgc,WAAAtZ,EAAAS,aAAAP,OA2DA,OAzDA7B,OAAAC,eAAAyX,EAAAxX,UAAA,eAMAC,IAAA,WACA,OAAAlB,KAAA6b,iBAEA1a,IAAA,SAAAC,GACApB,KAAA6b,gBAAAza,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAyX,EAAAxX,UAAA,UAKAC,IAAA,WACA,OAAAlB,KAAA8b,YAEA3a,IAAA,SAAAC,GACApB,KAAA8b,WAAA1a,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAyX,EAAAxX,UAAA,QAKAC,IAAA,WACA,OAAAlB,KAAA+b,UAEA5a,IAAA,SAAAC,GACApB,KAAA+b,SAAA3a,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAyX,EAAAxX,UAAA,UAKAC,IAAA,WACA,OAAAlB,KAAAgc,YAEA7a,IAAA,SAAAC,GACApB,KAAAgc,WAAA5a,GAEAC,YAAA,EACAC,cAAA,IAEAmX,EArEA,GC9dI8C,EAAoB,WAMxB,SAAAU,EAAAvZ,GAKA1C,KAAAkc,SAAA,GAKAlc,KAAAO,qBAAA,IAAwCC,EAAA,KAIxCR,KAAAuP,YAAA7M,EAAA+G,QACAzJ,KAAAsK,aA+IA,OA7IAvJ,OAAAC,eAAAib,EAAAhb,UAAA,WAKAC,IAAA,WACA,OAAAlB,KAAAkc,UAEA7a,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAib,EAAAhb,UAAA,YAKAC,IAAA,WACA,OAAAlB,KAAAuP,aAEAlO,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAib,EAAAhb,UAAA,SAKAC,IAAA,WACA,OAAAlB,KAAAkc,SAAArY,QAEAxC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAib,EAAAhb,UAAA,WAKAC,IAAA,WACA,OAAAlB,KAAA8W,OAEAzV,YAAA,EACAC,cAAA,IAOA2a,EAAAhb,UAAAqJ,WAAA,WACAtK,KAAAmc,aAAA,IAAgCvD,EAAA,KAAS,GACzC5Y,KAAA8X,kBAAA,IAAqCnQ,EAAA,KACrC3H,KAAA8W,MAAA,IAAyB/R,EAAA,KACzB/E,KAAA8W,MAAAzM,UAAA,IAAmCtF,EAAA,KAAiC/E,MACpEA,KAAA8W,MAAA3R,MAAAsC,SAAAzH,KAAAO,qBAAAuK,KAAA,IAAsEC,EAAA,KAAO,UAC7E/K,KAAA8W,MAAA3R,MAAAsC,SAAAzH,KAAAO,qBAAAsY,KAAA7Y,KAAA8X,mBACA9X,KAAA8W,MAAA3R,MAAAsC,SAAAzH,KAAAO,qBAAAoG,MAAA3G,KAAAmc,cACAnc,KAAA8W,MAAA3R,MAAAsC,SAAAzH,KAAAO,qBAAAgH,UAAA,IAA2ExC,EAAA,MAC3E/E,KAAAqY,gBAAArY,KAAA8W,MAAA9W,KAAAuP,YAAApM,eAMA8Y,EAAAhb,UAAAmb,qBAAA,SAAAhX,GACA,GAAAA,EAAA,GAAAA,GAAApF,KAAA2G,MACA,UAAA9F,MAAA,8BAEA,OAAAb,KAAAkc,SAAA9W,IAMA6W,EAAAhb,UAAAoX,gBAAA,SAAA8C,EAAAhY,GAOA,IAAA4F,EAAA,IAAyBD,EAAA,KAAU,IAAKA,EAAA,KAAM3F,EAAAf,MAC9C+Y,EAAAhW,MAAAsC,SAAAzH,KAAAO,qBAAA8a,SAAqE1T,EAAA,KAAQ2T,cAAAvS,KAM7EkT,EAAAhb,UAAAY,IAAA,SAAAU,GACA,wBAAAA,EAAA,CACA,IAAA8Z,EAAA,IAAgC7E,EAAUxX,KAAAuP,aAE1C,OADAvP,KAAA6B,IAAAwa,GACAA,EAMA,IAAA3C,EAAA1Z,KAAAsc,aAAA/Z,GAIA,OAHAvC,KAAAkc,SAAAzW,KAAAlD,GACAA,EAAAC,OAAAxC,KACAA,KAAA8X,kBAAAjW,IAAA6X,GACA1Z,KAAAkc,SAAAtV,QAAArE,IAOA0Z,EAAAhb,UAAAqb,aAAA,SAAA/Z,GACA,IAAAmX,EAAA,IAAoB9T,EAAA,KAAkBrD,GACtCvC,KAAA8X,kBAAArD,SAAAiF,GAIA,OAAAA,GAMAuC,EAAAhb,UAAAsb,WAAA,WACA,IAAA5V,EAAA,EAEA,OADA3G,KAAAkc,SAAAM,QAAA,SAAAC,GAA4C,OAAA9V,GAAA8V,EAAA9V,QAC5CA,GAOAsV,EAAAhb,UAAAoJ,UAAA,WACArK,KAAAmc,aAAAnC,SAAAha,KAAAuc,cAQAN,EAAAT,aAAA,GACAS,EApKwB,GCLpBS,EAAyB,WAM7B,SAAAC,EAAAja,GAKA1C,KAAA4c,uBAAA,IAA0C9V,EAAA,KAM1C9G,KAAA6c,wBAAuC9H,EAAA,KAAkB+H,SACzD9c,KAAA0C,WAwJA,OAtJA3B,OAAAC,eAAA2b,EAAA1b,UAAA,SAMAC,IAAA,WACA,OAAAlB,KAAAuc,cAEAlb,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA2b,EAAA1b,UAAA,uBAKAC,IAAA,WACA,OAAAlB,KAAA4c,wBAEAvb,YAAA,EACAC,cAAA,IAEAqb,EAAA1b,UAAAY,IAAA,SAAA/B,GACA,wBAAAA,EAAA,CACA,IAAA0Z,EAAA,IAA6BC,EAAA,KAE7B,OADAzZ,KAAA6B,IAAA2X,GACAA,EAGA,IAAAjX,EAAAvC,KAAA+c,iBACAxa,EAAAY,aAAAoV,cAAAvY,KAAA6c,0BACAta,EAAAvC,KAAA0C,SAAAwZ,SAAAra,MACAU,EAAAY,aAAAoV,YAAAvY,KAAA0C,SAAAS,aAAAoV,aAEAhW,EAAAV,IAAA/B,IAOA6c,EAAA1b,UAAA8b,eAAA,WACA,IAAAza,EAAAtC,KAAA0C,SAAAwZ,SACA,IAAA5Z,EAAAC,QAAAsB,QACAvB,EAAAT,MAEA,IAAAU,EAAAD,EAAAC,QAAAD,EAAAC,QAAAsB,OAAA,GACA,OAAAtB,GAMAoa,EAAA1b,UAAA8Y,YAAA,SAAAD,KAUA6C,EAAA1b,UAAAsb,WAAA,WAGA,IAFA,IAAAja,EAAAtC,KAAA0C,SAAAwZ,SACAvV,EAAA,EACAvB,EAAA,EAA2BA,EAAA9C,EAAAC,QAAAsB,OAA2BuB,IACtDuB,GAAArE,EAAAC,QAAA6C,GAAAuB,MAEA,OAAAA,GAMAgW,EAAA1b,UAAA+b,eAAA,SAAA5X,GACA,OAAApF,KAAAid,QAAA7X,IAMAuX,EAAA1b,UAAAgc,QAAA,SAAA7X,GACA,GAAAA,EAAA,GAAAA,GAAApF,KAAA2G,MACA,MAAA9F,MAAA,mEAOA,IALA,IAAAf,EAAA,KACAod,EAAA,EACAf,EAAA,EACAgB,EAAA,EACAtZ,EAAA7D,KAAA0C,SAAAwZ,SAAAvV,MACAZ,EAAA,EAAuBA,EAAAlC,EAAYkC,IAAA,CACnC,IAAAxD,EAAAvC,KAAA0C,SAAAwZ,SAAA3Z,QAAAwD,GAIA,GAHAoW,EAAA5Z,EAAAoE,MACAwW,EAAA/X,EAAA8X,EAEA9X,GAAA8X,GAAAC,EAAAhB,EAAA,CACArc,EAAAyC,EAAA2V,WAAAiF,GACA,MAEAD,GAAAf,EAEA,OAAArc,GAMA6c,EAAA1b,UAAA2F,QAAA,SAAA9G,GACA,IAAAsF,GAAA,EACA,SAAAtF,EACA,UAAAe,MAAA,+BAIA,IADA,IAAAuc,EAAA,EACArX,EAAA,EAAA6V,EAAA5b,KAAA0C,SAAAwZ,SAAAvV,MAA+DZ,EAAA6V,EAAS7V,IAAA,CACxE,IAAAxD,EAAAvC,KAAA0C,SAAAwZ,SAAAE,qBAAArW,GAEA,GADAX,EAAA7C,EAAAqE,QAAA9G,GACAsF,GAAA,GACAA,GAAAgY,EACA,MAGAhY,GAAA,EAEAgY,GAAA7a,EAAAoE,MAGA,OAAAvB,GAMAuX,EAAA1b,UAAAyT,OAAA,SAAA5U,GACA,SAAAA,EACA,MAAAe,MAAA,iCAIA,IAFA,IAAA0B,EAAA,KAEAwD,EAAA,EAAAsX,EAAArd,KAAA0C,SAAAwZ,SAAAvV,MAA6DZ,EAAAsX,EAAWtX,IAExE,GADAxD,EAAAvC,KAAA0C,SAAAwZ,SAAAE,qBAAArW,GACAxD,EAAAuU,MAAArC,SAAA3U,GAAA,CACAyC,EAAAuU,MAAApC,OAAA5U,GACA,MAGA,OAAAyC,GAEAoa,EA1K6B,GCCzBW,EAAkB,WAMtB,SAAAC,IACAvd,KAAAwd,iBAAA,GACAxd,KAAAyd,kBAAA,IAAqC3W,EAAA,KAqErC,OA9DAyW,EAAAtc,UAAAyc,OAAA,SAAArY,GACA,IAAAkF,EAAA,KACAoT,EAAA3d,KAAA4d,SAAAvY,GAQA,OAPA,MAAAsY,EACAA,EAAA3d,KAAA6d,iBAEAF,EAAA9Z,OAAA,IACA0G,EAAAoT,EAAA,IAEAA,EAAAlY,KAAAJ,GACAkF,GAOAgT,EAAAtc,UAAA4c,eAAA,WACA,IAAAF,EAAA,GAEA,OADA3d,KAAAwd,iBAAA/X,KAAAkY,GACAA,GAMAJ,EAAAtc,UAAA2c,SAAA,SAAArT,GACA,IAAAoT,EAAA,KACA,UAAApT,EAEA,IADA,IAAAqR,EAAA5b,KAAAwd,iBAAA3Z,OACAkC,EAAA,EAA2BA,EAAA6V,EAAS7V,IAAA,CACpC,GAAA/F,KAAAwd,iBAAA3Z,OAAA,GACA,IAAAia,EAAA9d,KAAAwd,iBAAAzX,GACA,GAAA+X,EAAAja,OAAA,GACA,IAAAka,EAAAD,EAAA,GACA,GAAAvT,EAAAyT,SAAAD,GAAA,CACAJ,EAAAG,EACA,YAIA9d,KAAAie,YAAAH,GAGAlC,EAAA5b,KAAAwd,iBAAA3Z,OAGA,OAAA8Z,GAKAJ,EAAAtc,UAAAgd,YAAA,SAAAN,GACA,UAAAA,EAAA,CACA,IAAAvY,EAAApF,KAAAwd,iBAAA5W,QAAA+W,GACA3d,KAAAwd,iBAAAU,MAAA9Y,IAAA,KAGAmY,EAAAtc,UAAAgQ,QAAA,WACAjR,KAAAyd,uBAAAjS,EACAxL,KAAAwd,sBAAAhS,GAEA+R,EA7EsB,uCCRtBxT,EAAA/F,EAAAgG,EAAA,sBAAAoJ,IAAA,IAAI+K,EAAyB,WAC7B,IAAApa,EAAA,SAAAC,EAAAC,GAIA,OAHAF,EAAAhD,OAAAmD,gBACA,CAAcC,UAAA,cAAgBC,OAAA,SAAAJ,EAAAC,GAAsCD,EAAAG,UAAAF,IACpE,SAAAD,EAAAC,GAA6B,QAAAI,KAAAJ,IAAAK,eAAAD,KAAAL,EAAAK,GAAAJ,EAAAI,KAC7BN,EAAAC,EAAAC,IAEA,gBAAAD,EAAAC,GAEA,SAAAM,IAAuBvE,KAAAc,YAAAkD,EADvBD,EAAAC,EAAAC,GAEAD,EAAA/C,UAAA,OAAAgD,EAAAlD,OAAAyD,OAAAP,IAAAM,EAAAtD,UAAAgD,EAAAhD,UAAA,IAAAsD,IAV6B,GA6CzB6O,EAAW,SAAA3O,GAEf,SAAA2Z,EAAAC,GACA,IAAA1Z,EAAAF,EAAAG,KAAA5E,YAcA,GARA2E,EAAA2Z,cAAA,GAMA3Z,EAAA2K,aAAA,KACA3K,EAAAF,EAAAG,KAAA5E,KAAA2E,IAAA3E,MACA,IAAAqe,IAAA,IAAAA,GAAA,qBAAAA,EAAA,CACA,IAAAhL,EAAA,IAA8BzD,EAC9BjL,EAAA8O,wBAAAJ,GACA,IAAAjN,EAAA,IAAiCmY,EAAA,KACjCnY,EAAAiY,YACAjY,EAAA1D,SAAAiC,EACAA,EAAA+O,cAAAtN,GACA,IAAAyN,EAAA,IAA8B2K,EAAA,KAC9B7Z,EAAAiP,WAAAC,GACAR,EAAAxR,IAAAgS,GACAA,EAAAxD,UAAA,EACA1L,EAAAmT,kBAAA,IAA0CyD,EAAoB5W,GAC9DA,EAAA8Z,uBAAA,IAA+C/B,EAAyB/X,GACxEkP,EAAAiD,MAAAnS,EAAAmT,uBAGAsG,EAAAM,gBAAA,IAA8CpB,EAC9C3Y,EAAA7D,aAAA,GAEA,OAAA6D,EA8PA,OAjSIwZ,EAASC,EAAA3Z,GAqCb1D,OAAAC,eAAAod,EAAA,eAMAld,IAAA,WAIA,OAHA,MAAAlB,KAAA2e,sBACA3e,KAAA2e,oBAAA,IAA+CC,EAAA,KAAgBC,EAAA,KAAaC,UAAA,IAE5E9e,KAAA2e,qBAEAtd,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAod,EAAAnd,UAAA,YAKAC,IAAA,WACA,OAAAlB,KAAA8X,mBAEAzW,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAod,EAAAnd,UAAA,gBAKAC,IAAA,WAIA,OAHA,MAAAlB,KAAA4X,WACA5X,KAAA4X,SAAA,IAAoCmH,EAAA,KAAe/e,KAAAse,gBAEnDte,KAAA4X,UAiCAzW,IAAA,SAAAC,GACApB,KAAA4X,SAAAxW,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAod,EAAAnd,UAAA,SAkBAC,IAAA,WACA,OAAAlB,KAAAye,wBAEApd,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAod,EAAA,SAKAld,IAAA,WACA,2BAAAkd,EAAAM,iBAAA,MAAAN,EAAAM,gBACA,IAA2BpB,EAE3Bc,EAAAM,iBAMAvd,IAAA,SAAAC,GACApB,KAAA0e,gBAAAtd,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAod,EAAA,eAKAld,IAAA,WACA,OAAAlB,KAAAgf,gBAMA7d,IAAA,SAAAC,GACApB,KAAAgf,eAAA5d,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAod,EAAAnd,UAAA,cAMAC,IAAA,WACA,OAAAlB,KAAAC,gBAAwCC,EAAA,KAAaC,KAAAH,KAAAC,gBAAkCC,EAAA,KAAa+e,MACpGjf,KAAAC,gBAA2CC,EAAA,KAAagf,UACxDlf,KAAAC,cAGuBC,EAAA,KAAaC,KAGpCgB,IAAA,SAAAC,GACAA,IAA2BlB,EAAA,KAAaC,KAAAiB,IAAqBlB,EAAA,KAAa+e,MAC1E7d,IAA2BlB,EAAA,KAAagf,UACxClf,KAAAC,cAAAmB,EAGApB,KAAAC,cAAqCC,EAAA,KAAaC,KAGlDkB,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAod,EAAAnd,UAAA,YAMAC,IAAA,WAIA,OAHA,MAAAlB,KAAAgY,eACAhY,KAAAgY,aAAA,IAAwCrD,GAExC3U,KAAAgY,cAEA7W,IAAA,SAAAC,GACApB,KAAAgY,aAAA5W,GAEAC,YAAA,EACAC,cAAA,IAEA8c,EAAAnd,UAAAqT,QAAA,SAAAjF,EAAAb,EAAAC,GAEA,GADAzO,KAAAmf,qBACA,OAAA9P,EACA,UAAAxO,MAAA,kCAEAb,KAAAsP,aAAAD,EACA,IAAAqM,EAAA,IAAyBtM,EAASC,GAElC,GADAqM,EAAAhZ,SAAA1C,KACA,mBAAAwO,GAAA,qBAAAC,EACA,OAAAzO,KAAAoG,WAAAoH,KAAAkO,GAGA1b,KAAAoG,WAAAoH,KAAAkO,EAAAlN,IAOA4P,EAAAnd,UAAAke,mBAAA,WACA,IAAAnf,KAAA8W,MAAAnQ,OACA3G,KAAA8W,MAAAjV,OAsBAuc,EAAAnd,UAAAgQ,QAAA,WACAjR,KAAA6T,aAAArI,EACAxL,KAAAyC,gBAAA+I,EACAxL,KAAAof,sBAAA5T,EACAxL,KAAAye,4BAAAjT,EACAxL,KAAAmT,oBAAA3H,EACAxL,KAAAmD,kBAAAqI,EACAxL,KAAAgY,kBAAAxM,EACAxL,KAAAC,mBAAAuL,EACAxL,KAAA8X,uBAAAtM,EACA4S,EAAAiB,MAAApO,UACAjR,KAAAoG,WAAAkZ,WAAArO,UACAmN,EAAAiB,WAAA7T,EACAxL,KAAAsP,aAAA2B,WAOAmN,EAAAO,oBAAA,KAMAP,EAAAY,gBAAA,EACAZ,EAlSe,CAmSbnL,wCChVFlJ,EAAA/F,EAAAgG,EAAA,sBAAAuV,IAAAxV,EAAA/F,EAAAgG,EAAA,sBAAAwV,IAAA,IA2gBOA,EA3gBPC,EAAA1V,EAAA,QAAA2V,EAAA3V,EAAA,QAAA4V,EAAA5V,EAAA,QAMAwV,EAAA,WAMA,SAAAA,IAMAvf,KAAA4f,wBAAA,EAmXA,OAhXAL,EAAAte,UAAAuH,OAAA,SAAA+F,EAAAC,EAAAC,EAAAoR,EAAAC,EAAAC,EAAAC,GACA,GAAAH,aAA4BJ,EAAA,KAAU,CACtCzf,KAAAsK,WAAAiE,EAAAC,EAAAC,EAAAoR,EAAAC,GACA9f,KAAA4f,uBAAAG,EACA/f,KAAAigB,WAAAD,EACA,IAAAzV,EAAAvK,KAAAkgB,WAEA,OADAlgB,KAAAmgB,QACA5V,EAGAvK,KAAAsK,WAAAiE,EAAAC,EAAAC,EAAAoR,GACA7f,KAAA4f,uBAAAE,EACA9f,KAAAigB,WAAAF,EACAxV,EAAAvK,KAAAkgB,WAEA,OADAlgB,KAAAmgB,QACA5V,GAGAgV,EAAAte,UAAAqJ,WAAA,SAAA3B,EAAAC,EAAAwX,EAAAC,EAAAC,GACA,qBAAAA,EAAA,CACA,SAAA3X,EACA,UAAA9H,MAAA,8BAEA,SAAA+H,EACA,UAAA/H,MAAA,8BAEAb,KAAA2I,OACA3I,KAAA4I,OACA5I,KAAAogB,SACApgB,KAAAoC,KAAA,IAA4Bqd,EAAA,KAAKY,EAAAhX,MAAAgX,EAAA/W,QACjCtJ,KAAAugB,UAAAF,EACArgB,KAAAsgB,aACAtgB,KAAAwgB,OAAA,IAA8Bb,EAAA,KAAehX,QAG7C3I,KAAAsK,WAAA3B,EAAAC,EAAAwX,EAAA,IAAoDX,EAAA,KAAU,IAAKA,EAAA,KAAM,KAAAY,GAAA,IAOzEd,EAAAte,UAAAkf,MAAA,WACAngB,KAAA4I,KAAA,KACA5I,KAAAogB,OAAA,KACApgB,KAAAwgB,OAAAC,QACAzgB,KAAAwgB,OAAA,KACAxgB,KAAA2I,KAAA,MAMA4W,EAAAte,UAAAif,SAAA,WACA,IAAA3V,EAAA,IAAAmW,EACAC,EAAA,IAAAD,EACAzX,EAAA,GACA2X,EAAA5gB,KAAAwgB,OAAAK,WACAC,EAAA9gB,KAAA+gB,eAAA,GACA,YAAAH,EAAA,CAEA,GADAD,EAAA3gB,KAAAghB,WAAAJ,EAAAE,GACA,OAAAH,GAAA,qBAAAA,EAAA,CACA,IAAAM,EAAA,EAEAC,EAAAlhB,KAAAmhB,aAAA5W,EAAAoW,EAAA1X,EAAAgY,GAEAG,EAAAF,EAAAE,QAEA,GADAH,EAAAC,EAAAG,aACAD,EAAA,CACAphB,KAAAwgB,OAAAc,KAAAL,GACA,OAMAjhB,KAAAwgB,OAAAe,WACAX,EAAA5gB,KAAAwgB,OAAAK,WACAC,EAAA9gB,KAAA+gB,eAAA,GAGA,OADA/gB,KAAAwhB,eAAAjX,EAAAtB,GACAsB,GAMAgV,EAAAte,UAAA8f,cAAA,SAAAU,GACA,IAAAX,EAAA,EAKA,OAJA,MAAA9gB,KAAAogB,SACAU,EAAA,EAAA9gB,KAAAogB,OAAAsB,gBAAA1hB,KAAAogB,OAAAuB,gBACAb,EAAA9gB,KAAAoC,KAAAiH,MAAA,EAAAsR,KAAAiH,IAAA5hB,KAAAoC,KAAAiH,MAAAyX,MAEAA,GAMAvB,EAAAte,UAAA4gB,cAAA,WACA,IAAAvY,EAAAtJ,KAAA4I,KAAAU,OAIA,OAHA,MAAAtJ,KAAAogB,QAAA,IAAApgB,KAAAogB,OAAA0B,cACAxY,EAAAtJ,KAAAogB,OAAA0B,YAAA9hB,KAAA4I,KAAAU,QAEAA,GAMAiW,EAAAte,UAAA8gB,aAAA,SAAAnB,GACA,IAAAvX,EAAArJ,KAAA4I,KAAAmZ,aAAAnB,EAAA5gB,KAAAogB,QACA,OAAA/W,GAOAkW,EAAAte,UAAA+f,WAAA,SAAAJ,EAAAE,GACA,IAAAH,EAAA,IAAAD,EACAC,EAAAqB,iBAAAhiB,KAAA6hB,gBACA,IAAA5Y,EAAA,GACAgZ,EAAAjiB,KAAAoC,KAAAiH,MACA6Y,EAAAliB,KAAA+hB,aAAAnB,GAAAE,EACAqB,EAAA3C,EAAA4C,mBACAC,GAAA,EAEA,GAAAJ,GAAA,GAAAtH,KAAA2H,MAAAJ,IAAAvH,KAAA2H,MAAAL,GACAjiB,KAAAuiB,gBAAA5B,EAAA1X,EAAA2X,EAAAsB,EAAA1C,EAAAgD,aAAAL,OAEA,CACA,IAAAM,EAAA,GACAC,EAAA,GACAR,EAAApB,EACA,IAAA6B,EAAA7B,EACAN,EAAA,IAA6Bb,EAAA,KAAeiB,GAC5CgC,EAAApC,EAAAqC,WAEAD,EAAA/e,SAAA2c,EAAA3c,QACA,MAAA+e,IACAF,GAAAE,EACAH,GAAAG,EACApC,EAAAnQ,UAAA,EACAuS,EAAApC,EAAAqC,YAGA,YAAAD,EAAA,CACAF,GAAAE,EACA,IAAAE,EAAA9iB,KAAA+hB,aAAAW,EAAAK,YAAAJ,EAKA,GAJA,MAAAD,EAAAK,aACAL,EAAA,GACAI,EAAA,GAEAA,EAAAb,EAAA,CACA,GAAAjiB,KAAAgjB,gBAA+CtD,EAAA,KAAezI,KAC9D,MAEA,GAAAyL,EAAA7e,SAAA+e,EAAA/e,OAAA,CAEA,GAAA7D,KAAAgjB,gBAAmDtD,EAAA,KAAeuD,SAAA,CAClEtC,EAAAuC,cAAAtC,EAAAuC,UAAA3C,EAAAnQ,UACA,MAEA,OAAAqS,EAAA7e,OAAA,CACA4e,GAAAG,EACA,MAGAP,GAAA,EACAK,EAAA,GACAE,EAAApC,EAAA4C,OAAAL,WACA,SAYA,GARA/iB,KAAA+hB,aAAAa,EAAAG,YAAAd,EACAjiB,KAAAogB,OAAAiD,SAAmD3D,EAAA,KAAe4D,UAGlE,qBAAAtjB,KAAAogB,QAAA,OAAApgB,KAAAogB,SACApgB,KAAAogB,OAAAiD,SAAuD3D,EAAA,KAAe6D,MAGtEvjB,KAAAgjB,gBAAmDtD,EAAA,KAAe4D,WAAAjB,EA6BlEA,GAAA,EACAK,EAAA,GACAA,GAAAD,EAAAM,WACAH,EAAApC,EAAA4C,OAAAL,eAhCkE,CAClE,IAAAS,EAAAf,EAAAM,WAOA,MAAAS,GACAxjB,KAAAuiB,gBAAA5B,EAAA1X,EAAAua,EAAAtB,EAAA1C,EAAAiE,YAAAtB,GAEAniB,KAAA4f,yBACAqC,EAAAjiB,KAAAigB,WAAA5W,OAEAqZ,EAAA,GACAD,EAAA,GACAP,EAAA,EACAS,EAAA,EACAG,EAAA,EACAX,EAAA3C,EAAAvI,KAKA2L,EAAA,EAAAA,EAAApC,EAAAqC,WAEAR,GAAA,QAYAI,GAAAG,EACAV,EAAAY,EACAT,GACA7B,EAAA6B,WACAO,EAAApC,EAAAqC,aAIArC,EAAAc,OACAsB,EAAApC,EAAA4C,OAAAL,YAGA,GAAAN,EAAA5e,OAAA,GACA2f,EAAAf,EAAAM,WACA/iB,KAAAuiB,gBAAA5B,EAAA1X,EAAAua,EAAAtB,EAAA1C,EAAAgD,aAAAhD,EAAAkE,mBAEAlD,EAAAC,QAEAE,EAAAgD,YAAA,GACA,QAAAve,EAAA,EAA2BA,EAAA6D,EAAApF,OAAsBuB,IACjDub,EAAAgD,YAAAle,KAAAwD,EAAA7D,IAGA,OADA6D,EAAA,GACA0X,GAMApB,EAAAte,UAAAshB,gBAAA,SAAA5B,EAAA1X,EAAA2X,EAAAsB,EAAA0B,GACA,IAAAjV,EAAA,IAAAkV,EACAlV,EAAAhG,KAAAiY,EACAjS,EAAAtF,MAAA6Y,EACAvT,EAAAwT,SAAAyB,EACA3a,EAAAxD,KAAAkJ,GACA,IAAAvM,EAAAue,EAAAmD,WACA1hB,EAAAkH,QAAAtJ,KAAA6hB,gBACAzf,EAAAiH,MAAAsR,KAAAC,IAAAxY,EAAAiH,MAAA6Y,GACAvB,EAAAve,QAMAmd,EAAAte,UAAAkgB,aAAA,SAAA5W,EAAAoW,EAAA1X,EACAoY,GACA,IAAAD,GAAA,EACA2C,EAAA,MAAA/jB,KAAAogB,SAAApgB,KAAAogB,OAAA4D,UACA1a,EAAAiB,EAAAuZ,WAAAxa,OACA2a,EAAAjkB,KAAAoC,KAAAkH,OAMA,GALAtJ,KAAAsgB,WAAA,GAAA2D,EAAAjkB,KAAAugB,UAAA1d,EAAA7C,KAAAsgB,aACA2D,EAAAjkB,KAAAugB,UAAA1d,EAAA7C,KAAAsgB,WACA2D,EAAAtJ,KAAAC,IAAAqJ,OAEA5C,EAAA,EACA,MAAAV,EAAA1X,MACA,QAAAlD,EAAA,EAAA6V,EAAA+E,EAAA1X,MAAApF,OAA0DkC,EAAA6V,EAAS7V,IAAA,CACnE,IAAAme,EAAA5a,EAAAqX,EAAAwD,WACA,KAAAD,GAAAD,MAAA,GAAAF,GA6BA,CACA3C,GAAA,EACA,MA9BA,IAAAzS,EAAAgS,EAAA1X,MAAAlD,GACAsb,GAAA1S,EAAAhG,KAAA9E,OACA8K,EAAA3O,KAAAokB,SAAAzV,EAAA,IAAA1F,EAAApF,QACAoF,EAAAxD,KAAAkJ,GAEA,IAAAvM,EAAAmI,EAAAuZ,WACA1hB,EAAAiH,MAAAsR,KAAAC,IAAAxY,EAAAiH,MAAAsF,EAAAtF,OACAkB,EAAAnI,OAkBAkH,EAAA4a,EASA,GAAA5a,GAAAiB,EAAAnI,KAAAkH,OAAA,CACA,IAAA+a,EAAA9Z,EAAAuZ,WACAO,EAAA/a,SACAiB,EAAAnI,KAAAiiB,EAEA,OAAgBjD,UAAAC,gBAMhB9B,EAAAte,UAAAugB,eAAA,SAAAjX,EAAAtB,GACAsB,EAAAoZ,YAAA,GACA,QAAAve,EAAA,EAA2BA,EAAA6D,EAAApF,OAAsBuB,IACjDmF,EAAAoZ,YAAAle,KAAAwD,EAAA7D,IAEAmF,EAAAyX,iBAAAhiB,KAAA6hB,gBACA7hB,KAAAwgB,OAAA8D,MACA/Z,EAAA2Y,cAAAljB,KAAAwgB,OAAA+D,aAEAtb,EAAA,IAMAsW,EAAAte,UAAAmjB,SAAA,SAAAzV,EAAA8S,GACA,IAAAb,EAAAjS,EAAAhG,KACAuZ,EAAAvT,EAAAtF,MAEAsF,EAAAwT,SAAA3C,EAAA4C,mBACA,MAAApiB,KAAAogB,QAAApgB,KAAAogB,OAAAoE,YACqB7E,EAAA,KAAe8E,OAWpC,OAVA7D,IAAA8D,OAEA9D,EAAA/c,SAAA8K,EAAAhG,KAAA9E,SACAqe,EAAAliB,KAAA+hB,aAAAnB,IACAjS,EAAAwT,SAAA3C,EAAA4C,oBAAA,IACAF,GAAAliB,KAAA+gB,cAAAU,KAGA9S,EAAAhG,KAAAiY,EACAjS,EAAAtF,MAAA6Y,EACAvT,GAMA4Q,EAAAte,UAAA+hB,YAAA,WACA,IAAA2B,EAAA,MAAA3kB,KAAAogB,OAAApgB,KAAAogB,OAAAiD,SAAsE3D,EAAA,KAAe6D,KACrF,OAAAoB,GAEApF,EA/XA,GAmYAmB,EAAA,WACA,SAAAA,KAyEA,OAvEA3f,OAAAC,eAAA0f,EAAAzf,UAAA,aAMAC,IAAA,WACA,OAAAlB,KAAAkjB,eAEA7hB,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA0f,EAAAzf,UAAA,cAKAC,IAAA,WAIA,MAHA,qBAAAlB,KAAAoC,OACApC,KAAAoC,KAAA,IAAgCqd,EAAA,KAAK,MAErCzf,KAAAoC,MAEAf,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA0f,EAAAzf,UAAA,SAKAC,IAAA,WACA,OAAAlB,KAAA2jB,aAEAtiB,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA0f,EAAAzf,UAAA,cAKAC,IAAA,WACA,OAAAlB,KAAAgiB,kBAEA3gB,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA0f,EAAAzf,UAAA,SAKAC,IAAA,WACA,aAAAlB,KAAA2jB,aAAA,IAAA3jB,KAAA2jB,YAAA9f,QAEAxC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA0f,EAAAzf,UAAA,aAKAC,IAAA,WACA,IAAAyF,EAAA3G,KAAA4kB,MAAA,EAAA5kB,KAAA2jB,YAAA9f,OACA,OAAA8C,GAEAtF,YAAA,EACAC,cAAA,IAEAof,EA1EA,GA6EAmD,EAAA,WACA,SAAAA,KA6CA,OA3CA9iB,OAAAC,eAAA6iB,EAAA5iB,UAAA,YAMAC,IAAA,WACA,OAAAlB,KAAA8K,MAEA3J,IAAA,SAAAC,GACApB,KAAA8K,KAAA1J,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA6iB,EAAA5iB,UAAA,QAKAC,IAAA,WACA,OAAAlB,KAAAW,SAEAQ,IAAA,SAAAC,GACApB,KAAAW,QAAAS,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA6iB,EAAA5iB,UAAA,SAKAC,IAAA,WACA,OAAAlB,KAAAkiB,WAEA/gB,IAAA,SAAAC,GACApB,KAAAkiB,UAAA9gB,GAEAC,YAAA,EACAC,cAAA,IAEAuiB,EA9CA,IAsDA,SAAArE,GAKAA,IAAA,kBAKAA,IAAA,kCAKAA,IAAA,gCAKAA,IAAA,8CAKAA,IAAA,6CAzBA,CA0BCA,MAAA,wCCtiBDzV,EAAA/F,EAAAgG,EAAA,sBAAA6a,IAAA,IAAAC,EAAA/a,EAAA,QAIAgb,EAAA,IAAAC,WAAA,KACAC,EAAA,IAAAvS,WAAA,KACAwS,EAAA,IAAAF,WAAA,IACAG,EAAA,IAAAzS,WAAA,IAUAmS,EAAA,WAKA,SAAAA,EAAAO,GACAplB,KAAAqlB,cAAA,IAAA3S,WAAA,OACA1S,KAAAslB,iBAAA,EACAtlB,KAAAulB,gBAAA,EACAvlB,KAAAwlB,sBAAA,EACAxlB,KAAAylB,eAAA,EACAzlB,KAAA0lB,UAAA,EACA1lB,KAAA2lB,YAAA,EACA3lB,KAAA4lB,WAAA,EACA5lB,KAAA6lB,YAAA,EACA7lB,KAAA8lB,gBAAA,EACA9lB,KAAA+lB,WAAA,EACA/lB,KAAAgmB,YAAA,EACAhmB,KAAAimB,UAAA,EACAjmB,KAAAkmB,aAAA,EACAlmB,KAAAmmB,YAAA,EACAnmB,KAAAomB,SAAA,EACApmB,KAAAqmB,WAAA,MACArmB,KAAAsmB,WAAAtmB,KAAAqmB,WAAA,EACArmB,KAAAumB,SAAA,MACAvmB,KAAAwmB,SAAAxmB,KAAAumB,SAAA,EACAvmB,KAAAymB,UAAA9L,KAAA+L,MAAA,MACA1mB,KAAA2mB,QAAA3mB,KAAAqmB,WAAA,IACArmB,KAAA4mB,SAAA,EACA5mB,KAAAolB,QAAA,EACAP,EAAAgC,yBACAhC,EAAAiC,kBACAjC,EAAAgC,wBAAA,GAEA7mB,KAAA+mB,YAAA,IAAAC,EAAAhnB,KAAA,YACAA,KAAAinB,cAAA,IAAAD,EAAAhnB,KAAA,SACAA,KAAAknB,gBAAA,IAAAF,EAAAhnB,KAAA,QACAA,KAAAmnB,aAAA,IAAAC,YAAA,OACApnB,KAAAqnB,YAAA,IAAA3U,WAAA,OACA1S,KAAAqP,OAAA,GACArP,KAAAsnB,WAAA,IAAA5U,WAAA,EAAA1S,KAAAqmB,YACArmB,KAAAunB,SAAA,IAAAvC,WAAAhlB,KAAAumB,UACAvmB,KAAAwnB,aAAA,IAAAxC,WAAAhlB,KAAAqmB,YACArmB,KAAA+lB,WAAA/lB,KAAAgmB,YAAA,EACAhmB,KAAAolB,SACAA,GACAplB,KAAAynB,kBAmhBA,OAhhBA1mB,OAAAC,eAAA6jB,EAAA5jB,UAAA,kBAIAC,IAAA,WACA,OAAAlB,KAAAqP,QAEAhO,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA6jB,EAAA5jB,UAAA,uBACAC,IAAA,WACA,IAAAwmB,EAAA,GACA,QAAAlc,IAAAxL,KAAAqP,OACA,QAAAtJ,EAAA,EAA+BA,EAAA/F,KAAAqP,OAAAxL,OAAwBkC,IACvD2hB,GAAAC,OAAAC,aAAAC,MAAA,KAAA7nB,KAAAqP,OAAAtJ,IAGA,OAAA2hB,GAEArmB,YAAA,EACAC,cAAA,IASAujB,EAAA5jB,UAAAwO,MAAA,SAAA/I,EAAAohB,EAAAjkB,GACA,QAAA2H,IAAA9E,GAAA,OAAAA,EACA,UAAA7F,MAAA,oDAEA,IAAAyjB,EAAAwD,EAAAjkB,EACA,KAAAikB,KAAAxD,KAAA5d,EAAA7C,OACA,UAAAhD,MAAA,8DAEA,qBAAA6F,EAAA,CACA,IAAAqhB,EAAA,IAA6BjD,EAAA,MAAQ,GACrCiD,EAAAjd,KAAA,OACApE,EAAA,IAAAgM,WAAAqV,EAAAhV,SAAArM,EAAA,EAAAA,EAAA7C,SACAygB,EAAAwD,EAAAphB,EAAA7C,OAEA7D,KAAAgoB,YAAAthB,EACA1G,KAAAmmB,YAAA2B,EACA9nB,KAAAomB,SAAA9B,EACAtkB,KAAAolB,SACAplB,KAAA4mB,SAAAqB,EAAAC,eAAAloB,KAAA4mB,SAAA5mB,KAAAgoB,YAAAhoB,KAAAmmB,YAAA7B,IAEA,MAAAtkB,KAAAomB,WAAApmB,KAAAmmB,aAAA,IAAAnmB,KAAAslB,iBACAtlB,KAAAmoB,qBACAnoB,KAAAooB,cAAA,IAOAvD,EAAA5jB,UAAAwmB,gBAAA,WAEA,IAAAY,EAAA,MAEAA,GAAA,GAEAA,GAAA,GAAAA,EAAA,GAEAroB,KAAAsoB,6BAAAD,IAMAxD,EAAA5jB,UAAAqnB,6BAAA,SAAAC,GACAvoB,KAAAqlB,cAAArlB,KAAAslB,oBAAAiD,GAAA,EACAvoB,KAAAqlB,cAAArlB,KAAAslB,oBAAAiD,GAEA1D,EAAA5jB,UAAAmnB,aAAA,SAAAI,GACA,IAAApH,EACA,GACAphB,KAAAyoB,aACA,IAAAC,EAAAF,GAAAxoB,KAAAomB,WAAApmB,KAAAmmB,YACA/E,EAAAphB,KAAA2oB,aAAAD,EAAAF,SACS,IAAAxoB,KAAAslB,kBAAAlE,GACT,OAAAA,GAEAyD,EAAA5jB,UAAA0nB,aAAA,SAAAzW,EAAAsW,GACA,GAAAxoB,KAAAimB,UAAA,MAAA/T,EACA,SAEA,MAAAlS,KAAAimB,WAAA,KAAA/T,EAAA,CACA,OAAAlS,KAAAimB,UACA,OAAAjmB,KAAA4oB,mBAAAJ,GAEAxoB,KAAAgmB,aAAA,EAAAhmB,KAAAqmB,WAAA,KACArmB,KAAA6oB,cAEA,IAAAC,EAAA9oB,KAAA4lB,WACAmD,EAAA/oB,KAAA6lB,YAUA,GATA7lB,KAAAimB,WAAA,GACAjmB,KAAAgpB,eAEAD,GAAA,GAAA/oB,KAAA6lB,aAAAkD,EACAA,EAAA/oB,KAAAipB,kBAAAH,EAAAC,GAGA/oB,KAAAkpB,yBAEAlpB,KAAAylB,gBAAA,MACA,OAAAzlB,KAAAmpB,cAAAX,GAGA,UAEA3D,EAAA5jB,UAAA+nB,aAAA,WACA,IAAAzB,EAAAvnB,KAAAopB,eACA,IAAA7B,GAAAvnB,KAAAgmB,YAAAuB,GAAAvnB,KAAA2mB,SAAA3mB,KAAAqpB,iBAAA9B,IACAvnB,KAAA6lB,aAAA,OAAA7lB,KAAA6lB,aAAA7lB,KAAAgmB,YAAAhmB,KAAA4lB,WAAA,OACA5lB,KAAA6lB,YAAA,IAIAhB,EAAA5jB,UAAAioB,uBAAA,WACAlpB,KAAA8lB,gBACA9lB,KAAAspB,gBAAA,IAAAtpB,KAAAsnB,WAAAtnB,KAAAgmB,YAAA,IAEAhmB,KAAA8lB,gBAAA,EACA9lB,KAAAgmB,cACAhmB,KAAAimB,aAEApB,EAAA5jB,UAAAgoB,kBAAA,SAAAH,EAAAC,GACA/oB,KAAAupB,iBAAAvpB,KAAAgmB,YAAA,EAAA8C,EAAAC,GACAA,GAAA,EACA,GACA/oB,KAAAgmB,cACAhmB,KAAAimB,YACAjmB,KAAAimB,WAAA,GACAjmB,KAAAopB,uBAESL,EAAA,GAKT,OAJA/oB,KAAAgmB,cACAhmB,KAAAimB,YACAjmB,KAAA8lB,gBAAA,EACA9lB,KAAA6lB,YAAA,EACAkD,GAEAlE,EAAA5jB,UAAA2nB,mBAAA,SAAAJ,GAOA,OANAxoB,KAAA8lB,gBACA9lB,KAAAspB,gBAAA,IAAAtpB,KAAAsnB,WAAAtnB,KAAAgmB,YAAA,IAEAhmB,KAAA8lB,gBAAA,EACA9lB,KAAAwpB,kBAAAxpB,KAAAsnB,WAAAtnB,KAAA+lB,WAAA/lB,KAAAgmB,YAAAhmB,KAAA+lB,WAAAyC,GACAxoB,KAAA+lB,WAAA/lB,KAAAgmB,aACA,GAEAnB,EAAA5jB,UAAAkoB,cAAA,SAAAX,GACA,IAAA5M,EAAA5b,KAAAgmB,YAAAhmB,KAAA+lB,WACA/lB,KAAA8lB,gBACAlK,IAEA,IAAA6N,EAAAjB,GAAA,IAAAxoB,KAAAimB,YAAAjmB,KAAA8lB,eAGA,OAFA9lB,KAAAwpB,kBAAAxpB,KAAAsnB,WAAAtnB,KAAA+lB,WAAAnK,EAAA6N,GACAzpB,KAAA+lB,YAAAnK,GACA6N,GAEA5E,EAAA5jB,UAAAwnB,WAAA,WACAzoB,KAAAgmB,aAAAhmB,KAAAqmB,WAAArmB,KAAA2mB,SACA3mB,KAAA6oB,cAEA,MAAA7oB,KAAAimB,UAAA,KAAAjmB,KAAAmmB,YAAAnmB,KAAAomB,SAAA,CACA,IAAAsD,EAAA,EAAA1pB,KAAAqmB,WAAArmB,KAAAimB,UAAAjmB,KAAAgmB,YACA0D,EAAA1pB,KAAAomB,SAAApmB,KAAAmmB,cACAuD,EAAA1pB,KAAAomB,SAAApmB,KAAAmmB,aAEAnmB,KAAAsnB,WAAAnmB,IAAAnB,KAAAgoB,YAAA2B,SAAA3pB,KAAAmmB,YAAAnmB,KAAAmmB,YAAAuD,GAAA1pB,KAAAgmB,YAAAhmB,KAAAimB,WACAjmB,KAAAmmB,aAAAuD,EACA1pB,KAAAkmB,cAAAwD,EACA1pB,KAAAimB,WAAAyD,EAEA1pB,KAAAimB,WAAA,GACAjmB,KAAA4pB,cAGA/E,EAAA5jB,UAAA4nB,YAAA,WACA7oB,KAAAsnB,WAAAnmB,IAAAnB,KAAAsnB,WAAAqC,SAAA3pB,KAAAqmB,WAAArmB,KAAAqmB,WAAArmB,KAAAqmB,YAAA,GACArmB,KAAA4lB,YAAA5lB,KAAAqmB,WACArmB,KAAAgmB,aAAAhmB,KAAAqmB,WACArmB,KAAA+lB,YAAA/lB,KAAAqmB,WACA,QAAAtgB,EAAA,EAAuBA,EAAA/F,KAAAumB,WAAmBxgB,EAAA,CAC1C,IAAA8jB,EAAA,MAAA7pB,KAAAunB,SAAAxhB,GACA/F,KAAAunB,SAAAxhB,GAAA8jB,GAAA7pB,KAAAqmB,WAAAwD,EAAA7pB,KAAAqmB,WAAA,EAEA,IAAAtgB,EAAA,EAAuBA,EAAA/F,KAAAqmB,WAAqBtgB,IAAA,CAC5C8jB,EAAA,MAAA7pB,KAAAwnB,aAAAzhB,GACA/F,KAAAwnB,aAAAzhB,GAAA8jB,GAAA7pB,KAAAqmB,WAAAwD,EAAA7pB,KAAAqmB,WAAA,IAGAxB,EAAA5jB,UAAAmoB,aAAA,WACA,IAAAU,EACAC,GAAA/pB,KAAA2lB,aAAA3lB,KAAAymB,UAAAzmB,KAAAsnB,WAAAtnB,KAAAgmB,YAAA,IAAAhmB,KAAAwmB,SAIA,OAHAxmB,KAAAwnB,aAAAxnB,KAAAgmB,YAAAhmB,KAAAsmB,YAAAwD,EAAA9pB,KAAAunB,SAAAwC,GACA/pB,KAAAunB,SAAAwC,GAAA/pB,KAAAgmB,YACAhmB,KAAA2lB,YAAAoE,EACA,MAAAD,GAEAjF,EAAA5jB,UAAAooB,iBAAA,SAAAW,GACA,IAGAF,EAHAG,EAAA,KACAC,EAAA,IACAC,EAAAnqB,KAAAgmB,YAEAoE,EAAApqB,KAAAgmB,YAAAhmB,KAAA6lB,YACAwE,EAAA1P,KAAAC,IAAA5a,KAAA6lB,YAAA,GACAyE,EAAA3P,KAAAC,IAAA5a,KAAAgmB,YAAAhmB,KAAA2mB,QAAA,GACA4D,EAAAvqB,KAAAgmB,YAAA,MACAwE,EAAAxqB,KAAAsnB,WAAA8C,EAAA,GACAK,EAAAzqB,KAAAsnB,WAAA8C,GACA1jB,EAAA1G,KAAAsnB,WACA+C,GAAA,KACAJ,IAAA,GAEAC,EAAAlqB,KAAAimB,YACAiE,EAAAlqB,KAAAimB,WAEA,GACA,GAAAvf,EAAAsjB,EAAAK,KAAAI,GACA/jB,EAAAsjB,EAAAK,EAAA,KAAAG,GACA9jB,EAAAsjB,KAAAtjB,EAAAyjB,IACAzjB,EAAAsjB,EAAA,KAAAtjB,EAAAyjB,EAAA,GAHA,CAMAL,EAAAE,EAAA,EACAG,GAAA,EAEA,MAAAzjB,IAAAyjB,KAAAzjB,IAAAojB,IAAApjB,IAAAyjB,KAAAzjB,IAAAojB,IACApjB,IAAAyjB,KAAAzjB,IAAAojB,IAAApjB,IAAAyjB,KAAAzjB,IAAAojB,IACApjB,IAAAyjB,KAAAzjB,IAAAojB,IAAApjB,IAAAyjB,KAAAzjB,IAAAojB,IACApjB,IAAAyjB,KAAAzjB,IAAAojB,IAAApjB,IAAAyjB,KAAAzjB,IAAAojB,IAAAK,EAAAI,GAGA,GAAAJ,EAAAC,EAAA,CAIA,GAHApqB,KAAA4lB,WAAAoE,EACAI,EAAAD,EACAE,EAAAF,EAAAnqB,KAAAgmB,YACAqE,GAAAH,EACA,MAEAM,EAAA9jB,EAAA0jB,EAAA,GACAK,EAAA/jB,EAAA0jB,GAEAD,EAAAnqB,KAAAgmB,oBACSgE,EAAA,MAAAhqB,KAAAwnB,aAAAwC,EAAAhqB,KAAAsmB,aAAAgE,GAAA,MAAAL,GAET,OADAjqB,KAAA6lB,YAAAlL,KAAAiH,IAAAyI,EAAArqB,KAAAimB,WACAjmB,KAAA6lB,aAAA,GAEAhB,EAAA5jB,UAAA2oB,WAAA,WACA5pB,KAAA2lB,YAAA3lB,KAAAsnB,WAAAtnB,KAAAgmB,cAAAhmB,KAAAymB,UAAAzmB,KAAAsnB,WAAAtnB,KAAAgmB,YAAA,IAEAnB,EAAA5jB,UAAAqoB,gBAAA,SAAAoB,GAIA,OAHA1qB,KAAAmnB,aAAAnnB,KAAAylB,gBAAA,EACAzlB,KAAAqnB,YAAArnB,KAAAylB,kBAAAiF,EACA1qB,KAAA+mB,YAAA4D,gBAAAD,KACA1qB,KAAAylB,gBAAA,OAEAZ,EAAA5jB,UAAAsoB,iBAAA,SAAAqB,EAAAhP,GACA5b,KAAAmnB,aAAAnnB,KAAAylB,gBAAAmF,EACA5qB,KAAAqnB,YAAArnB,KAAAylB,kBAAA7J,EAAA,EACA,IAAAiP,EAAA7qB,KAAA8qB,kBAAAlP,EAAA,GACA5b,KAAA+mB,YAAA4D,gBAAAE,KACAA,GAAA,KAAAA,EAAA,MACA7qB,KAAA0lB,WAAA/K,KAAA+L,OAAAmE,EAAA,SAEA,IAAAE,EAAA/qB,KAAAgrB,oBAAAJ,EAAA,GAKA,OAJA5qB,KAAAinB,cAAA0D,gBAAAI,KACAA,GAAA,IACA/qB,KAAA0lB,WAAA/K,KAAA+L,MAAAqE,EAAA,MAEA/qB,KAAAylB,gBAAA,OAEAZ,EAAA5jB,UAAAuoB,kBAAA,SAAAyB,EAAAC,EAAAC,EAAA1B,GACAzpB,KAAA+mB,YAAA4D,gBAAA,OACA3qB,KAAA+mB,YAAAqE,YACAprB,KAAAinB,cAAAmE,YACAprB,KAAA+mB,YAAAsE,gBAAArrB,KAAAknB,iBACAlnB,KAAAinB,cAAAoE,gBAAArrB,KAAAknB,iBACAlnB,KAAAknB,gBAAAkE,YAEA,IADA,IAAAE,EAAA,EACAvlB,EAAA,GAAwBA,EAAAulB,EAAiBvlB,IACzC/F,KAAAknB,gBAAAqE,YAAAvE,EAAAwE,qBAAAzlB,IAAA,IACAulB,EAAAvlB,EAAA,GAGA,IAAA0lB,EAAA,KAAAH,EAAAtrB,KAAAknB,gBAAAwE,mBACA1rB,KAAA+mB,YAAA2E,mBAAA1rB,KAAAinB,cAAAyE,mBAAA1rB,KAAA0lB,UACAiG,EAAA3rB,KAAA0lB,UACA,IAAA3f,EAAA,EAAuBA,EAAA,IAASA,IAChC4lB,GAAA3rB,KAAA+mB,YAAA4D,gBAAA5kB,GAAAkf,EAAAlf,GAEA,IAAAA,EAAA,EAAuBA,EAAA,GAAQA,IAC/B4lB,GAAA3rB,KAAAinB,cAAA0D,gBAAA5kB,GAAAof,EAAApf,GAEA0lB,GAAAE,IAEAF,EAAAE,GAEAT,GAAA,GAAAC,EAAA,EAAAM,GAAA,EACAzrB,KAAA4rB,wBAAAX,EAAAC,EAAAC,EAAA1B,GAEAgC,GAAAE,GAEA3rB,KAAA6rB,uBAAA,GAAApC,EAAA,QACAzpB,KAAA+mB,YAAA+E,eAAA/G,EAAAE,GACAjlB,KAAAinB,cAAA6E,eAAA5G,EAAAC,GACAnlB,KAAA+rB,uBACA/rB,KAAAgsB,iBAGAhsB,KAAA6rB,uBAAA,GAAApC,EAAA,QACAzpB,KAAAisB,oBAAAX,GACAtrB,KAAA+rB,uBACA/rB,KAAAgsB,iBAGAnH,EAAA5jB,UAAA2qB,wBAAA,SAAAX,EAAAC,EAAAC,EAAA1B,GACAzpB,KAAA6rB,uBAAA,GAAApC,EAAA,QACAzpB,KAAAksB,2BACAlsB,KAAAmsB,wBAAAhB,GACAnrB,KAAAmsB,yBAAAhB,GACAnrB,KAAAosB,4BAAAnB,EAAAC,EAAAC,GACAnrB,KAAAgsB,gBAEAnH,EAAA5jB,UAAA6pB,kBAAA,SAAAlP,GACA,SAAAA,EACA,WAEA,IAAAyQ,EAAA,IACA,MAAAzQ,GAAA,EACAyQ,GAAA,EACAzQ,IAAA,EAEA,OAAAyQ,EAAAzQ,GAEAiJ,EAAA5jB,UAAA+pB,oBAAA,SAAAsB,GACA,IAAAD,EAAA,EACA,MAAAC,GAAA,EACAD,GAAA,EACAC,IAAA,EAEA,OAAAD,EAAAC,GAEAzH,EAAA5jB,UAAAgrB,oBAAA,SAAAX,GACAtrB,KAAAknB,gBAAAqF,aACAvsB,KAAA+mB,YAAAwF,aACAvsB,KAAAinB,cAAAsF,aACAvsB,KAAA6rB,uBAAA7rB,KAAA+mB,YAAAyF,WAAA,OACAxsB,KAAA6rB,uBAAA7rB,KAAAinB,cAAAuF,WAAA,KACAxsB,KAAA6rB,uBAAAP,EAAA,KACA,QAAAmB,EAAA,EAA0BA,EAAAnB,EAAoBmB,IAC9CzsB,KAAA6rB,uBAAA7rB,KAAAknB,gBAAAqE,YAAAvE,EAAAwE,qBAAAiB,IAAA,GAEAzsB,KAAA+mB,YAAA2F,UAAA1sB,KAAAknB,iBACAlnB,KAAAinB,cAAAyF,UAAA1sB,KAAAknB,kBAEArC,EAAA5jB,UAAA+qB,aAAA,WACAhsB,KAAAylB,eAAA,EACAzlB,KAAA0lB,UAAA,EACA1lB,KAAA+mB,YAAA4F,QACA3sB,KAAAinB,cAAA0F,QACA3sB,KAAAknB,gBAAAyF,SAEA9H,EAAA5jB,UAAA8qB,qBAAA,WACA,QAAAhmB,EAAA,EAAuBA,EAAA/F,KAAAylB,eAAyB1f,IAAA,CAChD,IAAA6mB,EAAA,IAAA5sB,KAAAqnB,YAAAthB,GACA6kB,EAAA5qB,KAAAmnB,aAAAphB,GACA,OAAA6kB,IAAA,CACA,IAAAC,EAAA7qB,KAAA8qB,kBAAA8B,GACA5sB,KAAA+mB,YAAA8F,kBAAAhC,GACA,IAAAiC,EAAAnS,KAAA+L,OAAAmE,EAAA,QACAiC,EAAA,GAAAA,GAAA,GACA9sB,KAAA6rB,uBAAAe,GAAA,GAAAE,GAAA,EAAAA,GAEA,IAAA/B,EAAA/qB,KAAAgrB,oBAAAJ,GACA5qB,KAAAinB,cAAA4F,kBAAA9B,GACA+B,EAAAnS,KAAA+L,MAAAqE,EAAA,KACA+B,EAAA,GACA9sB,KAAA6rB,uBAAAjB,GAAA,GAAAkC,GAAA,EAAAA,QAIA9sB,KAAA+mB,YAAA8F,kBAAAD,GAGA5sB,KAAA+mB,YAAA8F,kBAAA,MAOAhI,EAAA5jB,UAAA4qB,uBAAA,SAAA5nB,EAAA0C,GACA,IAAAomB,EAAA,IAAAC,YAAA,GACAD,EAAA,GAAA/sB,KAAAulB,gBAAAthB,GAAAjE,KAAAwlB,sBACAxlB,KAAAulB,gBAAAwH,EAAA,GACA/sB,KAAAwlB,uBAAA7e,EACA3G,KAAAitB,0BAEApI,EAAA5jB,UAAAknB,mBAAA,SAAA+E,GAEA,GADAltB,KAAAitB,yBACAjtB,KAAAslB,iBAAA,GACA,IAAA6H,EAAA,IAAAza,WAAA1S,KAAAslB,kBACA6H,EAAAhsB,IAAAnB,KAAAqlB,cAAAsE,SAAA,EAAA3pB,KAAAslB,kBAAA,GACAtlB,KAAAqP,OAAA5J,KAAA0nB,GAEAntB,KAAAslB,iBAAA,GAEAT,EAAA5jB,UAAAgsB,uBAAA,WACA,IAAA1iB,EAAA,EACA,MAAAvK,KAAAwlB,uBAAA,GAAAxlB,KAAAslB,iBAAA,MACAtlB,KAAAqlB,cAAArlB,KAAAslB,oBAAAtlB,KAAAulB,gBACAvlB,KAAAulB,kBAAA,EACAvlB,KAAAwlB,uBAAA,EACAjb,IAEA,OAAAA,GAEAsa,EAAA5jB,UAAAmrB,4BAAA,SAAA1lB,EAAAohB,EAAAjkB,GACA,IAAAspB,EAAAzmB,EAAAijB,SAAA7B,IAAAjkB,GACA7D,KAAAqlB,cAAAlkB,IAAAgsB,EAAAntB,KAAAslB,kBACAtlB,KAAAslB,kBAAAzhB,GAEAghB,EAAA5jB,UAAAkrB,wBAAA,SAAA5D,GACAvoB,KAAAqlB,cAAArlB,KAAAslB,oBAAAiD,EACAvoB,KAAAqlB,cAAArlB,KAAAslB,oBAAAiD,GAAA,GAEA1D,EAAA5jB,UAAAirB,yBAAA,WACAlsB,KAAAwlB,sBAAA,IACAxlB,KAAAqlB,cAAArlB,KAAAslB,oBAAAtlB,KAAAulB,iBAEAvlB,KAAAulB,gBAAA,EACAvlB,KAAAwlB,sBAAA,GAMAX,EAAAiC,gBAAA,WACA,IAAA/gB,EAAA,EACA,MAAAA,EAAA,IACAgf,EAAAhf,GAAAihB,EAAAoG,WAAA,GAAArnB,GAAA,GACAkf,EAAAlf,KAAA,EAEA,MAAAA,EAAA,IACAgf,EAAAhf,GAAAihB,EAAAoG,WAAA,IAAArnB,GAAA,GACAkf,EAAAlf,KAAA,EAEA,MAAAA,EAAA,IACAgf,EAAAhf,GAAAihB,EAAAoG,YAAA,IAAArnB,GAAA,GACAkf,EAAAlf,KAAA,EAEA,MAAAA,EAAA,IACAgf,EAAAhf,GAAAihB,EAAAoG,YAAA,GAAArnB,GAAA,GACAkf,EAAAlf,KAAA,EAEA,IAAAA,EAAA,EAAmBA,EAAA,GAAQA,IAC3Bmf,EAAAnf,GAAAihB,EAAAoG,WAAArnB,GAAA,IACAof,EAAApf,GAAA,GAOA8e,EAAA5jB,UAAAwf,MAAA,WACA,GACAzgB,KAAAmoB,oBAAA,GACAnoB,KAAAooB,cAAA,KACApoB,KAAAmoB,oBAAA,GACAnoB,KAAAksB,2BACAlsB,KAAAolB,SACAplB,KAAAsoB,6BAAAtoB,KAAA4mB,UAAA,IACA5mB,KAAAsoB,6BAAA,MAAAtoB,KAAA4mB,WAEA5mB,KAAAmoB,oBAAA,UAESnoB,KAAAomB,WAAApmB,KAAAmmB,aACT,IAAAnmB,KAAAslB,mBAMAT,EAAA5jB,UAAAgQ,QAAA,WACAjR,KAAAqP,OAAA,GACArP,KAAAqP,YAAA7D,EACAxL,KAAAqlB,mBAAA7Z,EACAxL,KAAA+mB,iBAAAvb,EACAxL,KAAAinB,mBAAAzb,EACAxL,KAAAknB,qBAAA1b,EACAxL,KAAAqnB,iBAAA7b,EACAxL,KAAAmnB,kBAAA3b,EACAxL,KAAAunB,cAAA/b,EACAxL,KAAAwnB,kBAAAhc,EACAxL,KAAAsnB,gBAAA9b,EACAxL,KAAAgoB,iBAAAxc,EACAxL,KAAAslB,sBAAA9Z,EACAxL,KAAAulB,qBAAA/Z,EACAxL,KAAAwlB,2BAAAha,EACAxL,KAAAylB,oBAAAja,EACAxL,KAAA0lB,eAAAla,EACAxL,KAAA2lB,iBAAAna,EACAxL,KAAA4lB,gBAAApa,EACAxL,KAAA6lB,iBAAAra,EACAxL,KAAA8lB,oBAAAta,EACAxL,KAAA+lB,gBAAAva,EACAxL,KAAAgmB,iBAAAxa,EACAxL,KAAAimB,eAAAza,EACAxL,KAAAkmB,kBAAA1a,EACAxL,KAAAmmB,iBAAA3a,EACAxL,KAAAomB,cAAA5a,EACAxL,KAAAqmB,gBAAA7a,EACAxL,KAAAsmB,gBAAA9a,EACAxL,KAAAumB,cAAA/a,EACAxL,KAAAwmB,cAAAhb,EACAxL,KAAAymB,eAAAjb,EACAxL,KAAA2mB,aAAAnb,EACAxL,KAAA4mB,cAAApb,EACAxL,KAAAolB,YAAA5Z,GAEAqZ,EAAAgC,wBAAA,EACAhC,EAjkBA,GAukBAmC,EAAA,WAQA,SAAAA,EAAAtL,EAAA2R,EAAAC,EAAAC,GACAvtB,KAAA0b,SACA1b,KAAAwtB,aAAAF,EACAttB,KAAAutB,YACAvtB,KAAAytB,cAAA,IAAArG,YAAAiG,GACArtB,KAAA0tB,YAAA,IAAAC,WAAAJ,GA8UA,OA5UAxsB,OAAAC,eAAAgmB,EAAA/lB,UAAA,cACAC,IAAA,WACA,OAAAlB,KAAA4tB,WAEAvsB,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAgmB,EAAA/lB,UAAA,eACAC,IAAA,WACA,OAAAlB,KAAA6tB,YAEAxsB,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAgmB,EAAA/lB,UAAA,mBACAC,IAAA,WACA,OAAAlB,KAAAytB,eAEApsB,YAAA,EACAC,cAAA,IAEA0lB,EAAA/lB,UAAA6qB,eAAA,SAAAgC,EAAAC,GACA,IAAAC,EAAA,IAAAhJ,WAAA8I,EAAAjqB,QACAmqB,EAAA7sB,IAAA2sB,EAAA,GACA9tB,KAAA8tB,MAAAE,EACA,IAAAC,EAAA,IAAAvb,WAAAqb,EAAAlqB,QACAoqB,EAAA9sB,IAAA4sB,EAAA,GACA/tB,KAAA6tB,WAAAI,GAMAjH,EAAA/lB,UAAA0rB,MAAA,WACA,QAAA5mB,EAAA,EAAuBA,EAAA/F,KAAAytB,cAAA5pB,OAA+BkC,IACtD/F,KAAAytB,cAAA1nB,GAAA,EAEA/F,KAAA8tB,WAAAtiB,EACAxL,KAAA6tB,gBAAAriB,GAOAwb,EAAA/lB,UAAA4rB,kBAAA,SAAAR,GACArsB,KAAA0b,OAAAmQ,uBAAA,MAAA7rB,KAAA8tB,MAAAzB,GAAArsB,KAAA6tB,WAAAxB,KAMArF,EAAA/lB,UAAAsrB,WAAA,WACA,IAAA2B,EAAA,IAAAP,WAAA3tB,KAAAutB,WACAvtB,KAAA8tB,MAAA,IAAA9I,WAAAhlB,KAAA4tB,WAEA,IADA,IAAAvB,EAAA,EACA8B,EAAA,EAA+BA,EAAAnuB,KAAAutB,UAA4BY,IAC3DD,EAAAC,GAAA9B,EACAA,GAAArsB,KAAA0tB,YAAAS,IAAA,GAAAA,EAEA,QAAApoB,EAAA,EAAuBA,EAAA/F,KAAA4tB,UAAoB7nB,IAAA,CAC3C,IAAA+mB,EAAA9sB,KAAA6tB,WAAA9nB,GACA+mB,EAAA,IACA9sB,KAAA8tB,MAAA/nB,GAAAihB,EAAAoG,WAAAc,EAAApB,EAAA,IACAoB,EAAApB,EAAA,UAAAA,KAIA9F,EAAAoG,WAAA,SAAAhsB,GACA,OAAA4lB,EAAAoH,YAAA,GAAAhtB,IAAA,GACA4lB,EAAAoH,YAAAhtB,GAAA,SACA4lB,EAAAoH,YAAAhtB,GAAA,SACA4lB,EAAAoH,YAAAhtB,GAAA,KAMA4lB,EAAA/lB,UAAAyqB,iBAAA,WAEA,IADA,IAAA9P,EAAA,EACA7V,EAAA,EAAuBA,EAAA/F,KAAAytB,cAAA5pB,OAA+BkC,IACtD6V,GAAA5b,KAAAytB,cAAA1nB,GAAA/F,KAAA6tB,WAAA9nB,GAEA,OAAA6V,GAOAoL,EAAA/lB,UAAAoqB,gBAAA,SAAAgD,GACA,IAAAC,EACAC,EACA5nB,EACA6nB,GAAA,EACAzoB,EAAA,EACA,MAAAA,EAAA/F,KAAA4tB,UAAA,CACAjnB,EAAA,EACA,IAAA8nB,EAAAzuB,KAAA6tB,WAAA9nB,GACA,IAAA0oB,GACAH,EAAA,IACAC,EAAA,IAGAD,EAAA,EACAC,EAAA,EACAC,IAAAC,IACAJ,EAAAZ,cAAAgB,KACA9nB,EAAA,IAGA6nB,EAAAC,EACA1oB,IACA,MAAAA,EAAA/F,KAAA4tB,WAAAY,IAAAxuB,KAAA6tB,WAAA9nB,GAEA,GADAA,MACAY,GAAA2nB,EACA,MAGA3nB,EAAA4nB,EACAF,EAAAZ,cAAAe,IAAA7nB,EAEA,IAAA6nB,EACAH,EAAAZ,cAAA,MAEA9mB,GAAA,GACA0nB,EAAAZ,cAAA,MAGAY,EAAAZ,cAAA,QAQAzG,EAAA/lB,UAAAyrB,UAAA,SAAA2B,GACA,IAAAK,EACAC,EACAC,EACAC,GAAA,EACA9oB,EAAA,EACA,MAAAA,EAAA/F,KAAA4tB,UAAA,CACAgB,EAAA,EACA,IAAAH,EAAAzuB,KAAA6tB,WAAA9nB,GACA,IAAA0oB,GACAC,EAAA,IACAC,EAAA,IAGAD,EAAA,EACAC,EAAA,EACAE,IAAAJ,IACAJ,EAAAxB,kBAAA4B,GACAG,EAAA,IAGAC,EAAAJ,EACA1oB,IACA,MAAAA,EAAA/F,KAAA4tB,WAAAiB,IAAA7uB,KAAA6tB,WAAA9nB,GAEA,GADAA,MACA6oB,GAAAF,EACA,MAGA,GAAAE,EAAAD,EACA,MAAAC,KAAA,EACAP,EAAAxB,kBAAAgC,QAGA,IAAAA,GACAR,EAAAxB,kBAAA,IACA7sB,KAAA0b,OAAAmQ,uBAAA+C,EAAA,MAEAA,GAAA,IACAP,EAAAxB,kBAAA,IACA7sB,KAAA0b,OAAAmQ,uBAAA+C,EAAA,OAGAP,EAAAxB,kBAAA,IACA7sB,KAAA0b,OAAAmQ,uBAAA+C,EAAA,SAQA5H,EAAA/lB,UAAAmqB,UAAA,WAKA,IAJA,IAAA0D,EAAA9uB,KAAAytB,cAAA5pB,OACAkrB,EAAA,IAAApB,WAAAmB,GACAtC,EAAA,EACA8B,EAAA,EACA7R,EAAA,EAAuBA,EAAAqS,EAAgBrS,IAAA,CACvC,IAAAuS,EAAAhvB,KAAAytB,cAAAhR,GACA,OAAAuS,EAAA,CACA,IAAAC,EAAAzC,IACA0C,EAAA,EACA,MAAAD,EAAA,GAAAjvB,KAAAytB,cAAAsB,EAAAG,EAAAvU,KAAA+L,OAAAuI,EAAA,QAAAD,EACAD,EAAAE,GAAAF,EAAAG,GACAD,EAAAC,EAEAH,EAAAE,GAAAxS,EACA6R,EAAA7R,GAGA,MAAA+P,EAAA,EACAuC,EAAAvC,KACA8B,EAAA,IAAAA,EAAA,EAEAtuB,KAAA4tB,UAAAjT,KAAAC,IAAA0T,EAAA,EAAAtuB,KAAAwtB,cAKA,IAJA,IAAA2B,EAAA3C,EACA4C,EAAAD,EACAE,EAAA,IAAA1B,WAAA,EAAAnB,EAAA,GACA8C,EAAA,IAAA3B,WAAA,EAAAnB,EAAA,GACAzmB,EAAA,EAAuBA,EAAAymB,EAAgBzmB,IAAA,CACvC,IAAAwpB,EAAAR,EAAAhpB,GACAypB,EAAA,EAAAzpB,EACAspB,EAAAG,GAAAD,EACAF,EAAAG,EAAA,MACAF,EAAAvpB,GAAA/F,KAAAytB,cAAA8B,IAAA,EACAR,EAAAhpB,KAEA/F,KAAAyvB,qBAAAV,EAAAvC,EAAA8C,EAAAF,EAAAC,GACArvB,KAAA0vB,YAAAL,IAEArI,EAAA/lB,UAAAwuB,qBAAA,SAAAV,EAAAvC,EAAA8C,EAAAF,EAAAC,GACA,GACA,IAAAM,EAAAZ,EAAA,GACAa,EAAAb,IAAAvC,GACAqD,EAAAP,EAAAM,GACAV,EAAA,EACAY,EAAA,EACA,MAAAA,EAAAtD,EACAsD,EAAA,EAAAtD,GAAA8C,EAAAP,EAAAe,IAAAR,EAAAP,EAAAe,EAAA,KACAA,IAEAf,EAAAG,GAAAH,EAAAe,GACAZ,EAAAY,EACAA,EAAA,EAAAZ,EAAA,EAEA,OAAAY,EAAAZ,GAAA,GAAAI,EAAAP,EAAAG,EAAAvU,KAAA+L,OAAAoJ,EAAA,QAAAD,EACAd,EAAAe,GAAAf,EAAAG,GAEAH,EAAAe,GAAAF,EACA,IAAAG,EAAAhB,EAAA,GACAa,EAAAR,IACAC,EAAA,EAAAO,GAAAD,EACAN,EAAA,EAAAO,EAAA,GAAAG,EACA,IAAAC,EAAArV,KAAAiH,IAAA,IAAA0N,EAAAK,GAAA,IAAAL,EAAAS,IACAT,EAAAM,GAAAC,EAAAP,EAAAK,GAAAL,EAAAS,GAAAC,EAAA,EACAd,EAAA,EACAY,EAAA,EAEA,MAAAA,EAAAtD,EACAsD,EAAA,EAAAtD,GAAA8C,EAAAP,EAAAe,IAAAR,EAAAP,EAAAe,EAAA,KACAA,IAEAf,EAAAG,GAAAH,EAAAe,GACAZ,EAAAY,EACAA,EAAA,EAAAZ,EAAA,EAEA,OAAAY,EAAAZ,GAAA,GAAAI,EAAAP,EAAAG,EAAAvU,KAAA+L,OAAAoJ,EAAA,QAAAD,EACAd,EAAAe,GAAAf,EAAAG,GAEAH,EAAAe,GAAAF,QACSpD,EAAA,IAETxF,EAAA/lB,UAAAyuB,YAAA,SAAAL,GACArvB,KAAA6tB,WAAA,IAAAnb,WAAA1S,KAAAytB,cAAA5pB,QAIA,IAHA,IAAAosB,EAAAtV,KAAA+L,MAAA2I,EAAAxrB,OAAA,GACAqsB,EAAAvV,KAAA+L,OAAAuJ,EAAA,MACAE,EAAA,EACApqB,EAAA,EAAuBA,EAAA/F,KAAAutB,UAAoBxnB,IAC3C/F,KAAA0tB,YAAA3nB,GAAA,EAGA,GADAoqB,EAAAnwB,KAAAowB,2BAAAf,EAAAc,EAAAF,GACA,IAAAE,EAAA,CAGA,IAAAE,EAAArwB,KAAAutB,UAAA,EACA,GACA,UAAAvtB,KAAA0tB,cAAA2C,IAGA,GACArwB,KAAA0tB,YAAA2C,KACArwB,KAAA0tB,cAAA2C,KACAF,GAAA,GAAAnwB,KAAAutB,UAAA,EAAA8C,QACaF,EAAA,GAAAE,EAAArwB,KAAAutB,UAAA,SACJ4C,EAAA,GACTnwB,KAAAswB,aAAAjB,EAAAc,EAAAD,KAEAlJ,EAAA/lB,UAAAqvB,aAAA,SAAAjB,EAAAc,EAAAD,GACAlwB,KAAA0tB,YAAA1tB,KAAAutB,UAAA,IAAA4C,EACAnwB,KAAA0tB,YAAA1tB,KAAAutB,UAAA,IAAA4C,EAEA,IADA,IAAAI,EAAA,EAAAL,EACApD,EAAA9sB,KAAAutB,UAAuC,IAAAT,EAAYA,IAAA,CACnD,IAAArQ,EAAAzc,KAAA0tB,YAAAZ,EAAA,GACA,MAAArQ,EAAA,GACA,IAAA+T,EAAA,EAAAnB,EAAAkB,MACA,IAAAlB,EAAAmB,EAAA,KACAxwB,KAAA6tB,WAAAwB,EAAAmB,IAAA1D,EACArQ,QAKAuK,EAAA/lB,UAAAmvB,2BAAA,SAAAf,EAAAc,EAAAF,GACA,IAAAlC,EAAA,IAAAJ,WAAAsC,GACAlC,EAAAkC,EAAA,KACA,QAAAlqB,EAAAkqB,EAAA,EAAkClqB,GAAA,EAAQA,IAAA,CAC1C,IAAA0qB,EAAA,EAAA1qB,EAAA,EACA,QAAAspB,EAAAoB,GAAA,CACA,IAAAC,EAAA3C,EAAAhoB,GAAA,EACA2qB,EAAA1wB,KAAAutB,YACAmD,EAAA1wB,KAAAutB,UACA4C,KAEApC,EAAAsB,EAAAoB,EAAA,IAAA1C,EAAAsB,EAAAoB,IAAAC,MAEA,CACAA,EAAA3C,EAAAhoB,GACA/F,KAAA0tB,YAAAgD,EAAA,KACA1wB,KAAA6tB,WAAAwB,EAAAoB,EAAA,IAAA1C,EAAAhoB,IAGA,OAAAoqB,GAEAnJ,EAAAoH,YAAA,wCACApH,EAAAwE,qBAAA,iDACAxE,EA3VA,GAiWAiB,EAAA,WACA,SAAAA,KAiCA,OAtBAA,EAAAC,eAAA,SAAAyI,EAAAnhB,EAAAsY,EAAAjkB,GACA,IAAAkpB,EAAA,IAAAC,YAAA,GACAD,EAAA,GAAA4D,EACA,IAAAC,EAAA7D,EAAA,GACA8D,EAAA9D,EAAA,SAAA6D,EACAE,EAAA/D,EAAA,GAAA6D,GAAA3I,EAAA8I,kBACA,MAAAltB,EAAA,GACA,IAAAmtB,EAAArW,KAAAiH,IAAA/d,EAAAokB,EAAAgJ,wBACAptB,GAAAmtB,EACA,QAAAA,GAAA,EACAH,GAAA9D,EAAA,OAAAvd,EAAAsY,KACAgJ,GAAAD,EAEAA,GAAA5I,EAAAiJ,aACAJ,GAAA7I,EAAAiJ,aAGA,OADAN,EAAAE,GAAA7I,EAAA8I,kBAAAF,EACAD,GAEA3I,EAAA8I,kBAAA,GACA9I,EAAAiJ,aAAA,MACAjJ,EAAAgJ,uBAAA,KACAhJ,EAlCA,wCCr7BO,SAAAkJ,EAAAC,GAMP,0BAAArwB,OAAAE,UAAA8hB,SAAAne,KAAAwsB,GACA,KAAAA,EAGA,KAAAA,EAAArO,WCdAhZ,EAAA/F,EAAAgG,EAAA,sBAAAqnB,IAUA,IAAIA,EAAU,WAKd,SAAAC,EAAAC,GACAvxB,KAAAwxB,MAAA,GACAxxB,KAAAyxB,UAAA,EACAzxB,KAAA0xB,MAAAH,GAAyCJ,EA2GzC,OArGAG,EAAArwB,UAAAyG,SAAA,SAAAiqB,GACA,IAAAC,EAAA5xB,KAAAwxB,MAAA,IAAAxxB,KAAA0xB,MAAAC,IACA,wBAAAC,EAGA,OAAAA,EAAAxwB,OAMAkwB,EAAArwB,UAAAwG,SAAA,SAAAkqB,EAAAvwB,GAIA,IAAAywB,EACAC,EAAA,IAAA9xB,KAAA0xB,MAAAC,GACA3xB,KAAAwxB,MAAAM,GASA,OAPA9xB,KAAAyxB,YACAI,OAAArmB,EAEAxL,KAAAwxB,MAAAM,GAAA,CACAH,MACAvwB,SAEAywB,GAMAP,EAAArwB,UAAAyT,OAAA,SAAAid,GACA,IAAAG,EAAA,IAAA9xB,KAAA0xB,MAAAC,GACAI,EAAA/xB,KAAAwxB,MAAAM,GAIA,cAFA9xB,KAAAwxB,MAAAM,GACA9xB,KAAAyxB,YACAM,EAAA3wB,OAQAkwB,EAAArwB,UAAA+wB,KAAA,WAGA,IAFA,IAAAC,EAAA,GACAC,EAAAnxB,OAAAixB,KAAAhyB,KAAAwxB,OACAW,EAAA,EAA4BA,EAAAD,EAAAruB,OAA6BsuB,IAAA,CAEzD,IAAAC,EAAApyB,KAAAwxB,MAAAU,EAAAC,IACAF,EAAAxsB,KAAA2sB,EAAAT,KAGA,OAAAM,GAMAX,EAAArwB,UAAAquB,OAAA,WAGA,IAFA,IAAA+C,EAAA,GACAC,EAAAvxB,OAAAixB,KAAAhyB,KAAAwxB,OACAe,EAAA,EAA4BA,EAAAD,EAAAzuB,OAA+B0uB,IAAA,CAE3D,IAAAC,EAAAxyB,KAAAwxB,MAAAc,EAAAC,IACAF,EAAA5sB,KAAA+sB,EAAApxB,OAGA,OAAAixB,GAMAf,EAAArwB,UAAAmP,YAAA,SAAAuhB,GACA,IAAAc,GAAA,EAOA,OALAA,EADA,qBAAAzyB,KAAA0H,SAAAiqB,IAMAc,GAMAnB,EAAArwB,UAAAkf,MAAA,WACAngB,KAAAwxB,MAAA,GACAxxB,KAAAyxB,UAAA,GAMAH,EAAArwB,UAAAmB,KAAA,WACA,OAAApC,KAAAyxB,WAEAH,EAnHc,4CCIPoB,8DCVPC,EAAA,WAMA,SAAAA,EAAAvxB,GAMApB,KAAA4yB,iBAAA,EACA5yB,KAAAoB,QA8FA,OA5FAL,OAAAC,eAAA2xB,EAAA1xB,UAAA,UAMAC,IAAA,WACA,OAAAlB,KAAA6yB,cAEA1xB,IAAA,SAAAC,GACApB,KAAA6yB,aAAAzxB,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA2xB,EAAA1xB,UAAA,YAKAC,IAAA,WACA,OAAAlB,KAAA8yB,QAEA3xB,IAAA,SAAAC,GACApB,KAAA8yB,OAAA1xB,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA2xB,EAAA1xB,UAAA,yBAKAC,IAAA,WACA,OAAAlB,KAAAoF,OAEAjE,IAAA,SAAAC,GACApB,KAAAoF,MAAAhE,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA2xB,EAAA1xB,UAAA,YAKAC,IAAA,WACA,OAAAlB,KAAA4yB,iBAEAzxB,IAAA,SAAAC,GACApB,KAAA4yB,gBAAAxxB,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAA2xB,EAAA1xB,UAAA,gBAKAC,IAAA,WACA,IAAA6xB,EAAA,KACA,OAAAA,GAEA1xB,YAAA,EACAC,cAAA,IAMAqxB,EAAA1xB,UAAAuM,KAAA,SAAAkO,GACAA,EAAAjM,MAAAzP,KAAAgzB,UAAAhzB,KAAAoB,SAMAuxB,EAAA1xB,UAAAwI,MAAA,SAAArD,GACA,IAAA6sB,EAAA,IAAAN,EAAA3yB,KAAAoB,OACA,OAAA6xB,GAOAN,EAAA1xB,UAAA+xB,UAAA,SAAA5xB,GACA,OAAAA,EAAA,gBAEAuxB,EA3GA,gBDWA,SAAAD,GAMAA,IAAA,wBAMAA,IAAA,gBAMAA,IAAA,gBAMAA,IAAA,gBAMAA,IAAA,kBAMAA,IAAA,gBAMAA,IAAA,gBAMAA,IAAA,mBAhDA,CAiDCA,MAAA,KAKD,IAAIQ,EAAY,WAKhB,SAAAC,EAAA9jB,GAMArP,KAAAozB,QAAAV,EAAAW,QAOArzB,KAAAszB,kBAAA,EAMAtzB,KAAAO,qBAAA,IAAwCC,EAAA,KACxCR,KAAAuzB,QAAAlkB,EACArP,KAAAsK,aAyOA,OAvOAvJ,OAAAC,eAAAmyB,EAAAlyB,UAAA,UAMAC,IAAA,WACA,OAAAlB,KAAAwzB,SAEAnyB,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAmyB,EAAAlyB,UAAA,SAMAC,IAAA,WACA,OAAAlB,KAAAyzB,QAEApyB,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAmyB,EAAAlyB,UAAA,oBAMAC,IAAA,WACA,OAAAlB,KAAAszB,mBAEAjyB,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAmyB,EAAAlyB,UAAA,QAMAC,IAAA,WACA,OAAAlB,KAAA0zB,WAAA/sB,OAEAtF,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAmyB,EAAAlyB,UAAA,aAMAC,IAAA,WACA,OAAAlB,KAAA0zB,YAEAryB,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAmyB,EAAAlyB,UAAA,0BAMAC,IAAA,WACA,OAAAlB,KAAA0zB,WAAAC,eAAAnkB,QAEAnO,YAAA,EACAC,cAAA,IAOA6xB,EAAAlyB,UAAAqJ,WAAA,WACAtK,KAAAozB,UAAAV,EAAAW,SAAArzB,KAAA4zB,gBACA5zB,KAAAozB,QAAAV,EAAAmB,KACA7zB,KAAA8zB,kBAEA9zB,KAAA2sB,QACA3sB,KAAA0zB,WAAA,IAA8BK,EAAA,KAAS/zB,KAAAuzB,QAAA5sB,OACvC3G,KAAAuzB,QAAAjS,KAAAthB,KAAA0zB,WAAA,EAAA1zB,KAAA0zB,WAAA/sB,QAOAwsB,EAAAlyB,UAAA0rB,MAAA,WACA3sB,KAAAuzB,QAAAljB,SAAA,GAOA8iB,EAAAlyB,UAAA6yB,eAAA,WACA9zB,KAAA2sB,QACA,IAAAqH,EAAA,IAA0BD,EAAA,KAAS/zB,KAAAuzB,QAAA5sB,OACnC3G,KAAAuzB,QAAAjS,KAAA0S,EAAA,EAAAA,EAAArtB,OACA,IAAAZ,EAAA,EAEA,SAAA4hB,OAAAC,aAAAoM,EAAAC,UAAAluB,EAAA,WAAA4hB,OAAAC,aAAAoM,EAAAC,UAAAluB,EAAA,WAAA4hB,OAAAC,aAAAoM,EAAAC,UAAAluB,EAAA,WAAA4hB,OAAAC,aAAAoM,EAAAC,UAAAluB,EAAA,SAAAiuB,EAAAC,UAAAluB,EAAA,IACA,IAAAmuB,EAAA,IAAAF,EAAAC,UAAAluB,GAAAiuB,EAAAC,UAAAluB,EAAA,GACA,MAAAA,EAAAmuB,EAAAF,EAAArtB,MAAA,CAEA,GADAZ,GAAAmuB,EACA,MAAAF,EAAAC,UAAAluB,EAAA,GAGA,OAFA/F,KAAAwzB,QAAA,IAAAQ,EAAAC,UAAAluB,EAAA,GAAAiuB,EAAAC,UAAAluB,EAAA,QACA/F,KAAAyzB,OAAA,IAAAO,EAAAC,UAAAluB,EAAA,GAAAiuB,EAAAC,UAAAluB,EAAA,IAIAA,GAAA,EACAmuB,EAAA,IAAAF,EAAAC,UAAAluB,GAAAiuB,EAAAC,UAAAluB,EAAA,MAMAhF,OAAAC,eAAAmyB,EAAAlyB,UAAA,UAMAC,IAAA,WACA,OAAAlB,KAAAozB,SAEA/xB,YAAA,EACAC,cAAA,IAOA6xB,EAAAlyB,UAAA2yB,YAAA,WACA5zB,KAAA2sB,QACA,QAAA5mB,EAAA,EAAuBA,EAAAotB,EAAAgB,YAAAtwB,OAAqCkC,IAAA,CAC5D,GAAAotB,EAAAgB,YAAApuB,KAAA/F,KAAAuzB,QAAAa,SAAAruB,GACA,SAEA/F,KAAAuzB,QAAAljB,WAEA,UAOA8iB,EAAAlyB,UAAAozB,mBAAA,WACA,GAAAr0B,KAAAozB,UAAAV,EAAAmB,KAAA,CACA7zB,KAAAs0B,UAAAX,eAAA9vB,OACA7D,KAAAu0B,YAAA,IAAmC3zB,EAAA,KACnCZ,KAAAu0B,YAAAC,SAAA,EAGA,IAFA,IAAAC,EAAA,GACAC,EAAA,GACA3uB,EAAA,EAA2BA,EAAA/F,KAAA20B,uBAAAC,WAA4C7uB,IACvE0uB,GAAA9M,OAAAC,aAAA,KAAA5nB,KAAAuzB,QAAAa,SAAAruB,IAEA,IAAAA,EAAA,EAA2BA,EAAA0uB,EAAA5wB,OAAuBkC,IAClDA,EAAA,QACA2uB,GAAAD,EAAA1uB,IAaA,OAVA/F,KAAAu0B,YAAA7tB,KAAA,CAAAguB,GACA10B,KAAAu0B,YAAAM,UAAA,EACA70B,KAAAu0B,YAAApvB,MAAAsC,SAAAzH,KAAAO,qBAAAuK,KAAA,IAAgFC,EAAA,KAAO/K,KAAAO,qBAAAu0B,UACvF90B,KAAAu0B,YAAApvB,MAAAsC,SAAAzH,KAAAO,qBAAAw0B,QAAA,IAAmFhqB,EAAA,KAAO/K,KAAAO,qBAAAy0B,QAC1Fh1B,KAAAu0B,YAAApvB,MAAAsC,SAAAzH,KAAAO,qBAAA8I,MAAA,IAAiFuP,EAAA,KAAS5Y,KAAAqJ,QAC1FrJ,KAAAu0B,YAAApvB,MAAAsC,SAAAzH,KAAAO,qBAAA+I,OAAA,IAAkFsP,EAAA,KAAS5Y,KAAAsJ,SAC3FtJ,KAAAu0B,YAAApvB,MAAAsC,SAAAzH,KAAAO,qBAAA00B,iBAAA,IAA4Frc,EAAA,KAAS5Y,KAAAi1B,mBACrGj1B,KAAAu0B,YAAApvB,MAAAsC,SAAAzH,KAAAO,qBAAA20B,OAAA,IAAkFnqB,EAAA,KAAO/K,KAAAO,qBAAA40B,YACzFn1B,KAAAu0B,YAAApvB,MAAAsC,SAAAzH,KAAAO,qBAAAkC,WAAA,IAAsFsI,EAAA,KAAO/K,KAAAo1B,kBAC7Fp1B,KAAAu0B,YAAApvB,MAAAsC,SAAAzH,KAAAO,qBAAA80B,YAAAr1B,KAAAs1B,mBACAt1B,KAAAu0B,YAGA,OAAAv0B,KAAAu0B,aAQApB,EAAAlyB,UAAAm0B,cAAA,WACA,OAAAp1B,KAAAO,qBAAAg1B,WAOApC,EAAAlyB,UAAAq0B,gBAAA,WACA,IAAAE,EAAA,IAA+BzwB,EAAA,KAM/B,OALAywB,EAAArwB,MAAAsC,SAAAzH,KAAAO,qBAAAk1B,QAAA,IAA2E7c,EAAA,KAAS5Y,KAAAqJ,QACpFmsB,EAAArwB,MAAAsC,SAAAzH,KAAAO,qBAAAm1B,SAAA,IAA4E/C,GAAU,IACtF6C,EAAArwB,MAAAsC,SAAAzH,KAAAO,qBAAAuxB,EAAA,IAAqElZ,EAAA,MAAS,IAC9E4c,EAAArwB,MAAAsC,SAAAzH,KAAAO,qBAAAo1B,UAAA,IAA6E/c,EAAA,KAAS,KACtF4c,EAAArwB,MAAAsC,SAAAzH,KAAAO,qBAAA00B,iBAAA,IAAoFrc,EAAA,KAAS5Y,KAAAi1B,mBAC7FO,GAOArC,EAAAyC,WAAA,2BAMAzC,EAAAgB,YAAA,UAMAhB,EAAA0C,WAAA,UAMA1C,EAAA2C,WAAA,MACA3C,EAnQgB,eErEhBppB,EAAA/F,EAAAgG,EAAA,sBAAA+rB,IAAA,IAAAjyB,EAA6B,WAC7B,IAAAC,EAAA,SAAAC,EAAAC,GAIA,OAHAF,EAAAhD,OAAAmD,gBACA,CAAcC,UAAA,cAAgBC,OAAA,SAAAJ,EAAAC,GAAsCD,EAAAG,UAAAF,IACpE,SAAAD,EAAAC,GAA6B,QAAAI,KAAAJ,IAAAK,eAAAD,KAAAL,EAAAK,GAAAJ,EAAAI,KAC7BN,EAAAC,EAAAC,IAEA,gBAAAD,EAAAC,GAEA,SAAAM,IAAuBvE,KAAAc,YAAAkD,EADvBD,EAAAC,EAAAC,GAEAD,EAAA/C,UAAA,OAAAgD,EAAAlD,OAAAyD,OAAAP,IAAAM,EAAAtD,UAAAgD,EAAAhD,UAAA,IAAAsD,IAV6B,GAuCzBwxB,EAAS,SAAAtxB,GAwBb,SAAAuxB,EAAAC,GACA,IAAAtxB,EAAAF,EAAAG,KAAA5E,YAgBA,OARA2E,EAAAuxB,aAAA,EAMAvxB,EAAApE,qBAAA,IAAyCC,EAAA,KACzCmE,EAAAwxB,UAAAF,GACAtxB,EA+BA,OAvEAb,EAAAkyB,EAAAvxB,GA+CAuxB,EAAA/0B,UAAAk1B,UAAA,SAAAF,GACAj2B,KAAAo2B,gBAAAH,IAMAD,EAAA/0B,UAAAm1B,gBAAA,SAAAH,GACA,IAAAI,EAAA,IAA4BtC,EAAA,KAASkC,EAAApyB,QACrCwyB,EAAAC,sBAAAL,GACAj2B,KAAAu2B,QAAA,IAA2BrD,EAAYmD,GACvCr2B,KAAAsJ,OAAAtJ,KAAAu2B,QAAAjtB,OACAtJ,KAAAqJ,MAAArJ,KAAAu2B,QAAAltB,MAEArJ,KAAAi1B,iBAAAj1B,KAAAu2B,QAAAtB,kBAMAe,EAAA/0B,UAAAuM,KAAA,WACAxN,KAAAk2B,aAAA,EACAl2B,KAAAu0B,YAAAv0B,KAAAu2B,QAAAlC,sBAEA2B,EAxEa,CAyEXQ,EAAA,2CChHFzsB,EAAA/F,EAAAgG,EAAA,sBAAAysB,IAAA,IAAAC,EAAA3sB,EAAA,QAAA2V,EAAA3V,EAAA,QAAA4sB,EAAA5sB,EAAA,QAwBA0sB,EAAA,WACA,SAAAA,EAAAloB,EAAAC,GAOAxO,KAAA42B,SAAA,IAA4BF,EAAA,KAAQ,OAMpC12B,KAAA62B,gBAAA,EAMA72B,KAAA82B,eAAA,IAMA92B,KAAA+2B,aAA4BrX,EAAA,KAAYsX,MAMxCh3B,KAAAi3B,WAAA,EAMAj3B,KAAAk3B,YAAA,EAMAl3B,KAAAm3B,SAAA,EAMAn3B,KAAAo3B,mBAAA,EAMAp3B,KAAAyC,WAA0Bid,EAAA,KAAavf,IACvC,kBAAAqO,GACAxO,KAAAc,YAAAyN,GACAvO,KAAAqJ,MAAAmF,GAEA,qBAAAA,GAAAD,aAAgEooB,EAAA,KAChE32B,KAAAq3B,SAAA9oB,GAEA,qBAAAC,GAAAD,aAAgEmoB,EAAA,OAChE12B,KAAA4J,MAAA2E,GAqPA,OAlPAxN,OAAAC,eAAAy1B,EAAAx1B,UAAA,SAMAC,IAAA,WACA,OAAAlB,KAAA42B,UAEAz1B,IAAA,SAAAC,GACApB,KAAA42B,SAAAx1B,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAy1B,EAAAx1B,UAAA,cAKAC,IAAA,WACA,2BAAAlB,KAAA62B,iBAAA,MAAA72B,KAAA62B,gBACA,EAGA72B,KAAA62B,iBAGA11B,IAAA,SAAAC,GACApB,KAAA62B,gBAAAz1B,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAy1B,EAAAx1B,UAAA,eAKAC,IAAA,WACA,OAAAlB,KAAA82B,gBAEA31B,IAAA,SAAAC,GACApB,KAAA82B,eAAA11B,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAy1B,EAAAx1B,UAAA,aAwBAC,IAAA,WACA,OAAAlB,KAAA+2B,cAEA51B,IAAA,SAAAC,GACA,GAAApB,KAAA+2B,eAAA31B,EAEA,OADApB,KAAA+2B,aAAA31B,EACApB,KAAA+2B,cACA,KAAyBrX,EAAA,KAAY4X,OACrC,MACA,KAAyB5X,EAAA,KAAY6X,KACrCv3B,KAAA82B,eAAA,MACA,MACA,KAAyBpX,EAAA,KAAY8X,IACrCx3B,KAAA82B,eAAA,MACA,MACA,KAAyBpX,EAAA,KAAY+X,QACrCz3B,KAAA82B,eAAA,UACA,MACA,KAAyBpX,EAAA,KAAYgY,WACrC13B,KAAA82B,eAAA,cACA,MACA,KAAyBpX,EAAA,KAAYsX,MACrC,MACA,QACAh3B,KAAA+2B,aAA4CrX,EAAA,KAAYsX,MACxDh3B,KAAA82B,eAAA,IACA,QAIAz1B,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAy1B,EAAAx1B,UAAA,WAKAC,IAAA,WACA,OAAAlB,KAAAi3B,YAEA91B,IAAA,SAAAC,GACApB,KAAAi3B,WAAA71B,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAy1B,EAAAx1B,UAAA,YAKAC,IAAA,WACA,OAAAlB,KAAAk3B,aAEA/1B,IAAA,SAAAC,GACApB,KAAAk3B,YAAA91B,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAy1B,EAAAx1B,UAAA,cAKAC,IAAA,WACA,OAAAlB,KAAAo3B,oBAEAj2B,IAAA,SAAAC,GACApB,KAAAo3B,mBAAAh2B,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAy1B,EAAAx1B,UAAA,SAsBAC,IAAA,WACA,OAAAlB,KAAAm3B,UAEAh2B,IAAA,SAAAC,GACApB,KAAAm3B,SAAA/1B,GAEAC,YAAA,EACAC,cAAA,IAOAm1B,EAAAx1B,UAAAwI,MAAA,WACA,IAAAkuB,EAAA33B,KACA,OAAA23B,GAMAlB,EAAAx1B,UAAAo2B,SAAA,SAAAjuB,GACA,IAAAwuB,EAAAxuB,EACApJ,KAAA4J,MAAAguB,EAAAhuB,MACA5J,KAAA63B,SAAAD,GAMAnB,EAAAx1B,UAAA62B,eAAA,SAAAC,EAAAzoB,EAAAnJ,EAAAI,EAAAyxB,EAAAC,GACA,IAAAC,GAAA,EACA3xB,GAAA,EACA,MAAAwxB,IACAG,GAAA,GAEAA,EAAAl4B,KAAAm4B,YAAAJ,EAAAxxB,EAAA+I,GACAA,EAAA8oB,aAAAp4B,KAAAqJ,OACAiG,EAAA+oB,YAAAr4B,KAAAs4B,UACAhpB,EAAAipB,WAAAv4B,KAAAw4B,SACA,IAAAC,EAAAz4B,KAAAy4B,WACAA,EAAA,IACAnpB,EAAAopB,cAAAD,GACAP,GAAA,GAEAl4B,KAAA63B,SAGA,OAFAvoB,EAAAqpB,iBAAA34B,KAAA4J,MAAAouB,GAAA,GACAE,GAAA,EACAA,GAMAzB,EAAAx1B,UAAAk3B,YAAA,SAAAR,EAAApxB,EAAA+I,GACA/I,GAAA,EACA,IAAA2b,EAAAliB,KAAAqJ,MACAuvB,EAAA54B,KAAA64B,aAEA,OADAvpB,EAAAwpB,mBAAAF,EAAA54B,KAAA+4B,WAAA7W,GACA3b,GAMAkwB,EAAAx1B,UAAA43B,WAAA,WAEA,IADA,IAAAD,EAAA54B,KAAAg5B,YACAjzB,EAAA,EAAuBA,EAAA6yB,EAAA/0B,SAAoBkC,EAC3C6yB,EAAA7yB,IAAA/F,KAAAqJ,MAEA,OAAAuvB,GAEAnC,EAtTA,wCCxBA1sB,EAAA/F,EAAAgG,EAAA,sBAAAivB,IAAA,IAAAxZ,EAAA1V,EAAA,QAAAmvB,EAAAnvB,EAAA,QAUAkvB,EAAA,WACA,SAAAA,EAAAjtB,EAAAE,EAAAitB,EAAAC,GAMAp5B,KAAAq5B,wBAAA,IAA2C5Z,EAAA,KAK3Czf,KAAAs5B,gBAAA,KAKAt5B,KAAAm5B,OAAA,EAKAn5B,KAAAo5B,OAAA,EACA,qBAAAltB,GAAAF,aAAAitB,GACAj5B,KAAAs5B,gBAAAttB,QACAhM,KAAAq5B,wBAAArtB,EAAAE,SACAlM,KAAAm5B,OAAAntB,EAAAG,SACAnM,KAAAo5B,OAAAptB,EAAAI,UAEA,qBAAA+sB,GAAAjtB,aAAsEuT,EAAA,MAAMzT,aAAqBktB,EAAA,MACjGl5B,KAAAs5B,gBAAAttB,EACAhM,KAAAq5B,wBAAAntB,IAGAlM,KAAAs5B,gBAAAttB,EACAhM,KAAAq5B,wBAAAntB,EACAlM,KAAAm5B,SACAn5B,KAAAo5B,UA6DA,OA1DAr4B,OAAAC,eAAAi4B,EAAAh4B,UAAA,YAOAC,IAAA,WACA,OAAAlB,KAAAq5B,yBAEAl4B,IAAA,SAAAC,GACApB,KAAAq5B,wBAAAj4B,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAi4B,EAAAh4B,UAAA,SAKAC,IAAA,WACA,OAAAlB,KAAAs5B,iBAEAn4B,IAAA,SAAAC,GACApB,KAAAs5B,gBAAAl4B,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAi4B,EAAAh4B,UAAA,YAKAC,IAAA,WACA,OAAAlB,KAAAm5B,QAEAh4B,IAAA,SAAAC,GACApB,KAAAm5B,OAAA/3B,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAi4B,EAAAh4B,UAAA,YAKAC,IAAA,WACA,OAAAlB,KAAAo5B,QAEAj4B,IAAA,SAAAC,GACApB,KAAAo5B,OAAAh4B,GAEAC,YAAA,EACAC,cAAA,IAEA23B,EAlGA,iICDIM,EAAe,WAKnB,SAAAC,EAAAnqB,GACA,SAAAA,EACA,UAAAxO,MAAA,gCAEAb,KAAAqP,SAihBA,OA1gBAmqB,EAAAv4B,UAAAkf,MAAA,WACAngB,KAAAqP,OAAAoqB,eAEAD,EAAAv4B,UAAAy4B,iBAAA,SAAAC,GACAA,aAAsC5uB,EAAA,MACtC/K,KAAAqP,OAAAI,MAAAkqB,EAAA5W,YACA/iB,KAAAqP,OAAAI,MAA8BmqB,EAAA,KAASC,YACvC75B,KAAA85B,cAA+BF,EAAA,KAASF,oBAGxC15B,KAAAqP,OAAAI,MAA8BmqB,EAAA,KAASG,OACvC/5B,KAAAqP,OAAAI,MAAAkqB,GACA35B,KAAAqP,OAAAI,MAA8BmqB,EAAA,KAASC,YACvC75B,KAAA85B,cAA+BF,EAAA,KAASF,oBAOxCF,EAAAv4B,UAAA+4B,cAAA,SAAAl4B,GACA9B,KAAAqP,OAAAI,MAAA3N,EAAAihB,YACA/iB,KAAAqP,OAAAI,MAA0BmqB,EAAA,KAASC,YACnC75B,KAAA85B,cAA2BF,EAAA,KAASK,cACpCj6B,KAAAqP,OAAAI,MAA0BmqB,EAAA,KAASM,UAMnCV,EAAAv4B,UAAAk5B,UAAA,WACAn6B,KAAA85B,cAA2BF,EAAA,KAASO,YAMpCX,EAAAv4B,UAAAm5B,SAAA,SAAAC,GACAr6B,KAAAqP,OAAAI,MAA0BmqB,EAAA,KAASQ,UACnCC,GACAr6B,KAAAqP,OAAAI,MAA8BmqB,EAAA,KAASU,SAEvCt6B,KAAAqP,OAAAI,MAA0BmqB,EAAA,KAASC,YACnC75B,KAAAqP,OAAAI,MAA0BmqB,EAAA,KAASW,SACnCv6B,KAAAqP,OAAAI,MAA0BmqB,EAAA,KAASM,UAMnCV,EAAAv4B,UAAAu5B,oBAAA,SAAAH,GACAr6B,KAAAqP,OAAAI,MAA0BmqB,EAAA,KAASY,qBACnCH,GACAr6B,KAAAqP,OAAAI,MAA8BmqB,EAAA,KAASU,SACvCt6B,KAAAqP,OAAAI,MAA8BmqB,EAAA,KAASM,UAGvCl6B,KAAAqP,OAAAI,MAA8BmqB,EAAA,KAASM,UAOvCV,EAAAv4B,UAAAw5B,eAAA,SAAAJ,GACAr6B,KAAAqP,OAAAI,MAA0BmqB,EAAA,KAASc,YACnCL,GACAr6B,KAAAqP,OAAAI,MAA8BmqB,EAAA,KAASU,SACvCt6B,KAAAqP,OAAAI,MAA8BmqB,EAAA,KAASM,UAGvCl6B,KAAAqP,OAAAI,MAA8BmqB,EAAA,KAASM,UAOvCV,EAAAv4B,UAAA05B,SAAA,SAAAN,GACAr6B,KAAAqP,OAAAI,MAA0BmqB,EAAA,KAASgB,MACnCP,GACAr6B,KAAAqP,OAAAI,MAA8BmqB,EAAA,KAASU,SACvCt6B,KAAAqP,OAAAI,MAA8BmqB,EAAA,KAASM,UAGvCl6B,KAAAqP,OAAAI,MAA8BmqB,EAAA,KAASM,UAOvCV,EAAAv4B,UAAAs5B,QAAA,WACAv6B,KAAA85B,cAA2BF,EAAA,KAASnd,IAMpC+c,EAAAv4B,UAAA45B,cAAA,SAAAR,GACAr6B,KAAA85B,cAA2BF,EAAA,KAASO,WACpCn6B,KAAAqP,OAAAI,MAA0BmqB,EAAA,KAASgB,MACnCP,GACAr6B,KAAAqP,OAAAI,MAA8BmqB,EAAA,KAASU,SACvCt6B,KAAAqP,OAAAI,MAA8BmqB,EAAA,KAASM,UAGvCl6B,KAAAqP,OAAAI,MAA8BmqB,EAAA,KAASM,UAOvCV,EAAAv4B,UAAA65B,gBAAA,WACA96B,KAAA85B,cAA2BF,EAAA,KAASkB,kBAMpCtB,EAAAv4B,UAAA85B,eAAA,SAAAC,GACAh7B,KAAAqP,OAAAI,MAA0BmJ,EAAA,KAASqiB,cAAAD,IACnCh7B,KAAAqP,OAAAI,MAA0BmqB,EAAA,KAASC,YACnC75B,KAAA85B,cAA2BF,EAAA,KAASmB,iBAMpCvB,EAAAv4B,UAAAi6B,WAAA,WACAl7B,KAAA85B,cAA2BF,EAAA,KAASuB,SAMpC3B,EAAAv4B,UAAAm6B,qBAAA,WACAp7B,KAAA85B,cAA2BF,EAAA,KAASpzB,eAMpCgzB,EAAAv4B,UAAAo6B,kBAAA,WACAr7B,KAAA85B,cAA2BF,EAAA,KAASrzB,YAEpCizB,EAAAv4B,UAAAq6B,cAAA,SAAA/sB,EAAAC,GACA,qBAAAD,EACAvO,KAAA85B,cAA+BF,EAAA,KAAS2B,cAExChtB,aAAiCzF,EAAA,MACjC9I,KAAAw7B,WAAAjtB,GACAvO,KAAA85B,cAA+BF,EAAA,KAAS6B,aAGxCz7B,KAAAw7B,WAAAjtB,EAAAC,GACAxO,KAAA85B,cAA+BF,EAAA,KAAS6B,aAOxCjC,EAAAv4B,UAAAy6B,SAAA,SAAA/yB,GACA3I,KAAA27B,eAAAhzB,GACA3I,KAAA47B,UAAAjzB,GACA3I,KAAA85B,cAA2BF,EAAA,KAASiC,UAMpCrC,EAAAv4B,UAAA66B,WAAA,SAAAC,GACA/7B,KAAAqP,OAAAI,MAA0BmJ,EAAA,KAASqiB,cAAAc,IACnC/7B,KAAAqP,OAAAI,MAA0BmqB,EAAA,KAASC,YACnC75B,KAAA85B,cAA2BF,EAAA,KAASoC,iBAMpCxC,EAAAv4B,UAAAg7B,UAAA,SAAAn5B,EAAAD,GACA7C,KAAAw7B,WAAA14B,EAAAD,GACA7C,KAAA85B,cAA2BF,EAAA,KAASqC,YAMpCzC,EAAAv4B,UAAAi7B,UAAA,WACAl8B,KAAA85B,cAA2BF,EAAA,KAASsC,YAMpC1C,EAAAv4B,UAAAk7B,QAAA,WACAn8B,KAAA85B,cAA2BF,EAAA,KAASuC,UAEpC3C,EAAAv4B,UAAAm7B,gBAAA,SAAA7tB,EAAAC,EAAAC,EAAAoR,GACAtR,aAA4BzF,EAAA,KAC5B9I,KAAAo8B,gBAAA7tB,EAAAzL,EAAAyL,EAAA1L,EAAA0L,EAAAlF,MAAAkF,EAAAjF,SAGAtJ,KAAAw7B,WAAAjtB,EAAAC,GACAxO,KAAAw7B,WAAA/sB,EAAAoR,GACA7f,KAAA85B,cAA+BF,EAAA,KAASwC,mBAGxC5C,EAAAv4B,UAAAo7B,kBAAA,SAAA9tB,EAAAC,GACAD,aAA4BzF,EAAA,KAC5B9I,KAAAq8B,kBAAA9tB,EAAAzL,EAAAyL,EAAA1L,IAGA7C,KAAAw7B,WAAAjtB,EAAAC,GACAxO,KAAA85B,cAA+BF,EAAA,KAASyC,qBAOxC7C,EAAAv4B,UAAAq7B,qBAAA,SAAAC,GACAv8B,KAAAqP,OAAAI,MAAA8sB,EAAAxZ,YACA/iB,KAAAqP,OAAAI,MAA0BmqB,EAAA,KAASC,YACnC75B,KAAA85B,cAA2BF,EAAA,KAAS4C,mBAMpChD,EAAAv4B,UAAAw7B,oBAAA,SAAAC,GACA18B,KAAAqP,OAAAI,MAA0BmJ,EAAA,KAASqiB,cAAAyB,IACnC18B,KAAAqP,OAAAI,MAA0BmqB,EAAA,KAASC,YACnC75B,KAAAqP,OAAAI,MAA0BmqB,EAAA,KAAS+C,mBACnC38B,KAAAqP,OAAAI,MAA0BmqB,EAAA,KAASM,UAMnCV,EAAAv4B,UAAA27B,eAAA,SAAAC,GACA78B,KAAAqP,OAAAI,MAA0BmJ,EAAA,KAASqiB,cAAA4B,IACnC78B,KAAAqP,OAAAI,MAA0BmqB,EAAA,KAASC,YACnC75B,KAAA85B,cAA2BF,EAAA,KAASkD,eAEpCtD,EAAAv4B,UAAA87B,iBAAA,SAAAxuB,EAAAC,GACAD,aAA4ByuB,EAAA,MAC5Bh9B,KAAA27B,eAAAptB,GACAvO,KAAA47B,UAAArtB,GACAvO,KAAA85B,cAA+BF,EAAA,KAASqD,oBAGxCj9B,KAAA27B,eAAAptB,GACAvO,KAAA47B,UAAArtB,EAAAC,GACAxO,KAAA85B,cAA+BF,EAAA,KAASqD,oBAGxCzD,EAAAv4B,UAAAi8B,cAAA,SAAA3uB,EAAAC,GACA,GAAAD,aAA4BxD,EAAA,MAAO,mBAAAyD,EAAA,CACnC,IAAA2uB,EAAA5uB,EACA6uB,EAAA5uB,EAIA6uB,EAAA,EAAkCzD,EAAA,KAAS0D,4BAA+B1D,EAAA,KAAS2D,+BACnFv9B,KAAAqP,OAAAI,MAAA0tB,EAAApa,YACA/iB,KAAAqP,OAAAI,MAA8BmqB,EAAA,KAASC,YACvC75B,KAAAqP,OAAAI,MAAA4tB,GACAr9B,KAAAqP,OAAAI,MAA8BmqB,EAAA,KAASM,aAEvC,CACAiD,EAAA5uB,EACA6uB,EAAA5uB,EACAxO,KAAAk9B,cAAA,IAAmCnyB,EAAA,KAAOoyB,GAAAC,KAO1C5D,EAAAv4B,UAAAu8B,UAAA,SAAAvF,GACA,SAAAA,EACA,UAAAp3B,MAAA,gCAEAb,KAAAqP,OAAAI,MAAAwoB,EAAAlV,YACA/iB,KAAAqP,OAAAI,MAA0BmqB,EAAA,KAASC,YACnC75B,KAAA85B,cAA2BF,EAAA,KAAS4D,YAEpChE,EAAAv4B,UAAAw8B,QAAA,SAAA70B,EAAA9G,EAAAM,GACA,qBAAAN,EACA9B,KAAAy9B,QAAA70B,EAAA,IAAmCmC,EAAA,KAAOjJ,GAAAM,OAE1C,CACA,SAAAwG,EACA,UAAA/H,MAAA,8BAEAb,KAAAqP,OAAAI,MAAA3N,EAAAihB,YACA/iB,KAAAqP,OAAAI,MAA8BmqB,EAAA,KAASC,YACvC75B,KAAAqP,OAAAI,MAA8BmJ,EAAA,KAASqiB,cAAA74B,IACvCpC,KAAAqP,OAAAI,MAA8BmqB,EAAA,KAASC,YACvC75B,KAAA85B,cAA+BF,EAAA,KAAS6D,WAOxCjE,EAAAv4B,UAAA64B,cAAA,SAAA4D,GACA19B,KAAAqP,OAAAI,MAAAiuB,GACA19B,KAAAqP,OAAAI,MAA0BmqB,EAAA,KAASM,UAEnCV,EAAAv4B,UAAA06B,eAAA,SAAAhzB,GACA,SAAAA,EACA,UAAA9H,MAAA,8BAEA,qBAAA8H,GAAA,KAAAA,EACA,UAAA9H,MAAA,gEAGA24B,EAAAv4B,UAAA26B,UAAA,SAAArtB,EAAAC,GACA,GAAAD,aAA6ByuB,EAAA,MAAS,qBAAAxuB,EACtCxO,KAAAqP,OAAAI,MAAAlB,EAAAovB,iBAEA,CACA,IAAAC,OAAA,EACAtZ,OAAA,EACA9V,GACAovB,EAAwBZ,EAAA,KAASa,cAAA,GACjCvZ,EAAsB0Y,EAAA,KAASa,cAAA,KAG/BD,EAAwBZ,EAAA,KAASc,WAAA,GACjCxZ,EAAsB0Y,EAAA,KAASc,WAAA,IAE/B99B,KAAAqP,OAAAI,MAAAmuB,GACA59B,KAAAqP,OAAAI,MAAAlB,GACAvO,KAAAqP,OAAAI,MAAA6U,KAGAkV,EAAAv4B,UAAAu6B,WAAA,SAAAjtB,EAAAC,GACA,GAAAD,aAA6BzF,EAAA,MAAM,qBAAA0F,EACnCxO,KAAAw7B,WAAAjtB,EAAAzL,EAAAyL,EAAA1L,OAEA,CACA,IAAAs6B,EAAA5uB,EACAvO,KAAAqP,OAAAI,MAA8BmJ,EAAA,KAASqiB,cAAAkC,IACvCn9B,KAAAqP,OAAAI,MAA8BmqB,EAAA,KAASC,YAEvCrrB,EAAAxO,KAAA+9B,QAAAvvB,GACAxO,KAAAqP,OAAAI,MAA8BmJ,EAAA,KAASqiB,cAAAzsB,IACvCxO,KAAAqP,OAAAI,MAA8BmqB,EAAA,KAASC,cAOvCL,EAAAv4B,UAAA88B,QAAA,SAAAC,GACA,OAAAA,GAMAxE,EAAAv4B,UAAAwO,MAAA,SAAAwuB,GACA,IAAAxb,EAAA,GACAA,GAAAwb,EACAxb,GAAmBmX,EAAA,KAASM,QAC5Bl6B,KAAA85B,cAAArX,IAMA+W,EAAAv4B,UAAAi9B,aAAA,SAAAC,GACA,WAAAA,KAAAt6B,OAAA,GASA,UAAAhD,MAAA,mBARA,IAAA4hB,EAAA,GACAA,GAAuBmX,EAAA,KAASuE,QAChC1b,GAAuBmX,EAAA,KAASC,WAChCpX,GAAA0b,EAEAn+B,KAAA85B,cAAArX,IAUA+W,EAAAv4B,UAAA03B,iBAAA,SAAA/uB,EAAAnH,EAAA27B,GACAx0B,EAAAy0B,UAEAr+B,KAAAqP,OAAAI,MAAA7F,EAAAmZ,SAAAtgB,EAAA27B,IACAp+B,KAAAqP,OAAAI,MAA8BmqB,EAAA,KAASM,WAqBvCV,EAAAv4B,UAAA63B,mBAAA,SAAAF,EAAA0F,GAIAt+B,KAAAu+B,yBAAA3F,EAAA0F,IAMA9E,EAAAv4B,UAAAs9B,yBAAA,SAAA3F,EAAA0F,GACA,IAAAE,EAAA,IACA,GAAA5F,EAAA/0B,OAAA,EACA,QAAAuB,EAAA,EAA+BA,EAAAwzB,EAAA/0B,OAAwBuB,IACvDA,IAAAwzB,EAAA/0B,OAAA,EACA26B,GAAA5F,EAAAxzB,GAAA2d,WAGAyb,GAAA5F,EAAAxzB,GAAA2d,WAAA,IAIAyb,GAAA,KACAA,GAAAF,EAAAvb,WACAyb,GAAA,IAA6B5E,EAAA,KAAS6E,eACtCz+B,KAAAqP,OAAAI,MAAA+uB,GACAx+B,KAAAqP,OAAAI,MAA0BmqB,EAAA,KAASM,UAMnCV,EAAAv4B,UAAAy3B,cAAA,SAAAD,GACAz4B,KAAAqP,OAAAI,MAA0BmJ,EAAA,KAASqiB,cAAAxC,IACnCz4B,KAAAqP,OAAAI,MAA0BmqB,EAAA,KAASC,YACnC75B,KAAA85B,cAA2BF,EAAA,KAASlB,gBAMpCc,EAAAv4B,UAAAm3B,aAAA,SAAA/uB,GACArJ,KAAAqP,OAAAI,MAA0BmJ,EAAA,KAASqiB,cAAA5xB,IACnCrJ,KAAAqP,OAAAI,MAA0BmqB,EAAA,KAASC,YACnC75B,KAAA85B,cAA2BF,EAAA,KAASxB,eAMpCoB,EAAAv4B,UAAAs3B,WAAA,SAAAmG,GACA1+B,KAAAqP,OAAAI,MAAA,EAAAsT,YACA/iB,KAAAqP,OAAAI,MAA0BmqB,EAAA,KAASC,YACnC75B,KAAA85B,cAA2BF,EAAA,KAAS+E,kBAMpCnF,EAAAv4B,UAAAo3B,YAAA,SAAAuG,GACA5+B,KAAAqP,OAAAI,MAAA,EAAAsT,YACA/iB,KAAAqP,OAAAI,MAA0BmqB,EAAA,KAASC,YACnC75B,KAAA85B,cAA2BF,EAAA,KAASiF,mBAEpC99B,OAAAC,eAAAw4B,EAAAv4B,UAAA,YAMAC,IAAA,WACA,OAAAlB,KAAAqP,OAAAgB,UAEAhP,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAw4B,EAAAv4B,UAAA,UAKAC,IAAA,WACA,IAAAmK,EAAA,EACA,OAAArL,KAAAqP,OAAA3I,KAAA7C,SAAA,IAAA7D,KAAAqP,OAAA3I,KAAA7C,OACA,QAAAuB,EAAA,EAAmCA,EAAApF,KAAAqP,OAAA3I,KAAA7C,OAAiCuB,IACpEiG,GAAArL,KAAAqP,OAAA3I,KAAAtB,GAAAvB,OAGA,OAAAwH,GAEAhK,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAw4B,EAAAv4B,UAAA,YAKAC,IAAA,WACA,aAEAG,YAAA,EACAC,cAAA,IAEAk4B,EA1hBmB,mDCDfsF,EAAuB,WAC3B,SAAAC,EAAA39B,GAMApB,KAAAg/B,aAAA,IAAArkB,KAAAskB,GAEAj/B,KAAAk/B,qBAAA,IAA4CC,EAAM,MADlD,qBAAA/9B,EACkD,GAGA,EAHA,KAqGlD,OA/FAL,OAAAC,eAAA+9B,EAAA99B,UAAA,UAMAC,IAAA,WACA,OAAAlB,KAAAk/B,sBAEA/9B,IAAA,SAAAC,GACApB,KAAAk/B,qBAAA99B,GAEAC,YAAA,EACAC,cAAA,IAOAy9B,EAAA99B,UAAAm+B,UAAA,SAAAC,EAAAC,GACAt/B,KAAAk/B,qBAAAE,UAAAC,EAAAC,IAMAP,EAAA99B,UAAAs+B,MAAA,SAAApG,EAAAC,GACAp5B,KAAAk/B,qBAAAM,SAAA,GAAArG,EACAn5B,KAAAk/B,qBAAAM,SAAA,GAAApG,GAMA2F,EAAA99B,UAAAuX,OAAA,SAAAiD,GAEAA,IAAAd,KAAAskB,GAAA,IAEAj/B,KAAAk/B,qBAAAM,SAAA,GAAA7kB,KAAA8kB,IAAAhkB,GACAzb,KAAAk/B,qBAAAM,SAAA,GAAA7kB,KAAA+kB,IAAAjkB,GACAzb,KAAAk/B,qBAAAM,SAAA,IAAA7kB,KAAA+kB,IAAAjkB,GACAzb,KAAAk/B,qBAAAM,SAAA,GAAA7kB,KAAA8kB,IAAAhkB,IAOAsjB,EAAA99B,UAAA8hB,SAAA,WAGA,IAFA,IAAAN,EAAA,GACAkd,EAAA,IACA55B,EAAA,EAAA6V,EAAA5b,KAAAk/B,qBAAAM,SAAA37B,OAAwEkC,EAAA6V,EAAS7V,IAAA,CACjF/F,KAAAi4B,OAAAuH,SAAAz5B,GACA0c,GAAuB7J,EAAA,KAASqiB,cAAAj7B,KAAAk/B,qBAAAM,SAAAz5B,IAChC0c,GAAAkd,EAEA,OAAAld,GAOAsc,EAAA99B,UAAA2+B,SAAA,SAAA3H,GACAj4B,KAAAk/B,qBAAAU,SAAA3H,WAMA8G,EAAAc,iBAAA,SAAAC,GACA,OAAA9/B,KAAA+/B,aAAAD,GAMAf,EAAA99B,UAAA++B,iBAAA,SAAAC,GACA,OAAAjgC,KAAAg/B,aAAAiB,GAMAlB,EAAA99B,UAAAwI,MAAA,WACA,OAAAzJ,MAQA++B,EAAAgB,aAAAplB,KAAAskB,GAAA,IACAF,EA9G2B,GAiHvBI,EAAM,WACV,SAAAe,EAAA3xB,EAAAC,EAAAC,EAAAoR,EAAAC,EAAAC,GACA,qBAAAxR,EACAvO,KAAAmgC,eAAA,GAEA,kBAAA5xB,GACAvO,KAAAc,cACAd,KAAAmgC,eAAA16B,KAAA8I,GACAvO,KAAAmgC,eAAA16B,KAAA+I,GACAxO,KAAAmgC,eAAA16B,KAAAgJ,GACAzO,KAAAmgC,eAAA16B,KAAAoa,GACA7f,KAAAmgC,eAAA16B,KAAAqa,GACA9f,KAAAmgC,eAAA16B,KAAAsa,IAGA/f,KAAAmgC,eAAA5xB,EA0FA,OAvFAxN,OAAAC,eAAAk/B,EAAAj/B,UAAA,YAMAC,IAAA,WACA,OAAAlB,KAAAmgC,gBAEA9+B,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAk/B,EAAAj/B,UAAA,WAKAC,IAAA,WACA,OAAAlB,KAAAmgC,eAAA,IAEA9+B,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAk/B,EAAAj/B,UAAA,WAKAC,IAAA,WACA,OAAAlB,KAAAmgC,eAAA,IAEA9+B,YAAA,EACAC,cAAA,IAOA4+B,EAAAj/B,UAAAm+B,UAAA,SAAAC,EAAAC,GACAt/B,KAAAmgC,eAAA,GAAAd,EACAr/B,KAAAmgC,eAAA,GAAAb,GAMAY,EAAAj/B,UAAAm/B,UAAA,SAAAhoB,GACA,IAAAtV,EAAAsV,EAAAtV,EACAD,EAAAuV,EAAAvV,EACAw9B,EAAAv9B,EAAA9C,KAAAw/B,SAAA,GAAA38B,EAAA7C,KAAAw/B,SAAA,GAAAx/B,KAAAq/B,QACAiB,EAAAx9B,EAAA9C,KAAAw/B,SAAA,GAAA38B,EAAA7C,KAAAw/B,SAAA,GAAAx/B,KAAAs/B,QACA,WAAmBx2B,EAAA,KAAMu3B,EAAAC,IAMzBJ,EAAAj/B,UAAA2+B,SAAA,SAAA3H,GACA,IAAAsI,EAAA,GACAA,EAAA96B,KAAAzF,KAAAw/B,SAAA,GAAAvH,EAAAuH,SAAA,GAAAx/B,KAAAw/B,SAAA,GAAAvH,EAAAuH,SAAA,IACAe,EAAA,GAAAvgC,KAAAw/B,SAAA,GAAAvH,EAAAuH,SAAA,GAAAx/B,KAAAw/B,SAAA,GAAAvH,EAAAuH,SAAA,GACAe,EAAA,GAAAvgC,KAAAw/B,SAAA,GAAAvH,EAAAuH,SAAA,GAAAx/B,KAAAw/B,SAAA,GAAAvH,EAAAuH,SAAA,GACAe,EAAA,GAAAvgC,KAAAw/B,SAAA,GAAAvH,EAAAuH,SAAA,GAAAx/B,KAAAw/B,SAAA,GAAAvH,EAAAuH,SAAA,GACAe,EAAA,GAAAvgC,KAAAq/B,QAAApH,EAAAuH,SAAA,GAAAx/B,KAAAs/B,QAAArH,EAAAuH,SAAA,GAAAvH,EAAAoH,QACAkB,EAAA,GAAAvgC,KAAAq/B,QAAApH,EAAAuH,SAAA,GAAAx/B,KAAAs/B,QAAArH,EAAAuH,SAAA,GAAAvH,EAAAqH,QACA,QAAAv5B,EAAA,EAAuBA,EAAAw6B,EAAA18B,OAAuBkC,IAC9C/F,KAAAw/B,SAAAz5B,GAAAw6B,EAAAx6B,IAQAm6B,EAAAj/B,UAAAu/B,QAAA,WACAxgC,KAAAmgC,eAAA,MAOAD,EAAAj/B,UAAAwI,MAAA,WACA,IAAAogB,EAAA,IAAAqW,EAAAlgC,KAAAmgC,gBACA,OAAAtW,GAEAqW,EAzGU,GCrHVO,EAAA,WACA,SAAAA,IAKAzgC,KAAA0gC,IAAA,MAKA1gC,KAAA2I,KAAA,OAKA3I,KAAA2gC,OAAA,SAKA3gC,KAAA4gC,OAAA,SAKA5gC,KAAA6gC,OAAA,SAEA,OAAAJ,EA5BA,2ECAAK,EAAA,WAKA,SAAAA,IAKA9gC,KAAA+gC,2BAAA,GAuBA,OApBAhgC,OAAAC,eAAA8/B,EAAA7/B,UAAA,mBAKAC,IAAA,WACA,OAAAlB,KAAA+gC,4BAEA1/B,YAAA,EACAC,cAAA,IAQAw/B,EAAA7/B,UAAAY,IAAA,SAAAkK,GACA,OAAA/L,KAAA8L,gBAAArG,KAAAsG,IAEA+0B,EAjCA,2BCDAE,EAAA,WACA,SAAAA,KAeA,OAbAjgC,OAAAC,eAAAggC,EAAA//B,UAAA,SAMAC,IAAA,WACA,IAAA0jB,EAAA5kB,KAAA8nB,SAAA9nB,KAAA6D,QAAA7D,KAAA6D,SAAA7D,KAAA2wB,UAAA,IAAA3wB,KAAA2wB,SACA,OAAA/L,GAEAvjB,YAAA,EACAC,cAAA,IAEA0/B,EAhBA,eCHAC,EAAA,WACA,SAAAA,KAEA,OAAAA,EAHA,GCGAC,EAAA,WACA,SAAAA,KAEA,OAAAA,EAHA,GCAAC,EAAA,WACA,SAAAA,KAEA,OAAAA,EAHA,GCHAC,EAAA,WACA,SAAAA,KAuBA,OArBArgC,OAAAC,eAAAogC,EAAAngC,UAAA,YAKAC,IAAA,WACA,cAAAlB,KAAAqhC,WAEAhgC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAogC,EAAAngC,UAAA,UAIAC,IAAA,WACA,cAAAlB,KAAAqhC,WAEAhgC,YAAA,EACAC,cAAA,IAEA8/B,EAxBA,GCGAE,EAAA,WACA,SAAAA,KAEA,OAAAA,EAHA,GCCAC,EAAA,WACA,SAAAA,KAEA,OAAAA,EAHA,GCDAC,EAAA,WACA,SAAAA,KAEA,OAAAA,EAHA,GCAAC,EAAA,WACA,SAAAA,KAEA,OAAAA,EAHA,GCAAC,EAAA,WACA,SAAAA,KAEA,OAAAA,EAHA,GCAAC,EAAA,WACA,SAAAA,KAEA,OAAAA,EAHA,GCAAC,EAAA,WACA,SAAAA,KAsBA,OApBA7gC,OAAAC,eAAA4gC,EAAA3gC,UAAA,SAKAC,IAAA,WACA,IAAA0jB,EAAA5kB,KAAAoF,QAAApF,KAAAqJ,OAAArJ,KAAAqJ,QAAArJ,KAAA6hC,UAAA,IAAA7hC,KAAA6hC,SACA,OAAAjd,GAEAvjB,YAAA,EACAC,cAAA,IAMAsgC,EAAA3gC,UAAA6gC,UAAA,SAAAz8B,GACA,IAAA08B,EAAA18B,EACA,OAAArF,KAAAoF,MAAA28B,EAAA38B,OAEAw8B,EAvBA,GCAAI,EAAA,WACA,SAAAA,KAEA,OAAAA,EAHA,GCAAC,EAAA,WACA,SAAAA,KAEA,OAAAA,EAHA,GCAAC,EAAA,WACA,SAAAA,KAEA,OAAAA,EAHA,GCAAC,EAAA,WACA,SAAAA,KAEA,OAAAA,EAHA,GCAAC,EAAA,WACA,SAAAA,KAEA,OAAAA,EAHA,GCAAC,EAAA,WAKA,SAAAA,EAAAC,GAKAtiC,KAAAuiC,UAAA,EAIAviC,KAAAwiC,UAAA,EAIAxiC,KAAAyiC,UAAA,EACAziC,KAAA0iC,aAAAJ,EACAtiC,KAAAwP,OAAA,GAkGA,OAhGAzO,OAAAC,eAAAqhC,EAAAphC,UAAA,QAKAC,IAAA,WACA,GAAAlB,KAAAwP,OAAA3L,OAAA7D,KAAA0iC,aAEA,IADA,IAAAxO,EAAAl0B,KAAA0iC,aAAA1iC,KAAAwP,OAAA3L,OACAkC,EAAA,EAA+BA,EAAAmuB,EAAcnuB,IAC7C/F,KAAAwP,OAAA/J,KAAA,GAGA,OAAAzF,KAAAwP,QAEAnO,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAqhC,EAAAphC,UAAA,YAIAC,IAAA,WAIA,YAHAsK,IAAAxL,KAAA2iC,kBAAA,OAAA3iC,KAAA2iC,mBACA3iC,KAAA2iC,iBAAA,GAEA3iC,KAAA2iC,kBAEAthC,YAAA,EACAC,cAAA,IAKA+gC,EAAAphC,UAAA2hC,WAAA,SAAAxhC,GACA,IAAAyhC,EAAA,QAAAzhC,IAAA,MAAAA,GACApB,KAAAkS,MAAA2wB,IAKAR,EAAAphC,UAAA6hC,SAAA,SAAA1hC,GACA,IAAA2hC,GAAA,WAAA3hC,IAAA,GACA2hC,IAAA,MAAAA,IACA,IAAAC,GAAA,SAAA5hC,IAAA,GACA4hC,IAAA,MAAAA,IACA,IAAAC,GAAA,MAAA7hC,IAAA,EACA6hC,IAAA,MAAAA,IACA,IAAAC,EAAA,IAAA9hC,EACA8hC,IAAA,MAAAA,IACA,IAAAL,EAAA,aAAAzhC,IAAA,aAAAA,IAAA,UAAAA,IAAA,MAAAA,GACApB,KAAAkS,MAAA2wB,IAKAR,EAAAphC,UAAAkiC,UAAA,SAAA/hC,GACA,IAAAgiC,EAAA,aAAAhiC,IAAA,aAAAA,IAAA,UAAAA,IAAA,MAAAA,GACApB,KAAAkS,MAAAkxB,IAKAf,EAAAphC,UAAAoiC,YAAA,SAAAjiC,GACA,SAAAA,EACA,UAAAP,MAAA,mCAGA,IADA,IAAAgiC,EAAA,GACA98B,EAAA,EAAuBA,EAAA3E,EAAAyC,OAAkBkC,IACzC88B,EAAAp9B,KAAArE,EAAAkiC,WAAAv9B,IAEA/F,KAAAkS,MAAA2wB,IAKAR,EAAAphC,UAAAsiC,WAAA,SAAAniC,GACApB,KAAAkS,MAAA9Q,IAGAihC,EAAAphC,UAAAiR,MAAA,SAAAkxB,GACA,UAAAA,EACA,UAAAviC,MAAA,kCAGA,IADA,IAAA0J,EAAA,GACAxE,EAAA,EAAuBA,EAAA/F,KAAAqQ,SAAmBtK,IAC1CwE,EAAA9E,KAAAzF,KAAAwP,OAAAzJ,IAEA,IAAAA,EAAA,EAAuBA,EAAAq9B,EAAAv/B,OAAiBkC,IACxCwE,EAAA9E,KAAA29B,EAAAr9B,IAEA,IAAAA,EAAA/F,KAAAqQ,SAAmCtK,EAAA/F,KAAAwP,OAAA3L,OAAwBkC,IAC3DwE,EAAA9E,KAAAzF,KAAAwP,OAAAzJ,IAEA/F,KAAAwP,OAAAjF,EACAvK,KAAA2iC,kBAAAS,EAAAv/B,QAEAw+B,EAtHA,GCuBImB,EAAS,WAEb,SAAAC,EAAAC,GACA1jC,KAAAuiC,UAAA,EACAviC,KAAA2jC,WAAA,EACA3jC,KAAA4jC,UAAA,EACA5jC,KAAA6jC,YAAA,GACA7jC,KAAA8jC,UAAA,EACA9jC,KAAA+jC,aAAA,EACA/jC,KAAAgkC,WAAA,iEACAhkC,KAAAikC,eAAA,4CACAjkC,KAAA0jC,WACA1jC,KAAAsK,aA4rCA,OA1rCAvJ,OAAAC,eAAAyiC,EAAAxiC,UAAA,aAKAC,IAAA,WAIA,OAHA,OAAAlB,KAAAkkC,0BAAA14B,IAAAxL,KAAAkkC,sBACAlkC,KAAAkkC,oBAAA,IAA+CC,EAAA,MAE/CnkC,KAAAkkC,qBAEA7iC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAyiC,EAAAxiC,UAAA,aAIAC,IAAA,WAIA,OAHA,OAAAlB,KAAAokC,0BAAA54B,IAAAxL,KAAAokC,sBACApkC,KAAAokC,oBAAA,IAA+CD,EAAA,MAE/CnkC,KAAAokC,qBAEA/iC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAyiC,EAAAxiC,UAAA,mBAIAC,IAAA,WAIA,OAHA,OAAAlB,KAAAqkC,8BAAA74B,IAAAxL,KAAAqkC,0BACArkC,KAAAqkC,wBAAA,IAAmDF,EAAA,MAEnDnkC,KAAAqkC,yBAEAhjC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAyiC,EAAAxiC,UAAA,mBAIAC,IAAA,WAIA,OAHA,OAAAlB,KAAAskC,8BAAA94B,IAAAxL,KAAAskC,0BACAtkC,KAAAskC,wBAAA,IAAmDH,EAAA,MAEnDnkC,KAAAskC,yBAEAjjC,YAAA,EACAC,cAAA,IAGAmiC,EAAAxiC,UAAAqJ,WAAA,gBACAkB,IAAAxL,KAAAukC,UACAvkC,KAAAukC,QAAA,IAA+BnD,GAE/BphC,KAAAwkC,qBACA,IAAAC,EAAAzkC,KAAA0kC,gBACAC,EAAA3kC,KAAA4kC,gBACA5kC,KAAA6kC,mBAAAJ,GACAzkC,KAAAukC,QAAAlD,SAAAsD,EAAAtD,UAEAoC,EAAAxiC,UAAAujC,mBAAA,WACAxkC,KAAA8nB,OAAA,EACA9nB,KAAA8kC,iBAAA,IAEAC,EAAA/kC,KAAAglC,UAAAhlC,KAAA8nB,QACA9nB,KAAAglC,UAAAhlC,KAAA8nB,QACA9nB,KAAAglC,UAAAhlC,KAAA8nB,QACA9nB,KAAAglC,UAAAhlC,KAAA8nB,aACAtc,IAAAxL,KAAAilC,iBACAjlC,KAAAilC,eAAA,IAAsCd,EAAA,MAEtC,QAAAp+B,EAAA,EAAuBA,EAAAg/B,IAAeh/B,EAAA,CACtC,IAAAyrB,EAAA,IAA4BwP,EAC5BkE,EAAAllC,KAAAmlC,WAAAnlC,KAAAuiC,WACA/Q,EAAAb,SAAA3wB,KAAAolC,UAAAplC,KAAA8nB,QACA0J,EAAA1J,OAAA9nB,KAAAolC,UAAAplC,KAAA8nB,QACA0J,EAAA3tB,OAAA7D,KAAAolC,UAAAplC,KAAA8nB,QACA9nB,KAAAilC,eAAAx9B,SAAAy9B,EAAA1T,GAEAxxB,KAAAqlC,eAAArlC,KAAA8nB,OACA9nB,KAAA2jC,WACA3jC,KAAAslC,cAGA7B,EAAAxiC,UAAAqkC,WAAA,WAIA,IAHA,IAAAC,EAAAC,OAAAC,UAEAC,EAAA1lC,KAAAilC,eAAAjT,OACAjsB,EAAA,EAAuBA,EAAA2/B,EAAA7hC,OAAsBkC,IAAA,CAC7C,IAAA3E,EAAApB,KAAAilC,eAAAv9B,SAAAg+B,EAAA3/B,IACA+hB,EAAA1mB,EAAA0mB,OACA,GAAAyd,EAAAzd,IACAyd,EAAAzd,EACAyd,GAAAvlC,KAAAqlC,gBACA,MAIA,IAAAM,EAAAJ,EAAAvlC,KAAAqlC,eACA,OAAAM,EAAA,CACA,IAAAnU,EAAA,IAA4B2S,EAAA,KAC5B,IAAAp+B,EAAA,EAA2BA,EAAA2/B,EAAA7hC,OAAsBkC,IAAA,CACjD3E,EAAApB,KAAAilC,eAAAv9B,SAAAg+B,EAAA3/B,IACA3E,EAAA0mB,QAAA6d,EACAnU,EAAA/pB,SAAAi+B,EAAA3/B,GAAA3E,GAEApB,KAAAilC,eAAAzT,IAGAiS,EAAAxiC,UAAA6jC,eAAA,WACA,IAAAc,EAAA5lC,KAAAolC,UAAAplC,KAAA8nB,QAEA,GADA9nB,KAAA4jC,SAAA,aAAAgC,EACA,QAAAA,GAAA,aAAAA,GAAA,aAAAA,EAAA,CACA5lC,KAAA2jC,WAAA,EACA3jC,KAAA8nB,OAAA,EACA,IAAA+d,EAAA7lC,KAAAmlC,WAAA,GACA,YAAAU,EACA,UAAAhlC,MAAA,8BAGAb,KAAA8nB,QAAA,EACA,IAAAge,EAAA9lC,KAAAolC,UAAAplC,KAAA8nB,QACA,GAAAge,EAAA,EACA,UAAAjlC,MAAA,8BAEAb,KAAA8nB,OAAA9nB,KAAAolC,UAAAplC,KAAA8nB,QACA8d,EAAA5lC,KAAAolC,UAAAplC,KAAA8nB,QAEA,OAAA8d,GAEAnC,EAAAxiC,UAAAyjC,cAAA,WACA,IAAAqB,EAAA/lC,KAAAgmC,SAAA,QACAhmC,KAAA8nB,OAAAie,EAAAje,OACA,IAAA0J,EAAA,IAAwByP,EACxBzP,EAAAyU,eAAAjmC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAA2U,aAAAnmC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAA1J,OAAA9nB,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAA4U,YAAA,GAGA,IAFA,IAAAC,EAAA,GACAh2B,EAAArQ,KAAA8nB,OACA/hB,EAAA,EAAuBA,EAAAyrB,EAAA2U,aAAwBpgC,IAAA,CAC/C/F,KAAA8nB,OAAAzX,EACA,IAAAi2B,EAAA,IAA6BpF,EAC7BoF,EAAAC,WAAAvmC,KAAAkmC,WAAAlmC,KAAA8nB,QACAwe,EAAAE,WAAAxmC,KAAAkmC,WAAAlmC,KAAA8nB,QACAwe,EAAAG,WAAAzmC,KAAAkmC,WAAAlmC,KAAA8nB,QACAwe,EAAAI,OAAA1mC,KAAAkmC,WAAAlmC,KAAA8nB,QACAwe,EAAAziC,OAAA7D,KAAAkmC,WAAAlmC,KAAA8nB,QACAwe,EAAAxe,OAAA9nB,KAAAkmC,WAAAlmC,KAAA8nB,QACA9nB,KAAA8nB,OAAAie,EAAAje,OAAA0J,EAAA1J,OAAAwe,EAAAxe,OACA,IAAA6e,EAAA,IAAAL,EAAAC,YAAA,IAAAD,EAAAC,WACAD,EAAAxkC,KAAA9B,KAAAmlC,WAAAmB,EAAAziC,OAAA8iC,GACAnV,EAAA4U,YAAArgC,GAAAugC,EACAj2B,GAAAg2B,EAEA,OAAA7U,GAEAiS,EAAAxiC,UAAA2jC,cAAA,WACA,IAAAmB,EAAA/lC,KAAAgmC,SAAA,QACAhmC,KAAA8nB,OAAAie,EAAAje,OACA,IAAA0J,EAAA,IAAwB2P,EAkBxB,OAjBA3P,EAAAoU,QAAA5lC,KAAA4mC,UAAA5mC,KAAA8nB,QACA0J,EAAAqV,aAAA7mC,KAAA4mC,UAAA5mC,KAAA8nB,QACA0J,EAAAsV,mBAAA9mC,KAAA+mC,WAAA/mC,KAAA8nB,QACA0J,EAAAwV,YAAAhnC,KAAA+mC,WAAA/mC,KAAA8nB,QACA0J,EAAAyV,MAAAjnC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAA0V,WAAAlnC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAA2V,QAAAnnC,KAAAonC,UAAApnC,KAAA8nB,QACA0J,EAAAxqB,SAAAhH,KAAAonC,UAAApnC,KAAA8nB,QACA0J,EAAA6V,KAAArnC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAA8V,KAAAtnC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAA+V,KAAAvnC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAAgW,KAAAxnC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAA6P,SAAArhC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAAiW,mBAAAznC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAAkW,kBAAA1nC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAAmW,mBAAA3nC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAAoW,gBAAA5nC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,GAEAiS,EAAAxiC,UAAA4mC,0BAAA,WACA,IAAA9B,EAAA/lC,KAAAgmC,SAAA,QACAhmC,KAAA8nB,OAAAie,EAAAje,OACA,IAAA0J,EAAA,IAAwB8P,EAexB,OAdA9P,EAAAoU,QAAA5lC,KAAA4mC,UAAA5mC,KAAA8nB,QACA0J,EAAAsW,SAAA9nC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAAuW,UAAA/nC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAAwW,QAAAhoC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAAyW,gBAAAjoC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAA0W,mBAAAloC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAA2W,oBAAAnoC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAA4W,WAAApoC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAA6W,eAAAroC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAA8W,cAAAtoC,KAAAglC,UAAAhlC,KAAA8nB,QAEA9nB,KAAA8nB,QAAA,GACA0J,EAAA+W,iBAAAvoC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAAgX,iBAAAxoC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,GAEAiS,EAAAxiC,UAAAwnC,aAAA,WACA,IAAA1C,EAAA/lC,KAAAgmC,SAAA,QACAhmC,KAAA8nB,OAAAie,EAAAje,OACA,IAAA0J,EAAA,IAAwB+P,EA+CxB,OA9CA/P,EAAAoU,QAAA5lC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAAkX,cAAA1oC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAAmX,cAAA3oC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAAoX,aAAA5oC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAAqX,OAAA7oC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAAsX,gBAAA9oC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAAuX,gBAAA/oC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAAwX,kBAAAhpC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAAyX,kBAAAjpC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAA0X,kBAAAlpC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAA2X,kBAAAnpC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAA4X,oBAAAppC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAA6X,oBAAArpC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAA8X,eAAAtpC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAA+X,mBAAAvpC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAAgY,aAAAxpC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAAiY,OAAAzpC,KAAA0pC,UAAA,IACAlY,EAAAmY,gBAAA3pC,KAAA+mC,WAAA/mC,KAAA8nB,QACA0J,EAAAoY,gBAAA5pC,KAAA+mC,WAAA/mC,KAAA8nB,QACA0J,EAAAqY,gBAAA7pC,KAAA+mC,WAAA/mC,KAAA8nB,QACA0J,EAAAsY,gBAAA9pC,KAAA+mC,WAAA/mC,KAAA8nB,QACA0J,EAAAuY,iBAAA/pC,KAAA0pC,UAAA,GACAlY,EAAAwY,YAAAhqC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAAyY,iBAAAjqC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAA0Y,gBAAAlqC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAA2Y,cAAAnqC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAA4Y,eAAApqC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAA6Y,aAAArqC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAA8Y,YAAAtqC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAA+Y,aAAAvqC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAAgZ,iBAAAxqC,KAAA+mC,WAAA/mC,KAAA8nB,QACA0J,EAAAiZ,iBAAAzqC,KAAA+mC,WAAA/mC,KAAA8nB,QACA0J,EAAAoU,QAAA,GACApU,EAAAkZ,SAAA1qC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAAmZ,WAAA3qC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAAoZ,cAAA5qC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAAqZ,YAAA7qC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAAsZ,aAAA9qC,KAAAkmC,WAAAlmC,KAAA8nB,UAGA0J,EAAAkZ,SAAA,EACAlZ,EAAAmZ,WAAA,EACAnZ,EAAAoZ,cAAA,EACApZ,EAAAqZ,YAAA,EACArZ,EAAAsZ,aAAA,GAEAtZ,GAEAiS,EAAAxiC,UAAA8pC,cAAA,WACA,IAAAhF,EAAA/lC,KAAAgmC,SAAA,QACAhmC,KAAA8nB,OAAAie,EAAAje,OACA,IAAA0J,EAAA,IAAwBgQ,EAUxB,OATAhQ,EAAAwZ,WAAAhrC,KAAA4mC,UAAA5mC,KAAA8nB,QACA0J,EAAAyZ,YAAAjrC,KAAA4mC,UAAA5mC,KAAA8nB,QACA0J,EAAA0Z,kBAAAlrC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAA2Z,mBAAAnrC,KAAAglC,UAAAhlC,KAAA8nB,QACA0J,EAAA4Z,aAAAprC,KAAA+mC,WAAA/mC,KAAA8nB,QACA0J,EAAA6Z,UAAArrC,KAAA+mC,WAAA/mC,KAAA8nB,QACA0J,EAAA8Z,UAAAtrC,KAAA+mC,WAAA/mC,KAAA8nB,QACA0J,EAAA+Z,SAAAvrC,KAAA+mC,WAAA/mC,KAAA8nB,QACA0J,EAAAga,SAAAxrC,KAAA+mC,WAAA/mC,KAAA8nB,QACA0J,GAKAiS,EAAAxiC,UAAAwqC,eAAA,SAAAC,EAAAxE,GACA,IAAAnB,EAAA/lC,KAAAgmC,SAAA,QACAhmC,KAAA8nB,OAAAie,EAAAje,OAEA,IADA,IAAAze,EAAA,GACAtD,EAAA,EAAuBA,EAAA2lC,EAAgB3lC,IAAA,CACvC,IAAAg8B,EAAA,IAA4BN,EAC5BM,EAAA4J,aAAA3rC,KAAAkmC,WAAAlmC,KAAA8nB,QACAia,EAAA6J,IAAA5rC,KAAAglC,UAAAhlC,KAAA8nB,QACA,IAAA+jB,EAAA,IAAA9J,EAAA4J,aAAAzE,EACA79B,EAAA5D,KAAAkV,KAAA+L,MAAAmlB,IAEA,OAAAxiC,GAKAo6B,EAAAxiC,UAAA6qC,cAAA,WACA,IAAA/F,EAAA/lC,KAAAgmC,SAAA,QACAhmC,KAAA8nB,OAAAie,EAAAje,OACA,IAAA0J,EAAA,IAAwBmQ,EACxBnQ,EAAAoU,QAAA5lC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAAua,YAAA/rC,KAAAkmC,WAAAlmC,KAAA8nB,QAGA,IAFA,IAAAzX,EAAArQ,KAAA8nB,OACAkkB,EAAA,GACAjmC,EAAA,EAAuBA,EAAAyrB,EAAAua,YAAuBhmC,IAAA,CAC9C/F,KAAA8nB,OAAAzX,EACA,IAAA47B,EAAA,IAA+BvK,EAC/BuK,EAAA1F,WAAAvmC,KAAAkmC,WAAAlmC,KAAA8nB,QACAmkB,EAAAzF,WAAAxmC,KAAAkmC,WAAAlmC,KAAA8nB,QACAmkB,EAAAnkB,OAAA9nB,KAAA+mC,WAAA/mC,KAAA8nB,QACAzX,EAAArQ,KAAA8nB,OACA9nB,KAAAksC,iBAAAD,GACAD,EAAAjmC,GAAAkmC,EAEA,OAAAD,GAKAvI,EAAAxiC,UAAAirC,iBAAA,SAAAD,GACA,IAAAlG,EAAA/lC,KAAAgmC,SAAA,QACAhmC,KAAA8nB,OAAAie,EAAAje,OAAAmkB,EAAAnkB,OACA,IAAA1H,EAAApgB,KAAAkmC,WAAAlmC,KAAA8nB,QACApW,EAAA1R,KAAAmsC,gBAAAF,EAAA1F,WAAA0F,EAAAzF,YACA90B,IAAqCmN,EAAA,KAAeutB,UAAcvtB,EAAA,KAAautB,UAAavtB,EAAA,KAAawtB,UACzG,GAAA36B,IAAyBmN,EAAA,KAAewU,QACxC,OAAAjT,GACA,KAAqBvB,EAAA,KAAaytB,MAClCtsC,KAAAusC,mBAAAN,EAAAv6B,GACA,MACA,KAAqBmN,EAAA,KAAawtB,UAClCrsC,KAAAwsC,uBAAAP,EAAAv6B,GACA,MACA,KAAqBmN,EAAA,KAAa4tB,QAClCzsC,KAAA0sC,qBAAAT,EAAAv6B,GACA,QAOA+xB,EAAAxiC,UAAAsrC,mBAAA,SAAAN,EAAAv6B,GACA,IAAAq0B,EAAA/lC,KAAAgmC,SAAA,QACAhmC,KAAA8nB,OAAAie,EAAAje,OAAAmkB,EAAAnkB,OACA,IAAA0J,EAAA,IAAwByQ,EACxBzQ,EAAApR,OAAApgB,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAA3tB,OAAA7D,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAAoU,QAAA5lC,KAAAkmC,WAAAlmC,KAAA8nB,QACA,OAAA9nB,KAAA2sC,kBAAAnhC,IAAAxL,KAAA2sC,cACA3sC,KAAA2sC,YAAA,GAEA,QAAA5mC,EAAA,EAAuBA,EAAA,MAASA,EAAA,CAChC,IAAA6mC,EAAA,IAAgChL,EAChCgL,EAAAxnC,MAAApF,KAAAo0B,SAAAp0B,KAAA8nB,QACA8kB,EAAAvjC,MAAArJ,KAAA6sC,SAAAD,EAAAxnC,OACAwnC,EAAA/K,SAAA97B,EACA/F,KAAA8sC,UAAArlC,SAAA1B,EAAA6mC,GACA5sC,KAAA+sC,SAAAH,EAAAl7B,GAEA1R,KAAA2sC,YAAAhyB,KAAAC,IAAA7U,EAAA/F,KAAA2sC,eAMAlJ,EAAAxiC,UAAAurC,uBAAA,SAAAP,EAAAv6B,GACA,IAAAq0B,EAAA/lC,KAAAgmC,SAAA,QACAhmC,KAAA8nB,OAAAie,EAAAje,OAAAmkB,EAAAnkB,OACA,IAAAlkB,EAAA8N,IAAuCmN,EAAA,KAAemuB,QAAAhtC,KAAAitC,UAAAjtC,KAAA8sC,UACtDtb,EAAA,IAAwB0Q,EACxB1Q,EAAApR,OAAApgB,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAA3tB,OAAA7D,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAAoU,QAAA5lC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAA0b,WAAAltC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAA2b,YAAAntC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAA4b,cAAAptC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAA6b,WAAArtC,KAAAkmC,WAAAlmC,KAAA8nB,QACA,IAAAwlB,EAAA9b,EAAA0b,WAAA,EACA1b,EAAA+b,SAAAvtC,KAAAwtC,gBAAAF,GACA9b,EAAAic,YAAAztC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAAkc,WAAA1tC,KAAAwtC,gBAAAF,GACA9b,EAAAmc,QAAA3tC,KAAAwtC,gBAAAF,GACA9b,EAAAoc,cAAA5tC,KAAAwtC,gBAAAF,GACA,IAAAzpC,EAAA2tB,EAAA3tB,OAAA,MAAAypC,EACA9b,EAAAqc,QAAA7tC,KAAAwtC,gBAAA3pC,GAIA,IAFA,IAAAiqC,EAAA,EACA1oC,EAAA,EACA6V,EAAA,EAAuBA,EAAAqyB,EAAcryB,IACrC,QAAA6W,EAAAN,EAAAkc,WAAAzyB,GAA6C6W,GAAAN,EAAA+b,SAAAtyB,IAAA,QAAA6W,EAAuCA,IAAA,CACpF,OAAAN,EAAAoc,cAAA3yB,GACA6yB,EAAAhc,EAAAN,EAAAmc,QAAA1yB,GAAA,UAEA,CAEA,GADA7V,EAAA6V,EAAAuW,EAAAoc,cAAA3yB,GAAA,EAAAqyB,EAAAxb,EAAAN,EAAAkc,WAAAzyB,GACA7V,GAAAosB,EAAAqc,QAAAhqC,OACA,SAEAiqC,EAAAtc,EAAAqc,QAAAzoC,GAAAosB,EAAAmc,QAAA1yB,GAAA,MAEA,IAAA8mB,EAAA,IAAgCH,EAChCG,EAAA38B,MAAA0oC,EACA/L,EAAA14B,MAAArJ,KAAA6sC,SAAA9K,EAAA38B,OACA,IAAA2oC,EAAAr8B,IAAuCmN,EAAA,KAAemvB,QAAA,eAAAlc,GAAA,IAAAA,IACtDiQ,EAAAF,SAAAkM,EACAnqC,EAAA6D,SAAAsmC,EAAAhM,GACA/hC,KAAA+sC,SAAAhL,EAAArwB,KAOA+xB,EAAAxiC,UAAAyrC,qBAAA,SAAAT,EAAAv6B,GACA,IAAAq0B,EAAA/lC,KAAAgmC,SAAA,QACAhmC,KAAA8nB,OAAAie,EAAAje,OAAAmkB,EAAAnkB,OACA,IAAA0J,EAAA,IAAwB2Q,EACxB3Q,EAAApR,OAAApgB,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAA3tB,OAAA7D,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAAoU,QAAA5lC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAAyc,UAAAjuC,KAAAkmC,WAAAlmC,KAAA8nB,QACA0J,EAAA0c,WAAAluC,KAAAkmC,WAAAlmC,KAAA8nB,QACA,QAAA/hB,EAAA,EAAuBA,EAAAyrB,EAAA0c,aAAsBnoC,EAAA,CAC7C,IAAA6mC,EAAA,IAAgChL,EAChCgL,EAAAxnC,MAAApF,KAAAkmC,WAAAlmC,KAAA8nB,QACA8kB,EAAAvjC,MAAArJ,KAAA6sC,SAAAD,EAAAxnC,OACAwnC,EAAA/K,SAAA97B,EAAAyrB,EAAAyc,UACAjuC,KAAA8sC,UAAArlC,SAAA1B,EAAA6mC,GACA5sC,KAAA+sC,SAAAH,EAAAl7B,GAEA1R,KAAA2sC,YAAAhyB,KAAAC,IAAA7U,EAAA/F,KAAA2sC,eAGAlJ,EAAAxiC,UAAA4jC,mBAAA,SAAAJ,GACA,QAAA1+B,EAAA,EAAuBA,EAAA0+B,EAAA0B,aAA4BpgC,IAAA,CACnD,IAAAugC,EAAA7B,EAAA2B,YAAArgC,GAUA,GATA,IAAAugC,EAAAI,OAEA1mC,KAAAukC,QAAA4J,WAAA7H,EAAAxkC,KAEA,IAAAwkC,EAAAI,SAEA1mC,KAAAukC,QAAA6J,eAAA9H,EAAAxkC,MAGA,OAAA9B,KAAAukC,QAAA4J,iBAAA3iC,IAAAxL,KAAAukC,QAAA4J,YAAA,OAAAnuC,KAAAukC,QAAA6J,qBAAA5iC,IAAAxL,KAAAukC,QAAA6J,eACA,QAKA3K,EAAAxiC,UAAA+kC,SAAA,SAAAlkC,GAIA,IACAuD,EADAmsB,EAAA,IAAwBwP,EAQxB,OANAhhC,KAAAilC,eAAA70B,YAAAtO,KACAuD,EAAArF,KAAAilC,eAAAv9B,SAAA5F,IAEA,OAAAuD,QAAAmG,IAAAnG,IACAmsB,EAAAnsB,GAEAmsB,GAKAiS,EAAAxiC,UAAA4rC,SAAA,SAAAwB,GAEA,OADAA,IAAAruC,KAAAqJ,MAAAxF,OAAAwqC,EAAAruC,KAAAqJ,MAAAxF,OAAA,EACA7D,KAAAqJ,MAAAglC,IAMA5K,EAAAxiC,UAAAkrC,gBAAA,SAAA5F,EAAAC,GACA,IAAApmB,EAAqBvB,EAAA,KAAewU,QAgBpC,OAfAkT,GAA0B1nB,EAAA,KAAawtB,WAAA7F,GAA4B3nB,EAAA,KAAsByvB,UAGzFluB,EAAqBvB,EAAA,KAAemvB,OAEpCzH,GAA+B1nB,EAAA,KAAawtB,WAAA7F,GAA4B3nB,EAAA,KAAsBmuB,QAG9F5sB,EAAqBvB,EAAA,KAAemuB,QAEpCzG,GAA+B1nB,EAAA,KAAautB,WAAA5F,GAA4B3nB,EAAA,KAAsB0vB,QAG9FnuB,EAAqBvB,EAAA,KAAeutB,WAEpChsB,GAMAqjB,EAAAxiC,UAAA8rC,SAAA,SAAAhL,EAAArwB,GACA,IAAA9N,EAAA,KACA,OAAA8N,GACA,KAAiBmN,EAAA,KAAemuB,QAChCppC,EAAA5D,KAAAwuC,gBACA,MACA,KAAiB3vB,EAAA,KAAeutB,UAChC,KAAiBvtB,EAAA,KAAemvB,OAChCpqC,EAAA5D,KAAAyuC,gBACA,MAEA7qC,EAAA6D,SAAAs6B,EAAA38B,MAAA28B,IAMA0B,EAAAxiC,UAAAytC,kBAAA,SAAAjK,EAAAE,EAAAgK,EAAAC,EAAAC,EAAAC,GAKA9uC,KAAA6kC,mBAAAJ,GAGA,IADA,IAAAsK,GAAA,EACAhpC,EAAA,EAAuBA,EAAA+oC,EAAAjrC,OAAuBkC,IAAA,CAC9C,IAAAkmC,EAAA6C,EAAA/oC,GACA2L,EAAA1R,KAAAmsC,gBAAAF,EAAA1F,WAAA0F,EAAAzF,YACA,GAAA90B,IAA6BmN,EAAA,KAAemvB,OAAA,CAC5Ce,GAAA,EACA,OAGA/uC,KAAAukC,QAAAyK,SAAAD,EACA/uC,KAAAukC,QAAAlD,SAAAsD,EAAAtD,SACArhC,KAAAukC,QAAA6G,aAAA,IAAAyD,EAAAzD,aACAprC,KAAAukC,QAAA0G,YAAA4D,EAAA5D,YACA,IAAAgE,EAAA,IAAAtK,EAAAuC,WACAlnC,KAAAukC,QAAA2K,UAAAN,EAAAzE,cAAA8E,EACAjvC,KAAAukC,QAAA4K,UAAAR,EAAA7G,SAAAmH,EAGAjvC,KAAAukC,QAAA6K,UAAA,IAAAR,EAAAjE,WAAAiE,EAAAjE,WAAA,GAAAhG,EAAAuC,WAAA+H,EACAjvC,KAAAukC,QAAA8K,WAAAT,EAAAxE,eAAA6E,EACAjvC,KAAAukC,QAAA+K,WAAAX,EAAA5G,UAAAkH,EAEAjvC,KAAAukC,QAAAxI,SAAA6S,EAAAzE,cAAAyE,EAAAxE,eAAAwE,EAAAvE,cAAA4E,EACAjvC,KAAAukC,QAAAyD,QAAArtB,KAAA40B,KAAAZ,EAAA3G,QAAAiH,GACA,IAAA3rC,EAAAqhC,EAAA0C,KAAA4H,EACA1rC,EAAAoX,KAAA40B,KAAAvvC,KAAAukC,QAAA4K,UAAAnvC,KAAAukC,QAAAyD,SACAxkC,EAAAmhC,EAAA4C,KAAA0H,EACAxrC,EAAAzD,KAAAukC,QAAA+K,WACAtvC,KAAAukC,QAAAiL,QAAA,IAAmC1mC,EAAA,KAASxF,EAAAC,EAAAC,EAAAC,GAE5CzD,KAAAukC,QAAAkL,MAAA,GACAzvC,KAAAukC,QAAAmL,WAAA1vC,KAAA2vC,cACA3vC,KAAAukC,QAAA9vB,SAAAzU,KAAAilC,eAAA70B,YAAA,OACApQ,KAAAukC,QAAAqL,oBAAAjL,EAAAuC,WAAA0H,EAAA7F,gBACA/oC,KAAAukC,QAAAsL,sBAAAlL,EAAAuC,WAAA0H,EAAAzF,mBAKA1F,EAAAxiC,UAAA0uC,YAAA,WACA,IAAAhpC,EAAA,IACAk8B,EAAA,GACA,GAAA7iC,KAAAukC,QAAAyK,SACA,QAAAjpC,EAAA,EAA2BA,EAAAY,EAAWZ,IAAA,CACtC,IAAA6mC,EAAA5sC,KAAA8vC,SAAAnoB,OAAAC,aAAA7hB,IACA88B,EAAA98B,GAAA6mC,EAAA,QAAAA,EAAAvjC,UAIA,KAAA0mC,EAAA,GACAC,EAAA,IACAC,EAAAtoB,OAAAC,aAAA,IACA,IAAA7hB,EAAA,EAA2BA,EAAAY,EAAWZ,IAAA,CACtCgqC,EAAA,GAAAhqC,EACA,IAAA4C,EAAA3I,KAAAkwC,UAAAH,EAAA,EAAAA,EAAAlsC,QACAssC,EAAAxnC,EAAA9E,OAAA,EAAA8E,EAAA,GAAAqnC,EACApD,EAAA5sC,KAAA8vC,SAAAK,GACAvD,EAAAhoB,OAIAgoB,EAAA5sC,KAAA8vC,SAAAG,GACApN,EAAA98B,GAAA6mC,EAAA,QAAAA,EAAAvjC,OAJAw5B,EAAA98B,GAAA6mC,EAAAvjC,OAQA,OAAAw5B,GAKAY,EAAAxiC,UAAAmvC,gBAAA,WACA,IAAArO,EAAA/hC,KAAA8vC,SAAkCO,EAAA,KAAexW,YACjD,OAAAkI,GAKA0B,EAAAxiC,UAAAivC,UAAA,SAAAH,EAAAnS,EAAA/5B,GAEA,IADA,IAAA0G,EAAA,GACAnF,EAAA,EAA2BA,EAAAvB,EAAgBuB,IAC3CmF,GAAAod,OAAAC,aAAAmoB,EAAA3qC,EAAAw4B,IAEA,OAAArzB,GAKAk5B,EAAAxiC,UAAAqvC,cAAA,SAAAC,GACA,IAAAxK,EAAA/lC,KAAAgmC,SAAA,QACAhmC,KAAA8nB,OAAAie,EAAAje,OACA,IAAA0J,EAAA,IAAwBwQ,EACxBxyB,EAAA,KACA,GAAA+gC,EAAA,CACA,IAAA30B,EAAAmqB,EAAAliC,OAAA,EACA2L,EAAA,GACA,QAAAzJ,EAAA,EAA2BA,EAAA6V,EAAS7V,IACpCyJ,EAAAzJ,GAAA,EAAA/F,KAAAkmC,WAAAlmC,KAAA8nB,YAGA,CACAlM,EAAAmqB,EAAAliC,OAAA,EACA2L,EAAA,GACA,IAAAzJ,EAAA,EAA2BA,EAAA6V,EAAS7V,IACpCyJ,EAAAzJ,GAAA/F,KAAA+mC,WAAA/mC,KAAA8nB,QAIA,OADA0J,EAAAgf,QAAAhhC,EACAgiB,GAKAiS,EAAAxiC,UAAAwvC,iBAAA,SAAAC,EAAAC,GAKAD,EAAAtgC,YAAA,IACAsgC,EAAAjpC,SAAA,KAIA,IAFA,IAAAgC,EAAA,IAAwB06B,EAAA,KACxByM,EAAAF,EAAA1e,OACAjsB,EAAA,EAAuBA,EAAA6qC,EAAA/sC,OAA0BkC,IACjD0D,EAAAhC,SAAAmpC,EAAA7qC,GAAA2qC,EAAAhpC,SAAAkpC,EAAA7qC,KAEA,IAAAA,EAAA,EAAuBA,EAAA6qC,EAAA/sC,OAA0BkC,IAAA,CACjD,IAAA8qC,EAAAD,EAAA7qC,GACA/F,KAAA8wC,sBAAAJ,EAAAG,EAAAF,KAMAlN,EAAAxiC,UAAA6vC,sBAAA,SAAAJ,EAAA3O,EAAA4O,GAKA,GAAA5O,EAAA4O,EAAAH,QAAA3sC,OAAA,GACA,IAAAktC,EAAAJ,EAAAH,QAAAzO,GACA,GAAAgP,IAAAJ,EAAAH,QAAAzO,EAAA,IACA,IAAAgE,EAAA/lC,KAAAgmC,SAAA,QACAhmC,KAAA8nB,OAAAie,EAAAje,OAAAipB,EACA,IAAAC,EAAA,IAAsC5O,EAOtC,GANA4O,EAAAC,iBAAAjxC,KAAAglC,UAAAhlC,KAAA8nB,QACAkpB,EAAA3J,KAAArnC,KAAAglC,UAAAhlC,KAAA8nB,QACAkpB,EAAA1J,KAAAtnC,KAAAglC,UAAAhlC,KAAA8nB,QACAkpB,EAAAzJ,KAAAvnC,KAAAglC,UAAAhlC,KAAA8nB,QACAkpB,EAAAxJ,KAAAxnC,KAAAglC,UAAAhlC,KAAA8nB,QAEAkpB,EAAAC,iBAAA,GACA,IAAAC,EAAA,EACAC,GAAA,EACA,MAAAA,EAAA,CACA,IAAAlK,EAAAjnC,KAAAkmC,WAAAlmC,KAAA8nB,QACAspB,EAAApxC,KAAAkmC,WAAAlmC,KAAA8nB,QAIA,GAHA4oB,EAAAtgC,YAAAghC,IACAV,EAAAjpC,SAAA2pC,EAAA,GAE2D,KAA3DnK,EAAqCpoB,EAAA,KAAsBwyB,gBAC3D,MAEAH,EAAoE,KAApEjK,EAA8CpoB,EAAA,KAAsByyB,kBAAA,IACT,KAA3DrK,EAAqCpoB,EAAA,KAAsB0yB,aAC3DL,GAAA,EAEgE,KAAhEjK,EAA0CpoB,EAAA,KAAsB2yB,iBAChEN,GAAA,EAEgE,KAAhEjK,EAA0CpoB,EAAA,KAAsB4yB,kBAChEP,GAAA,GAEAlxC,KAAA8nB,QAAAopB,OAUAzN,EAAAxiC,UAAAywC,mBAAA,SAAAhB,EAAAC,EAAAgB,EAAAC,GAKAD,EAAA,GAEA,IAAAE,EAAAnB,EAAA1e,OACA6f,EAAAC,KAAA,SAAAC,EAAA9tC,GAA2C,OAAA8tC,EAAA9tC,IAE3C,IADA,IAAA+tC,EAAA,EACAjsC,EAAA,EAAuBA,EAAA8rC,EAAAhuC,OAAyBkC,IAAA,CAChD,IAAAqrC,EAAAS,EAAA9rC,GACA4qC,EAAAH,QAAA3sC,OAAA,IACAmuC,GAAArB,EAAAH,QAAAY,EAAA,GAAAT,EAAAH,QAAAY,IAGA,IAAAa,EAAAjyC,KAAAkyC,MAAAF,GACAJ,EAAA,GACA,IAAA7rC,EAAA,EAAuBA,EAAAksC,EAAsBlsC,IAC7C6rC,EAAAnsC,KAAA,GAEA,IAAA0sC,EAAA,EACAC,EAAA,EACA5gB,EAAAxxB,KAAAgmC,SAAA,QAEA,IAAAjgC,EAAA,EAAuBA,EAAA4qC,EAAAH,QAAA3sC,OAA8BkC,IAErD,GADA4rC,EAAAlsC,KAAA0sC,GACAC,EAAAP,EAAAhuC,QAAAguC,EAAAO,KAAArsC,EAAA,GACAqsC,EACAT,EAAA5rC,GAAAosC,EACA,IAAAE,EAAA1B,EAAAH,QAAAzqC,GACAusC,EAAA3B,EAAAH,QAAAzqC,EAAA,GAAAssC,EACA,GAAAC,EAAA,GACAtyC,KAAA8nB,OAAA0J,EAAA1J,OAAAuqB,EACA,IAAA9nC,EAAAvK,KAAAshB,KAAAswB,EAAAO,EAAAG,GACAV,EAAArnC,EAAAiF,OACA2iC,GAAAG,GAIA,OAAgBC,eAAAP,EAAAL,eAAAC,kBAMhBnO,EAAAxiC,UAAAuxC,gBAAA,SAAAb,EAAAc,EAAAC,GAEA,UAAAf,EACA,UAAA9wC,MAAA,0CAMA,IAJA,IAAAuB,EAAA,IAAAuvC,EAAA9tC,OAAA,EAAA8tC,EAAA9tC,OACA8C,EAAA3G,KAAAkyC,MAAA9vC,GAEAsZ,EAAA,IAAyB2mB,EAAe17B,GACxCZ,EAAA,EAAuBA,EAAA4rC,EAAA9tC,OAAyBkC,IAAA,CAChD,IAAA3E,EAAAuwC,EAAA5rC,GACA0sC,GACArxC,GAAA,EACAsa,EAAAknB,WAAAxhC,IAGAsa,EAAAonB,SAAA1hC,GAGA,OAAgBuxC,eAAAj3B,EAAAhV,KAAAksC,YAAAxwC,IAKhBqhC,EAAAxiC,UAAAixC,MAAA,SAAA9wC,GACA,OAAAA,EAAA,MAMAqiC,EAAAxiC,UAAA4xC,eAAA,SAAAH,EAAAd,EAAAW,EAAAO,GAEA,UAAAJ,EACA,UAAA7xC,MAAA,6CAEA,UAAA+wC,EACA,UAAA/wC,MAAA,2CAEAb,KAAAgkC,WAAA,IACAz5B,EAAAvK,KAAA+yC,qBAAAL,EAAAd,EAAA,GACAoB,EAAAzoC,EAAAyoC,kBACAjO,EAAAx6B,EAAAw6B,UACArpB,EAAA,IAAyB2mB,EAAe2Q,GACxCt3B,EAAAonB,SAAA,OACApnB,EAAAknB,WAAAmC,GACA,IAAAqI,EAAAptC,KAAAikC,eAAAc,GAQA,OAPArpB,EAAAknB,WAAA,WAAAwK,KACA1xB,EAAAknB,WAAAwK,GACA1xB,EAAAknB,WAAA,IAAAmC,GAAA,OAAAqI,MAEAptC,KAAAizC,eAAAv3B,EAAAqpB,EAAA2N,EAAAd,EAAAW,EAAAO,GAEA9yC,KAAAkzC,YAAAx3B,EAAAg3B,EAAAd,GACAl2B,EAAAhV,MAGA+8B,EAAAxiC,UAAA8xC,qBAAA,SAAAL,EAAAd,EAAA7M,GAEA,UAAA2N,EACA,UAAA7xC,MAAA,6CAEA,UAAA+wC,EACA,UAAA/wC,MAAA,2CAGAkkC,EAAA,EAGA,IAFA,IAAAf,EAAAhkC,KAAAgkC,WACAgP,EAAA,EACAjtC,EAAA,EAAuBA,EAAAi+B,EAAAngC,OAAuBkC,IAAA,CAC9C,IAAAotC,EAAAnP,EAAAj+B,GACA,YAAAotC,GAAA,SAAAA,EAAA,CACA,IAAA3hB,EAAAxxB,KAAAgmC,SAAAmN,GACA3hB,EAAA5M,UACAmgB,EACAiO,GAAAhzC,KAAAkyC,MAAA1gB,EAAA3tB,UAIAmvC,GAAAN,EAAA7uC,OACAmvC,GAAApB,EAAA/tC,OACA,IAAAuvC,EAAA,GAAArO,EAAA,GAEA,OADAiO,GAAAI,EACA,CAAgBJ,oBAAAjO,cAMhBtB,EAAAxiC,UAAAgyC,eAAA,SAAAv3B,EAAAqpB,EAAA2N,EAAAd,EAAAW,EAAAO,GAEA,UAAAp3B,EACA,UAAA7a,MAAA,oCAEA,UAAA6xC,EACA,UAAA7xC,MAAA,6CAEA,UAAA+wC,EACA,UAAA/wC,MAAA,2CAKA,IAHA,IAAAmjC,EAAAhkC,KAAAgkC,WACAoP,EAAA,GAAArO,EAAA,GACAsO,EAAA,EACAttC,EAAA,EAAuBA,EAAAi+B,EAAAngC,OAAuBkC,IAAA,CAC9C,IAAAotC,EAAAnP,EAAAj+B,GACAggC,EAAA/lC,KAAAgmC,SAAAmN,GACA,IAAApN,EAAAnhB,MAAA,CAIA,GADAlJ,EAAA2nB,YAAA8P,GACA,SAAAA,EAAA,CACA,IAAAxiB,EAAA3wB,KAAAszC,kBAAA1B,GACAl2B,EAAAonB,SAAAnS,GACA0iB,EAAAd,OAEA,YAAAY,EAAA,CACAxiB,EAAA3wB,KAAAszC,kBAAAZ,GACAh3B,EAAAonB,SAAAnS,GACA0iB,EAAAP,OAGAp3B,EAAAonB,SAAAiD,EAAApV,UACA0iB,EAAAtN,EAAAliC,OAEA6X,EAAAynB,UAAAiQ,GACA13B,EAAAynB,UAAAkQ,GACAD,GAAApzC,KAAAkyC,MAAAmB,MAMA5P,EAAAxiC,UAAAqyC,kBAAA,SAAAzQ,GACA,UAAAA,EACA,UAAAhiC,MAAA,mCAOA,IALA,IAAAouB,EAAA,EACAskB,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACA3tC,EAAA,EAAuBA,GAAA88B,EAAAh/B,OAAA,KAA4BkC,IACnD2tC,GAAA,IAAA7Q,EAAA5T,KACAwkB,GAAA,IAAA5Q,EAAA5T,KACAukB,GAAA,IAAA3Q,EAAA5T,KACAskB,GAAA,IAAA1Q,EAAA5T,KAEA,IAAA1kB,EAAAgpC,EAIA,OAHAhpC,GAAAipC,GAAA,EACAjpC,GAAAkpC,GAAA,GACAlpC,GAAAmpC,GAAA,GACAnpC,GAKAk5B,EAAAxiC,UAAAiyC,YAAA,SAAAx3B,EAAAi2B,EAAAC,GACA,UAAAl2B,EACA,UAAA7a,MAAA,oCAEA,UAAA8wC,EACA,UAAA9wC,MAAA,6CAEA,UAAA+wC,EACA,UAAA/wC,MAAA,2CAGA,IADA,IAAAmjC,EAAAhkC,KAAAgkC,WACAj+B,EAAA,EAAuBA,EAAAi+B,EAAAngC,OAAuBkC,IAAA,CAC9C,IAAAotC,EAAAnP,EAAAj+B,GACAggC,EAAA/lC,KAAAgmC,SAAAmN,GACA,IAAApN,EAAAnhB,MAGA,YAAAuuB,EACAz3B,EAAA6nB,WAAAqO,QAEA,YAAAuB,EACAz3B,EAAA6nB,WAAAoO,OAEA,CAGA,IAFA,IAAAhrC,EAAA3G,KAAAkyC,MAAAnM,EAAAliC,QACAu/B,EAAA,GACAuQ,EAAA,EAAiCA,EAAAhtC,EAAagtC,IAC9CvQ,EAAA39B,KAAA,GAEAzF,KAAA8nB,OAAAie,EAAAje,OACA,IAAAvd,EAAAvK,KAAAshB,KAAA8hB,EAAA,EAAA2C,EAAAliC,QACA6X,EAAA6nB,WAAAh5B,EAAAiF,WAQAi0B,EAAAxiC,UAAA2yC,UAAA,SAAA9rB,GACA9nB,KAAA8nB,UAMA2b,EAAAxiC,UAAA4yC,gBAAA,WACA7zC,KAAAukC,QAAA,IAA2BnD,EAC3B,IAAAqD,EAAAzkC,KAAA0kC,gBACAC,EAAA3kC,KAAA4kC,gBACA5kC,KAAA8zC,aAAA,IAAAnP,EAAAgD,mBACA,IAAAgH,EAAA3uC,KAAA6nC,4BACA+G,EAAA5uC,KAAAyoC,eACAoG,EAAA7uC,KAAA+qC,gBACA/qC,KAAAqJ,MAAArJ,KAAAyrC,eAAAkD,EAAAnG,iBAAA7D,EAAAuC,YACA,IAAA8E,EAAAhsC,KAAA8rC,gBACA9rC,KAAA0uC,kBAAAjK,EAAAE,EAAAgK,EAAAC,EAAAC,EAAA7C,IAEAvI,EAAAxiC,UAAA6uC,SAAA,SAAAjO,GACA,qBAAAA,EAAA,CACA,IAAAkS,EAAA,KACA/zC,KAAAukC,QAAAyK,UAAA,MAAAhvC,KAAAwuC,gBAKAxuC,KAAAukC,QAAAyK,UAAA,MAAAhvC,KAAAyuC,iBACAzuC,KAAAyuC,gBAAAr+B,YAAAyxB,KACAkS,EAAA/zC,KAAAyuC,gBAAA/mC,SAAAm6B,IANA7hC,KAAAwuC,gBAAAp+B,YAAAyxB,KACAkS,EAAA/zC,KAAAwuC,gBAAA9mC,SAAAm6B,IAQA,IAAAE,EAAA,MAAAgS,IAAA/zC,KAAAowC,kBACA,OAAArO,EAGA,IAAA18B,EAAA,KACAgnB,EAAAwV,EAAAyB,WAAA,GACAtjC,KAAAukC,QAAAyK,UAAA,OAAAhvC,KAAAitC,WAWAjtC,KAAAukC,QAAAyK,UAAA,OAAAhvC,KAAA8sC,WAAA9sC,KAAA8jC,YAEA,IAAA9jC,KAAA2sC,YACAtgB,GAAArsB,KAAA2sC,YAAA,EAGAtgB,EAAA,eAAAA,GAAA,IAAAA,IAEArsB,KAAA8sC,UAAA18B,YAAAic,KACAhnB,EAAArF,KAAA8sC,UAAAplC,SAAA2kB,GACArsB,KAAAg0C,eAAA,IApBAh0C,KAAAitC,UAAA78B,YAAAic,IACAhnB,EAAArF,KAAAitC,UAAAvlC,SAAA2kB,GACAA,IAAiCgkB,EAAA,KAAexW,WAAAyJ,WAAA,KAChDtjC,KAAAg0C,eAAA,IAGA3nB,IAAkCgkB,EAAA,KAAexW,WAAAyJ,WAAA,KACjDtjC,KAAAg0C,eAAA,GAiBAnS,IAA6BwO,EAAA,KAAexW,YAAA,OAAAx0B,IAC5CA,EAAA,IAA0Bu8B,GAE1BG,EAAA,OAAA18B,IAAArF,KAAAowC,kBACA,OAAArO,GAMA0B,EAAAxiC,UAAAgzC,cAAA,SAAAC,GACA,UAAAA,QAAA1oC,IAAA0oC,EACA,UAAArzC,MAAA,mCAIA,IAFA,IAAAiG,EAAA,IAA6Bq9B,EAAA,KAC7BgQ,EAAAD,EAAAliB,OACAjsB,EAAA,EAAuBA,EAAAouC,EAAAtwC,OAAqBkC,IAAA,CAC5C,IAAAoqC,EAAAgE,EAAApuC,GACAg8B,EAAA/hC,KAAA8vC,SAAAK,GACApO,EAAAnd,OACA9d,EAAAW,SAAAs6B,EAAA38B,MAAA+qC,EAAA7M,WAAA,IAGA,OAAAx8B,GAKA28B,EAAAxiC,UAAAmzC,aAAA,WAIA,IAHA,IAAAC,EAAA,GACA1lC,EAAA,IAAuBizB,EACvBx8B,EAAA,EACAW,EAAA,EAAuBA,EAAA/F,KAAAqJ,MAAAxF,OAAuBkC,IAAA,CAC9C,IAAAsD,EAAArJ,KAAAqJ,MAAAtD,GACA4I,EAAAvJ,QACAuJ,EAAAtF,QACAgrC,EAAA5uC,KAAAkJ,GACAvJ,IAEA,OAAAivC,GAMA5Q,EAAAxiC,UAAAqzC,gBAAA,SAAAJ,GACA,IAAAxD,EAAA1wC,KAAAi0C,cAAAC,GACAvD,EAAA3wC,KAAAswC,cAAAtwC,KAAA8zC,cACApD,EAAAtuC,OAAA8xC,EAAA9xC,SACApC,KAAA+jC,aAAAmQ,EAAA9xC,OAAAsuC,EAAAtuC,QAEApC,KAAAywC,iBAAAC,EAAAC,GAEA,IAAA4D,EAAAv0C,KAAA0xC,mBAAAhB,EAAAC,EAAA,WAEA4B,EAAAgC,EAAAhC,eACAZ,EAAA4C,EAAA5C,aACAC,EAAA2C,EAAA3C,cACA4C,EAAAx0C,KAAAwyC,gBAAAb,EAAA3xC,KAAA8zC,aAAA,MACAlB,EAAA4B,EAAA5B,YACAD,EAAA6B,EAAA7B,eACA8B,EAAAz0C,KAAA6yC,eAAAF,EAAAf,EAAAW,EAAAK,GACA,OAAA6B,GAKAhR,EAAAxiC,UAAAyzC,cAAA,SAAA/rC,GACA,UAAAA,EACA,UAAA9H,MAAA,kCAIA,IAFA,IAAAkhC,EAAA,GAEAjQ,EAAA,EAAuBA,EAAAnpB,EAAA9E,OAAiBiuB,IAAA,CACxC,IAAAqe,EAAAxnC,EAAAmpB,GACA8a,EAAA5sC,KAAA8vC,SAAAK,GACAvD,EAAAhoB,QACAmd,GAAApa,OAAAC,aAAAglB,EAAAxnC,OACAW,GAGA,OAAAg8B,GAKA0B,EAAAxiC,UAAA0zC,aAAA,SAAAtoB,GACA,IAAAugB,EAAA5sC,KAAA8vC,SAAAzjB,GACAugB,IAAAhoB,MAAA5kB,KAAAowC,kBAAAxD,EACA,IAAAgI,EAAAhI,EAAAhoB,MAAA,EAAAgoB,EAAAvjC,MACA,OAAAurC,GAEAnR,EAAAxiC,UAAAkkC,WAAA,SAAAthC,EAAAgxC,GACA,QAAArpC,IAAAqpC,EACA,OAAA70C,KAAAmlC,WAAAthC,GAAA,GAIA,IAAA0G,EAAA,GACA,GAAAsqC,EACA,QAAA9uC,EAAA,EAA+BA,EAAAlC,EAAYkC,IAC3CA,EAAA,QACAwE,GAAAod,OAAAC,aAAA5nB,KAAA0jC,SAAA1jC,KAAA8nB,UAEA9nB,KAAA8nB,QAAA,OAIA,IAAA/hB,EAAA,EAA+BA,EAAAlC,EAAYkC,IAC3CwE,GAAAod,OAAAC,aAAA5nB,KAAA0jC,SAAA1jC,KAAA8nB,SACA9nB,KAAA8nB,QAAA,EAGA,OAAAvd,GAGAk5B,EAAAxiC,UAAA2lC,UAAA,SAAA9e,GACA,IAAAgtB,EAAA90C,KAAAglC,UAAAld,GACAitB,EAAA/0C,KAAAglC,UAAAld,EAAA,GACAktB,EAAAD,EAAA,MACA,OAAAD,EAAAE,GAEAvR,EAAAxiC,UAAAmkC,UAAA,SAAAtd,GACA,IAAAib,EAAA/iC,KAAA0jC,SAAA5b,EAAA,GACAkb,EAAAhjC,KAAA0jC,SAAA5b,EAAA,GACAmb,EAAAjjC,KAAA0jC,SAAA5b,EAAA,GACAob,EAAAljC,KAAA0jC,SAAA5b,GAEA,OADA9nB,KAAA8nB,QAAA,EACAib,GAAAC,GAAA,IAAAC,GAAA,KAAAC,GAAA,KAEAO,EAAAxiC,UAAA8lC,WAAA,SAAAjf,GACA,IAAAib,EAAA/iC,KAAA0jC,SAAA5b,EAAA,GACAkb,EAAAhjC,KAAA0jC,SAAA5b,EAAA,GACAmb,EAAAjjC,KAAA0jC,SAAA5b,EAAA,GACAob,EAAAljC,KAAA0jC,SAAA5b,GAEA,OADA9nB,KAAA8nB,QAAA,EACAib,EAAAC,GAAA,EAAAC,GAAA,GAAAC,GAAA,IAOAO,EAAAxiC,UAAA+jC,UAAA,SAAAld,GACA,IAAAvd,GAAAvK,KAAA0jC,SAAA5b,IAAA,GAAA9nB,KAAA0jC,SAAA5b,EAAA,GAGA,OAFAvd,EAAA,MAAAA,IAAA,MAAAA,EACAvK,KAAA8nB,QAAA,EACAvd,GAEAk5B,EAAAxiC,UAAAmmC,UAAA,SAAAtf,GACA,IAAAmtB,EAAAj1C,KAAAolC,UAAAtd,EAAA,GACArL,EAAA,WAAAzc,KAAAolC,UAAAtd,GAAAmtB,EAIA,OAHAA,EAAA,IACAx4B,GAAA,YAEAA,GAEAgnB,EAAAxiC,UAAAilC,WAAA,SAAApe,GACA,IAAAvd,EAAAvK,KAAA0jC,SAAA5b,IAAA,EAAA9nB,KAAA0jC,SAAA5b,EAAA,GAEA,OADA9nB,KAAA8nB,QAAA,EACAvd,GAKAk5B,EAAAxiC,UAAAusC,gBAAA,SAAA3pC,GAEA,IADA,IAAA2L,EAAA,GACAzJ,EAAA,EAAuBA,EAAAlC,EAAYkC,IACnCyJ,EAAAzJ,GAAA/F,KAAAkmC,WAAAlmC,KAAA8nB,QAEA,OAAAtY,GAEAi0B,EAAAxiC,UAAAyoC,UAAA,SAAA7lC,GAEA,IADA,IAAA0G,EAAA,GACAxE,EAAA,EAAuBA,EAAAlC,EAAYkC,IACnCwE,EAAA9E,KAAAzF,KAAA0jC,SAAA1jC,KAAA8nB,SACA9nB,KAAA8nB,QAAA,EAEA,OAAAvd,GAEAk5B,EAAAxiC,UAAAmzB,SAAA,SAAAtM,GACA,IAAAvd,EAAAvK,KAAA0jC,SAAA5b,GAEA,OADA9nB,KAAA8nB,QAAA,EACAvd,GAMAk5B,EAAAxiC,UAAAqgB,KAAA,SAAA9R,EAAApK,EAAAuB,GACA,UAAA6I,EACA,UAAA3O,MAAA,oCAEA,IAAAq0C,EAAA,EACA5zB,EAAA,EACA,GACA,QAAAvb,EAAA,EAA2BA,EAAAY,EAAAuuC,GAAAl1C,KAAA8nB,OAAA/hB,EAAA/F,KAAA0jC,SAAA7/B,OAAmEkC,IAC9FyJ,EAAApK,EAAAW,GAAA/F,KAAA0jC,SAAA1jC,KAAA8nB,OAAA/hB,GAEAub,EAAA3a,EAAAuuC,EACAl1C,KAAA8nB,QAAAxG,EACA4zB,GAAA5zB,QACS4zB,EAAAvuC,GACT,OAAgB6I,SAAA0lC,YAEhBzR,EAxsCa,+DCNT0R,EAAmB,WAOvB,SAAAC,EAAAC,EAAAjzC,GAwCA,GAtCApC,KAAAs1C,WAAA,6BAKAt1C,KAAAO,qBAAA,IAAwCC,EAAA,KAKxCR,KAAAu1C,YAAA,EAIAv1C,KAAAw1C,aAAA,EAKAx1C,KAAAy1C,WAAA,iEAA6F7b,EAAA,KAASM,QAAA,mJAAqKN,EAAA,KAASM,QAKpRl6B,KAAA01C,sBAAA,oBAA2D9b,EAAA,KAASM,QAIpEl6B,KAAA21C,eAAA,eAA+C/b,EAAA,KAASM,QAIxDl6B,KAAA41C,aAAA,aAA2Chc,EAAA,KAASM,QAKpDl6B,KAAA61C,WAAA,8EAA+Gjc,EAAA,KAASM,QACxH,OAAAmb,QAAA7pC,IAAA6pC,EACA,UAAAx0C,MAAA,sCAEAb,KAAA81C,SAAA1zC,EACApC,KAAA+1C,WAAAV,EACAr1C,KAAAg2C,aAmbA,OA7aAZ,EAAAn0C,UAAA0zC,aAAA,SAAA9S,GACA,IAAA+S,EAAA50C,KAAAi2C,UAAAtB,aAAA9S,GACA,OAAA+S,GAKAQ,EAAAn0C,UAAA8gB,aAAA,SAAAnB,GAKA,IADA,IAAAvX,EAAA,EACAtD,EAAA,EAAA6V,EAAAgF,EAAA/c,OAA0CkC,EAAA6V,EAAS7V,IAAA,CACnD,IAAAoqC,EAAAvvB,EAAA7a,GACAmwC,EAAAl2C,KAAA20C,aAAAxE,GACA9mC,GAAA6sC,EAEA,OAAA7sC,GAMA+rC,EAAAn0C,UAAA+0C,WAAA,WACA,IAAA3f,EAAA,IAA4BtC,EAAA,KAAS/zB,KAAA+1C,WAAAlyC,QACrCwyB,EAAAC,sBAAAt2B,KAAA+1C,YACA/1C,KAAA0jC,SAAArN,EAAA1C,eACA3zB,KAAAi2C,UAAA,IAA6BzS,EAASxjC,KAAA0jC,UACtC1jC,KAAAm2C,WAAAn2C,KAAAi2C,UAAA1R,SAEA6Q,EAAAn0C,UAAA4yC,gBAAA,WACA7zC,KAAAo2C,eAAA,IAAkCrxC,EAAA,KAClC/E,KAAAy0C,YAAA,IAA+B7zC,EAAA,KAC/BZ,KAAAq2C,KAAA,IAAwBz1C,EAAA,KACxBZ,KAAAs2C,eAAA,IAAkCvxC,EAAA,KAClC/E,KAAAukC,QAAA,IAA2BgS,EAAA,KAC3Bv2C,KAAAi2C,UAAApC,kBACA7zC,KAAAm2C,WAAAn2C,KAAAi2C,UAAA1R,QACAvkC,KAAA0uC,oBAEA1uC,KAAAw2C,WAAAx2C,KAAAy2C,cACAz2C,KAAA02C,uBACA12C,KAAA22C,aACA32C,KAAA42C,uBACA52C,KAAA62C,qBAEAzB,EAAAn0C,UAAA61C,aAAA,WACA,OAAA92C,KAAAo2C,gBAKAhB,EAAAn0C,UAAAytC,kBAAA,WACA,IAAAyH,EAAAn2C,KAAAi2C,UAAA1R,QACAvkC,KAAAukC,QAAAwS,OAAAZ,EAAAhH,UACAnvC,KAAAukC,QAAAyS,QAAAb,EAAA7G,WACAtvC,KAAAukC,QAAAj7B,OAAA6sC,EAAAhH,UAAAgH,EAAA7G,WAAA6G,EAAAnO,QACAhoC,KAAAukC,QAAAziC,KAAAq0C,EAAAhI,WACAnuC,KAAAukC,QAAA6J,eAAA+H,EAAA/H,eACApuC,KAAAukC,QAAAniC,KAAApC,KAAA81C,SACA91C,KAAAukC,QAAAmL,WAAA,IAAsC6G,EAAA,KAAkBJ,EAAAzG,YACxD1vC,KAAAukC,QAAAyD,QAAAmO,EAAAnO,QACAhoC,KAAAukC,QAAAqL,oBAAAuG,EAAAvG,oBACA5vC,KAAAukC,QAAAsL,sBAAAsG,EAAAtG,sBACA7vC,KAAAukC,QAAA0S,OAAAd,EAAAc,QAKA7B,EAAAn0C,UAAAw1C,YAAA,WAIA,IAHA,IACA30C,EADA2gB,EAAA,GAGA1c,EAAA,EAAuBA,EAAA,EAAOA,IAAA,CAC9B,IAAAX,EAAAuV,KAAA+L,MAAA,GAAA/L,KAAAu8B,UAAA,EACAz0B,GAAAziB,KAAAs1C,WAAAlwC,GAUA,OARAqd,GAAA,IAEAA,GAAAziB,KAAAi2C,UAAA1R,QAAA6J,eACAtsC,EAAA2gB,EAAAM,WAIAjhB,EAAA9B,KAAAm3C,WAAAr1C,GACAA,GAKAszC,EAAAn0C,UAAAk2C,WAAA,SAAAC,GAOA,IAAAvlB,EAAAulB,EAAAC,QAAA,WAUA,OATAxlB,IAAAwlB,QAAA,WACAxlB,IAAAwlB,QAAA,WACAxlB,IAAAwlB,QAAA,WACAxlB,IAAAwlB,QAAA,WACAxlB,IAAAwlB,QAAA,WACAxlB,IAAAwlB,QAAA,IAA4B,OAC5BxlB,IAAAwlB,QAAA,IAA4B,OAC5BxlB,IAAAwlB,QAAA,WACAxlB,IAAAwlB,QAAA,WACAxlB,EAAAwlB,QAAA,YAKAjC,EAAAn0C,UAAAy1C,qBAAA,WAEA12C,KAAAs2C,eAAAgB,QAAA,EACAt3C,KAAAs2C,eAAAiB,wBAAA,IAA0DxyC,EAAA,KAA8B/E,MACxFA,KAAAs2C,eAAAnxC,MAAAsC,SAAAzH,KAAAO,qBAAAuK,KAAA,IAA+EC,EAAA,KAAO/K,KAAAO,qBAAAqI,OACtF5I,KAAAs2C,eAAAnxC,MAAAsC,SAAAzH,KAAAO,qBAAAw0B,QAAA,IAAkFhqB,EAAA,KAAO/K,KAAAO,qBAAAi3C,eACzFx3C,KAAAs2C,eAAAnxC,MAAAsC,SAAAzH,KAAAO,qBAAAk3C,SAAA,IAAmF1sC,EAAA,KAAO/K,KAAAw2C,aAC1Fx2C,KAAAs2C,eAAAnxC,MAAAsC,SAAAzH,KAAAO,qBAAAm3C,YAAA,IAAsF3sC,EAAA,KAAO/K,KAAAO,qBAAAo3C,WAC7F33C,KAAAs2C,eAAAnxC,MAAAsC,SAAAzH,KAAAO,qBAAAq3C,GAAA,IAA6Eh/B,EAAA,KAAS,MACtF5Y,KAAA63C,eAAA73C,KAAA83C,uBACA93C,KAAAs2C,eAAAnxC,MAAAsC,SAAAzH,KAAAO,qBAAAs3C,eAAA,IAAyFjyC,EAAA,KAAkB5F,KAAA63C,iBAC3G,IAAAE,EAAA/3C,KAAAg4C,mBACAh4C,KAAAs2C,eAAAnxC,MAAAsC,SAAAzH,KAAAO,qBAAA03C,cAAAF,IAKA3C,EAAAn0C,UAAA62C,qBAAA,WACA,IAAAI,EAAA,IAA6BnzC,EAAA,KAC7Bw/B,EAAAvkC,KAAAi2C,UAAA1R,QAmBA,OAjBA2T,EAAAZ,QAAA,EACAY,EAAA/yC,MAAAsC,SAAAzH,KAAAO,qBAAAuK,KAAA,IAAsEC,EAAA,KAAO/K,KAAAO,qBAAAs3C,iBAC7EK,EAAA/yC,MAAAsC,SAAAzH,KAAAO,qBAAA62C,SAAA,IAA0ErsC,EAAA,KAAO/K,KAAAw2C,aACjF0B,EAAA/yC,MAAAsC,SAAAzH,KAAAO,qBAAA0mC,MAAA,IAAuEruB,EAAA,KAAS5Y,KAAAm4C,uBAChFD,EAAA/yC,MAAAsC,SAAAzH,KAAAO,qBAAA63C,SAAsEzwC,EAAA,KAAQ2T,cAAAtb,KAAAq4C,gBAC9EH,EAAA/yC,MAAAsC,SAAAzH,KAAAO,qBAAA+3C,aAAA,IAA8E1/B,EAAA,KAAS2rB,EAAAmL,WAAA,MACvFwI,EAAA/yC,MAAAsC,SAAAzH,KAAAO,qBAAAkvC,MAAA,IAAuE72B,EAAA,KAAS2rB,EAAAkL,QAChFyI,EAAA/yC,MAAAsC,SAAAzH,KAAAO,qBAAA0qC,YAAA,IAA6EryB,EAAA,KAAS2rB,EAAA0G,cACtFiN,EAAA/yC,MAAAsC,SAAAzH,KAAAO,qBAAA6uC,UAAA,IAA2Ex2B,EAAA,KAAS2rB,EAAA6K,YACpF8I,EAAA/yC,MAAAsC,SAAAzH,KAAAO,qBAAAw2C,OAAA,IAAwEn+B,EAAA,KAAS2rB,EAAA2K,YACjFgJ,EAAA/yC,MAAAsC,SAAAzH,KAAAO,qBAAAy2C,QAAA,IAAyEp+B,EAAA,KAAS2rB,EAAA8K,aAClF6I,EAAA/yC,MAAAsC,SAAAzH,KAAAO,qBAAAw7B,QAAA,IAAyEnjB,EAAA,KAAS2rB,EAAAxI,UAClFmc,EAAA/yC,MAAAsC,SAAAzH,KAAAO,qBAAAg4C,SAAA,IAA0E3/B,EAAA,KAAS2rB,EAAAmL,WAAA,MACnFwI,EAAA/yC,MAAAsC,SAAAzH,KAAAO,qBAAAi4C,UAAA,IAA2E5yC,EAAA,KAAkB5F,KAAAy0C,cAC7FyD,EAAA/yC,MAAAsC,SAAAzH,KAAAO,qBAAA0hB,SAAA,IAA0ErJ,EAAA,KAAS2rB,EAAAmL,WAAA,MACnFwI,EAAA/yC,MAAAsC,SAAAzH,KAAAO,qBAAAk4C,QAAA,IAAyE7/B,EAAA,KAAS,IAClFs/B,EAAA/yC,MAAAsC,SAAAzH,KAAAO,qBAAAm4C,MAAA,IAAuE9/B,EAAA,KAAS,IAChFs/B,GAMA9C,EAAAn0C,UAAA01C,WAAA,WACA32C,KAAAq2C,KAAAsC,cAAA,IAAsC/3C,EAAA,KAAoBZ,OAK1Do1C,EAAAn0C,UAAA21C,qBAAA,WAEA52C,KAAAo2C,eAAAkB,QAAA,EACAt3C,KAAAo2C,eAAAwC,wBAAA,IAA0D7zC,EAAA,KAA8B/E,MACxFA,KAAAo2C,eAAAjxC,MAAAsC,SAAAzH,KAAAO,qBAAAuK,KAAA,IAA+EC,EAAA,KAAO/K,KAAAO,qBAAAqI,OACtF5I,KAAAo2C,eAAAjxC,MAAAsC,SAAAzH,KAAAO,qBAAAk3C,SAAA,IAAmF1sC,EAAA,KAAO/K,KAAAw2C,aAC1Fx2C,KAAAo2C,eAAAjxC,MAAAsC,SAAAzH,KAAAO,qBAAAw0B,QAAA,IAAkFhqB,EAAA,KAAO/K,KAAAO,qBAAAs4C,QACzF74C,KAAAo2C,eAAAjxC,MAAAsC,SAAAzH,KAAAO,qBAAAmR,SAAA,IAAmF3G,EAAA,KAAO/K,KAAAO,qBAAAu4C,YAC1F,IAAAC,EAAA,IAA4BpxC,EAAA,KAC5BhC,EAAA,IAA4BC,EAAA,KAAkB5F,KAAAs2C,gBAE9CyC,EAAAzB,QAAA,EACAyB,EAAAl3C,IAAA8D,GACA3F,KAAAo2C,eAAAjxC,MAAAsC,SAAAzH,KAAAO,qBAAAy4C,gBAAAD,IAKA3D,EAAAn0C,UAAA41C,kBAAA,WACA72C,KAAAy0C,YAAAwE,qBAAA,IAAoDr4C,EAAA,KAA2BZ,OAM/Eo1C,EAAAn0C,UAAA+2C,iBAAA,WACA,IAAAD,EAAA,IAA6BhzC,EAAA,KAI7B,OAHAgzC,EAAA5yC,MAAAsC,SAAAzH,KAAAO,qBAAA24C,SAAA,IAA0Elc,EAAA,KAAS,UACnF+a,EAAA5yC,MAAAsC,SAAAzH,KAAAO,qBAAA44C,SAAA,IAA0Enc,EAAA,KAASh9B,KAAAO,qBAAAo3C,WACnFI,EAAA5yC,MAAAsC,SAAAzH,KAAAO,qBAAA64C,WAAA,IAA4ExgC,EAAA,KAAS,IACrFm/B,GAKA3C,EAAAn0C,UAAAs2C,wBAAA,WACA,UAAAv3C,KAAAq5C,gBAAA7tC,IAAAxL,KAAAq5C,WAAAr5C,KAAAq5C,UAAAj3C,OAAA,GACA,IAAAiH,EAAArJ,KAAAs5C,qBACA,OAAAjwC,GACArJ,KAAAs2C,eAAAnxC,MAAAsC,SAAAzH,KAAAO,qBAAAg5C,EAAAlwC,KAOA+rC,EAAAn0C,UAAA03C,cAAA,WACA34C,KAAAw5C,gBAMApE,EAAAn0C,UAAA23C,wBAAA,WACA,OAAA54C,KAAAq5C,gBAAA7tC,IAAAxL,KAAAq5C,WAAAr5C,KAAAq5C,UAAAj3C,OAAA,IAAApC,KAAAo2C,eAAAhmC,YAAApQ,KAAAO,qBAAAk5C,YACAz5C,KAAAo2C,eAAAjxC,MAAAsC,SAAAzH,KAAAO,qBAAAk5C,UAAA,IAAwF7zC,EAAA,KAAkB5F,KAAAq2C,QAO1GjB,EAAAn0C,UAAAg4C,qBAAA,WACAj5C,KAAAu1C,YAAA,EACAv1C,KAAA05C,uBAKAtE,EAAAn0C,UAAAq4C,mBAAA,WACA,IAAAnsB,EAAA,IAAwBxlB,EAAA,KACxB,UAAA3H,KAAAq5C,gBAAA7tC,IAAAxL,KAAAq5C,WAAAr5C,KAAAq5C,UAAAj3C,OAAA,GAIA,IAHA,IAAAwqC,EAAA,GAEA5a,EAAAhyB,KAAAq5C,UAAArnB,OACAjsB,EAAA,EAA2BA,EAAAisB,EAAAnuB,OAAiBkC,IAAA,CAC5C,IAAA4zC,EAAA3nB,EAAAjsB,GACAg8B,EAAA/hC,KAAAi2C,UAAAnG,SAAA6J,GACA5X,EAAAnd,OAGAgoB,EAAAnnC,KAAAs8B,GAKA6K,EAAAkF,KAAA,SAAAC,EAAA9tC,GAA4C,OAAA8tC,EAAA3sC,MAAAnB,EAAAmB,QAC5C,IAAAw0C,EAAA,EACAC,EAAA,EACAC,GAAA,EACAC,EAAA,IAAmCpyC,EAAA,KAEnC,IAAA5B,EAAA,EAA2BA,EAAA6mC,EAAA/oC,OAAsBkC,IAAA,CACjDg8B,EAAA6K,EAAA7mC,GACA+zC,IACAA,GAAA,EACAF,EAAA7X,EAAA38B,MACAy0C,EAAA9X,EAAA38B,MAAA,IAEAy0C,EAAA,IAAA9X,EAAA38B,OAAAW,EAAA,IAAA6mC,EAAA/oC,SAAA+oC,EAAA/oC,OAAA,IAEAspB,EAAAtrB,IAAA,IAAkC+W,EAAA,KAASghC,IAC3C,IAAA7zC,GACAonB,EAAAtrB,IAAAk4C,GAEAH,EAAA7X,EAAA38B,MACA20C,EAAA,IAAuCpyC,EAAA,MAEvCoyC,EAAAl4C,IAAA,IAAqC+W,EAAA,KAASmpB,EAAA14B,QAC9CtD,EAAA,IAAA6mC,EAAA/oC,SACAspB,EAAAtrB,IAAA,IAAkC+W,EAAA,KAASghC,IAC3CzsB,EAAAtrB,IAAAk4C,IAEAF,EAAA9X,EAAA38B,OAqBA,OAAA+nB,GAKAioB,EAAAn0C,UAAAu4C,aAAA,WACA,UAAAx5C,KAAAq5C,gBAAA7tC,IAAAxL,KAAAq5C,WAAAr5C,KAAAq5C,UAAAj3C,OAAA,GACA,IAAAsuC,EAAA1wC,KAAAi2C,UAAAhC,cAAAj0C,KAAAq5C,WACA,GAAA3I,EAAAtuC,OAAA,GACA,IAAA4vB,EAAA0e,EAAA1e,OAAA8f,OAEAniB,EAAAqC,EAAA,GACApC,EAAAoC,IAAAnuB,OAAA,GACAm2C,EAAAh6C,KAAAi6C,YAAAtqB,GAAA,GAAA3vB,KAAAi6C,YAAArqB,GAAA,GAAkGgK,EAAA,KAASM,QAC3GzX,EAAA,GACAA,GAAAziB,KAAAy1C,WACAhzB,GAAAu3B,EACAv3B,GAAAziB,KAAA01C,sBAEA,IADA,IAAAwE,EAAA,EACAn0C,EAAA,EAA+BA,EAAAisB,EAAAnuB,OAAiBkC,IAAA,CAChD,IAAAm0C,IACA,IAAAn0C,IACA0c,GAAAziB,KAAA41C,cAEAsE,EAAAv/B,KAAAiH,IAAA,IAAAoQ,EAAAnuB,OAAAkC,GACA0c,GAAAy3B,EACAz3B,GAAmCmX,EAAA,KAASC,WAC5CpX,GAAAziB,KAAA21C,gBAEAuE,GAAA,EACA,IAAAvoB,EAAAK,EAAAjsB,GAEA0c,GAAAziB,KAAAi6C,YAAAtoB,GAAA,GAAA3xB,KAAAi6C,YAAAtoB,GAAA,GAAA3xB,KAAAi6C,YAAAvJ,EAAAhpC,SAAAiqB,IAAA,QAGAlP,GAAAziB,KAAA61C,WACA71C,KAAAq2C,KAAA5c,cACAz5B,KAAAq2C,KAAAiB,QAAA,EACAt3C,KAAAq2C,KAAA5mC,MAAAgT,MAOA2yB,EAAAn0C,UAAAy4C,oBAAA,WACA,IAAAjF,EAAA,KACAz0C,KAAAq5C,UAAA,OAAAr5C,KAAAq5C,gBAAA7tC,IAAAxL,KAAAq5C,UAAA,IAAyFlV,EAAA,KAAUnkC,KAAAq5C,UACnGr5C,KAAAi2C,UAAArC,UAAA,GACAa,EAAAz0C,KAAAi2C,UAAA3B,gBAAAt0C,KAAAq5C,WACAr5C,KAAAy0C,YAAAhb,cACAz5B,KAAAy0C,YAAA6C,QAAA,EACAt3C,KAAAy0C,YAAAlR,WAAAkR,IAMAW,EAAAn0C,UAAAk3C,mBAAA,WACA,IAAAlR,EAAA,EACA1C,EAAAvkC,KAAAi2C,UAAA1R,QAgBA,OAfAA,EAAA6G,eACAnE,GAAqBpoB,EAAA,KAAmBs7B,YAExC5V,EAAAyK,SACA/H,GAAqBpoB,EAAA,KAAmBu7B,SAGxCnT,GAAqBpoB,EAAA,KAAmBw7B,YAExC9V,EAAA+V,WACArT,GAAqBpoB,EAAA,KAAmB07B,QAExChW,EAAA0S,SACAhQ,GAAqBpoB,EAAA,KAAmB27B,WAExCvT,GAMAmO,EAAAn0C,UAAAo3C,YAAA,WACA,IAAAoC,EAAAz6C,KAAAi2C,UAAA1R,QAAAiL,QACAnmC,EAAAsR,KAAA+/B,IAAAD,EAAAj3C,MAAAi3C,EAAAn3C,MACAgG,EAAAqR,KAAA+/B,IAAAD,EAAAl3C,IAAAk3C,EAAAh3C,QACA8c,EAAA,IAA4BzX,EAAA,KAAU2xC,EAAAn3C,KAAAm3C,EAAAh3C,OAAA4F,EAAAC,GACtC,OAAAiX,GAKA60B,EAAAn0C,UAAAg5C,YAAA,SAAAx9B,EAAAk+B,GACA,IAAApyB,EAAA9L,EAAAsG,SAAA,IAIA,OAHA43B,IACApyB,IAAAqyB,eAEA,QAAAz3B,UAAA,IAAAoF,EAAA1kB,QAAA0kB,EAAA,KAKA6sB,EAAAn0C,UAAA45C,WAAA,SAAAlyC,GACA,UAAAA,EACA,UAAA9H,MAAA,kCAEA,OAAAb,KAAAq5C,gBAAA7tC,IAAAxL,KAAAq5C,YACAr5C,KAAAq5C,UAAA,IAAiClV,EAAA,MAEjC,QAAAp+B,EAAA,EAAuBA,EAAA4C,EAAA9E,OAAiBkC,IAAA,CACxC,IAAAoqC,EAAAxnC,EAAA5C,GACA/F,KAAAq5C,UAAA5xC,SAAA0oC,EAAAxoB,OAAAC,aAAA,KAkBA,IAAA5nB,KAAAw1C,aACAx1C,KAAAs5C,sBAGAlE,EAveuB,GChBnB0F,EAAmB,WAGvB,SAAAC,IAEA/6C,KAAAg7C,gBAAA,yBACA,cACA,cACA,cACA,sBACA,cACA,sBACA,cACA,sBACA,sBACA,sBACA,sBACA,sBACA,cACA,cACA,cACA,cACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,cACA,sBACA,sBACA,cACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,cACA,cACA,cACA,cACA,cACA,cACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,cACA,sBACA,sBACA,cACA,sBACA,cACA,cACA,cACA,cACA,cACA,cACA,sBACA,sBACA,cACA,eAEAh7C,KAAAi7C,KAAA,IACAj7C,KAAAk7C,UAAA,IACAl7C,KAAAm7C,eAAA,IACAn7C,KAAAo7C,UAAA,IACAp7C,KAAAq7C,IAAA,IACAr7C,KAAAs7C,MAAA,IACAt7C,KAAAu7C,gBAAA,IACAv7C,KAAAw7C,WAAA,IACAx7C,KAAAy7C,WAAA,IACAz7C,KAAA07C,SAAA,IACA17C,KAAA27C,SAAA,IACA37C,KAAA47C,IAAA,IACA57C,KAAA67C,YAAA,IACA77C,KAAA87C,IAAA,IACA97C,KAAA+7C,SAAA,IACA/7C,KAAAg8C,OAAA,IACAh8C,KAAAi8C,MAAA,IACAj8C,KAAAk8C,IAAA,IACAl8C,KAAAm8C,MAAA,IACAn8C,KAAAo8C,OAAA,IACAp8C,KAAAq8C,MAAA,IACAr8C,KAAAs8C,KAAA,IACAt8C,KAAAu8C,SAAA,IACAv8C,KAAAw8C,gBAAA,IACAx8C,KAAAy8C,MAAA,EAGAz8C,KAAA08C,eAAA,IAAkCvY,EAAA,KAClC,QAAAp+B,EAAA,EAAuBA,EAAA/F,KAAAg7C,gBAAAn3C,OAAiCkC,IACxD/F,KAAA08C,eAAAj1C,SAAAzH,KAAAg7C,gBAAAj1C,GAAA,GAAA/F,KAAAg7C,gBAAAj1C,IAuNA,OAlNAg1C,EAAA95C,UAAA07C,kBAAA,SAAAC,EAAAx3C,GACA,GAAAw3C,GAAA58C,KAAAs7C,OAAAsB,GAAA58C,KAAAs8C,KAAA,CACA,IAAAl7C,EAAA,GACA,GAAApB,KAAA08C,eAAAh1C,SAAAk1C,GAEA,OADAx7C,EAAApB,KAAA08C,eAAAh1C,SAAAk1C,GACAx7C,EAAAgE,EAAA,QAGA,GAAAw3C,GAAA58C,KAAAq8C,OAAAO,GAAA58C,KAAAk8C,IACA,SAEA,OAAAU,GAEA7B,EAAA95C,UAAA47C,MAAA,SAAAl0C,EAAAm0C,GAGA,IAFA,IAAAr6B,EAAA,GACAs6B,EAAA,GACAh3C,EAAA,EAAuBA,EAAA4C,EAAA9E,OAAiBkC,IAAA,CACxC,IAAA+D,EAAAnB,EAAA5C,GACA,GAAA+D,GAAA,KAAAA,GAAA,IAEAizC,GAAAjzC,MAEA,CACA,GAAAizC,EAAAl5C,OAAA,GACA,IAAAm5C,EAAAh9C,KAAAi9C,QAAAF,EAAAh6B,WAAA,GACAN,GAAAu6B,EACAD,EAAA,GAEAt6B,GAAA3Y,GAGA,GAAAizC,EAAAl5C,OAAA,GACAm5C,EAAAh9C,KAAAi9C,QAAAF,EAAAh6B,WAAA,GACAN,GAAAu6B,EAEA,OAAAv6B,EAAAM,YAEAg4B,EAAA95C,UAAAg8C,QAAA,SAAAL,EAAAE,GACA,IAAAI,EAAA,GACAC,EAAA,EACAvhC,EAAA,EACA7V,EAAA,EACAq3C,EAAA,GACAC,EAAA,IAAAC,GACAC,EAAA,IAAAD,GACA,MAAAv3C,EAAA62C,EAAA/4C,OAGA,GAFAu5C,EAAAR,EAAA72C,KACAo3C,EAAAn9C,KAAAm9C,SAAAC,EAAAG,GACA,IAAAJ,EAAA,CACA,IAAAK,EAAAx9C,KAAAy9C,cAAAL,GACAxhC,EAAA,IAAA4hC,EAAA,IACAH,EAAAK,OAAA,IACA9hC,GAAA,GAEAA,GAAA2hC,EAAA,OACAA,EAAAI,MAAA39C,KAAA28C,kBAAAY,EAAAI,MAAA/hC,GACAshC,EAAAl9C,KAAA49C,OAAAV,EAAAG,EAAAP,GACAO,EAAAE,EACAA,EAAA,IAAAD,GACAC,EAAAI,MAAAP,EACAG,EAAAG,OAAAF,EACAD,EAAAM,WAQA,OALAjiC,EAAAyhC,EAAAK,OAAA,MACA9hC,GAAA2hC,EAAA,OACAA,EAAAI,MAAA39C,KAAA28C,kBAAAY,EAAAI,MAAA/hC,GACAshC,EAAAl9C,KAAA49C,OAAAV,EAAAG,EAAAP,GACAI,EAAAl9C,KAAA49C,OAAAV,EAAAK,EAAAT,GACAI,EAAAn6B,YAEAg4B,EAAA95C,UAAA28C,OAAA,SAAAn7B,EAAAo6B,EAAAC,GAuBA,MAtBA,KAAAD,EAAAc,QACAl7B,GAAAo6B,EAAAc,MACAd,EAAAgB,UAAA,EACA,KAAAhB,EAAAiB,OACA,KAAAhB,EAAA98C,KAAAy8C,QACAh6B,GAAAo6B,EAAAiB,KACAjB,EAAAgB,UAAA,GAGAhB,EAAAgB,UAAA,GAGA,KAAAhB,EAAAJ,QACA,KAAAK,EAAA98C,KAAAy8C,QACAh6B,GAAAo6B,EAAAJ,MACAI,EAAAgB,UAAA,GAGAhB,EAAAgB,UAAA,IAIAp7B,GAEAs4B,EAAA95C,UAAAk8C,SAAA,SAAA/7C,EAAAy7C,GACA,QAAAA,EAAAc,MAAA,CACA,IAAApzC,EAAA,EACA,GAAAnJ,GAAApB,KAAAu8C,UAAAn7C,GAAApB,KAAAy7C,YAAAr6C,IAAApB,KAAAw8C,gBAAA,CAKA,GAJAjyC,EAAA,EACA,KAAAsyC,EAAAJ,OAAAr7C,IAAApB,KAAAg8C,SACAzxC,EAAA,GAEAnJ,IAAApB,KAAAg8C,OAAA,CACA,SAAAa,EAAAiB,KAIA,SAHAjB,EAAAiB,KAAA99C,KAAAg8C,YAMA56C,IAAApB,KAAAy7C,WACAoB,EAAAc,QAAA39C,KAAAi7C,MACA4B,EAAAc,MAAA39C,KAAAm7C,eACA5wC,EAAA,GAEAnJ,IAAApB,KAAAk8C,KACAW,EAAAc,MAAA39C,KAAAo8C,OACA7xC,EAAA,GAGAsyC,EAAAiB,KAAA99C,KAAAy7C,WAGAr6C,IAAApB,KAAAw7C,WACAqB,EAAAc,QAAA39C,KAAAi7C,MACA4B,EAAAc,MAAA39C,KAAAk7C,UACA3wC,EAAA,GAEAsyC,EAAAc,QAAA39C,KAAAk8C,KACAW,EAAAc,MAAA39C,KAAAm8C,MACA5xC,EAAA,GAEAsyC,EAAAc,QAAA39C,KAAA47C,KACAiB,EAAAc,MAAA39C,KAAA07C,SACAnxC,EAAA,GAEAsyC,EAAAc,QAAA39C,KAAA87C,KAAAe,EAAAc,QAAA39C,KAAA67C,aAAAgB,EAAAc,QAAA39C,KAAA+7C,UACAc,EAAAc,MAAA39C,KAAA27C,SACApxC,EAAA,GAGAsyC,EAAAiB,KAAA99C,KAAAw7C,WAGAp6C,IAAApB,KAAAi8C,MACAY,EAAAc,QAAA39C,KAAAi7C,OACA4B,EAAAc,MAAA39C,KAAAo7C,UACA7wC,EAAA,GAIAsyC,EAAAJ,MAAAr7C,EAKA,OAHA,IAAAmJ,GACAsyC,EAAAgB,WAEAtzC,EAEA,WAAAsyC,EAAAJ,MACA,GAEAI,EAAAc,QAAA39C,KAAAq7C,MACAj6C,IAAApB,KAAAi7C,MACA4B,EAAAc,MAAA39C,KAAAk8C,IACAW,EAAAa,OAAA,EACAnzC,EAAA,GAEAnJ,IAAApB,KAAAk7C,WACA2B,EAAAc,MAAA39C,KAAAm8C,MACAU,EAAAa,OAAA,EACAnzC,EAAA,GAEAnJ,IAAApB,KAAAm7C,gBACA0B,EAAAc,MAAA39C,KAAAo8C,OACAS,EAAAa,OAAA,EACAnzC,EAAA,GAEAnJ,IAAApB,KAAAo7C,YACAyB,EAAAc,MAAA39C,KAAAq8C,MACAQ,EAAAa,OAAA,EACAnzC,EAAA,IAQAA,GAGA,UAGAwwC,EAAA95C,UAAAw8C,cAAA,SAAAZ,GACA,GAAAA,GAAA78C,KAAAs7C,OAAAuB,GAAA78C,KAAAs8C,QAAAO,GAAA78C,KAAAu8C,UAAAM,GAAA78C,KAAAy7C,YACAoB,IAAA78C,KAAAw8C,iBAAA,CACA,IAAA1yC,EAAA,GACA,GAAA9J,KAAA08C,eAAAh1C,SAAAm1C,GAEA,OADA/yC,EAAA9J,KAAA08C,eAAAh1C,SAAAm1C,GACA/yC,EAAAjG,OAAA,OAGA,GAAAg5C,IAAA78C,KAAAu7C,gBACA,SAEA,UAEAR,EArUuB,GA0UvBuC,GAAA,WACA,SAAAA,IAEAt9C,KAAA+9C,WAAA,GACA/9C,KAAAg+C,UAAA,GACAh+C,KAAAi+C,WAAA,GACAj+C,KAAAk+C,cAAA,EACAl+C,KAAAm+C,YAAA,EA2EA,OAxEAp9C,OAAAC,eAAAs8C,EAAAr8C,UAAA,SAOAC,IAAA,WACA,OAAAlB,KAAA+9C,YAEA58C,IAAA,SAAAC,GACApB,KAAA+9C,WAAA38C,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAs8C,EAAAr8C,UAAA,QAKAC,IAAA,WACA,OAAAlB,KAAAg+C,WAEA78C,IAAA,SAAAC,GACApB,KAAAg+C,UAAA58C,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAs8C,EAAAr8C,UAAA,SAKAC,IAAA,WACA,OAAAlB,KAAAi+C,YAEA98C,IAAA,SAAAC,GACApB,KAAAi+C,WAAA78C,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAs8C,EAAAr8C,UAAA,YAKAC,IAAA,WACA,OAAAlB,KAAAk+C,eAEA/8C,IAAA,SAAAC,GACApB,KAAAk+C,cAAA98C,GAEAC,YAAA,EACAC,cAAA,IAEAP,OAAAC,eAAAs8C,EAAAr8C,UAAA,UAKAC,IAAA,WACA,OAAAlB,KAAAm+C,aAEAh9C,IAAA,SAAAC,GACApB,KAAAm+C,YAAA/8C,GAEAC,YAAA,EACAC,cAAA,IAEAg8C,EAlFA,GCtUIc,GAAI,WAGR,SAAAC,IAEAr+C,KAAAs+C,QAAA,GACAt+C,KAAAu+C,YAAA,GACAv+C,KAAAw+C,yBAAA,IAA4Cra,EAAA,KAC5CnkC,KAAAy+C,SAmaA,OA/ZAJ,EAAAp9C,UAAAy9C,gBAAA,SAAA/1C,GAEA,IADA,IAAA4B,EAAA,GACAxE,EAAA,EAAuBA,EAAA4C,EAAA9E,OAAiBkC,IACxC,OAAA/F,KAAAu+C,YAAAx4C,KAAA/F,KAAAw+C,yBAAApuC,YAAAzH,EAAA5C,GAAAu9B,WAAA,IACA/4B,EAAAxE,GAAA4hB,OAAAC,aAAA5nB,KAAAw+C,yBAAA92C,SAAAiB,EAAA5C,GAAAu9B,WAAA,KAGA/4B,EAAAxE,GAAA4C,EAAA5C,GAAAgd,WAIA,IADA,IAAAlb,EAAA,GACAoT,EAAA,EAAuBA,EAAA1Q,EAAA1G,OAAmBoX,IAC1CpT,GAAA0C,EAAA0Q,GAEA,OAAApT,GAEAw2C,EAAAp9C,UAAA09C,yBAAA,SAAAC,EAAAC,GACA,IAAAC,EAAA,IAAAC,GACA/+C,KAAAu+C,YAAAO,EAAAE,eAAAJ,EAAAC,GACA7+C,KAAAi/C,uBACAj/C,KAAAk/C,QAAA,EAAAl/C,KAAAu+C,YAAA16C,OAAA,GAIA,IAHA,IAAA8E,EAAA3I,KAAA0+C,gBAAAE,GAEAO,EAAA,GACAp5C,EAAA,EAAuBA,EAAA/F,KAAAs+C,QAAAz6C,OAAyBkC,IAAA,CAChD,IAAAX,EAAApF,KAAAs+C,QAAAv4C,GACAo5C,GAAAx2C,EAAAvD,GAEA,OAAA+5C,EAAAp8B,YAEAs7B,EAAAp9C,UAAAg+C,qBAAA,WACA,QAAAl5C,EAAA,EAAuBA,EAAA/F,KAAAu+C,YAAA16C,OAA6BkC,IACpD/F,KAAAs+C,QAAAv4C,MAGAs4C,EAAAp9C,UAAAi+C,QAAA,SAAAE,EAAAC,GAKA,IAJA,IAAAzkC,EAAA5a,KAAAu+C,YAAAa,GACAx9B,EAAAhH,EACA0kC,EAAA1kC,EACA3E,EAAA2E,EACA7U,EAAAq5C,EAAA,EAAgCr5C,GAAAs5C,IAAat5C,EAAA,CAC7C,IAAAW,EAAA1G,KAAAu+C,YAAAx4C,GACAW,EAAAkU,EACAA,EAAAlU,EAEAA,EAAAkb,IACAA,EAAAlb,GAEA44C,GAAA54C,EACAuP,GAAAvP,EAEA,UAAAuP,GAGA,UAAAqpC,GAAA,CAIA19B,GAAA,EACA,MAAAhH,GAAAgH,EAAA,CACA,IAAA29B,EAAAH,EAEA,SACA,MAAAG,GAAAF,EAAA,CACA,GAAAr/C,KAAAu+C,YAAAgB,IAAA3kC,EACA,MAEA2kC,GAAA,EAEA,GAAAA,EAAAF,EACA,MAEA,IAAAG,EAAAD,EAAA,EACA,MAAAC,GAAAH,EAAA,CACA,GAAAr/C,KAAAu+C,YAAAiB,GAAA5kC,EACA,MAEA4kC,GAAA,EAEAx/C,KAAAy/C,UAAAF,EAAAC,GACAD,EAAAC,EAAA,EAEA5kC,GAAA,QA3BA5a,KAAAy/C,UAAAL,EAAAC,EAAA,IA8BAhB,EAAAp9C,UAAAw+C,UAAA,SAAA15C,EAAAkV,GACA,IAAApX,GAAAkC,EAAAkV,GAAA,EAEA,MADAA,EACclV,EAAAlC,IAAYkC,IAAAkV,EAAA,CAC1B,IAAA+S,EAAAhuB,KAAAs+C,QAAAv4C,GACA/F,KAAAs+C,QAAAv4C,GAAA/F,KAAAs+C,QAAArjC,GACAjb,KAAAs+C,QAAArjC,GAAA+S,IAGAqwB,EAAAp9C,UAAAw9C,OAAA,WACAz+C,KAAAw+C,yBAAA/2C,SAAA,OACAzH,KAAAw+C,yBAAA/2C,SAAA,OACAzH,KAAAw+C,yBAAA/2C,SAAA,OACAzH,KAAAw+C,yBAAA/2C,SAAA,OACAzH,KAAAw+C,yBAAA/2C,SAAA,OACAzH,KAAAw+C,yBAAA/2C,SAAA,OACAzH,KAAAw+C,yBAAA/2C,SAAA,SACAzH,KAAAw+C,yBAAA/2C,SAAA,SACAzH,KAAAw+C,yBAAA/2C,SAAA,SACAzH,KAAAw+C,yBAAA/2C,SAAA,SACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,YACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,YACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,YACAzH,KAAAw+C,yBAAA/2C,SAAA,YACAzH,KAAAw+C,yBAAA/2C,SAAA,YACAzH,KAAAw+C,yBAAA/2C,SAAA,YACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WAEAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,WACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,YACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,YACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,YACAzH,KAAAw+C,yBAAA/2C,SAAA,YACAzH,KAAAw+C,yBAAA/2C,SAAA,YACAzH,KAAAw+C,yBAAA/2C,SAAA,YACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,YACAzH,KAAAw+C,yBAAA/2C,SAAA,YACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,yBAAA/2C,SAAA,aACAzH,KAAAw+C,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EAAAwC,wBAAA,IAKAxC,EAAAyC,oBAAA,mBAKAzC,EAAAuD,aAAA,KAKAvD,EAAAwD,eAAA,IAKAxD,EAAAyD,WAAA,SAKAzD,EAAA2D,mBAAA,IAKA3D,EAAA4D,qBAAA,IAKA5D,EAAA6D,iBAAA,eAKA7D,EAAAsB,WAAA,CACA,wDACA,gEACA,iEACA,gEACA,gEACA,gEACA,0DACA,0DACA,4DACA,gEACA,gEACA,gEACA,gEACA,gEACA,SAMAtB,EAAAe,eAAA,CACA,wDACA,gEACA,gEACA,gEACA,gEACA,gEACA,0DACA,0DACA,4DACA,gEACA,gEACA,gEACA,gEACA,gEACA,SAMAf,EAAA6B,WAAA,CACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,gEACA,iEAMA7B,EAAAsD,gBAAA,CACA,wDACA,gEACA,gEACA,gEACA,gEACA,gEACA,0DACA,0DACA,4DACA,gEACA,gEACA,gEACA,gEACA,gEACA,SAMAtD,EAAA8C,oBAAA,CACA,wDACA,gEACA,gEACA,gEACA,gEACA,gEACA,0DACA,0DACA,4DACA,gEACA,gEACA,gEACA,gEACA,gEACA,SAMA9C,EAAAkD,sBAAA,CACA,wDACA,gEACA,gEACA,gEACA,gEACA,gEACA,0DACA,0DACA,4DACA,gEACA,gEACA,gEACA,gEACA,gEACA,SAMAlD,EAAA0C,2BAAA,CACA,wDACA,gEACA,gEACA,gEACA,gEACA,gEACA,0DACA,0DACA,4DACA,gEACA,gEACA,gEACA,gEACA,gEACA,SAMA1C,EAAA0D,YAAA,CACA,wDACA,wDACA,wDACA,wDACA,wDACA,wDACA,wDACA,yDACA,wDACA,wDACA,wDACA,yDACA,wDACA,gCAMA1D,EAAA8D,kBAAA,CACA,wDACA,wDACA,wDACA,wDACA,wDACA,wDACA,wDACA,wDACA,wDACA,wDACA,wDACA,yDACA,wDACA,wDACA,yBAEA9D,EAzkBiC,uCCTjC5rE,EAAA/F,EAAAgG,EAAA,sBAAA0vE,IAAA,IAAA51E,EAA6B,WAC7B,IAAAC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","file":"js/chunk-7f3dc79a.aad65f77.js","sourcesContent":["import { PdfStream } from './../primitives/pdf-stream';\nimport { PdfGraphics, GetResourceEventHandler } from './../graphics/pdf-graphics';\nimport { PdfPageLayerCollection } from './pdf-page-layer-collection';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\nimport { PdfColorSpace } from './../graphics/enum';\n/**\n * The `PdfPageLayer` used to create layers in PDF document.\n * @private\n */\nvar PdfPageLayer = /** @class */ (function () {\n    function PdfPageLayer(page, streamClipPageTemplates) {\n        // private bSaved : boolean;\n        /**\n         * Local Variable to store the `color space` of the document.\n         * @private\n         */\n        this.pdfColorSpace = PdfColorSpace.Rgb;\n        /**\n         * Local Variable to set `visibility`.\n         * @default true\n         * @private\n         */\n        this.isVisible = true;\n        /**\n         * Indicates if `Sublayer` is present.\n         * @default false\n         * @private\n         */\n        this.sublayer = false;\n        /**\n         * Local variable to store `length` of the graphics.\n         * @default 0\n         * @private\n         */\n        this.contentLength = 0;\n        /**\n         * Instance for `PdfDictionaryProperties` Class.\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        if (typeof streamClipPageTemplates === 'undefined') {\n            this.pdfPage = page;\n            this.clipPageTemplates = true;\n            this.content = new PdfStream();\n        }\n        else if (streamClipPageTemplates instanceof PdfStream || streamClipPageTemplates === null) {\n            if (page == null) {\n                throw new Error('ArgumentNullException:page');\n            }\n            if (streamClipPageTemplates == null) {\n                throw new Error('ArgumentNullException:stream');\n            }\n            this.pdfPage = page;\n            this.content = streamClipPageTemplates;\n        }\n        else {\n            this.constructor(page);\n            this.clipPageTemplates = streamClipPageTemplates;\n        }\n    }\n    Object.defineProperty(PdfPageLayer.prototype, \"colorSpace\", {\n        // Properties\n        /**\n         * Get or set the `color space`.\n         * @private\n         */\n        get: function () {\n            return this.pdfColorSpace;\n        },\n        set: function (value) {\n            this.pdfColorSpace = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageLayer.prototype, \"page\", {\n        /**\n         * Gets parent `page` of the layer.\n         * @private\n         */\n        get: function () {\n            return this.pdfPage;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageLayer.prototype, \"layerId\", {\n        /**\n         * Gets and Sets the `id of the layer`.\n         * @private\n         */\n        get: function () {\n            return this.layerid;\n        },\n        set: function (value) {\n            this.layerid = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageLayer.prototype, \"name\", {\n        /**\n         * Gets or sets the `name` of the layer.\n         * @private\n         */\n        get: function () {\n            return this.layerName;\n        },\n        set: function (value) {\n            this.layerName = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageLayer.prototype, \"visible\", {\n        /**\n         * Gets or sets the `visibility` of the layer.\n         * @private\n         */\n        get: function () {\n            return this.isVisible;\n        },\n        set: function (value) {\n            this.isVisible = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageLayer.prototype, \"graphics\", {\n        /**\n         * Gets `Graphics` context of the layer, used to draw various graphical content on layer.\n         * @private\n         */\n        get: function () {\n            if ((this.pdfGraphics == null)) {\n                this.initializeGraphics(this.page);\n            }\n            return this.pdfGraphics;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageLayer.prototype, \"layers\", {\n        /**\n         * Gets the collection of `PdfPageLayer`, this collection handle by the class 'PdfPageLayerCollection'.\n         * @private\n         */\n        get: function () {\n            if (this.layer == null) {\n                this.layer = new PdfPageLayerCollection(this.page);\n                this.layer.sublayer = true;\n                return this.layer;\n            }\n            else {\n                return this.layer;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Implementation\n    /**\n     * `Adds` a new PDF Page layer.\n     * @private\n     */\n    PdfPageLayer.prototype.add = function () {\n        var layer = new PdfPageLayer(this.pdfPage);\n        layer.name = '';\n        return layer;\n    };\n    /**\n     * Returns a value indicating the `sign` of a single-precision floating-point number.\n     * @private\n     */\n    PdfPageLayer.prototype.sign = function (number) {\n        if (number === 0) {\n            return 0;\n        }\n        else if (number > 0) {\n            return 1;\n        }\n        else {\n            return -1;\n        }\n    };\n    /**\n     * `Initializes Graphics context` of the layer.\n     * @private\n     */\n    PdfPageLayer.prototype.initializeGraphics = function (page) {\n        var oPage = page;\n        var gr = new GetResourceEventHandler(this.page);\n        var cropBox = null;\n        this.pdfGraphics = new PdfGraphics(page.size, gr, this.content);\n        this.pdfGraphics.mediaBoxUpperRightBound = 0;\n        if (oPage != null) {\n            var sc = oPage.section.parent;\n            if (sc != null) {\n                this.pdfGraphics.colorSpace = sc.document.colorSpace;\n                this.colorSpace = sc.document.colorSpace;\n            }\n        }\n        // Transform coordinates to the left/top and activate margins.\n        var isSame = (this.sign(page.origin.y) === this.sign(page.origin.x));\n        // if (page != null) {\n        if (page.origin.x >= 0 && page.origin.y >= 0 || !(isSame)) {\n            this.pdfGraphics.initializeCoordinates();\n        }\n        else {\n            // this.m_graphics.InitializeCoordinates(page);\n        }\n        var clipRect = oPage.section.getActualBounds(oPage, true);\n        var margins = oPage.section.pageSettings.margins;\n        if (this.clipPageTemplates) {\n            if (page.origin.x >= 0 && page.origin.y >= 0) {\n                this.pdfGraphics.clipTranslateMargins(clipRect);\n            }\n        }\n        else {\n            this.graphics.clipTranslateMargins(clipRect.x, clipRect.y, margins.left, margins.top, margins.right, margins.bottom);\n        }\n        this.pdfGraphics.setLayer(this);\n        // this.bSaved = false;\n    };\n    Object.defineProperty(PdfPageLayer.prototype, \"element\", {\n        // IPdfWrapper Members\n        /**\n         * Gets the wrapped `element`.\n         * @private\n         */\n        get: function () {\n            return this.content;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfPageLayer;\n}());\nexport { PdfPageLayer };\n","/**\n * PdfCollection.ts class for EJ2-PDF\n * The class used to handle the collection of PdF objects.\n */\nvar PdfCollection = /** @class */ (function () {\n    // Constructors\n    /**\n     * Initializes a new instance of the `Collection` class.\n     * @private\n     */\n    function PdfCollection() {\n        //\n    }\n    Object.defineProperty(PdfCollection.prototype, \"count\", {\n        // Properties\n        /**\n         * Gets the `Count` of stored objects.\n         * @private\n         */\n        get: function () {\n            if (typeof this.collection === 'undefined') {\n                this.collection = [];\n            }\n            return this.collection.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfCollection.prototype, \"list\", {\n        /**\n         * Gets the `list` of stored objects.\n         * @private\n         */\n        get: function () {\n            if (typeof this.collection === 'undefined') {\n                this.collection = [];\n            }\n            return this.collection;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfCollection;\n}());\nexport { PdfCollection };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * PdfPageLayerCollection.ts class for EJ2-PDF\n */\nimport { PdfPageBase } from './pdf-page-base';\nimport { PdfDictionary } from './../primitives/pdf-dictionary';\nimport { PdfPageLayer } from './pdf-page-layer';\nimport { PdfCollection } from './../general/pdf-collection';\nimport { PdfReferenceHolder } from './../primitives/pdf-reference';\nimport { PdfStream } from './../primitives/pdf-stream';\n/**\n * The class provides methods and properties to handle the collections of `PdfPageLayer`.\n */\nvar PdfPageLayerCollection = /** @class */ (function (_super) {\n    __extends(PdfPageLayerCollection, _super);\n    function PdfPageLayerCollection(page) {\n        var _this = _super.call(this) || this;\n        /**\n         * Stores the `number of first level layers` in the document.\n         * @default 0\n         * @private\n         */\n        _this.parentLayerCount = 0;\n        /**\n         * Indicates if `Sublayer` is present.\n         * @default false\n         * @private\n         */\n        _this.sublayer = false;\n        /**\n         * Stores the `optional content dictionary`.\n         * @private\n         */\n        _this.optionalContent = new PdfDictionary();\n        if (page instanceof PdfPageBase) {\n            // if (page == null) {\n            //     throw new Error('ArgumentNullException:page');\n            // }\n            _this.page = page;\n            var lPage = page;\n            // if (lPage != null) {\n            _this.parseLayers(lPage);\n            // }\n        }\n        return _this;\n    }\n    PdfPageLayerCollection.prototype.items = function (index, value) {\n        if (typeof index === 'number' && typeof value === 'undefined') {\n            var obj = this.list[index];\n            return obj;\n        }\n        else {\n            if (value == null) {\n                throw new Error('ArgumentNullException: layer');\n            }\n            if (value.page !== this.page) {\n                throw new Error('ArgumentException: The layer belongs to another page');\n            }\n            // // Add/remove the layer.\n            // let layer : PdfPageLayer = this.items(index);\n            // if (layer != null) {\n            //     this.RemoveLayer(layer);\n            // }\n            // this.List[index] = value;\n            // this.InsertLayer(index, value);\n        }\n    };\n    PdfPageLayerCollection.prototype.add = function (firstArgument, secondArgument) {\n        if (typeof firstArgument === 'undefined') {\n            var layer = new PdfPageLayer(this.page);\n            layer.name = '';\n            this.add(layer);\n            return layer;\n        }\n        else if (firstArgument instanceof PdfPageLayer) {\n            // if (layer == null)\n            //     throw new ArgumentNullException(\"layer\");\n            // if (layer.Page != m_page)\n            //     throw new ArgumentException(\"The layer belongs to another page\");\n            var index = this.list.push(firstArgument);\n            // Register layer.\n            this.addLayer(index, firstArgument);\n            return index;\n        }\n        else {\n            return 0;\n        }\n    };\n    /**\n     * Registers `layer` at the page.\n     * @private\n     */\n    PdfPageLayerCollection.prototype.addLayer = function (index, layer) {\n        var reference = new PdfReferenceHolder(layer);\n        this.page.contents.add(reference);\n    };\n    // private RemoveLayer(layer : PdfPageLayer) : void {\n    //     if (layer == null) {\n    //         throw new Error('ArgumentNullException:layer');\n    //     }\n    //     let reference : PdfReferenceHolder = new PdfReferenceHolder(layer);\n    //     if (this.page != null) {\n    //         this.page.Contents.Remove(reference);\n    //     }\n    // }\n    /**\n     * Inserts `PdfPageLayer` into the collection at specified index.\n     * @private\n     */\n    PdfPageLayerCollection.prototype.insert = function (index, layer) {\n        // if (index < 0)\n        //     throw new ArgumentOutOfRangeException(\"index\", \"Value can not be less 0\");\n        // if (layer == null)\n        //     throw new ArgumentNullException(\"layer\");\n        // if (layer.Page != m_page)\n        //     throw new ArgumentException(\"The layer belongs to another page\");\n        var list = [];\n        var length = this.list.length;\n        for (var i = index; i < length; i++) {\n            list.push(this.list.pop());\n        }\n        this.list.push(layer);\n        for (var i = 0; i < list.length; i++) {\n            this.list.push(list[i]);\n        }\n        // Register layer.\n        this.insertLayer(index, layer);\n    };\n    /**\n     * Registers layer at the page.\n     * @private\n     */\n    PdfPageLayerCollection.prototype.insertLayer = function (index, layer) {\n        if (layer == null) {\n            throw new Error('ArgumentNullException:layer');\n        }\n        var reference = new PdfReferenceHolder(layer);\n        this.page.contents.insert(index, reference);\n    };\n    // tslint:disable\n    /**\n     * `Parses the layers`.\n     * @private\n     */\n    PdfPageLayerCollection.prototype.parseLayers = function (loadedPage) {\n        // if (loadedPage == null) {\n        //     throw new Error('ArgumentNullException:loadedPage');\n        // }\n        var contents = this.page.contents;\n        var resource = this.page.getResources();\n        var crossTable = null;\n        var ocproperties = null;\n        var propertie = null;\n        var isLayerAdded = false;\n        // if (loadedPage instanceof PdfPage) {\n        crossTable = loadedPage.crossTable;\n        // } else {\n        //     crossTable = (loadedPage as PdfLoadedPage).CrossTable;\n        //     Propertie = PdfCrossTable.Dereference(Resource[DictionaryProperties.Properties]) as PdfDictionary;\n        //     ocproperties = PdfCrossTable.Dereference((loadedPage as PdfLoadedPage).\n        //     Document.Catalog[DictionaryProperties.OCProperties]) as PdfDictionary;\n        // }\n        var saveStream = new PdfStream();\n        var restoreStream = new PdfStream();\n        var saveState = 'q';\n        var newLine = '\\n';\n        var restoreState = 'Q';\n        // for (let index : number = 0; index < contents.Items.length; index++) {\n        //     let obj : IPdfPrimitive = contents[index];\n        //     let stream : PdfStream = crossTable.GetObject(obj) as PdfStream;\n        //     if (stream == null)\n        //         throw new PdfDocumentException(\"Invalid contents array.\");\n        //     // if (stream.Compress)\n        //     {\n        //         if (!loadedPage.Imported)\n        //             stream.Decompress();\n        //     }\n        //     byte[] contentId = stream.Data;\n        //     string str = PdfString.ByteToString(contentId);\n        //     if (!loadedPage.Imported && (contents.Count == 1) && ((stream.Data[stream.Data.Length - 2] ==\n        //     RestoreState) || (stream.Data[stream.Data.Length - 1] == RestoreState)))\n        //     {\n        //         byte[] content = stream.Data;\n        //         byte[] data = new byte[content.Length + 4];\n        //         data[0] = SaveState;\n        //         data[1] = NewLine;\n        //         content.CopyTo(data, 2);\n        //         data[data.Length - 2] = NewLine;\n        //         data[data.Length - 1] = RestoreState;\n        //         stream.Data = data;\n        //     }\n        //     if (ocproperties != null)\n        //     {\n        //         if (Propertie != null)\n        //         {\n        //             foreach (KeyValuePair<PdfName, IPdfPrimitive> prop in Propertie.Items)\n        //             {\n        //                 String Key = prop.Key.ToString();\n        //                 PdfReferenceHolder refh = prop.Value as PdfReferenceHolder;\n        //                 PdfDictionary Dict = null;\n        //                 if (refh != null)\n        //                 {\n        //                     Dict = refh.Object as PdfDictionary;\n        //                 }\n        //                 else\n        //                 {\n        //                     Dict = prop.Value as PdfDictionary;\n        //                 }\n        //                 PdfDictionary m_usage = PdfCrossTable.Dereference(Dict[DictionaryProperties.Usage]) as PdfDictionary;\n        //                 if (m_usage != null)\n        //                 {\n        //                     if (str.Contains(Key))\n        //                     {\n        //                         PdfPageLayer layer = new PdfPageLayer(loadedPage, stream);\n        //                         PdfDictionary printoption = PdfCrossTable.Dereference(m_usage[DictionaryProperties.Print])\n        //                         as PdfDictionary;\n        //                         if (printoption != null)\n        //                         {\n        //                             layer.m_printOption = printoption;\n        //                             foreach (KeyValuePair<PdfName, IPdfPrimitive> value in printoption.Items)\n        //                             {\n        //                                 if (value.Key.Value.Equals(DictionaryProperties.PrintState))\n        //                                 {\n        //                                     string printState = (value.Value as PdfName).Value;\n        //                                     if (printState.Equals(DictionaryProperties.OCGON))\n        //                                     {\n        //                                         layer.PrintState = PdfPrintState.AlwaysPrint;\n        //                                         break;\n        //                                     }\n        //                                     else\n        //                                     {\n        //                                         layer.PrintState = PdfPrintState.NeverPrint;\n        //                                         break;\n        //                                     }\n        //                                 }\n        //                             }\n        //                         }\n        //                         PdfString layerName = PdfCrossTable.Dereference(Dict[DictionaryProperties.Name]) as PdfString;\n        //                         layer.Name = layerName.Value;\n        //                         List.add(layer);\n        //                         isLayerAdded = true;\n        //                         if(!str.Contains(\"EMC\"))\n        //                         break;\n        //                     }\n        //                 }\n        //                 else\n        //                 {\n        //                     if (str.Contains(Key))\n        //                     {\n        //                         PdfPageLayer layer = new PdfPageLayer(loadedPage, stream);\n        //                         List.add(layer);\n        //                         if(Dict.ContainsKey(DictionaryProperties.Name))\n        //                         {\n        //                         PdfString layerName = PdfCrossTable.Dereference(Dict[DictionaryProperties.Name]) as PdfString;\n        //                         layer.Name = layerName.Value;\n        //                         }\n        //                         isLayerAdded = true;\n        //                         break;\n        //                     }\n        //                 }\n        //             }\n        //         }\n        //     }\n        //     if (!isLayerAdded)\n        //     {\n        //         PdfPageLayer layer = new PdfPageLayer(loadedPage, stream);\n        //         List.add(layer);\n        //     }\n        //     else\n        //         isLayerAdded = false;\n        // }\n        var saveData = [];\n        saveData.push(saveState);\n        saveStream.data = saveData;\n        contents.insert(0, new PdfReferenceHolder(saveStream));\n        saveData = [];\n        saveData.push(restoreState);\n        restoreStream.data = saveData;\n        contents.insert(contents.count, new PdfReferenceHolder(restoreStream));\n    };\n    /**\n     * Returns `index of` the `PdfPageLayer` in the collection if exists, -1 otherwise.\n     * @private\n     */\n    PdfPageLayerCollection.prototype.indexOf = function (layer) {\n        if (layer == null) {\n            throw new Error('ArgumentNullException: layer');\n        }\n        var index = this.list.indexOf(layer);\n        return index;\n    };\n    return PdfPageLayerCollection;\n}(PdfCollection));\nexport { PdfPageLayerCollection };\n","import { PdfArray } from './../primitives/pdf-array';\nimport { PdfPageLayerCollection } from './pdf-page-layer-collection';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\nimport { PdfResources } from './../graphics/pdf-resources';\n/**\n * The abstract base class for all pages,\n * `PdfPageBase` class provides methods and properties to create PDF pages and its elements.\n * @private\n */\nvar PdfPageBase = /** @class */ (function () {\n    //constructors\n    /**\n     * Initializes a new instance of the `PdfPageBase` class.\n     * @private\n     */\n    function PdfPageBase(dictionary) {\n        /**\n         * `Index` of the default layer.\n         * @default -1.\n         * @private\n         */\n        this.defLayerIndex = -1;\n        /**\n         * Local variable to store if page `updated`.\n         * @default false.\n         * @private\n         */\n        this.modified = false;\n        /**\n         * Instance of `DictionaryProperties` class.\n         * @hidden\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        this.pageDictionary = dictionary;\n    }\n    Object.defineProperty(PdfPageBase.prototype, \"section\", {\n        //Properties\n        /**\n         * Gets the `section` of a page.\n         * @private\n         */\n        get: function () {\n            // if (this.pdfSection === null) {\n            //     throw new Error('PdfException : Page must be added to some section before using.');\n            // }\n            return this.pdfSection;\n        },\n        set: function (value) {\n            this.pdfSection = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageBase.prototype, \"dictionary\", {\n        /**\n         * Gets the page `dictionary`.\n         * @private\n         */\n        get: function () {\n            return this.pageDictionary;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageBase.prototype, \"element\", {\n        /**\n         * Gets the wrapped `element`.\n         * @private\n         */\n        get: function () {\n            return this.pageDictionary;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageBase.prototype, \"defaultLayer\", {\n        /**\n         * Gets the `default layer` of the page (Read only).\n         * @private\n         */\n        get: function () {\n            var layer = this.layers;\n            var index = this.defaultLayerIndex;\n            var returnlayer = layer.items(index);\n            return returnlayer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageBase.prototype, \"defaultLayerIndex\", {\n        /**\n         * Gets or sets `index of the default layer`.\n         * @private\n         */\n        get: function () {\n            if (this.layerCollection.count === 0 || this.defLayerIndex === -1) {\n                var layer = this.layerCollection.add();\n                this.defLayerIndex = this.layerCollection.indexOf(layer);\n            }\n            return this.defLayerIndex;\n        },\n        /**\n         * Gets or sets` index of the default layer`.\n         * @private\n         */\n        set: function (value) {\n            if (value < 0 || value > this.layers.count - 1) {\n                throw new Error('ArgumentOutOfRangeException : value, Index can not be less 0 and greater Layers.Count - 1');\n            }\n            else {\n                this.defLayerIndex = value;\n                this.modified = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageBase.prototype, \"layers\", {\n        /**\n         * Gets the collection of the page's `layers` (Read only).\n         * @private\n         */\n        get: function () {\n            if (this.layerCollection == null || typeof this.layerCollection === 'undefined') {\n                this.layerCollection = new PdfPageLayerCollection(this);\n            }\n            return this.layerCollection;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Return an instance of `PdfResources` class.\n     * @private\n     */\n    PdfPageBase.prototype.getResources = function () {\n        if (this.resources == null) {\n            this.resources = new PdfResources();\n            this.dictionary.items.setValue(this.dictionaryProperties.resources, this.resources);\n        }\n        return this.resources;\n    };\n    Object.defineProperty(PdfPageBase.prototype, \"contents\", {\n        /**\n         * Gets `array of page's content`.\n         * @private\n         */\n        get: function () {\n            var obj = this.pageDictionary.items.getValue(this.dictionaryProperties.contents);\n            var contents = obj;\n            var rh = obj;\n            if (contents == null) {\n                contents = new PdfArray();\n                this.pageDictionary.items.setValue(this.dictionaryProperties.contents, contents);\n            }\n            return contents;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the `resources`.\n     * @private\n     */\n    PdfPageBase.prototype.setResources = function (res) {\n        this.resources = res;\n        this.dictionary.items.setValue(this.dictionaryProperties.resources, this.resources);\n        this.modified = true;\n    };\n    return PdfPageBase;\n}());\nexport { PdfPageBase };\n","import { PdfArray } from './../primitives/pdf-array';\nimport { PdfReferenceHolder } from './../primitives/pdf-reference';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\nimport { SizeF, RectangleF, PointF } from './../drawing/pdf-drawing';\nimport { PdfStringLayouter } from './../graphics/fonts/string-layouter';\nimport { PdfColorSpace } from './../graphics/enum';\n/**\n * `PdfAnnotationCollection` class represents the collection of 'PdfAnnotation' objects.\n * @private\n */\nvar PdfAnnotationCollection = /** @class */ (function () {\n    function PdfAnnotationCollection(page) {\n        // Constants\n        /**\n         * `Error` constant message.\n         * @private\n         */\n        this.alreadyExistsAnnotationError = 'This annotatation had been already added to page';\n        /**\n         * `Error` constant message.\n         * @private\n         */\n        this.missingAnnotationException = 'Annotation is not contained in collection.';\n        /**\n         * Specifies the Internal variable to store fields of `PdfDictionaryProperties`.\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        /**\n         * Array of the `annotations`.\n         * @private\n         */\n        this.internalAnnotations = new PdfArray();\n        /**\n         * privte `list` for the annotations.\n         * @private\n         */\n        this.lists = [];\n        if (typeof page !== 'undefined') {\n            this.page = page;\n        }\n    }\n    Object.defineProperty(PdfAnnotationCollection.prototype, \"annotations\", {\n        /**\n         * Gets the `PdfAnnotation` object at the specified index. Read-Only.\n         * @private\n         */\n        get: function () {\n            return this.internalAnnotations;\n        },\n        set: function (value) {\n            this.internalAnnotations = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Public methods\n    /**\n     * `Adds` a new annotation to the collection.\n     * @private\n     */\n    PdfAnnotationCollection.prototype.add = function (annotation) {\n        // this.SetPrint(annotation);\n        this.doAdd(annotation);\n    };\n    /**\n     * `Adds` a Annotation to collection.\n     * @private\n     */\n    /* tslint:disable */\n    PdfAnnotationCollection.prototype.doAdd = function (annotation) {\n        if (typeof annotation.destination !== 'undefined') {\n            var layout = new PdfStringLayouter();\n            var layoutResult = layout.layout(annotation.text, annotation.font, annotation.stringFormat, new SizeF((annotation.bounds.width), 0), false, new SizeF(0, 0));\n            var lastPosition = annotation.bounds.y;\n            if (layoutResult.lines.length === 1) {\n                var size = annotation.font.measureString(layoutResult.lines[0].text);\n                annotation.bounds = new RectangleF(new PointF(annotation.bounds.x, lastPosition), size);\n                annotation.text = layoutResult.lines[0].text;\n                //Draw Annotation Text.\n                this.page.graphics.drawString(annotation.text, annotation.font, null, annotation.brush, annotation.bounds.x, annotation.bounds.y, annotation.bounds.width, annotation.bounds.height, null);\n                //Add annotation to dictionary.\n                annotation.setPage(this.page);\n                this.setColor(annotation);\n                this.internalAnnotations.add(new PdfReferenceHolder(annotation));\n                this.lists.push(annotation);\n            }\n            else {\n                for (var i = 0; i < layoutResult.lines.length; i++) {\n                    var size = annotation.font.measureString(layoutResult.lines[i].text);\n                    if (i === 0) {\n                        annotation.bounds = new RectangleF(annotation.bounds.x, lastPosition, size.width, size.height);\n                        annotation.text = layoutResult.lines[i].text;\n                        //Draw Annotation Text.\n                        this.page.graphics.drawString(annotation.text, annotation.font, null, annotation.brush, annotation.bounds.x, lastPosition, size.width, size.height, null);\n                        //Add annotation to dictionary.\n                        annotation.setPage(this.page);\n                        this.setColor(annotation);\n                        this.internalAnnotations.add(new PdfReferenceHolder(annotation));\n                        this.lists.push(annotation);\n                        //Update y for drawing next line of the text.\n                        lastPosition += annotation.bounds.height;\n                    }\n                    else {\n                        var annot = annotation.clone();\n                        annot.bounds = new RectangleF(new PointF(annotation.bounds.x, lastPosition), size);\n                        annot.text = layoutResult.lines[i].text;\n                        //Draw Annotation Text.\n                        this.page.graphics.drawString(annot.text, annot.font, null, annot.brush, annot.bounds.x, annot.bounds.y, annot.bounds.width, annot.bounds.height, null);\n                        //Add annotation to dictionary.\n                        annot.setPage(this.page);\n                        this.setColor(annot);\n                        this.internalAnnotations.add(new PdfReferenceHolder(annot));\n                        this.lists.push(annot);\n                        //Update y for drawing next line of the text.\n                        lastPosition += annot.bounds.height;\n                    }\n                }\n            }\n        }\n        else {\n            annotation.setPage(this.page);\n            this.internalAnnotations.add(new PdfReferenceHolder(annotation));\n            return this.lists.push(annotation);\n        }\n    };\n    /* tslint:enable */\n    /**\n     * `Set a color of an annotation`.\n     * @private\n     */\n    PdfAnnotationCollection.prototype.setColor = function (annotation) {\n        var cs = PdfColorSpace.Rgb;\n        var colours = annotation.color.toArray(cs);\n        annotation.dictionary.items.setValue(this.dictionaryProperties.c, colours);\n    };\n    Object.defineProperty(PdfAnnotationCollection.prototype, \"element\", {\n        // IPdfWrapper Members\n        /**\n         * Gets the `Element` representing this object.\n         * @private\n         */\n        get: function () {\n            return this.internalAnnotations;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfAnnotationCollection;\n}());\nexport { PdfAnnotationCollection };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { PdfPageBase } from './pdf-page-base';\nimport { PdfDictionary, SaveTemplateEventHandler } from './../primitives/pdf-dictionary';\nimport { PdfName } from './../primitives/pdf-name';\nimport { PdfReferenceHolder } from './../primitives/pdf-reference';\nimport { SizeF } from './../drawing/pdf-drawing';\nimport { PdfAnnotationCollection } from './../annotations/annotation-collection';\nimport { PdfPageLayer } from './pdf-page-layer';\n/**\n * Provides methods and properties to create pages and its elements.\n * `PdfPage` class inherited from the `PdfPageBase` class.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * //\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * //\n * // set the font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nvar PdfPage = /** @class */ (function (_super) {\n    __extends(PdfPage, _super);\n    //constructors\n    /**\n     * Initialize the new instance for `PdfPage` class.\n     * @private\n     */\n    function PdfPage() {\n        var _this = _super.call(this, new PdfDictionary()) || this;\n        /**\n         * Stores the instance of `PdfAnnotationCollection` class.\n         * @hidden\n         * @default null\n         * @private\n         */\n        _this.annotationCollection = null;\n        /**\n         * Stores the instance of `PageBeginSave` event for Page Number Field.\n         * @default null\n         * @private\n         */\n        _this.beginSave = null;\n        _this.initialize();\n        return _this;\n    }\n    Object.defineProperty(PdfPage.prototype, \"document\", {\n        //Properties\n        /**\n         * Gets current `document`.\n         * @private\n         */\n        get: function () {\n            if (this.section !== null && this.section.parent !== null) {\n                return this.section.parent.document;\n            }\n            else {\n                return null;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPage.prototype, \"graphics\", {\n        /**\n         * Get the current `graphics`.\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // add a new page to the document\n         * let page1 : PdfPage = document.pages.add();\n         * //\n         * // get graphics\n         * let graphics : PdfGraphics = page1.graphics;\n         * //\n         * // set the font\n         * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n         * // create black brush\n         * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n         * // draw the text\n         * graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n         * // save the document\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            var result = this.defaultLayer.graphics;\n            result.currentPage = this;\n            return result;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPage.prototype, \"crossTable\", {\n        /**\n         * Gets the `cross table`.\n         * @private\n         */\n        get: function () {\n            if (this.section === null) {\n                throw new Error('PdfDocumentException : Page is not created');\n            }\n            return this.section.parent === null ? this.section.parentDocument.crossTable : this.section.parent.document.crossTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPage.prototype, \"size\", {\n        /**\n         * Gets the size of the PDF page- Read only.\n         * @public\n         */\n        get: function () {\n            return this.section.pageSettings.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPage.prototype, \"origin\", {\n        /**\n         * Gets the `origin` of the page.\n         * @private\n         */\n        get: function () {\n            return this.section.pageSettings.origin;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPage.prototype, \"annotations\", {\n        /**\n         * Gets a collection of the `annotations` of the page- Read only.\n         * @private\n         */\n        get: function () {\n            if (this.annotationCollection == null) {\n                this.annotationCollection = new PdfAnnotationCollection(this);\n                // if (!this.Dictionary.ContainsKey(this.dictionaryProperties.annots)) {\n                this.dictionary.items.setValue(this.dictionaryProperties.annots, this.annotationCollection.element);\n                // }\n                this.annotationCollection.annotations = this.dictionary.items.getValue(this.dictionaryProperties.annots);\n            }\n            return this.annotationCollection;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Implementation\n    /**\n     * `Initializes` a page.\n     * @private\n     */\n    PdfPage.prototype.initialize = function () {\n        this.dictionary.items.setValue(this.dictionaryProperties.type, new PdfName('Page'));\n        this.dictionary.pageBeginDrawTemplate = new SaveTemplateEventHandler(this);\n    };\n    /**\n     * Sets parent `section` to the page.\n     * @private\n     */\n    PdfPage.prototype.setSection = function (section) {\n        this.section = section;\n        this.dictionary.items.setValue(this.dictionaryProperties.parent, new PdfReferenceHolder(section));\n    };\n    /**\n     * `Resets the progress`.\n     * @private\n     */\n    PdfPage.prototype.resetProgress = function () {\n        this.isProgressOn = false;\n    };\n    /**\n     * Get the page size reduced by page margins and page template dimensions.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // create new standard font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * //\n     * // set the specified point using `getClientSize` method\n     * let point : PointF = new PointF(page1.getClientSize().width - 200, page1.getClientSize().height - 200);\n     * // draw the text\n     * page1.graphics.drawString('Hello World', font, blackBrush, point);\n     * //\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfPage.prototype.getClientSize = function () {\n        var returnValue = this.section.getActualBounds(this, true);\n        return new SizeF(returnValue.width, returnValue.height);\n    };\n    /**\n     * Helper method to retrive the instance of `PageBeginSave` event for header and footer elements.\n     * @private\n     */\n    PdfPage.prototype.pageBeginSave = function () {\n        var doc = this.document;\n        if (typeof doc !== undefined && doc != null) {\n            this.drawPageTemplates(doc);\n        }\n        if (this.beginSave != null && typeof this.beginSave !== 'undefined') {\n            this.beginSave(this);\n        }\n    };\n    /**\n     * Helper method to draw template elements.\n     * @private\n     */\n    PdfPage.prototype.drawPageTemplates = function (document) {\n        // Draw Background templates.\n        var hasBackTemplates = this.section.containsTemplates(document, this, false);\n        if (hasBackTemplates) {\n            var backLayer = new PdfPageLayer(this, false);\n            this.layers.insert(0, backLayer);\n            this.section.drawTemplates(this, backLayer, document, false);\n            if (backLayer.graphics !== null && typeof backLayer.graphics !== 'undefined') {\n                for (var i = 0; i < backLayer.graphics.automaticFields.automaticFields.length; i++) {\n                    var fieldInfo = backLayer.graphics.automaticFields.automaticFields[i];\n                    fieldInfo.field.performDraw(backLayer.graphics, fieldInfo.location, fieldInfo.scalingX, fieldInfo.scalingY);\n                }\n            }\n        }\n        // Draw Foreground templates.\n        var hasFrontTemplates = this.section.containsTemplates(document, this, true);\n        if (hasFrontTemplates) {\n            var frontLayer = new PdfPageLayer(this, false);\n            this.layers.add(frontLayer);\n            this.section.drawTemplates(this, frontLayer, document, true);\n        }\n    };\n    return PdfPage;\n}(PdfPageBase));\nexport { PdfPage };\n","/**\n * public Enum for `PdfHorizontalAlignment`.\n * @private\n */\nexport var PdfHorizontalAlignment;\n(function (PdfHorizontalAlignment) {\n    /**\n     * Specifies the type of `Left`.\n     * @private\n     */\n    PdfHorizontalAlignment[PdfHorizontalAlignment[\"Left\"] = 0] = \"Left\";\n    /**\n     * Specifies the type of `Center`.\n     * @private\n     */\n    PdfHorizontalAlignment[PdfHorizontalAlignment[\"Center\"] = 1] = \"Center\";\n    /**\n     * Specifies the type of `Right`.\n     * @private\n     */\n    PdfHorizontalAlignment[PdfHorizontalAlignment[\"Right\"] = 2] = \"Right\";\n})(PdfHorizontalAlignment || (PdfHorizontalAlignment = {}));\n/**\n * public Enum for `PdfVerticalAlignment`.\n * @private\n */\nexport var PdfVerticalAlignment;\n(function (PdfVerticalAlignment) {\n    /**\n     * Specifies the type of `Top`.\n     * @private\n     */\n    PdfVerticalAlignment[PdfVerticalAlignment[\"Top\"] = 0] = \"Top\";\n    /**\n     * Specifies the type of `Middle`.\n     * @private\n     */\n    PdfVerticalAlignment[PdfVerticalAlignment[\"Middle\"] = 1] = \"Middle\";\n    /**\n     * Specifies the type of `Bottom`.\n     * @private\n     */\n    PdfVerticalAlignment[PdfVerticalAlignment[\"Bottom\"] = 2] = \"Bottom\";\n})(PdfVerticalAlignment || (PdfVerticalAlignment = {}));\n/**\n * public Enum for `public`.\n * @private\n */\nexport var PdfTextAlignment;\n(function (PdfTextAlignment) {\n    /**\n     * Specifies the type of `Left`.\n     * @private\n     */\n    PdfTextAlignment[PdfTextAlignment[\"Left\"] = 0] = \"Left\";\n    /**\n     * Specifies the type of `Center`.\n     * @private\n     */\n    PdfTextAlignment[PdfTextAlignment[\"Center\"] = 1] = \"Center\";\n    /**\n     * Specifies the type of `Right`.\n     * @private\n     */\n    PdfTextAlignment[PdfTextAlignment[\"Right\"] = 2] = \"Right\";\n    /**\n     * Specifies the type of `Justify`.\n     * @private\n     */\n    PdfTextAlignment[PdfTextAlignment[\"Justify\"] = 3] = \"Justify\";\n})(PdfTextAlignment || (PdfTextAlignment = {}));\n/**\n * public Enum for `TextRenderingMode`.\n * @private\n */\nexport var TextRenderingMode;\n(function (TextRenderingMode) {\n    /**\n     * Specifies the type of `Fill`.\n     * @private\n     */\n    TextRenderingMode[TextRenderingMode[\"Fill\"] = 0] = \"Fill\";\n    /**\n     * Specifies the type of `Stroke`.\n     * @private\n     */\n    TextRenderingMode[TextRenderingMode[\"Stroke\"] = 1] = \"Stroke\";\n    /**\n     * Specifies the type of `FillStroke`.\n     * @private\n     */\n    TextRenderingMode[TextRenderingMode[\"FillStroke\"] = 2] = \"FillStroke\";\n    /**\n     * Specifies the type of `None`.\n     * @private\n     */\n    TextRenderingMode[TextRenderingMode[\"None\"] = 3] = \"None\";\n    /**\n     * Specifies the type of `ClipFlag`.\n     * @private\n     */\n    TextRenderingMode[TextRenderingMode[\"ClipFlag\"] = 4] = \"ClipFlag\";\n    /**\n     * Specifies the type of `ClipFill`.\n     * @private\n     */\n    TextRenderingMode[TextRenderingMode[\"ClipFill\"] = 4] = \"ClipFill\";\n    /**\n     * Specifies the type of `ClipStroke`.\n     * @private\n     */\n    TextRenderingMode[TextRenderingMode[\"ClipStroke\"] = 5] = \"ClipStroke\";\n    /**\n     * Specifies the type of `ClipFillStroke`.\n     * @private\n     */\n    TextRenderingMode[TextRenderingMode[\"ClipFillStroke\"] = 6] = \"ClipFillStroke\";\n    /**\n     * Specifies the type of `Clip`.\n     * @private\n     */\n    TextRenderingMode[TextRenderingMode[\"Clip\"] = 7] = \"Clip\";\n})(TextRenderingMode || (TextRenderingMode = {}));\n/**\n * public Enum for `PdfLineJoin`.\n * @private\n */\nexport var PdfLineJoin;\n(function (PdfLineJoin) {\n    /**\n     * Specifies the type of `Miter`.\n     * @private\n     */\n    PdfLineJoin[PdfLineJoin[\"Miter\"] = 0] = \"Miter\";\n    /**\n     * Specifies the type of `Round`.\n     * @private\n     */\n    PdfLineJoin[PdfLineJoin[\"Round\"] = 1] = \"Round\";\n    /**\n     * Specifies the type of `Bevel`.\n     * @private\n     */\n    PdfLineJoin[PdfLineJoin[\"Bevel\"] = 2] = \"Bevel\";\n})(PdfLineJoin || (PdfLineJoin = {}));\n/**\n * public Enum for `PdfLineCap`.\n * @private\n */\nexport var PdfLineCap;\n(function (PdfLineCap) {\n    /**\n     * Specifies the type of `Flat`.\n     * @private\n     */\n    PdfLineCap[PdfLineCap[\"Flat\"] = 0] = \"Flat\";\n    /**\n     * Specifies the type of `Round`.\n     * @private\n     */\n    PdfLineCap[PdfLineCap[\"Round\"] = 1] = \"Round\";\n    /**\n     * Specifies the type of `Square`.\n     * @private\n     */\n    PdfLineCap[PdfLineCap[\"Square\"] = 2] = \"Square\";\n})(PdfLineCap || (PdfLineCap = {}));\n/**\n * public Enum for `PdfDashStyle`.\n * @private\n */\nexport var PdfDashStyle;\n(function (PdfDashStyle) {\n    /**\n     * Specifies the type of `Solid`.\n     * @private\n     */\n    PdfDashStyle[PdfDashStyle[\"Solid\"] = 0] = \"Solid\";\n    /**\n     * Specifies the type of `Dash`.\n     * @private\n     */\n    PdfDashStyle[PdfDashStyle[\"Dash\"] = 1] = \"Dash\";\n    /**\n     * Specifies the type of `Dot`.\n     * @private\n     */\n    PdfDashStyle[PdfDashStyle[\"Dot\"] = 2] = \"Dot\";\n    /**\n     * Specifies the type of `DashDot`.\n     * @private\n     */\n    PdfDashStyle[PdfDashStyle[\"DashDot\"] = 3] = \"DashDot\";\n    /**\n     * Specifies the type of `DashDotDot`.\n     * @private\n     */\n    PdfDashStyle[PdfDashStyle[\"DashDotDot\"] = 4] = \"DashDotDot\";\n    /**\n     * Specifies the type of `Custom`.\n     * @private\n     */\n    PdfDashStyle[PdfDashStyle[\"Custom\"] = 5] = \"Custom\";\n})(PdfDashStyle || (PdfDashStyle = {}));\n/**\n * public Enum for `PdfFillMode`.\n * @private\n */\nexport var PdfFillMode;\n(function (PdfFillMode) {\n    /**\n     * Specifies the type of `Winding`.\n     * @private\n     */\n    PdfFillMode[PdfFillMode[\"Winding\"] = 0] = \"Winding\";\n    /**\n     * Specifies the type of `Alternate`.\n     * @private\n     */\n    PdfFillMode[PdfFillMode[\"Alternate\"] = 1] = \"Alternate\";\n})(PdfFillMode || (PdfFillMode = {}));\n/**\n * public Enum for `PdfColorSpace`.\n * @private\n */\nexport var PdfColorSpace;\n(function (PdfColorSpace) {\n    /**\n     * Specifies the type of `Rgb`.\n     * @private\n     */\n    PdfColorSpace[PdfColorSpace[\"Rgb\"] = 0] = \"Rgb\";\n    /**\n     * Specifies the type of `Cmyk`.\n     * @private\n     */\n    PdfColorSpace[PdfColorSpace[\"Cmyk\"] = 1] = \"Cmyk\";\n    /**\n     * Specifies the type of `GrayScale`.\n     * @private\n     */\n    PdfColorSpace[PdfColorSpace[\"GrayScale\"] = 2] = \"GrayScale\";\n    /**\n     * Specifies the type of `Indexed`.\n     * @private\n     */\n    PdfColorSpace[PdfColorSpace[\"Indexed\"] = 3] = \"Indexed\";\n})(PdfColorSpace || (PdfColorSpace = {}));\n/**\n * public Enum for `PdfBlendMode`.\n * @private\n */\nexport var PdfBlendMode;\n(function (PdfBlendMode) {\n    /**\n     * Specifies the type of `Normal`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"Normal\"] = 0] = \"Normal\";\n    /**\n     * Specifies the type of `Multiply`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"Multiply\"] = 1] = \"Multiply\";\n    /**\n     * Specifies the type of `Screen`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"Screen\"] = 2] = \"Screen\";\n    /**\n     * Specifies the type of `Overlay`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"Overlay\"] = 3] = \"Overlay\";\n    /**\n     * Specifies the type of `Darken`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"Darken\"] = 4] = \"Darken\";\n    /**\n     * Specifies the type of `Lighten`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"Lighten\"] = 5] = \"Lighten\";\n    /**\n     * Specifies the type of `ColorDodge`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"ColorDodge\"] = 6] = \"ColorDodge\";\n    /**\n     * Specifies the type of `ColorBurn`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"ColorBurn\"] = 7] = \"ColorBurn\";\n    /**\n     * Specifies the type of `HardLight`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"HardLight\"] = 8] = \"HardLight\";\n    /**\n     * Specifies the type of `SoftLight`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"SoftLight\"] = 9] = \"SoftLight\";\n    /**\n     * Specifies the type of `Difference`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"Difference\"] = 10] = \"Difference\";\n    /**\n     * Specifies the type of `Exclusion`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"Exclusion\"] = 11] = \"Exclusion\";\n    /**\n     * Specifies the type of `Hue`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"Hue\"] = 12] = \"Hue\";\n    /**\n     * Specifies the type of `Saturation`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"Saturation\"] = 13] = \"Saturation\";\n    /**\n     * Specifies the type of `Color`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"Color\"] = 14] = \"Color\";\n    /**\n     * Specifies the type of `Luminosity`.\n     * @private\n     */\n    PdfBlendMode[PdfBlendMode[\"Luminosity\"] = 15] = \"Luminosity\";\n})(PdfBlendMode || (PdfBlendMode = {}));\n/**\n * public Enum for `PdfGraphicsUnit`.\n * @private\n */\nexport var PdfGraphicsUnit;\n(function (PdfGraphicsUnit) {\n    /**\n     * Specifies the type of `Centimeter`.\n     * @private\n     */\n    PdfGraphicsUnit[PdfGraphicsUnit[\"Centimeter\"] = 0] = \"Centimeter\";\n    /**\n     * Specifies the type of `Pica`.\n     * @private\n     */\n    PdfGraphicsUnit[PdfGraphicsUnit[\"Pica\"] = 1] = \"Pica\";\n    /**\n     * Specifies the type of `Pixel`.\n     * @private\n     */\n    PdfGraphicsUnit[PdfGraphicsUnit[\"Pixel\"] = 2] = \"Pixel\";\n    /**\n     * Specifies the type of `Point`.\n     * @private\n     */\n    PdfGraphicsUnit[PdfGraphicsUnit[\"Point\"] = 3] = \"Point\";\n    /**\n     * Specifies the type of `Inch`.\n     * @private\n     */\n    PdfGraphicsUnit[PdfGraphicsUnit[\"Inch\"] = 4] = \"Inch\";\n    /**\n     * Specifies the type of `Document`.\n     * @private\n     */\n    PdfGraphicsUnit[PdfGraphicsUnit[\"Document\"] = 5] = \"Document\";\n    /**\n     * Specifies the type of `Millimeter`.\n     * @private\n     */\n    PdfGraphicsUnit[PdfGraphicsUnit[\"Millimeter\"] = 6] = \"Millimeter\";\n})(PdfGraphicsUnit || (PdfGraphicsUnit = {}));\n/**\n * public Enum for `PdfGridImagePosition`.\n * @private\n */\nexport var PdfGridImagePosition;\n(function (PdfGridImagePosition) {\n    /**\n     * Specifies the type of `Fit`.\n     * @private\n     */\n    PdfGridImagePosition[PdfGridImagePosition[\"Fit\"] = 0] = \"Fit\";\n    /**\n     * Specifies the type of `Center`.\n     * @private\n     */\n    PdfGridImagePosition[PdfGridImagePosition[\"Center\"] = 1] = \"Center\";\n    /**\n     * Specifies the type of `Stretch`.\n     * @private\n     */\n    PdfGridImagePosition[PdfGridImagePosition[\"Stretch\"] = 2] = \"Stretch\";\n    /**\n     * Specifies the type of `Tile`.\n     * @private\n     */\n    PdfGridImagePosition[PdfGridImagePosition[\"Tile\"] = 3] = \"Tile\";\n})(PdfGridImagePosition || (PdfGridImagePosition = {}));\n/**\n * public Enum for `the text rendering direction`.\n * @private\n */\nexport var PdfTextDirection;\n(function (PdfTextDirection) {\n    /**\n     * Specifies the type of `None`.\n     * @private\n     */\n    PdfTextDirection[PdfTextDirection[\"None\"] = 0] = \"None\";\n    /**\n     * Specifies the type of `LeftToRight`.\n     * @private\n     */\n    PdfTextDirection[PdfTextDirection[\"LeftToRight\"] = 1] = \"LeftToRight\";\n    /**\n     * Specifies the type of `RightToLeft`.\n     * @private\n     */\n    PdfTextDirection[PdfTextDirection[\"RightToLeft\"] = 2] = \"RightToLeft\";\n})(PdfTextDirection || (PdfTextDirection = {}));\n","/**\n * Represents a base class for all page graphics elements.\n */\nvar PdfGraphicsElement = /** @class */ (function () {\n    // Constructors\n    function PdfGraphicsElement() {\n        //\n    }\n    /**\n     * `Draws` the page number field.\n     * @public\n     */\n    PdfGraphicsElement.prototype.drawHelper = function (graphics, x, y) {\n        var bNeedSave = (x !== 0 || y !== 0);\n        var gState = null;\n        // Translate co-ordinates.\n        if (bNeedSave) {\n            // Save state.\n            gState = graphics.save();\n            graphics.translateTransform(x, y);\n        }\n        this.drawInternal(graphics);\n        if (bNeedSave) {\n            // Restore state.\n            graphics.restore(gState);\n        }\n    };\n    return PdfGraphicsElement;\n}());\nexport { PdfGraphicsElement };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * PdfAutomaticField.ts class for EJ2-PDF\n */\nimport { RectangleF, SizeF, PointF } from './../../drawing/pdf-drawing';\nimport { PdfSolidBrush } from './../../graphics/brushes/pdf-solid-brush';\nimport { PdfColor } from './../../graphics/pdf-color';\nimport { PdfDocument } from './../pdf-document';\nimport { PdfGraphicsElement } from './../../graphics/figures/base/graphics-element';\nimport { PdfAutomaticFieldInfo } from './automatic-field-info';\n/**\n * Represents a fields which is calculated before the document saves.\n */\nvar PdfAutomaticField = /** @class */ (function (_super) {\n    __extends(PdfAutomaticField, _super);\n    // Constructors\n    function PdfAutomaticField() {\n        var _this = _super.call(this) || this;\n        // Fields\n        _this.internalBounds = new RectangleF(0, 0, 0, 0);\n        _this.internalTemplateSize = new SizeF(0, 0);\n        return _this;\n    }\n    Object.defineProperty(PdfAutomaticField.prototype, \"bounds\", {\n        // Properties\n        get: function () {\n            return this.internalBounds;\n        },\n        set: function (value) {\n            this.internalBounds = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfAutomaticField.prototype, \"size\", {\n        get: function () {\n            return new SizeF(this.bounds.width, this.bounds.height);\n        },\n        set: function (value) {\n            this.bounds.width = value.width;\n            this.bounds.height = value.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfAutomaticField.prototype, \"location\", {\n        get: function () {\n            return new PointF(this.bounds.x, this.bounds.y);\n        },\n        set: function (value) {\n            this.bounds.x = value.x;\n            this.bounds.y = value.y;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfAutomaticField.prototype, \"font\", {\n        get: function () {\n            return this.internalFont;\n        },\n        set: function (value) {\n            this.internalFont = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfAutomaticField.prototype, \"brush\", {\n        get: function () {\n            return this.internalBrush;\n        },\n        set: function (value) {\n            this.internalBrush = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfAutomaticField.prototype, \"pen\", {\n        get: function () {\n            return this.internalPen;\n        },\n        set: function (value) {\n            this.internalPen = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfAutomaticField.prototype, \"stringFormat\", {\n        get: function () {\n            return this.internalStringFormat;\n        },\n        set: function (value) {\n            this.internalStringFormat = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfAutomaticField.prototype.performDrawHelper = function (graphics, location, scalingX, scalingY) {\n        if (this.bounds.height === 0 || this.bounds.width === 0) {\n            var text = this.getValue(graphics);\n            this.internalTemplateSize = this.getFont().measureString(text, this.size, this.stringFormat);\n        }\n    };\n    PdfAutomaticField.prototype.draw = function (arg1, arg2, arg3) {\n        if (typeof arg2 === 'undefined') {\n            var location_1 = new PointF(0, 0);\n            this.draw(arg1, location_1);\n        }\n        else if (arg2 instanceof PointF) {\n            this.draw(arg1, arg2.x, arg2.y);\n        }\n        else {\n            this.drawHelper(arg1, arg2, arg3);\n            var info = new PdfAutomaticFieldInfo(this, new PointF(arg2, arg3));\n            arg1.automaticFields.add(info);\n        }\n    };\n    PdfAutomaticField.prototype.getSize = function () {\n        if (this.bounds.height === 0 || this.bounds.width === 0) {\n            return this.internalTemplateSize;\n        }\n        else {\n            return this.size;\n        }\n    };\n    PdfAutomaticField.prototype.drawInternal = function (graphics) {\n        //\n    };\n    /* tslint:disable */\n    PdfAutomaticField.prototype.getBrush = function () {\n        return (typeof this.internalBrush === 'undefined' || this.internalBrush == null) ? new PdfSolidBrush(new PdfColor(0, 0, 0)) : this.internalBrush;\n    };\n    PdfAutomaticField.prototype.getFont = function () {\n        return (typeof this.internalFont === 'undefined' || this.internalFont == null) ? PdfDocument.defaultFont : this.internalFont;\n    };\n    /* tslint:enable */\n    PdfAutomaticField.prototype.getPageFromGraphics = function (graphics) {\n        if (typeof graphics.page !== 'undefined' && graphics.page !== null) {\n            var page = graphics.page;\n            return page;\n        }\n        else {\n            var page = graphics.currentPage;\n            return page;\n        }\n    };\n    return PdfAutomaticField;\n}(PdfGraphicsElement));\nexport { PdfAutomaticField };\n","/**\n * Used to `write a string` into output file.\n * @private\n */\nvar PdfWriter = /** @class */ (function () {\n    /**\n     * Initialize an instance of `PdfWriter` class.\n     * @private\n     */\n    function PdfWriter(stream) {\n        this.streamWriter = stream;\n    }\n    Object.defineProperty(PdfWriter.prototype, \"document\", {\n        //properties\n        /**\n         * Gets and Sets the `document`.\n         * @private\n         */\n        get: function () {\n            return this.pdfDocument;\n        },\n        set: function (value) {\n            this.pdfDocument = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfWriter.prototype, \"position\", {\n        /**\n         * Gets the `position`.\n         * @private\n         */\n        get: function () {\n            return this.streamWriter.buffer.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfWriter.prototype, \"length\", {\n        /**\n         * Gets  the `length` of the stream'.\n         * @private\n         */\n        get: function () {\n            return this.streamWriter.buffer.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfWriter.prototype, \"stream\", {\n        /**\n         * Gets the `stream`.\n         * @private\n         */\n        get: function () {\n            var result = this.streamWriter;\n            return result;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //public Methods\n    /**\n     * `Writes the specified data`.\n     * @private\n     */\n    PdfWriter.prototype.write = function (overload) {\n        var data = [];\n        var tempOverload = overload;\n        this.streamWriter.write(tempOverload);\n    };\n    return PdfWriter;\n}());\nexport { PdfWriter };\n","/**\n * PdfMainObjectCollection.ts class for EJ2-PDF\n */\nimport { Dictionary } from './../collections/dictionary';\nimport { ObjectStatus } from './enum';\n/**\n * The collection of all `objects` within a PDF document.\n * @private\n */\nvar PdfMainObjectCollection = /** @class */ (function () {\n    function PdfMainObjectCollection() {\n        //Fields\n        /**\n         * The collection of the `indirect objects`.\n         * @default []\n         * @private\n         */\n        this.objectCollections = [];\n        /**\n         * The collection of the `Indirect objects`.\n         * @default new Dictionary<number, ObjectInfo>()\n         * @private\n         */\n        this.mainObjectCollection = new Dictionary();\n        /**\n         * The collection of `primitive objects`.\n         * @private\n         */\n        this.primitiveObjectCollection = new Dictionary();\n    }\n    Object.defineProperty(PdfMainObjectCollection.prototype, \"count\", {\n        //Properties\n        /**\n         * Gets the `count`.\n         * @private\n         */\n        get: function () {\n            return this.objectCollections.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets the value of `ObjectInfo` from object collection.\n     * @private\n     */\n    PdfMainObjectCollection.prototype.items = function (index) {\n        return this.objectCollections[index];\n    };\n    Object.defineProperty(PdfMainObjectCollection.prototype, \"outIsNew\", {\n        //Methods\n        /**\n         * Specifies the value of `IsNew`.\n         * @private\n         */\n        get: function () {\n            return this.isNew;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * `Adds` the specified element.\n     * @private\n     */\n    PdfMainObjectCollection.prototype.add = function (element) {\n        var objInfo = new ObjectInfo(element);\n        this.objectCollections.push(objInfo);\n        if (!this.primitiveObjectCollection.containsKey(element)) {\n            this.primitiveObjectCollection.setValue(element, this.objectCollections.length - 1);\n        }\n        element.position = this.index = this.objectCollections.length - 1;\n        element.status = ObjectStatus.Registered;\n    };\n    /**\n     * `Looks` through the collection for the object specified.\n     * @private\n     */\n    PdfMainObjectCollection.prototype.lookFor = function (obj) {\n        var index = -1;\n        if (obj.position !== -1) {\n            return obj.position;\n        }\n        if (this.primitiveObjectCollection.containsKey(obj) && this.count === this.primitiveObjectCollection.size()) {\n            index = this.primitiveObjectCollection.getValue(obj);\n        }\n        else {\n            for (var i = this.count - 1; i >= 0; i--) {\n                var oi = this.objectCollections[i];\n                if (oi.object === obj) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n        return index;\n    };\n    /**\n     * Gets the `reference of the object`.\n     * @private\n     */\n    PdfMainObjectCollection.prototype.getReference = function (index, isNew) {\n        this.index = this.lookFor(index);\n        var reference;\n        this.isNew = false;\n        var oi = this.objectCollections[this.index];\n        reference = oi.reference;\n        var obj = { reference: reference, wasNew: isNew };\n        return obj;\n    };\n    /**\n     * Tries to set the `reference to the object`.\n     * @private\n     */\n    PdfMainObjectCollection.prototype.trySetReference = function (obj, reference, found) {\n        var result = true;\n        found = true;\n        this.index = this.lookFor(obj);\n        var oi = this.objectCollections[this.index];\n        oi.setReference(reference);\n        return result;\n    };\n    PdfMainObjectCollection.prototype.destroy = function () {\n        for (var _i = 0, _a = this.objectCollections; _i < _a.length; _i++) {\n            var obj = _a[_i];\n            if (obj !== undefined) {\n                obj.pdfObject.position = -1;\n                obj.pdfObject.isSaving = undefined;\n                obj.pdfObject.objectCollectionIndex = undefined;\n                obj.pdfObject.position = undefined;\n            }\n        }\n        this.objectCollections = [];\n        this.mainObjectCollection = new Dictionary();\n        this.primitiveObjectCollection = new Dictionary();\n    };\n    return PdfMainObjectCollection;\n}());\nexport { PdfMainObjectCollection };\nvar ObjectInfo = /** @class */ (function () {\n    function ObjectInfo(obj, reference) {\n        this.pdfObject = obj;\n        this.pdfReference = reference;\n    }\n    Object.defineProperty(ObjectInfo.prototype, \"object\", {\n        //Properties\n        /**\n         * Gets the `object`.\n         * @private\n         */\n        get: function () {\n            return this.pdfObject;\n        },\n        set: function (value) {\n            this.pdfObject = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ObjectInfo.prototype, \"reference\", {\n        /**\n         * Gets the `reference`.\n         * @private\n         */\n        get: function () {\n            return this.pdfReference;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the `reference`.\n     * @private\n     */\n    ObjectInfo.prototype.setReference = function (reference) {\n        this.pdfReference = reference;\n    };\n    return ObjectInfo;\n}());\nexport { ObjectInfo };\n","import { Encoding, validateNullOrUndefined } from './encoding';\nimport { Save } from './save';\n/**\n * StreamWriter class contains the implementation for writing characters to a file in a particular encoding\n * ```typescript\n * let writer = new StreamWriter();\n * writer.write('Hello World');\n * writer.save('Sample.txt');\n * writer.dispose();\n * ```\n */\nvar StreamWriter = /** @class */ (function () {\n    /**\n     * Initializes a new instance of the StreamWriter class by using the specified encoding.\n     * @param  {Encoding} encoding?- The character encoding to use.\n     */\n    function StreamWriter(encoding) {\n        this.bufferBlob = new Blob(['']);\n        this.bufferText = '';\n        this.init(encoding);\n        Save.isMicrosoftBrowser = !(!navigator.msSaveBlob);\n    }\n    Object.defineProperty(StreamWriter.prototype, \"buffer\", {\n        /**\n         * Gets the content written to the StreamWriter as Blob.\n         * @returns Blob\n         */\n        get: function () {\n            this.flush();\n            return this.bufferBlob;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StreamWriter.prototype, \"encoding\", {\n        /**\n         * Gets the encoding.\n         * @returns Encoding\n         */\n        get: function () {\n            return this.enc;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StreamWriter.prototype.init = function (encoding) {\n        if (encoding === null || encoding === undefined) {\n            this.enc = new Encoding(false);\n            this.enc.type = 'Utf8';\n        }\n        else {\n            this.enc = encoding;\n            this.setBomByte();\n        }\n    };\n    /**\n     * Private method to set Byte Order Mark(BOM) value based on EncodingType\n     */\n    StreamWriter.prototype.setBomByte = function () {\n        if (this.encoding.includeBom) {\n            switch (this.encoding.type) {\n                case 'Unicode':\n                    var arrayUnicode = new ArrayBuffer(2);\n                    var uint8 = new Uint8Array(arrayUnicode);\n                    uint8[0] = 255;\n                    uint8[1] = 254;\n                    this.bufferBlob = new Blob([arrayUnicode]);\n                    break;\n                case 'Utf8':\n                    var arrayUtf8 = new ArrayBuffer(3);\n                    var utf8 = new Uint8Array(arrayUtf8);\n                    utf8[0] = 239;\n                    utf8[1] = 187;\n                    utf8[2] = 191;\n                    this.bufferBlob = new Blob([arrayUtf8]);\n                    break;\n                default:\n                    this.bufferBlob = new Blob(['']);\n                    break;\n            }\n        }\n    };\n    /**\n     * Saves the file with specified name and sends the file to client browser\n     * @param  {string} fileName - The file name to save\n     * @returns {void}\n     */\n    StreamWriter.prototype.save = function (fileName) {\n        if (this.bufferText !== '') {\n            this.flush();\n        }\n        Save.save(fileName, this.buffer);\n    };\n    /**\n     * Writes the specified string.\n     * @param  {string} value - The string to write. If value is null or undefined, nothing is written.\n     * @returns {void}\n     */\n    StreamWriter.prototype.write = function (value) {\n        if (this.encoding === undefined) {\n            throw new Error('Object Disposed Exception: current writer is disposed');\n        }\n        validateNullOrUndefined(value, 'string');\n        this.bufferText += value;\n        if (this.bufferText.length >= 10240) {\n            this.flush();\n        }\n    };\n    StreamWriter.prototype.flush = function () {\n        if (this.bufferText === undefined || this.bufferText === null || this.bufferText.length === 0) {\n            return;\n        }\n        var bufferArray = this.encoding.getBytes(this.bufferText, 0, this.bufferText.length);\n        this.bufferText = '';\n        this.bufferBlob = new Blob([this.bufferBlob, bufferArray]);\n    };\n    /**\n     * Writes the specified string followed by a line terminator\n     * @param  {string} value - The string to write. If value is null or undefined, nothing is written\n     * @returns {void}\n     */\n    StreamWriter.prototype.writeLine = function (value) {\n        if (this.encoding === undefined) {\n            throw new Error('Object Disposed Exception: current writer is disposed');\n        }\n        validateNullOrUndefined(value, 'string');\n        this.bufferText = this.bufferText + value + '\\r\\n';\n        if (this.bufferText.length >= 10240) {\n            this.flush();\n        }\n    };\n    /**\n     * Releases the resources used by the StreamWriter\n     * @returns {void}\n     */\n    StreamWriter.prototype.destroy = function () {\n        this.bufferBlob = undefined;\n        this.bufferText = undefined;\n        if (this.enc instanceof Encoding) {\n            this.enc.destroy();\n        }\n        this.enc = undefined;\n    };\n    return StreamWriter;\n}());\nexport { StreamWriter };\n","import { StreamWriter } from '@syncfusion/ej2-file-utils';\nimport { Encoding } from '@syncfusion/ej2-file-utils';\nimport { PdfDocument } from './pdf-document';\n/**\n * `PdfDocumentBase` class represent common properties of PdfDocument classes.\n * @private\n */\nvar PdfDocumentBase = /** @class */ (function () {\n    function PdfDocumentBase(document) {\n        /**\n         * If the stream is copied,  then it specifies true.\n         * @private\n         */\n        this.isStreamCopied = false;\n        if (document instanceof PdfDocument) {\n            this.document = document;\n        }\n    }\n    Object.defineProperty(PdfDocumentBase.prototype, \"pdfObjects\", {\n        //Prpperties\n        /**\n         * Gets the `PDF objects` collection, which stores all objects and references to it..\n         * @private\n         */\n        get: function () {\n            return this.objects;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocumentBase.prototype, \"crossTable\", {\n        /**\n         * Gets the `cross-reference` table.\n         * @private\n         */\n        get: function () {\n            return this.pdfCrossTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocumentBase.prototype, \"currentSavingObj\", {\n        /**\n         * Gets or sets the current saving `object number`.\n         * @private\n         */\n        get: function () {\n            return this.currentSavingObject;\n        },\n        set: function (value) {\n            this.currentSavingObject = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocumentBase.prototype, \"catalog\", {\n        /**\n         * Gets the PDF document `catalog`.\n         * @private\n         */\n        get: function () {\n            return this.pdfCatalog;\n        },\n        set: function (value) {\n            this.pdfCatalog = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Public methods\n    /**\n     * Sets the `main object collection`.\n     * @private\n     */\n    PdfDocumentBase.prototype.setMainObjectCollection = function (mainObjectCollection) {\n        this.objects = mainObjectCollection;\n    };\n    /**\n     * Sets the `cross table`.\n     * @private\n     */\n    PdfDocumentBase.prototype.setCrossTable = function (cTable) {\n        this.pdfCrossTable = cTable;\n    };\n    /**\n     * Sets the `catalog`.\n     * @private\n     */\n    PdfDocumentBase.prototype.setCatalog = function (catalog) {\n        this.pdfCatalog = catalog;\n    };\n    PdfDocumentBase.prototype.save = function (filename) {\n        var _this = this;\n        var encoding = new Encoding(true);\n        var SW = new StreamWriter(encoding);\n        if (typeof filename === 'undefined') {\n            var encoding_1 = new Encoding(true);\n            var SW_1 = new StreamWriter(encoding_1);\n            return new Promise(function (resolve, reject) {\n                /* tslint:disable-next-line:no-any */\n                var obj = {};\n                obj.blobData = new Blob([_this.document.docSave(SW_1, true)], { type: 'application/pdf' });\n                resolve(obj);\n            });\n        }\n        else {\n            this.document.docSave(SW, filename, true);\n        }\n    };\n    /**\n     * `Clone` of parent object - PdfDocument.\n     * @private\n     */\n    PdfDocumentBase.prototype.clone = function () {\n        return this.document;\n    };\n    return PdfDocumentBase;\n}());\nexport { PdfDocumentBase };\n","/**\n * Provides data for `PageAddedEventHandler` event.\n * This event raises when adding the new PDF page to the PDF document.\n */\nvar PageAddedEventArgs = /** @class */ (function () {\n    function PageAddedEventArgs(page) {\n        if (typeof page !== 'undefined') {\n            this.pdfPage = page;\n        }\n        else {\n            this.pdfPage = null;\n        }\n    }\n    Object.defineProperty(PageAddedEventArgs.prototype, \"page\", {\n        /**\n         * Gets the `newly added page`.\n         * @private\n         */\n        get: function () {\n            return this.pdfPage;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PageAddedEventArgs;\n}());\nexport { PageAddedEventArgs };\n","/**\n * Represents the `collection of pages in a section`.\n * @private\n */\nvar PdfSectionPageCollection = /** @class */ (function () {\n    // Constructors\n    /**\n     * Initializes a new instance of the `PdfSectionPageCollection` class.\n     * @private\n     */\n    function PdfSectionPageCollection(section) {\n        //  Fields\n        /**\n         * @hidden\n         * @private\n         */\n        this.pdfSection = null;\n        if (section == null) {\n            throw Error('ArgumentNullException(\"section\")');\n        }\n        this.section = section;\n    }\n    Object.defineProperty(PdfSectionPageCollection.prototype, \"section\", {\n        // Properties\n        /**\n         * Gets the `PdfPage` at the specified index.\n         * @private\n         */\n        get: function () {\n            return this.pdfSection;\n        },\n        set: function (value) {\n            this.pdfSection = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Public Methods\n    /**\n     * `Determines` whether the specified page is within the collection.\n     * @private\n     */\n    PdfSectionPageCollection.prototype.contains = function (page) {\n        return this.section.contains(page);\n    };\n    /**\n     * `Removes` the specified page from collection.\n     * @private\n     */\n    PdfSectionPageCollection.prototype.remove = function (page) {\n        this.section.remove(page);\n    };\n    /**\n     * `Adds` a new page from collection.\n     * @private\n     */\n    PdfSectionPageCollection.prototype.add = function () {\n        return this.section.add();\n    };\n    return PdfSectionPageCollection;\n}());\nexport { PdfSectionPageCollection };\n","import { TemplateType } from './../pages/enum';\n// import { PdfStampCollection } from `./../Pages/PdfStampCollection`;\n/**\n * `PdfDocumentTemplate` class encapsulates a page template for all the pages in the document.\n * @private\n */\nvar PdfDocumentTemplate = /** @class */ (function () {\n    // Constructors\n    /**\n     * Initializes a new instance of the `PdfDocumentTemplate` class.\n     * @public\n     */\n    function PdfDocumentTemplate() {\n        //\n    }\n    Object.defineProperty(PdfDocumentTemplate.prototype, \"left\", {\n        // private m_stamps : PdfStampCollection;\n        // Properties\n        /**\n         * `Left` page template object.\n         * @public\n         */\n        get: function () {\n            return this.leftTemplate;\n        },\n        set: function (value) {\n            this.leftTemplate = this.checkElement(value, TemplateType.Left);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocumentTemplate.prototype, \"top\", {\n        /**\n         * `Top` page template object.\n         * @public\n         */\n        get: function () {\n            return this.topTemplate;\n        },\n        set: function (value) {\n            this.topTemplate = this.checkElement(value, TemplateType.Top);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocumentTemplate.prototype, \"right\", {\n        /**\n         * `Right` page template object.\n         * @public\n         */\n        get: function () {\n            return this.rightTemplate;\n        },\n        set: function (value) {\n            this.rightTemplate = this.checkElement(value, TemplateType.Right);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocumentTemplate.prototype, \"bottom\", {\n        /**\n         * `Bottom` page template object.\n         * @public\n         */\n        get: function () {\n            return this.bottomTemplate;\n        },\n        set: function (value) {\n            this.bottomTemplate = this.checkElement(value, TemplateType.Bottom);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocumentTemplate.prototype, \"EvenLeft\", {\n        /**\n         * `EvenLeft` page template object.\n         * @public\n         */\n        get: function () {\n            return this.evenLeft;\n        },\n        set: function (value) {\n            this.evenLeft = this.checkElement(value, TemplateType.Left);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocumentTemplate.prototype, \"EvenTop\", {\n        /**\n         * `EvenTop` page template object.\n         * @public\n         */\n        get: function () {\n            return this.evenTop;\n        },\n        set: function (value) {\n            this.evenTop = this.checkElement(value, TemplateType.Top);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocumentTemplate.prototype, \"EvenRight\", {\n        /**\n         * `EvenRight` page template object.\n         * @public\n         */\n        get: function () {\n            return this.evenRight;\n        },\n        set: function (value) {\n            this.evenRight = this.checkElement(value, TemplateType.Right);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocumentTemplate.prototype, \"EvenBottom\", {\n        /**\n         * `EvenBottom` page template object.\n         * @public\n         */\n        get: function () {\n            return this.evenBottom;\n        },\n        set: function (value) {\n            this.evenBottom = this.checkElement(value, TemplateType.Bottom);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocumentTemplate.prototype, \"OddLeft\", {\n        /**\n         * `OddLeft` page template object.\n         * @public\n         */\n        get: function () {\n            return this.oddLeft;\n        },\n        set: function (value) {\n            this.oddLeft = this.checkElement(value, TemplateType.Left);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocumentTemplate.prototype, \"OddTop\", {\n        /**\n         * `OddTop` page template object.\n         * @public\n         */\n        get: function () {\n            return this.oddTop;\n        },\n        set: function (value) {\n            this.oddTop = this.checkElement(value, TemplateType.Top);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocumentTemplate.prototype, \"OddRight\", {\n        /**\n         * `OddRight` page template object.\n         * @public\n         */\n        get: function () {\n            return this.oddRight;\n        },\n        set: function (value) {\n            this.oddRight = this.checkElement(value, TemplateType.Right);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocumentTemplate.prototype, \"OddBottom\", {\n        /**\n         * `OddBottom` page template object.\n         * @public\n         */\n        get: function () {\n            return this.oddBottom;\n        },\n        set: function (value) {\n            this.oddBottom = this.checkElement(value, TemplateType.Bottom);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Implementation\n    /**\n     * Returns `left` template.\n     * @public\n     */\n    PdfDocumentTemplate.prototype.getLeft = function (page) {\n        if (page == null) {\n            throw new Error('ArgumentNullException:page');\n        }\n        var template = null;\n        // if (page.Document.Pages != null) {\n        var even = this.isEven(page);\n        if (even) {\n            template = (this.EvenLeft != null) ? this.EvenLeft : this.left;\n        }\n        else {\n            template = (this.OddLeft != null) ? this.OddLeft : this.left;\n        }\n        // }\n        return template;\n    };\n    /**\n     * Returns `top` template.\n     * @public\n     */\n    PdfDocumentTemplate.prototype.getTop = function (page) {\n        if (page == null) {\n            throw new Error('ArgumentNullException:page');\n        }\n        var template = null;\n        // if (page.Document.Pages != null) {\n        var even = this.isEven(page);\n        if (even) {\n            template = (this.EvenTop != null) ? this.EvenTop : this.top;\n        }\n        else {\n            template = (this.OddTop != null) ? this.OddTop : this.top;\n        }\n        // }\n        return template;\n    };\n    /**\n     * Returns `right` template.\n     * @public\n     */\n    PdfDocumentTemplate.prototype.getRight = function (page) {\n        if (page == null) {\n            throw new Error('ArgumentNullException:page');\n        }\n        var template = null;\n        // if (page.Document.Pages != null) {\n        var even = this.isEven(page);\n        if (even) {\n            template = (this.EvenRight != null) ? this.EvenRight : this.right;\n        }\n        else {\n            template = (this.OddRight != null) ? this.OddRight : this.right;\n        }\n        // }\n        return template;\n    };\n    /**\n     * Returns `bottom` template.\n     * @public\n     */\n    PdfDocumentTemplate.prototype.getBottom = function (page) {\n        if (page == null) {\n            throw new Error('ArgumentNullException:page');\n        }\n        var template = null;\n        // if (page.Document.Pages != null) {\n        var even = this.isEven(page);\n        if (even) {\n            template = (this.EvenBottom != null) ? this.EvenBottom : this.bottom;\n        }\n        else {\n            template = (this.OddBottom != null) ? this.OddBottom : this.bottom;\n        }\n        // }\n        return template;\n    };\n    /**\n     * Checks whether the page `is even`.\n     * @private\n     */\n    PdfDocumentTemplate.prototype.isEven = function (page) {\n        var pages = page.section.document.pages;\n        var index = 0;\n        if (pages.pageCollectionIndex.containsKey(page)) {\n            index = pages.pageCollectionIndex.getValue(page) + 1;\n        }\n        else {\n            index = pages.indexOf(page) + 1;\n        }\n        var even = ((index % 2) === 0);\n        return even;\n    };\n    /**\n     * Checks a `template element`.\n     * @private\n     */\n    PdfDocumentTemplate.prototype.checkElement = function (templateElement, type) {\n        if (templateElement != null) {\n            if ((typeof templateElement.type !== 'undefined') && (templateElement.type !== TemplateType.None)) {\n                throw new Error('NotSupportedException:Can not reassign the template element. Please, create new one.');\n            }\n            templateElement.type = type;\n        }\n        return templateElement;\n    };\n    return PdfDocumentTemplate;\n}());\nexport { PdfDocumentTemplate };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * PdfSectionTemplate.ts class for EJ2-PDF\n */\nimport { PdfDocumentTemplate } from './../document/pdf-document-template';\n/**\n * Represents a `page template` for all the pages in the section.\n */\nvar PdfSectionTemplate = /** @class */ (function (_super) {\n    __extends(PdfSectionTemplate, _super);\n    // Constructors\n    /**\n     * `Creates a new object`.\n     * @private\n     */\n    function PdfSectionTemplate() {\n        var _this = _super.call(this) || this;\n        _this.leftValue = _this.topValue = _this.rightValue = _this.bottomValue = _this.stampValue = true;\n        return _this;\n    }\n    Object.defineProperty(PdfSectionTemplate.prototype, \"applyDocumentLeftTemplate\", {\n        // Properties\n        /**\n         * Gets or sets value indicating whether parent `Left page template should be used or not`.\n         * @private\n         */\n        get: function () {\n            return this.leftValue;\n        },\n        set: function (value) {\n            this.leftValue = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfSectionTemplate.prototype, \"applyDocumentTopTemplate\", {\n        /**\n         * Gets or sets value indicating whether parent `Top page template should be used or not`.\n         * @private\n         */\n        get: function () {\n            return this.topValue;\n        },\n        set: function (value) {\n            this.topValue = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfSectionTemplate.prototype, \"applyDocumentRightTemplate\", {\n        /**\n         * Gets or sets value indicating whether parent `Right page template should be used or not`.\n         * @private\n         */\n        get: function () {\n            return this.rightValue;\n        },\n        set: function (value) {\n            this.rightValue = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfSectionTemplate.prototype, \"applyDocumentBottomTemplate\", {\n        /**\n         * Gets or sets value indicating whether parent `Bottom page template should be used or not`.\n         * @private\n         */\n        get: function () {\n            return this.bottomValue;\n        },\n        set: function (value) {\n            this.bottomValue = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfSectionTemplate.prototype, \"applyDocumentStamps\", {\n        /**\n         * Gets or sets value indicating whether the `stamp value` is true or not.\n         * @private\n         */\n        get: function () {\n            return this.stampValue;\n        },\n        set: function (value) {\n            this.stampValue = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfSectionTemplate;\n}(PdfDocumentTemplate));\nexport { PdfSectionTemplate };\n","import { PdfPage } from './pdf-page';\nimport { PageAddedEventArgs } from './page-added-event-arguments';\nimport { PdfReferenceHolder } from './../primitives/pdf-reference';\nimport { PdfArray } from './../primitives/pdf-array';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PdfName } from './../primitives/pdf-name';\nimport { PdfDictionary } from './../primitives/pdf-dictionary';\nimport { SaveSectionEventHandler } from './../primitives/pdf-dictionary';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\nimport { PdfSectionCollection } from './pdf-section-collection';\nimport { PdfSectionPageCollection } from './pdf-section-page-collection';\nimport { RectangleF } from './../drawing/pdf-drawing';\nimport { PdfSectionTemplate } from './pdf-section-templates';\n/**\n * Represents a `section` entity. A section it's a set of the pages with similar page settings.\n */\nvar PdfSection = /** @class */ (function () {\n    function PdfSection(document, pageSettings) {\n        //Fields\n        //public PageAdded() : PageAddedEventArgs.PageAddedEventHandler = new PageAddedEventArgs.PageAddedEventHandler(Object,args)\n        /**\n         * @hidden\n         * @private\n         */\n        this.pageAdded = new PageAddedEventArgs();\n        /**\n         * @hidden\n         * @private\n         */\n        this.pdfPages = [];\n        /**\n         * @hidden\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        if (typeof pageSettings === 'undefined') {\n            this.constructor(document, document.pageSettings);\n        }\n        else {\n            this.pdfDocument = document;\n            this.settings = pageSettings.clone();\n            this.initialSettings = this.settings.clone();\n            this.initialize();\n        }\n    }\n    Object.defineProperty(PdfSection.prototype, \"parent\", {\n        //Property\n        /**\n         * Gets or sets the `parent`.\n         * @private\n         */\n        get: function () {\n            return this.sectionCollection;\n        },\n        set: function (value) {\n            this.sectionCollection = value;\n            this.section.items.setValue(this.dictionaryProperties.parent, new PdfReferenceHolder(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfSection.prototype, \"parentDocument\", {\n        /**\n         * Gets the `parent document`.\n         * @private\n         */\n        get: function () {\n            return this.pdfDocument;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfSection.prototype, \"pageSettings\", {\n        /**\n         * Gets or sets the `page settings` of the section.\n         * @private\n         */\n        get: function () {\n            return this.settings;\n        },\n        set: function (value) {\n            if (value != null) {\n                this.settings = value;\n            }\n            else {\n                throw Error('Value can not be null.');\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfSection.prototype, \"element\", {\n        /**\n         * Gets the wrapped `element`.\n         * @private\n         */\n        get: function () {\n            return this.section;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfSection.prototype, \"count\", {\n        /**\n         * Gets the `count` of the pages in the section.\n         * @private\n         */\n        get: function () {\n            return this.pagesReferences.count;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfSection.prototype, \"template\", {\n        /**\n         * Gets or sets a `template` for the pages in the section.\n         * @private\n         */\n        get: function () {\n            if (this.pageTemplate == null) {\n                this.pageTemplate = new PdfSectionTemplate();\n            }\n            return this.pageTemplate;\n        },\n        set: function (value) {\n            this.pageTemplate = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfSection.prototype, \"document\", {\n        /**\n         * Gets the `document`.\n         * @private\n         */\n        get: function () {\n            return this.sectionCollection.document;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfSection.prototype, \"pages\", {\n        /**\n         * Gets the collection of `pages` in a section (Read only)\n         * @private\n         */\n        get: function () {\n            if (this.pagesCollection == null || typeof this.pagesCollection === 'undefined') {\n                this.pagesCollection = new PdfSectionPageCollection(this);\n            }\n            return this.pagesCollection;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //methods\n    /**\n     * `Return the page collection` of current section.\n     * @private\n     */\n    PdfSection.prototype.getPages = function () {\n        return this.pdfPages;\n    };\n    /**\n     * `Translates` point into native coordinates of the page.\n     * @private\n     */\n    PdfSection.prototype.pointToNativePdf = function (page, point) {\n        var bounds = this.getActualBounds(page, true);\n        point.x += bounds.x;\n        point.y = this.pageSettings.height - (point.y);\n        return point;\n    };\n    /**\n     * Sets the page setting of the current section.\n     * @public\n     * @param settings Instance of `PdfPageSettings`\n     */\n    PdfSection.prototype.setPageSettings = function (settings) {\n        this.settings = settings;\n        this.state.orientation = settings.orientation;\n        this.state.rotate = settings.rotate;\n        this.state.size = settings.size;\n        this.state.origin = settings.origin;\n    };\n    /**\n     * `Initializes` the object.\n     * @private\n     */\n    PdfSection.prototype.initialize = function () {\n        this.pagesReferences = new PdfArray();\n        this.section = new PdfDictionary();\n        this.state = new PageSettingsState(this.pdfDocument);\n        this.section.sectionBeginSave = new SaveSectionEventHandler(this, this.state);\n        this.pageCount = new PdfNumber(0);\n        this.section.items.setValue(this.dictionaryProperties.count, this.pageCount);\n        this.section.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.pages));\n        this.section.items.setValue(this.dictionaryProperties.kids, this.pagesReferences);\n    };\n    /**\n     * Checks whether any template should be printed on this layer.\n     * @private\n     * @param document The parent document.\n     * @param page The parent page.\n     * @param foreground Layer z-order.\n     * @returns True - if some content should be printed on the layer, False otherwise.\n     */\n    PdfSection.prototype.containsTemplates = function (document, page, foreground) {\n        var documentHeaders = this.getDocumentTemplates(document, page, true, foreground);\n        var documentTemplates = this.getDocumentTemplates(document, page, false, foreground);\n        var contains = (documentHeaders.length > 0 || documentTemplates.length > 0);\n        return contains;\n    };\n    /**\n     * Returns array of the document templates.\n     * @private\n     * @param document The parent document.\n     * @param page The parent page.\n     * @param headers If true - return headers/footers, if false - return simple templates.\n     * @param foreground If true - return foreground templates, if false - return background templates.\n     * @returns Returns array of the document templates.\n     */\n    /* tslint:disable */\n    PdfSection.prototype.getDocumentTemplates = function (document, page, headers, foreground) {\n        var templates = [];\n        if (headers) {\n            if (this.template.applyDocumentTopTemplate && document.template.getTop(page) != null) {\n                if ((!(document.template.getTop(page).foreground || foreground)) || (document.template.getTop(page).foreground && foreground)) {\n                    templates.push(document.template.getTop(page));\n                }\n            }\n            if (this.template.applyDocumentBottomTemplate && document.template.getBottom(page) != null) {\n                if ((!(document.template.getBottom(page).foreground || foreground)) || (document.template.getBottom(page).foreground && foreground)) {\n                    templates.push(document.template.getBottom(page));\n                }\n            }\n            if (this.template.applyDocumentLeftTemplate && document.template.getLeft(page) != null) {\n                if ((!(document.template.getLeft(page).foreground || foreground)) || (document.template.getLeft(page).foreground && foreground)) {\n                    templates.push(document.template.getLeft(page));\n                }\n            }\n            if (this.template.applyDocumentRightTemplate && document.template.getRight(page) != null) {\n                if ((!(document.template.getRight(page).foreground || foreground)) || (document.template.getRight(page).foreground && foreground)) {\n                    templates.push(document.template.getRight(page));\n                }\n            }\n        }\n        return templates;\n    };\n    /* tslint:enable */\n    /**\n     * `Adds` the specified page.\n     * @private\n     */\n    PdfSection.prototype.add = function (page) {\n        if (typeof page === 'undefined') {\n            var page_1 = new PdfPage();\n            this.add(page_1);\n            return page_1;\n        }\n        else {\n            var r = this.checkPresence(page);\n            this.pdfPages.push(page);\n            this.pagesReferences.add(r);\n            page.setSection(this);\n            page.resetProgress();\n            this.pageAddedMethod(page);\n        }\n    };\n    /**\n     * `Checks the presence`.\n     * @private\n     */\n    PdfSection.prototype.checkPresence = function (page) {\n        var rh = new PdfReferenceHolder(page);\n        var contains = false;\n        var sc = this.parent;\n        for (var index = 0; index < sc.section.length; index++) {\n            var section = sc.section[index];\n            contains = contains || section.contains(page);\n        }\n        return rh;\n    };\n    /**\n     * `Determines` whether the page in within the section.\n     * @private\n     */\n    PdfSection.prototype.contains = function (page) {\n        var index = this.indexOf(page);\n        return (0 <= index);\n    };\n    /**\n     * Get the `index of` the page.\n     * @private\n     */\n    PdfSection.prototype.indexOf = function (page) {\n        for (var index = 0; index < this.pdfPages.length; index++) {\n            if (this.pdfPages[index] === page) {\n                return this.pdfPages.indexOf(page);\n            }\n        }\n        var r = new PdfReferenceHolder(page);\n        return this.pagesReferences.indexOf(r);\n    };\n    /**\n     * Call two event's methods.\n     * @hidden\n     * @private\n     */\n    PdfSection.prototype.pageAddedMethod = function (page) {\n        //Create event's arguments\n        var args = new PageAddedEventArgs(page);\n        this.onPageAdded(args);\n        var parent = this.parent;\n        parent.document.pages.onPageAdded(args);\n        this.pageCount.intValue = this.count;\n    };\n    /**\n     * Called when the page has been added.\n     * @hidden\n     * @private\n     */\n    PdfSection.prototype.onPageAdded = function (args) {\n        //\n    };\n    PdfSection.prototype.getActualBounds = function (arg1, arg2, arg3) {\n        if (arg1 instanceof PdfPage && typeof arg2 === 'boolean') {\n            var result = void 0;\n            var document_1 = this.parent.document;\n            result = this.getActualBounds(document_1, arg1, arg2);\n            return result;\n        }\n        else {\n            arg1 = arg1;\n            arg2 = arg2;\n            arg3 = arg3;\n            var bounds = new RectangleF(0, 0, 0, 0);\n            bounds.height = (arg3) ? this.pageSettings.size.height : this.pageSettings.getActualSize().height;\n            bounds.width = (arg3) ? this.pageSettings.size.width : this.pageSettings.getActualSize().width;\n            var left = this.getLeftIndentWidth(arg1, arg2, arg3);\n            var top_1 = this.getTopIndentHeight(arg1, arg2, arg3);\n            var right = this.getRightIndentWidth(arg1, arg2, arg3);\n            var bottom = this.getBottomIndentHeight(arg1, arg2, arg3);\n            bounds.x += left;\n            bounds.y += top_1;\n            bounds.width -= (left + right);\n            bounds.height -= (top_1 + bottom);\n            return bounds;\n        }\n    };\n    /**\n     * Calculates width of the `left indent`.\n     * @private\n     */\n    PdfSection.prototype.getLeftIndentWidth = function (document, page, includeMargins) {\n        if (document == null) {\n            throw new Error('ArgumentNullException:document');\n        }\n        if (page == null) {\n            throw new Error('ArgumentNullException:page');\n        }\n        var value = (includeMargins) ? this.pageSettings.margins.left : 0;\n        var templateWidth = (this.template.getLeft(page) != null) ? this.template.getLeft(page).width : 0;\n        var docTemplateWidth = (document.template.getLeft(page) != null) ? document.template.getLeft(page).width : 0;\n        value += (this.template.applyDocumentLeftTemplate) ? Math.max(templateWidth, docTemplateWidth) : templateWidth;\n        return value;\n    };\n    /**\n     * Calculates `Height` of the top indent.\n     * @private\n     */\n    PdfSection.prototype.getTopIndentHeight = function (document, page, includeMargins) {\n        if (document == null) {\n            throw new Error('ArgumentNullException:document');\n        }\n        if (page == null) {\n            throw new Error('ArgumentNullException:page');\n        }\n        var value = (includeMargins) ? this.pageSettings.margins.top : 0;\n        var templateHeight = (this.template.getTop(page) != null) ? this.template.getTop(page).height : 0;\n        var docTemplateHeight = (document.template.getTop(page) != null) ? document.template.getTop(page).height : 0;\n        value += (this.template.applyDocumentTopTemplate) ? Math.max(templateHeight, docTemplateHeight) : templateHeight;\n        return value;\n    };\n    /**\n     * Calculates `width` of the right indent.\n     * @private\n     */\n    PdfSection.prototype.getRightIndentWidth = function (document, page, includeMargins) {\n        if (document == null) {\n            throw new Error('ArgumentNullException:document');\n        }\n        if (page == null) {\n            throw new Error('ArgumentNullException:page');\n        }\n        var value = (includeMargins) ? this.pageSettings.margins.right : 0;\n        var templateWidth = (this.template.getRight(page) != null) ? this.template.getRight(page).width : 0;\n        var docTemplateWidth = (document.template.getRight(page) != null) ? document.template.getRight(page).width : 0;\n        value += (this.template.applyDocumentRightTemplate) ? Math.max(templateWidth, docTemplateWidth) : templateWidth;\n        return value;\n    };\n    /**\n     * Calculates `Height` of the bottom indent.\n     * @private\n     */\n    PdfSection.prototype.getBottomIndentHeight = function (document, page, includeMargins) {\n        if (document == null) {\n            throw new Error('ArgumentNullException:document');\n        }\n        if (page == null) {\n            throw new Error('ArgumentNullException:page');\n        }\n        var value = (includeMargins) ? this.pageSettings.margins.bottom : 0;\n        var templateHeight = (this.template.getBottom(page) != null) ? this.template.getBottom(page).height : 0;\n        var docTemplateHeight = (document.template.getBottom(page) != null) ? document.template.getBottom(page).height : 0;\n        value += (this.template.applyDocumentBottomTemplate) ? Math.max(templateHeight, docTemplateHeight) : templateHeight;\n        return value;\n    };\n    /**\n     * `Removes` the page from the section.\n     * @private\n     */\n    PdfSection.prototype.remove = function (page) {\n        if (page == null) {\n            throw Error('ArgumentNullException(\"page\")');\n        }\n        var index = this.pdfPages.indexOf(page);\n        this.pagesReferences.removeAt(index);\n        var temproaryPages = [];\n        for (var j = 0; j < index; j++) {\n            temproaryPages.push(this.pdfPages[j]);\n        }\n        for (var j = index + 1; j < this.pdfPages.length; j++) {\n            temproaryPages.push(this.pdfPages[j]);\n        }\n        this.pdfPages = temproaryPages;\n    };\n    /**\n     * In fills dictionary by the data from `Page settings`.\n     * @private\n     */\n    PdfSection.prototype.applyPageSettings = function (container, parentSettings, state) {\n        var bounds = new RectangleF(state.origin, state.size);\n        container.items.setValue(this.dictionaryProperties.mediaBox, PdfArray.fromRectangle(bounds));\n        var rotate = 0;\n        rotate = PdfSectionCollection.rotateFactor * state.rotate;\n        var angle = new PdfNumber(rotate);\n        container.items.setValue(this.dictionaryProperties.rotate, angle);\n    };\n    /**\n     * Catches the Save event of the dictionary.\n     * @hidden\n     * @private\n     */\n    PdfSection.prototype.beginSave = function (state, writer) {\n        var doc = writer.document;\n        this.applyPageSettings(this.section, doc.pageSettings, state);\n    };\n    /**\n     * Draws page templates on the page.\n     * @private\n     */\n    PdfSection.prototype.drawTemplates = function (page, layer, document, foreground) {\n        var documentHeaders = this.getDocumentTemplates(document, page, true, foreground);\n        var documentTemplates = this.getDocumentTemplates(document, page, false, foreground);\n        if (foreground) {\n            this.drawTemplatesHelper(layer, document, documentHeaders);\n            this.drawTemplatesHelper(layer, document, documentTemplates);\n        }\n        else {\n            this.drawTemplatesHelper(layer, document, documentHeaders);\n            this.drawTemplatesHelper(layer, document, documentTemplates);\n        }\n    };\n    /**\n     * Draws page templates on the page.\n     * @private\n     */\n    PdfSection.prototype.drawTemplatesHelper = function (layer, document, templates) {\n        if (templates != null && templates.length > 0) {\n            var len = templates.length;\n            for (var i = 0; i < len; i++) {\n                var template = templates[i];\n                template.draw(layer, document);\n            }\n        }\n    };\n    return PdfSection;\n}());\nexport { PdfSection };\nvar PageSettingsState = /** @class */ (function () {\n    //Public Constructor\n    /**\n     * New instance to store the `PageSettings`.\n     * @private\n     */\n    function PageSettingsState(document) {\n        this.pageOrientation = document.pageSettings.orientation;\n        this.pageRotate = document.pageSettings.rotate;\n        this.pageSize = document.pageSettings.size;\n        this.pageOrigin = document.pageSettings.origin;\n    }\n    Object.defineProperty(PageSettingsState.prototype, \"orientation\", {\n        //public Properties\n        /**\n         * @hidden\n         * @private\n         */\n        get: function () {\n            return this.pageOrientation;\n        },\n        set: function (value) {\n            this.pageOrientation = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageSettingsState.prototype, \"rotate\", {\n        /**\n         * @hidden\n         * @private\n         */\n        get: function () {\n            return this.pageRotate;\n        },\n        set: function (value) {\n            this.pageRotate = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageSettingsState.prototype, \"size\", {\n        /**\n         * @hidden\n         * @private\n         */\n        get: function () {\n            return this.pageSize;\n        },\n        set: function (value) {\n            this.pageSize = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PageSettingsState.prototype, \"origin\", {\n        /**\n         * @hidden\n         * @private\n         */\n        get: function () {\n            return this.pageOrigin;\n        },\n        set: function (value) {\n            this.pageOrigin = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PageSettingsState;\n}());\nexport { PageSettingsState };\n","import { PdfNumber } from './../primitives/pdf-number';\nimport { PdfName } from './../primitives/pdf-name';\nimport { PdfArray } from './../primitives/pdf-array';\nimport { PdfDictionary, SaveSectionCollectionEventHandler } from './../primitives/pdf-dictionary';\nimport { PdfReferenceHolder } from './../primitives/pdf-reference';\nimport { RectangleF, PointF } from './../drawing/pdf-drawing';\nimport { PdfSection } from './pdf-section';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\n/**\n * Represents the `collection of the sections`.\n * @private\n */\nvar PdfSectionCollection = /** @class */ (function () {\n    //constructor\n    /**\n     * Initializes a new instance of the `PdfSectionCollection` class.\n     * @private\n     */\n    function PdfSectionCollection(document) {\n        /**\n         * @hidden\n         * @private\n         */\n        this.sections = [];\n        /**\n         * @hidden\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        // if (document === null) {\n        //     throw new Error('ArgumentNullException : document');\n        // }\n        this.pdfDocument = document.clone();\n        this.initialize();\n    }\n    Object.defineProperty(PdfSectionCollection.prototype, \"section\", {\n        //Properties\n        /**\n         * Gets the `Section` collection.\n         */\n        get: function () {\n            return this.sections;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfSectionCollection.prototype, \"document\", {\n        /**\n         * Gets a parent `document`.\n         * @private\n         */\n        get: function () {\n            return this.pdfDocument;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfSectionCollection.prototype, \"count\", {\n        /**\n         * Gets the `number of sections` in a document.\n         * @private\n         */\n        get: function () {\n            return this.sections.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfSectionCollection.prototype, \"element\", {\n        /**\n         * Gets the wrapped `element`.\n         * @private\n         */\n        get: function () {\n            return this.pages;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Methods\n    /**\n     * `Initializes the object`.\n     * @private\n     */\n    PdfSectionCollection.prototype.initialize = function () {\n        this.sectionCount = new PdfNumber(0);\n        this.sectionCollection = new PdfArray();\n        this.pages = new PdfDictionary();\n        this.pages.beginSave = new SaveSectionCollectionEventHandler(this);\n        this.pages.items.setValue(this.dictionaryProperties.type, new PdfName('Pages'));\n        this.pages.items.setValue(this.dictionaryProperties.kids, this.sectionCollection);\n        this.pages.items.setValue(this.dictionaryProperties.count, this.sectionCount);\n        this.pages.items.setValue(this.dictionaryProperties.resources, new PdfDictionary());\n        this.setPageSettings(this.pages, this.pdfDocument.pageSettings);\n    };\n    /**\n     * Initializes a new instance of the `PdfSectionCollection` class.\n     * @private\n     */\n    PdfSectionCollection.prototype.pdfSectionCollection = function (index) {\n        if (index < 0 || index >= this.count) {\n            throw new Error('IndexOutOfRangeException()');\n        }\n        return this.sections[index];\n    };\n    /**\n     * In fills dictionary by the data from `Page settings`.\n     * @private\n     */\n    PdfSectionCollection.prototype.setPageSettings = function (container, pageSettings) {\n        // if (container === null) {\n        //     throw new Error('ArgumentNullException : container');\n        // }\n        // if (pageSettings === null) {\n        //     throw new Error('ArgumentNullException : pageSettings');\n        // }\n        var bounds = new RectangleF(new PointF(), pageSettings.size);\n        container.items.setValue(this.dictionaryProperties.mediaBox, PdfArray.fromRectangle(bounds));\n    };\n    /**\n     * `Adds` the specified section.\n     * @private\n     */\n    PdfSectionCollection.prototype.add = function (section) {\n        if (typeof section === 'undefined') {\n            var section_1 = new PdfSection(this.pdfDocument);\n            this.add(section_1);\n            return section_1;\n        }\n        else {\n            // if (section === null) {\n            //     throw new Error('ArgumentNullException : section');\n            // }\n            var r = this.checkSection(section);\n            this.sections.push(section);\n            section.parent = this;\n            this.sectionCollection.add(r);\n            return this.sections.indexOf(section);\n        }\n    };\n    /**\n     * `Checks` if the section is within the collection.\n     * @private\n     */\n    PdfSectionCollection.prototype.checkSection = function (section) {\n        var r = new PdfReferenceHolder(section);\n        var contains = this.sectionCollection.contains(r);\n        // if (contains) {\n        //     throw new Error('ArgumentException : The object can not be added twice to the collection,section');\n        // }\n        return r;\n    };\n    /**\n     * Catches the Save event of the dictionary to `count the pages`.\n     * @private\n     */\n    PdfSectionCollection.prototype.countPages = function () {\n        var count = 0;\n        this.sections.forEach(function (n) { return (count += n.count); });\n        return count;\n    };\n    /**\n     * Catches the Save event of the dictionary to `count the pages`.\n     * @hidden\n     * @private\n     */\n    PdfSectionCollection.prototype.beginSave = function () {\n        this.sectionCount.intValue = this.countPages();\n    };\n    //Fields\n    /**\n     * Rotate factor for page `rotation`.\n     * @default 90\n     * @private\n     */\n    PdfSectionCollection.rotateFactor = 90;\n    return PdfSectionCollection;\n}());\nexport { PdfSectionCollection };\n","import { PdfPage } from './pdf-page';\nimport { Dictionary } from './../collections/dictionary';\nimport { PdfPageOrientation } from './enum';\n/**\n * Represents a virtual collection of all the pages in the document.\n * @private\n */\nvar PdfDocumentPageCollection = /** @class */ (function () {\n    //constructor\n    /**\n     * Initializes a new instance of the `PdfPageCollection` class.\n     * @private\n     */\n    function PdfDocumentPageCollection(document) {\n        /**\n         * It holds the page collection with the `index`.\n         * @private\n         */\n        this.pdfPageCollectionIndex = new Dictionary();\n        /**\n         * Stores the previous pages's `orientation`.\n         * @default PdfPageOrientation.Portrait\n         * @private\n         */\n        this.previousPageOrientation = PdfPageOrientation.Portrait;\n        this.document = document;\n    }\n    Object.defineProperty(PdfDocumentPageCollection.prototype, \"count\", {\n        //Property\n        /**\n         * Gets the total `number of the pages`.\n         * @private\n         */\n        get: function () {\n            return this.countPages();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocumentPageCollection.prototype, \"pageCollectionIndex\", {\n        /**\n         * Gets a `page index` from the document.\n         * @private\n         */\n        get: function () {\n            return this.pdfPageCollectionIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfDocumentPageCollection.prototype.add = function (page) {\n        if (typeof page === 'undefined') {\n            var page_1 = new PdfPage();\n            this.add(page_1);\n            return page_1;\n        }\n        else {\n            var section = this.getLastSection();\n            if (section.pageSettings.orientation !== this.previousPageOrientation) {\n                section = this.document.sections.add();\n                section.pageSettings.orientation = this.document.pageSettings.orientation;\n            }\n            section.add(page);\n        }\n    };\n    /**\n     * Returns `last section` in the document.\n     * @private\n     */\n    PdfDocumentPageCollection.prototype.getLastSection = function () {\n        var sc = this.document.sections;\n        if (sc.section.length === 0) {\n            sc.add();\n        }\n        var section = sc.section[sc.section.length - 1];\n        return section;\n    };\n    /**\n     * Called when `new page has been added`.\n     * @private\n     */\n    PdfDocumentPageCollection.prototype.onPageAdded = function (args) {\n        // if (PageAdded !== null)\n        // {\n        //     PageAdded(this, args);\n        // }\n    };\n    /**\n     * Gets the `total number of pages`.\n     * @private\n     */\n    PdfDocumentPageCollection.prototype.countPages = function () {\n        var sc = this.document.sections;\n        var count = 0;\n        for (var index = 0; index < sc.section.length; index++) {\n            count += sc.section[index].count;\n        }\n        return count;\n    };\n    /**\n     * Gets the `page object` from page index.\n     * @private\n     */\n    PdfDocumentPageCollection.prototype.getPageByIndex = function (index) {\n        return this.getPage(index);\n    };\n    /**\n     * Gets a page by its `index` in the document.\n     * @private\n     */\n    PdfDocumentPageCollection.prototype.getPage = function (index) {\n        if ((index < 0) || (index >= this.count)) {\n            throw Error('ArgumentOutOfRangeException(\"index\", \"Value can not be less 0\")');\n        }\n        var page = null;\n        var sectionStartIndex = 0;\n        var sectionCount = 0;\n        var pageIndex = 0;\n        var length = this.document.sections.count;\n        for (var i = 0; i < length; i++) {\n            var section = this.document.sections.section[i];\n            sectionCount = section.count;\n            pageIndex = index - sectionStartIndex;\n            // We found a section containing the page.\n            if ((index >= sectionStartIndex && pageIndex < sectionCount)) {\n                page = section.getPages()[pageIndex];\n                break;\n            }\n            sectionStartIndex += sectionCount;\n        }\n        return page;\n    };\n    /**\n     * Gets the `index of` the page in the document.\n     * @private\n     */\n    PdfDocumentPageCollection.prototype.indexOf = function (page) {\n        var index = -1;\n        if (page == null) {\n            throw new Error('ArgumentNullException: page');\n        }\n        else {\n            var numPages = 0;\n            for (var i = 0, len = this.document.sections.count; i < len; i++) {\n                var section = this.document.sections.pdfSectionCollection(i);\n                index = section.indexOf(page);\n                if (index >= 0) {\n                    index += numPages;\n                    break;\n                }\n                else {\n                    index = -1;\n                }\n                numPages += section.count;\n            }\n        }\n        return index;\n    };\n    /**\n     * `Removes` the specified page.\n     * @private\n     */\n    PdfDocumentPageCollection.prototype.remove = function (page) {\n        if (page == null) {\n            throw Error('ArgumentNullException(\"page\")');\n        }\n        var section = null;\n        var len;\n        for (var i = 0, len_1 = this.document.sections.count; i < len_1; i++) {\n            section = this.document.sections.pdfSectionCollection(i);\n            if (section.pages.contains(page)) {\n                section.pages.remove(page);\n                break;\n            }\n        }\n        return section;\n    };\n    return PdfDocumentPageCollection;\n}());\nexport { PdfDocumentPageCollection };\n","/**\n * PdfCacheCollection.ts class for EJ2-PDF\n */\nimport { Dictionary } from './../collections/dictionary';\n/**\n * `Collection of the cached objects`.\n * @private\n */\nvar PdfCacheCollection = /** @class */ (function () {\n    // Constructors\n    /**\n     * Initializes a new instance of the `PdfCacheCollection` class.\n     * @private\n     */\n    function PdfCacheCollection() {\n        this.referenceObjects = [];\n        this.pdfFontCollection = new Dictionary();\n    }\n    // Public methods\n    /**\n     * `Searches` for the similar cached object. If is not found - adds the object to the cache.\n     * @private\n     */\n    PdfCacheCollection.prototype.search = function (obj) {\n        var result = null;\n        var group = this.getGroup(obj);\n        if (group == null) {\n            group = this.createNewGroup();\n        }\n        else if (group.length > 0) {\n            result = group[0];\n        }\n        group.push(obj);\n        return result;\n    };\n    // Implementation\n    /**\n     * `Creates` a new group.\n     * @private\n     */\n    PdfCacheCollection.prototype.createNewGroup = function () {\n        var group = [];\n        this.referenceObjects.push(group);\n        return group;\n    };\n    /**\n     * `Find and Return` a group.\n     * @private\n     */\n    PdfCacheCollection.prototype.getGroup = function (result) {\n        var group = null;\n        if (result !== null) {\n            var len = this.referenceObjects.length;\n            for (var i = 0; i < len; i++) {\n                if (this.referenceObjects.length > 0) {\n                    var tGroup = this.referenceObjects[i];\n                    if (tGroup.length > 0) {\n                        var representative = tGroup[0];\n                        if (result.equalsTo(representative)) {\n                            group = tGroup;\n                            break;\n                        }\n                    }\n                    else {\n                        this.removeGroup(tGroup);\n                    }\n                }\n                len = this.referenceObjects.length;\n            }\n        }\n        return group;\n    };\n    /**\n     * Remove a group from the storage.\n     */\n    PdfCacheCollection.prototype.removeGroup = function (group) {\n        if (group !== null) {\n            var index = this.referenceObjects.indexOf(group);\n            this.referenceObjects.slice(index, index + 1);\n        }\n    };\n    PdfCacheCollection.prototype.destroy = function () {\n        this.pdfFontCollection = undefined;\n        this.referenceObjects = undefined;\n    };\n    return PdfCacheCollection;\n}());\nexport { PdfCacheCollection };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { PdfWriter } from './../input-output/pdf-writer';\nimport { PdfMainObjectCollection } from './../input-output/pdf-main-object-collection';\nimport { PdfDocumentBase } from './pdf-document-base';\nimport { PdfCrossTable } from './../input-output/pdf-cross-table';\nimport { PdfCatalog } from './pdf-catalog';\nimport { PdfPageSettings } from './../pages/pdf-page-settings';\nimport { PdfSectionCollection } from './../pages/pdf-section-collection';\nimport { PdfDocumentPageCollection } from './../pages/pdf-document-page-collection';\nimport { PdfCacheCollection } from './../general/pdf-cache-collection';\nimport { PdfColorSpace } from './../graphics/enum';\nimport { PdfDocumentTemplate } from './pdf-document-template';\nimport { PdfFontFamily } from './../graphics/fonts/enum';\nimport { PdfStandardFont } from './../graphics/fonts/pdf-standard-font';\n/**\n * Represents a PDF document and can be used to create a new PDF document from the scratch.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * // set the font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nvar PdfDocument = /** @class */ (function (_super) {\n    __extends(PdfDocument, _super);\n    function PdfDocument(isMerging) {\n        var _this = _super.call(this) || this;\n        /**\n         * Default `margin` value.\n         * @default 40.0\n         * @private\n         */\n        _this.defaultMargin = 40.0;\n        /**\n         * Internal variable to store instance of `StreamWriter` classes..\n         * @default null\n         * @private\n         */\n        _this.streamWriter = null;\n        _this = _super.call(this, _this) || this;\n        if (isMerging === true || isMerging === false || typeof isMerging !== 'undefined') {\n            var objects = new PdfMainObjectCollection();\n            _this.setMainObjectCollection(objects);\n            var crossTable = new PdfCrossTable();\n            crossTable.isMerging = isMerging;\n            crossTable.document = _this;\n            _this.setCrossTable(crossTable);\n            var catalog = new PdfCatalog();\n            _this.setCatalog(catalog);\n            objects.add(catalog);\n            catalog.position = -1;\n            _this.sectionCollection = new PdfSectionCollection(_this);\n            _this.documentPageCollection = new PdfDocumentPageCollection(_this);\n            catalog.pages = _this.sectionCollection;\n        }\n        else {\n            PdfDocument.cacheCollection = new PdfCacheCollection();\n            _this.constructor(false);\n        }\n        return _this;\n    }\n    Object.defineProperty(PdfDocument, \"defaultFont\", {\n        //Properties\n        /**\n         * Gets the `default font`. It is used for complex objects when font is not explicitly defined.\n         * @private\n         */\n        get: function () {\n            if (this.defaultStandardFont == null) {\n                this.defaultStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 8);\n            }\n            return this.defaultStandardFont;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocument.prototype, \"sections\", {\n        /**\n         * Gets the collection of the `sections` in the document.\n         * @private\n         */\n        get: function () {\n            return this.sectionCollection;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocument.prototype, \"pageSettings\", {\n        /**\n         * Gets the document's page setting.\n         * @public\n         */\n        get: function () {\n            if (this.settings == null) {\n                this.settings = new PdfPageSettings(this.defaultMargin);\n            }\n            return this.settings;\n        },\n        /**\n         * Sets the document's page setting.\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         *\n         * // sets the right margin of the page\n         * document.pageSettings.margins.right = 0;\n         * // set the page size.\n         * document.pageSettings.size = new SizeF(500, 500);\n         * // change the page orientation to landscape\n         * document.pageSettings.orientation = PdfPageOrientation.Landscape;\n         * // apply 90 degree rotation on the page\n         * document.pageSettings.rotate = PdfPageRotateAngle.RotateAngle90;\n         *\n         * // add a pages to the document\n         * let page1 : PdfPage = document.pages.add();\n         * // set font\n         * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n         * // set brush\n         * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n         * // set the specified Point\n         * let point : PointF = new PointF(page1.getClientSize().width - 200, page1.getClientSize().height - 200);\n         * // draw the text\n         * page1.graphics.drawString('Hello World', font, blackBrush, point);\n         * // save the document\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        set: function (value) {\n            this.settings = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocument.prototype, \"pages\", {\n        /**\n         * Represents the collection of pages in the PDF document.\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * //\n         * // get the collection of pages in the document\n         * let pageCollection : PdfDocumentPageCollection  = document.pages;\n         * //\n         * // add pages\n         * let page1 : PdfPage = pageCollection.add();\n         * // save the document\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this.documentPageCollection;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocument, \"cache\", {\n        /**\n         * Gets collection of the `cached objects`.\n         * @private\n         */\n        get: function () {\n            if (typeof PdfDocument.cacheCollection === 'undefined' || PdfDocument.cacheCollection == null) {\n                return new PdfCacheCollection();\n            }\n            return PdfDocument.cacheCollection;\n        },\n        /**\n         * Sets collection of the `cached objects`.\n         * @private\n         */\n        set: function (value) {\n            this.cacheCollection = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocument, \"enableCache\", {\n        /**\n         * Gets the value of enable cache.\n         * @private\n         */\n        get: function () {\n            return this.isCacheEnabled;\n        },\n        /**\n         * Sets thie value of enable cache.\n         * @private\n         */\n        set: function (value) {\n            this.isCacheEnabled = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocument.prototype, \"colorSpace\", {\n        /* tslint:disable */\n        /**\n         * Gets or sets the `color space` of the document. This property can be used to create PDF document in RGB, Gray scale or CMYK color spaces.\n         * @private\n         */\n        get: function () {\n            if ((this.pdfColorSpace === PdfColorSpace.Rgb) || ((this.pdfColorSpace === PdfColorSpace.Cmyk)\n                || (this.pdfColorSpace === PdfColorSpace.GrayScale))) {\n                return this.pdfColorSpace;\n            }\n            else {\n                return PdfColorSpace.Rgb;\n            }\n        },\n        set: function (value) {\n            if ((value === PdfColorSpace.Rgb) || ((value === PdfColorSpace.Cmyk) ||\n                (value === PdfColorSpace.GrayScale))) {\n                this.pdfColorSpace = value;\n            }\n            else {\n                this.pdfColorSpace = PdfColorSpace.Rgb;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDocument.prototype, \"template\", {\n        /* tslint:enable */\n        /**\n         * Gets or sets a `template` to all pages in the document.\n         * @private\n         */\n        get: function () {\n            if (this.pageTemplate == null) {\n                this.pageTemplate = new PdfDocumentTemplate();\n            }\n            return this.pageTemplate;\n        },\n        set: function (value) {\n            this.pageTemplate = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfDocument.prototype.docSave = function (stream, arg2, arg3) {\n        this.checkPagesPresence();\n        if (stream === null) {\n            throw new Error('ArgumentNullException : stream');\n        }\n        this.streamWriter = stream;\n        var writer = new PdfWriter(stream);\n        writer.document = this;\n        if (typeof arg2 === 'boolean' && typeof arg3 === 'undefined') {\n            return this.crossTable.save(writer);\n        }\n        else {\n            this.crossTable.save(writer, arg2);\n        }\n    };\n    /**\n     * Checks the pages `presence`.\n     * @private\n     */\n    PdfDocument.prototype.checkPagesPresence = function () {\n        if (this.pages.count === 0) {\n            this.pages.add();\n        }\n    };\n    /**\n     * disposes the current instance of `PdfDocument` class.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a new page to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set the font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // create black brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * // draw the text\n     * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfDocument.prototype.destroy = function () {\n        this.catalog = undefined;\n        this.colorSpace = undefined;\n        this.currentSavingObj = undefined;\n        this.documentPageCollection = undefined;\n        this.isStreamCopied = undefined;\n        this.pageSettings = undefined;\n        this.pageTemplate = undefined;\n        this.pdfColorSpace = undefined;\n        this.sectionCollection = undefined;\n        PdfDocument.cache.destroy();\n        this.crossTable.pdfObjects.destroy();\n        PdfDocument.cache = undefined;\n        this.streamWriter.destroy();\n    };\n    /**\n     * `Font` used in complex objects to draw strings and text when it is not defined explicitly.\n     * @default null\n     * @private\n     */\n    PdfDocument.defaultStandardFont = null;\n    /**\n     * Indicates whether enable cache or not\n     * @default true\n     * @private\n     */\n    PdfDocument.isCacheEnabled = true;\n    return PdfDocument;\n}(PdfDocumentBase));\nexport { PdfDocument };\n","import { SizeF, RectangleF, PointF } from './../../drawing/pdf-drawing';\nimport { PdfWordWrapType } from './enum';\nimport { StringTokenizer } from './string-tokenizer';\n/**\n * Class `lay outing the text`.\n */\nvar PdfStringLayouter = /** @class */ (function () {\n    // Constructors\n    /**\n     * Initializes a new instance of the `StringLayouter` class.\n     * @private\n     */\n    function PdfStringLayouter() {\n        /**\n         * Checks whether the x co-ordinate is need to set as client size or not.\n         * @hidden\n         * @private\n         */\n        this.isOverloadWithPosition = false;\n        //\n    }\n    PdfStringLayouter.prototype.layout = function (arg1, arg2, arg3, arg4, arg5, arg6, arg7) {\n        if (arg4 instanceof RectangleF) {\n            this.initialize(arg1, arg2, arg3, arg4, arg5);\n            this.isOverloadWithPosition = arg6;\n            this.clientSize = arg7;\n            var result = this.doLayout();\n            this.clear();\n            return result;\n        }\n        else {\n            this.initialize(arg1, arg2, arg3, arg4);\n            this.isOverloadWithPosition = arg5;\n            this.clientSize = arg6;\n            var result = this.doLayout();\n            this.clear();\n            return result;\n        }\n    };\n    PdfStringLayouter.prototype.initialize = function (text, font, format, rectSize, pageHeight) {\n        if (typeof pageHeight === 'number') {\n            if (text == null) {\n                throw new Error('ArgumentNullException:text');\n            }\n            if (font == null) {\n                throw new Error('ArgumentNullException:font');\n            }\n            this.text = text;\n            this.font = font;\n            this.format = format;\n            this.size = new SizeF(rectSize.width, rectSize.height);\n            this.rectangle = rectSize;\n            this.pageHeight = pageHeight;\n            this.reader = new StringTokenizer(text);\n        }\n        else {\n            this.initialize(text, font, format, new RectangleF(new PointF(0, 0), rectSize), 0);\n        }\n    };\n    /**\n     * `Clear` all resources.\n     * @private\n     */\n    PdfStringLayouter.prototype.clear = function () {\n        this.font = null;\n        this.format = null;\n        this.reader.close();\n        this.reader = null;\n        this.text = null;\n    };\n    /**\n     * `Layouts` the text.\n     * @private\n     */\n    PdfStringLayouter.prototype.doLayout = function () {\n        var result = new PdfStringLayoutResult();\n        var lineResult = new PdfStringLayoutResult();\n        var lines = [];\n        var line = this.reader.peekLine();\n        var lineIndent = this.getLineIndent(true);\n        while (line != null) {\n            lineResult = this.layoutLine(line, lineIndent);\n            if (lineResult !== null || typeof lineResult !== 'undefined') {\n                var numSymbolsInserted = 0;\n                /* tslint:disable */\n                var returnedValue = this.copyToResult(result, lineResult, lines, /*out*/ numSymbolsInserted);\n                /* tslint:enable */\n                var success = returnedValue.success;\n                numSymbolsInserted = returnedValue.numInserted;\n                if (!success) {\n                    this.reader.read(numSymbolsInserted);\n                    break;\n                }\n            }\n            // if (lineResult.textRemainder != null && lineResult.textRemainder.length > 0 ) {\n            //     break;\n            // }\n            this.reader.readLine();\n            line = this.reader.peekLine();\n            lineIndent = this.getLineIndent(false);\n        }\n        this.finalizeResult(result, lines);\n        return result;\n    };\n    /**\n     * Returns `line indent` for the line.\n     * @private\n     */\n    PdfStringLayouter.prototype.getLineIndent = function (firstLine) {\n        var lineIndent = 0;\n        if (this.format != null) {\n            lineIndent = (firstLine) ? this.format.firstLineIndent : this.format.paragraphIndent;\n            lineIndent = (this.size.width > 0) ? Math.min(this.size.width, lineIndent) : lineIndent;\n        }\n        return lineIndent;\n    };\n    /**\n     * Calculates `height` of the line.\n     * @private\n     */\n    PdfStringLayouter.prototype.getLineHeight = function () {\n        var height = this.font.height;\n        if (this.format != null && this.format.lineSpacing !== 0) {\n            height = this.format.lineSpacing + this.font.height;\n        }\n        return height;\n    };\n    /**\n     * Calculates `width` of the line.\n     * @private\n     */\n    PdfStringLayouter.prototype.getLineWidth = function (line) {\n        var width = this.font.getLineWidth(line, this.format);\n        return width;\n    };\n    // tslint:disable\n    /**\n     * `Layouts` line.\n     * @private\n     */\n    PdfStringLayouter.prototype.layoutLine = function (line, lineIndent) {\n        var lineResult = new PdfStringLayoutResult();\n        lineResult.layoutLineHeight = this.getLineHeight();\n        var lines = [];\n        var maxWidth = this.size.width;\n        var lineWidth = this.getLineWidth(line) + lineIndent;\n        var lineType = LineType.FirstParagraphLine;\n        var readWord = true;\n        // line is in bounds.\n        if (maxWidth <= 0 || Math.round(lineWidth) <= Math.round(maxWidth)) {\n            this.addToLineResult(lineResult, lines, line, lineWidth, LineType.NewLineBreak | lineType);\n        }\n        else {\n            var builder = '';\n            var curLine = '';\n            lineWidth = lineIndent;\n            var curIndent = lineIndent;\n            var reader = new StringTokenizer(line);\n            var word = reader.peekWord();\n            var isSingleWord = false;\n            if (word.length !== reader.length) {\n                if (word === ' ') {\n                    curLine = curLine + word;\n                    builder = builder + word;\n                    reader.position += 1;\n                    word = reader.peekWord();\n                }\n            }\n            while (word != null) {\n                curLine = curLine + word;\n                var curLineWidth = this.getLineWidth(curLine.toString()) + curIndent /*)*/;\n                if (curLine.toString() === ' ') {\n                    curLine = '';\n                    curLineWidth = 0;\n                }\n                if (curLineWidth > maxWidth) {\n                    if (this.getWrapType() === PdfWordWrapType.None) {\n                        break;\n                    }\n                    if (curLine.length === word.length) {\n                        //  Character wrap is disabled or one symbol is greater than bounds.\n                        if (this.getWrapType() === PdfWordWrapType.WordOnly) {\n                            lineResult.textRemainder = line.substring(reader.position);\n                            break;\n                        }\n                        else if (curLine.length === 1) {\n                            builder = builder + word;\n                            break;\n                        }\n                        else {\n                            readWord = false;\n                            curLine = '';\n                            word = reader.peek().toString();\n                            continue;\n                        }\n                    }\n                    else {\n                        if (this.getLineWidth(word.toString()) > maxWidth) {\n                            this.format.wordWrap = PdfWordWrapType.Character;\n                        }\n                        else {\n                            if (typeof this.format !== 'undefined' && this.format !== null) {\n                                this.format.wordWrap = PdfWordWrapType.Word;\n                            }\n                        }\n                        if (this.getWrapType() !== PdfWordWrapType.Character || !readWord) {\n                            var ln = builder.toString();\n                            // if (ln.indexOf(' ') === -1) {\n                            //     isSingleWord = true;\n                            //     this.addToLineResult(lineResult, lines, curLine, lineWidth, LineType.LayoutBreak | lineType);\n                            // } else {\n                            //     this.addToLineResult(lineResult, lines, ln, lineWidth, LineType.LayoutBreak | lineType);\n                            // }                          \n                            if (ln !== ' ') {\n                                this.addToLineResult(lineResult, lines, ln, lineWidth, LineType.LayoutBreak | lineType);\n                            }\n                            if (this.isOverloadWithPosition) {\n                                maxWidth = this.clientSize.width;\n                            }\n                            curLine = '';\n                            builder = '';\n                            lineWidth = 0;\n                            curIndent = 0;\n                            curLineWidth = 0;\n                            lineType = LineType.None;\n                            // if (isSingleWord) {\n                            //     reader.readWord();\n                            //     readWord = false;\n                            // }\n                            word = (readWord) ? word : reader.peekWord();\n                            //isSingleWord = false;\n                            readWord = true;\n                        }\n                        else {\n                            readWord = false;\n                            curLine = '';\n                            curLine = curLine + builder.toString();\n                            word = reader.peek().toString();\n                        }\n                        continue;\n                    }\n                }\n                /*tslint:disable:max-func-body-length */\n                builder = builder + word;\n                lineWidth = curLineWidth;\n                if (readWord) {\n                    reader.readWord();\n                    word = reader.peekWord();\n                    //isSingleWord = false;\n                }\n                else {\n                    reader.read();\n                    word = reader.peek().toString();\n                }\n            }\n            if (builder.length > 0) {\n                var ln = builder.toString();\n                this.addToLineResult(lineResult, lines, ln, lineWidth, LineType.NewLineBreak | LineType.LastParagraphLine);\n            }\n            reader.close();\n        }\n        lineResult.layoutLines = [];\n        for (var index = 0; index < lines.length; index++) {\n            lineResult.layoutLines.push(lines[index]);\n        }\n        lines = [];\n        return lineResult;\n    };\n    /**\n     * `Adds` line to line result.\n     * @private\n     */\n    PdfStringLayouter.prototype.addToLineResult = function (lineResult, lines, line, lineWidth, breakType) {\n        var info = new LineInfo();\n        info.text = line;\n        info.width = lineWidth;\n        info.lineType = breakType;\n        lines.push(info);\n        var size = lineResult.actualSize;\n        size.height += this.getLineHeight();\n        size.width = Math.max(size.width, lineWidth);\n        lineResult.size = size;\n    };\n    /**\n     * `Copies` layout result from line result to entire result. Checks whether we can proceed lay outing or not.\n     * @private\n     */\n    PdfStringLayouter.prototype.copyToResult = function (result, lineResult, lines, \n    /*out*/ numInserted) {\n        var success = true;\n        var allowPartialLines = (this.format != null && !this.format.lineLimit);\n        var height = result.actualSize.height;\n        var maxHeight = this.size.height;\n        if ((this.pageHeight > 0) && (maxHeight + this.rectangle.y > this.pageHeight)) {\n            maxHeight = this.rectangle.y - this.pageHeight;\n            maxHeight = Math.max(maxHeight, -maxHeight);\n        }\n        numInserted = 0;\n        if (lineResult.lines != null) {\n            for (var i = 0, len = lineResult.lines.length; i < len; i++) {\n                var expHeight = height + lineResult.lineHeight;\n                if (expHeight <= maxHeight || maxHeight <= 0 || allowPartialLines) {\n                    var info = lineResult.lines[i];\n                    numInserted += info.text.length;\n                    info = this.trimLine(info, (lines.length === 0));\n                    lines.push(info);\n                    // Update width.\n                    var size = result.actualSize;\n                    size.width = Math.max(size.width, info.width);\n                    result.size = size;\n                    // The part of the line fits only and it's allowed to use partial lines.\n                    // if (expHeight >= maxHeight && maxHeight > 0 && allowPartialLines)\n                    // {\n                    //     let shouldClip : boolean = (this.format == null || !this.format.noClip);\n                    //     if (shouldClip)\n                    //     {\n                    //         let exceededHeight : number = expHeight - maxHeight;\n                    //         let fitHeight : number  = /*Utils.Round(*/ lineResult.lineHeight - exceededHeight /*)*/;\n                    //         height = /*Utils.Round(*/ height + fitHeight /*)*/;\n                    //     }\n                    //     else\n                    //     {\n                    //         height = expHeight;\n                    //     }\n                    //     success = false;\n                    //     break;\n                    // } else {\n                    height = expHeight;\n                    // }\n                }\n                else {\n                    success = false;\n                    break;\n                }\n            }\n        }\n        if (height != result.size.height) {\n            var size1 = result.actualSize;\n            size1.height = height;\n            result.size = size1;\n        }\n        return { success: success, numInserted: numInserted };\n    };\n    /**\n     * `Finalizes` final result.\n     * @private\n     */\n    PdfStringLayouter.prototype.finalizeResult = function (result, lines) {\n        result.layoutLines = [];\n        for (var index = 0; index < lines.length; index++) {\n            result.layoutLines.push(lines[index]);\n        }\n        result.layoutLineHeight = this.getLineHeight();\n        if (!this.reader.end) {\n            result.textRemainder = this.reader.readToEnd();\n        }\n        lines = [];\n    };\n    /**\n     * `Trims` whitespaces at the line.\n     * @private\n     */\n    PdfStringLayouter.prototype.trimLine = function (info, firstLine) {\n        var line = info.text;\n        var lineWidth = info.width;\n        // Trim start whitespaces if the line is not a start of the paragraph only.\n        var trimStartSpaces = ((info.lineType & LineType.FirstParagraphLine) === 0);\n        var start = (this.format == null || !this.format.rightToLeft);\n        var spaces = StringTokenizer.spaces;\n        line = (start) ? line.trim() : line.trim();\n        // Recalculate line width.\n        if (line.length !== info.text.length) {\n            lineWidth = this.getLineWidth(line);\n            if ((info.lineType & LineType.FirstParagraphLine) > 0) {\n                lineWidth += this.getLineIndent(firstLine);\n            }\n        }\n        info.text = line;\n        info.width = lineWidth;\n        return info;\n    };\n    /**\n     * Returns `wrap` type.\n     * @private\n     */\n    PdfStringLayouter.prototype.getWrapType = function () {\n        var wrapType = (this.format != null) ? this.format.wordWrap : PdfWordWrapType.Word;\n        return wrapType;\n    };\n    return PdfStringLayouter;\n}());\nexport { PdfStringLayouter };\n//Internal declaration\nvar PdfStringLayoutResult = /** @class */ (function () {\n    function PdfStringLayoutResult() {\n    }\n    Object.defineProperty(PdfStringLayoutResult.prototype, \"remainder\", {\n        // Properties\n        /**\n         * Gets the `text` which is not lay outed.\n         * @private\n         */\n        get: function () {\n            return this.textRemainder;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringLayoutResult.prototype, \"actualSize\", {\n        /**\n         * Gets the actual layout text `bounds`.\n         * @private\n         */\n        get: function () {\n            if (typeof this.size === 'undefined') {\n                this.size = new SizeF(0, 0);\n            }\n            return this.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringLayoutResult.prototype, \"lines\", {\n        /**\n         * Gets layout `lines` information.\n         * @private\n         */\n        get: function () {\n            return this.layoutLines;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringLayoutResult.prototype, \"lineHeight\", {\n        /**\n         * Gets the `height` of the line.\n         * @private\n         */\n        get: function () {\n            return this.layoutLineHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringLayoutResult.prototype, \"empty\", {\n        /**\n         * Gets value that indicates whether any layout text [`empty`].\n         * @private\n         */\n        get: function () {\n            return (this.layoutLines == null || this.layoutLines.length === 0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringLayoutResult.prototype, \"lineCount\", {\n        /**\n         * Gets `number of` the layout lines.\n         * @private\n         */\n        get: function () {\n            var count = (!this.empty) ? this.layoutLines.length : 0;\n            return count;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfStringLayoutResult;\n}());\nexport { PdfStringLayoutResult };\nvar LineInfo = /** @class */ (function () {\n    function LineInfo() {\n    }\n    Object.defineProperty(LineInfo.prototype, \"lineType\", {\n        //Properties\n        /**\n         * Gets the `type` of the line text.\n         * @private\n         */\n        get: function () {\n            return this.type;\n        },\n        set: function (value) {\n            this.type = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LineInfo.prototype, \"text\", {\n        /**\n         * Gets the line `text`.\n         * @private\n         */\n        get: function () {\n            return this.content;\n        },\n        set: function (value) {\n            this.content = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LineInfo.prototype, \"width\", {\n        /**\n         * Gets `width` of the line text.\n         * @private\n         */\n        get: function () {\n            return this.lineWidth;\n        },\n        set: function (value) {\n            this.lineWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return LineInfo;\n}());\nexport { LineInfo };\n/**\n* Break type of the `line`.\n* @private\n*/\nexport var LineType;\n(function (LineType) {\n    /**\n     * Specifies the type of `None`.\n     * @private\n     */\n    LineType[LineType[\"None\"] = 0] = \"None\";\n    /**\n     * Specifies the type of `NewLineBreak`.\n     * @private\n     */\n    LineType[LineType[\"NewLineBreak\"] = 1] = \"NewLineBreak\";\n    /**\n     * Specifies the type of `LayoutBreak`.\n     * @private\n     */\n    LineType[LineType[\"LayoutBreak\"] = 2] = \"LayoutBreak\";\n    /**\n     * Specifies the type of `FirstParagraphLine`.\n     * @private\n     */\n    LineType[LineType[\"FirstParagraphLine\"] = 4] = \"FirstParagraphLine\";\n    /**\n     * Specifies the type of `LastParagraphLine`.\n     * @private\n     */\n    LineType[LineType[\"LastParagraphLine\"] = 8] = \"LastParagraphLine\";\n})(LineType || (LineType = {}));\n","import { Encoding } from '@syncfusion/ej2-file-utils';\n/**\n * array literal codes\n */\nvar ARR_LITERAL_CODES = new Int16Array(286);\nvar ARR_LITERAL_LENGTHS = new Uint8Array(286);\nvar ARR_DISTANCE_CODES = new Int16Array(30);\nvar ARR_DISTANCE_LENGTHS = new Uint8Array(30);\n/**\n * represent compression stream writer\n * ```typescript\n * let compressedWriter = new CompressedStreamWriter();\n * let text: string = 'Hello world!!!';\n * compressedWriter.write(text, 0, text.length);\n * compressedWriter.close();\n * ```\n */\nvar CompressedStreamWriter = /** @class */ (function () {\n    /**\n     * Initializes compressor and writes ZLib header if needed.\n     * @param {boolean} noWrap - optional if true, ZLib header and checksum will not be written.\n     */\n    function CompressedStreamWriter(noWrap) {\n        this.pendingBuffer = new Uint8Array(1 << 16);\n        this.pendingBufLength = 0;\n        this.pendingBufCache = 0;\n        this.pendingBufBitsInCache = 0;\n        this.bufferPosition = 0;\n        this.extraBits = 0;\n        this.currentHash = 0;\n        this.matchStart = 0;\n        this.matchLength = 0;\n        this.matchPrevAvail = false;\n        this.blockStart = 0;\n        this.stringStart = 0;\n        this.lookAhead = 0;\n        this.totalBytesIn = 0;\n        this.inputOffset = 0;\n        this.inputEnd = 0;\n        this.windowSize = 1 << 15;\n        this.windowMask = this.windowSize - 1;\n        this.hashSize = 1 << 15;\n        this.hashMask = this.hashSize - 1;\n        this.hashShift = Math.floor((15 + 3 - 1) / 3);\n        this.maxDist = this.windowSize - 262;\n        this.checkSum = 1;\n        this.noWrap = false;\n        if (!CompressedStreamWriter.isHuffmanTreeInitiated) {\n            CompressedStreamWriter.initHuffmanTree();\n            CompressedStreamWriter.isHuffmanTreeInitiated = true;\n        }\n        this.treeLiteral = new CompressorHuffmanTree(this, 286, 257, 15);\n        this.treeDistances = new CompressorHuffmanTree(this, 30, 1, 15);\n        this.treeCodeLengths = new CompressorHuffmanTree(this, 19, 4, 7);\n        this.arrDistances = new Uint16Array((1 << 14));\n        this.arrLiterals = new Uint8Array((1 << 14));\n        this.stream = [];\n        this.dataWindow = new Uint8Array(2 * this.windowSize);\n        this.hashHead = new Int16Array(this.hashSize);\n        this.hashPrevious = new Int16Array(this.windowSize);\n        this.blockStart = this.stringStart = 1;\n        this.noWrap = noWrap;\n        if (!noWrap) {\n            this.writeZLibHeader();\n        }\n    }\n    Object.defineProperty(CompressedStreamWriter.prototype, \"compressedData\", {\n        /**\n         * get compressed data\n         */\n        get: function () {\n            return this.stream;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CompressedStreamWriter.prototype, \"getCompressedString\", {\n        get: function () {\n            var compressedString = '';\n            if (this.stream !== undefined) {\n                for (var i = 0; i < this.stream.length; i++) {\n                    compressedString += String.fromCharCode.apply(null, this.stream[i]);\n                }\n            }\n            return compressedString;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Compresses data and writes it to the stream.\n     * @param {Uint8Array} data - data to compress\n     * @param {number} offset - offset in data\n     * @param {number} length - length of the data\n     * @returns {void}\n     */\n    CompressedStreamWriter.prototype.write = function (data, offset, length) {\n        if (data === undefined || data === null) {\n            throw new Error('ArgumentException: data cannot null or undefined');\n        }\n        var end = offset + length;\n        if (0 > offset || offset > end || end > data.length) {\n            throw new Error('ArgumentOutOfRangeException: Offset or length is incorrect');\n        }\n        if (typeof data === 'string') {\n            var encode = new Encoding(false);\n            encode.type = 'Utf8';\n            data = new Uint8Array(encode.getBytes(data, 0, data.length));\n            end = offset + data.length;\n        }\n        this.inputBuffer = data;\n        this.inputOffset = offset;\n        this.inputEnd = end;\n        if (!this.noWrap) {\n            this.checkSum = ChecksumCalculator.checksumUpdate(this.checkSum, this.inputBuffer, this.inputOffset, end);\n        }\n        while (!(this.inputEnd === this.inputOffset) || !(this.pendingBufLength === 0)) {\n            this.pendingBufferFlush();\n            this.compressData(false);\n        }\n    };\n    /**\n     * write ZLib header to the compressed data\n     * @return {void}\n     */\n    CompressedStreamWriter.prototype.writeZLibHeader = function () {\n        /* Initialize header.*/\n        var headerDate = (8 + (7 << 4)) << 8;\n        /* Save compression level.*/\n        headerDate |= ((5 >> 2) & 3) << 6;\n        /* Align header.*/\n        headerDate += 31 - (headerDate % 31);\n        /* Write header to stream.*/\n        this.pendingBufferWriteShortBytes(headerDate);\n    };\n    /**\n     *  Write Most Significant Bytes in to stream\n     * @param {number} s - check sum value\n     */\n    CompressedStreamWriter.prototype.pendingBufferWriteShortBytes = function (s) {\n        this.pendingBuffer[this.pendingBufLength++] = s >> 8;\n        this.pendingBuffer[this.pendingBufLength++] = s;\n    };\n    CompressedStreamWriter.prototype.compressData = function (finish) {\n        var success;\n        do {\n            this.fillWindow();\n            var canFlush = (finish && this.inputEnd === this.inputOffset);\n            success = this.compressSlow(canFlush, finish);\n        } while (this.pendingBufLength === 0 && success);\n        return success;\n    };\n    CompressedStreamWriter.prototype.compressSlow = function (flush, finish) {\n        if (this.lookAhead < 262 && !flush) {\n            return false;\n        }\n        while (this.lookAhead >= 262 || flush) {\n            if (this.lookAhead === 0) {\n                return this.lookAheadCompleted(finish);\n            }\n            if (this.stringStart >= 2 * this.windowSize - 262) {\n                this.slideWindow();\n            }\n            var prevMatch = this.matchStart;\n            var prevLen = this.matchLength;\n            if (this.lookAhead >= 3) {\n                this.discardMatch();\n            }\n            if (prevLen >= 3 && this.matchLength <= prevLen) {\n                prevLen = this.matchPreviousBest(prevMatch, prevLen);\n            }\n            else {\n                this.matchPreviousAvailable();\n            }\n            if (this.bufferPosition >= (1 << 14)) {\n                return this.huffmanIsFull(finish);\n            }\n        }\n        return true;\n    };\n    CompressedStreamWriter.prototype.discardMatch = function () {\n        var hashHead = this.insertString();\n        if (hashHead !== 0 && this.stringStart - hashHead <= this.maxDist && this.findLongestMatch(hashHead)) {\n            if (this.matchLength <= 5 && (this.matchLength === 3 && this.stringStart - this.matchStart > 4096)) {\n                this.matchLength = 3 - 1;\n            }\n        }\n    };\n    CompressedStreamWriter.prototype.matchPreviousAvailable = function () {\n        if (this.matchPrevAvail) {\n            this.huffmanTallyLit(this.dataWindow[this.stringStart - 1] & 0xff);\n        }\n        this.matchPrevAvail = true;\n        this.stringStart++;\n        this.lookAhead--;\n    };\n    CompressedStreamWriter.prototype.matchPreviousBest = function (prevMatch, prevLen) {\n        this.huffmanTallyDist(this.stringStart - 1 - prevMatch, prevLen);\n        prevLen -= 2;\n        do {\n            this.stringStart++;\n            this.lookAhead--;\n            if (this.lookAhead >= 3) {\n                this.insertString();\n            }\n        } while (--prevLen > 0);\n        this.stringStart++;\n        this.lookAhead--;\n        this.matchPrevAvail = false;\n        this.matchLength = 3 - 1;\n        return prevLen;\n    };\n    CompressedStreamWriter.prototype.lookAheadCompleted = function (finish) {\n        if (this.matchPrevAvail) {\n            this.huffmanTallyLit(this.dataWindow[this.stringStart - 1] & 0xff);\n        }\n        this.matchPrevAvail = false;\n        this.huffmanFlushBlock(this.dataWindow, this.blockStart, this.stringStart - this.blockStart, finish);\n        this.blockStart = this.stringStart;\n        return false;\n    };\n    CompressedStreamWriter.prototype.huffmanIsFull = function (finish) {\n        var len = this.stringStart - this.blockStart;\n        if (this.matchPrevAvail) {\n            len--;\n        }\n        var lastBlock = (finish && this.lookAhead === 0 && !this.matchPrevAvail);\n        this.huffmanFlushBlock(this.dataWindow, this.blockStart, len, lastBlock);\n        this.blockStart += len;\n        return !lastBlock;\n    };\n    CompressedStreamWriter.prototype.fillWindow = function () {\n        if (this.stringStart >= this.windowSize + this.maxDist) {\n            this.slideWindow();\n        }\n        while (this.lookAhead < 262 && this.inputOffset < this.inputEnd) {\n            var more = 2 * this.windowSize - this.lookAhead - this.stringStart;\n            if (more > this.inputEnd - this.inputOffset) {\n                more = this.inputEnd - this.inputOffset;\n            }\n            this.dataWindow.set(this.inputBuffer.subarray(this.inputOffset, this.inputOffset + more), this.stringStart + this.lookAhead);\n            this.inputOffset += more;\n            this.totalBytesIn += more;\n            this.lookAhead += more;\n        }\n        if (this.lookAhead >= 3) {\n            this.updateHash();\n        }\n    };\n    CompressedStreamWriter.prototype.slideWindow = function () {\n        this.dataWindow.set(this.dataWindow.subarray(this.windowSize, this.windowSize + this.windowSize), 0);\n        this.matchStart -= this.windowSize;\n        this.stringStart -= this.windowSize;\n        this.blockStart -= this.windowSize;\n        for (var i = 0; i < this.hashSize; ++i) {\n            var m = this.hashHead[i] & 0xffff;\n            this.hashHead[i] = (((m >= this.windowSize) ? (m - this.windowSize) : 0));\n        }\n        for (var i = 0; i < this.windowSize; i++) {\n            var m = this.hashPrevious[i] & 0xffff;\n            this.hashPrevious[i] = ((m >= this.windowSize) ? (m - this.windowSize) : 0);\n        }\n    };\n    CompressedStreamWriter.prototype.insertString = function () {\n        var match;\n        var hash = ((this.currentHash << this.hashShift) ^ this.dataWindow[this.stringStart + (3 - 1)]) & this.hashMask;\n        this.hashPrevious[this.stringStart & this.windowMask] = match = this.hashHead[hash];\n        this.hashHead[hash] = this.stringStart;\n        this.currentHash = hash;\n        return match & 0xffff;\n    };\n    CompressedStreamWriter.prototype.findLongestMatch = function (curMatch) {\n        var chainLen = 4096;\n        var niceLen = 258;\n        var scan = this.stringStart;\n        var match;\n        var bestEnd = this.stringStart + this.matchLength;\n        var bestLength = Math.max(this.matchLength, 3 - 1);\n        var limit = Math.max(this.stringStart - this.maxDist, 0);\n        var stringEnd = this.stringStart + 258 - 1;\n        var scanEnd1 = this.dataWindow[bestEnd - 1];\n        var scanEnd = this.dataWindow[bestEnd];\n        var data = this.dataWindow;\n        if (bestLength >= 32) {\n            chainLen >>= 2;\n        }\n        if (niceLen > this.lookAhead) {\n            niceLen = this.lookAhead;\n        }\n        do {\n            if (data[curMatch + bestLength] !== scanEnd ||\n                data[curMatch + bestLength - 1] !== scanEnd1 ||\n                data[curMatch] !== data[scan] ||\n                data[curMatch + 1] !== data[scan + 1]) {\n                continue;\n            }\n            match = curMatch + 2;\n            scan += 2;\n            /* tslint:disable */\n            while (data[++scan] === data[++match] && data[++scan] === data[++match] &&\n                data[++scan] === data[++match] && data[++scan] === data[++match] &&\n                data[++scan] === data[++match] && data[++scan] === data[++match] &&\n                data[++scan] === data[++match] && data[++scan] === data[++match] && scan < stringEnd) {\n                /* tslint:disable */\n            }\n            if (scan > bestEnd) {\n                this.matchStart = curMatch;\n                bestEnd = scan;\n                bestLength = scan - this.stringStart;\n                if (bestLength >= niceLen) {\n                    break;\n                }\n                scanEnd1 = data[bestEnd - 1];\n                scanEnd = data[bestEnd];\n            }\n            scan = this.stringStart;\n        } while ((curMatch = (this.hashPrevious[curMatch & this.windowMask] & 0xffff)) > limit && --chainLen !== 0);\n        this.matchLength = Math.min(bestLength, this.lookAhead);\n        return this.matchLength >= 3;\n    };\n    CompressedStreamWriter.prototype.updateHash = function () {\n        this.currentHash = (this.dataWindow[this.stringStart] << this.hashShift) ^ this.dataWindow[this.stringStart + 1];\n    };\n    CompressedStreamWriter.prototype.huffmanTallyLit = function (literal) {\n        this.arrDistances[this.bufferPosition] = 0;\n        this.arrLiterals[this.bufferPosition++] = literal;\n        this.treeLiteral.codeFrequencies[literal]++;\n        return this.bufferPosition >= (1 << 14);\n    };\n    CompressedStreamWriter.prototype.huffmanTallyDist = function (dist, len) {\n        this.arrDistances[this.bufferPosition] = dist;\n        this.arrLiterals[this.bufferPosition++] = (len - 3);\n        var lc = this.huffmanLengthCode(len - 3);\n        this.treeLiteral.codeFrequencies[lc]++;\n        if (lc >= 265 && lc < 285) {\n            this.extraBits += Math.floor((lc - 261) / 4);\n        }\n        var dc = this.huffmanDistanceCode(dist - 1);\n        this.treeDistances.codeFrequencies[dc]++;\n        if (dc >= 4) {\n            this.extraBits += Math.floor((dc / 2 - 1));\n        }\n        return this.bufferPosition >= (1 << 14);\n    };\n    CompressedStreamWriter.prototype.huffmanFlushBlock = function (stored, storedOffset, storedLength, lastBlock) {\n        this.treeLiteral.codeFrequencies[256]++;\n        this.treeLiteral.buildTree();\n        this.treeDistances.buildTree();\n        this.treeLiteral.calculateBLFreq(this.treeCodeLengths);\n        this.treeDistances.calculateBLFreq(this.treeCodeLengths);\n        this.treeCodeLengths.buildTree();\n        var blTreeCodes = 4;\n        for (var i = 18; i > blTreeCodes; i--) {\n            if (this.treeCodeLengths.codeLengths[CompressorHuffmanTree.huffCodeLengthOrders[i]] > 0) {\n                blTreeCodes = i + 1;\n            }\n        }\n        var opt_len = 14 + blTreeCodes * 3 + this.treeCodeLengths.getEncodedLength() +\n            this.treeLiteral.getEncodedLength() + this.treeDistances.getEncodedLength() + this.extraBits;\n        var static_len = this.extraBits;\n        for (var i = 0; i < 286; i++) {\n            static_len += this.treeLiteral.codeFrequencies[i] * ARR_LITERAL_LENGTHS[i];\n        }\n        for (var i = 0; i < 30; i++) {\n            static_len += this.treeDistances.codeFrequencies[i] * ARR_DISTANCE_LENGTHS[i];\n        }\n        if (opt_len >= static_len) {\n            // Force static trees.\n            opt_len = static_len;\n        }\n        if (storedOffset >= 0 && storedLength + 4 < opt_len >> 3) {\n            this.huffmanFlushStoredBlock(stored, storedOffset, storedLength, lastBlock);\n        }\n        else if (opt_len == static_len) {\n            // Encode with static tree.\n            this.pendingBufferWriteBits((1 << 1) + (lastBlock ? 1 : 0), 3);\n            this.treeLiteral.setStaticCodes(ARR_LITERAL_CODES, ARR_LITERAL_LENGTHS);\n            this.treeDistances.setStaticCodes(ARR_DISTANCE_CODES, ARR_DISTANCE_LENGTHS);\n            this.huffmanCompressBlock();\n            this.huffmanReset();\n        }\n        else {\n            this.pendingBufferWriteBits((2 << 1) + (lastBlock ? 1 : 0), 3);\n            this.huffmanSendAllTrees(blTreeCodes);\n            this.huffmanCompressBlock();\n            this.huffmanReset();\n        }\n    };\n    CompressedStreamWriter.prototype.huffmanFlushStoredBlock = function (stored, storedOffset, storedLength, lastBlock) {\n        this.pendingBufferWriteBits((0 << 1) + (lastBlock ? 1 : 0), 3);\n        this.pendingBufferAlignToByte();\n        this.pendingBufferWriteShort(storedLength);\n        this.pendingBufferWriteShort(~storedLength);\n        this.pendingBufferWriteByteBlock(stored, storedOffset, storedLength);\n        this.huffmanReset();\n    };\n    CompressedStreamWriter.prototype.huffmanLengthCode = function (len) {\n        if (len === 255) {\n            return 285;\n        }\n        var code = 257;\n        while (len >= 8) {\n            code += 4;\n            len >>= 1;\n        }\n        return code + len;\n    };\n    CompressedStreamWriter.prototype.huffmanDistanceCode = function (distance) {\n        var code = 0;\n        while (distance >= 4) {\n            code += 2;\n            distance >>= 1;\n        }\n        return code + distance;\n    };\n    CompressedStreamWriter.prototype.huffmanSendAllTrees = function (blTreeCodes) {\n        this.treeCodeLengths.buildCodes();\n        this.treeLiteral.buildCodes();\n        this.treeDistances.buildCodes();\n        this.pendingBufferWriteBits(this.treeLiteral.treeLength - 257, 5);\n        this.pendingBufferWriteBits(this.treeDistances.treeLength - 1, 5);\n        this.pendingBufferWriteBits(blTreeCodes - 4, 4);\n        for (var rank = 0; rank < blTreeCodes; rank++) {\n            this.pendingBufferWriteBits(this.treeCodeLengths.codeLengths[CompressorHuffmanTree.huffCodeLengthOrders[rank]], 3);\n        }\n        this.treeLiteral.writeTree(this.treeCodeLengths);\n        this.treeDistances.writeTree(this.treeCodeLengths);\n    };\n    CompressedStreamWriter.prototype.huffmanReset = function () {\n        this.bufferPosition = 0;\n        this.extraBits = 0;\n        this.treeLiteral.reset();\n        this.treeDistances.reset();\n        this.treeCodeLengths.reset();\n    };\n    CompressedStreamWriter.prototype.huffmanCompressBlock = function () {\n        for (var i = 0; i < this.bufferPosition; i++) {\n            var literalLen = this.arrLiterals[i] & 255;\n            var dist = this.arrDistances[i];\n            if (dist-- !== 0) {\n                var lc = this.huffmanLengthCode(literalLen);\n                this.treeLiteral.writeCodeToStream(lc);\n                var bits = Math.floor((lc - 261) / 4);\n                if (bits > 0 && bits <= 5) {\n                    this.pendingBufferWriteBits(literalLen & ((1 << bits) - 1), bits);\n                }\n                var dc = this.huffmanDistanceCode(dist);\n                this.treeDistances.writeCodeToStream(dc);\n                bits = Math.floor(dc / 2 - 1);\n                if (bits > 0) {\n                    this.pendingBufferWriteBits(dist & ((1 << bits) - 1), bits);\n                }\n            }\n            else {\n                this.treeLiteral.writeCodeToStream(literalLen);\n            }\n        }\n        this.treeLiteral.writeCodeToStream(256);\n    };\n    /**\n     * write bits in to internal buffer\n     * @param {number} b - source of bits\n     * @param {number} count - count of bits to write\n     */\n    CompressedStreamWriter.prototype.pendingBufferWriteBits = function (b, count) {\n        var uint = new Uint32Array(1);\n        uint[0] = this.pendingBufCache | (b << this.pendingBufBitsInCache);\n        this.pendingBufCache = uint[0];\n        this.pendingBufBitsInCache += count;\n        this.pendingBufferFlushBits();\n    };\n    CompressedStreamWriter.prototype.pendingBufferFlush = function (isClose) {\n        this.pendingBufferFlushBits();\n        if (this.pendingBufLength > 0) {\n            var array = new Uint8Array(this.pendingBufLength);\n            array.set(this.pendingBuffer.subarray(0, this.pendingBufLength), 0);\n            this.stream.push(array);\n        }\n        this.pendingBufLength = 0;\n    };\n    CompressedStreamWriter.prototype.pendingBufferFlushBits = function () {\n        var result = 0;\n        while (this.pendingBufBitsInCache >= 8 && this.pendingBufLength < (1 << 16)) {\n            this.pendingBuffer[this.pendingBufLength++] = this.pendingBufCache;\n            this.pendingBufCache >>= 8;\n            this.pendingBufBitsInCache -= 8;\n            result++;\n        }\n        return result;\n    };\n    CompressedStreamWriter.prototype.pendingBufferWriteByteBlock = function (data, offset, length) {\n        var array = data.subarray(offset, offset + length);\n        this.pendingBuffer.set(array, this.pendingBufLength);\n        this.pendingBufLength += length;\n    };\n    CompressedStreamWriter.prototype.pendingBufferWriteShort = function (s) {\n        this.pendingBuffer[this.pendingBufLength++] = s;\n        this.pendingBuffer[this.pendingBufLength++] = (s >> 8);\n    };\n    CompressedStreamWriter.prototype.pendingBufferAlignToByte = function () {\n        if (this.pendingBufBitsInCache > 0) {\n            this.pendingBuffer[this.pendingBufLength++] = this.pendingBufCache;\n        }\n        this.pendingBufCache = 0;\n        this.pendingBufBitsInCache = 0;\n    };\n    /**\n     * Huffman Tree literal calculation\n     * @private\n     */\n    CompressedStreamWriter.initHuffmanTree = function () {\n        var i = 0;\n        while (i < 144) {\n            ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse((0x030 + i) << 8);\n            ARR_LITERAL_LENGTHS[i++] = 8;\n        }\n        while (i < 256) {\n            ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse((0x190 - 144 + i) << 7);\n            ARR_LITERAL_LENGTHS[i++] = 9;\n        }\n        while (i < 280) {\n            ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse((0x000 - 256 + i) << 9);\n            ARR_LITERAL_LENGTHS[i++] = 7;\n        }\n        while (i < 286) {\n            ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse((0x0c0 - 280 + i) << 8);\n            ARR_LITERAL_LENGTHS[i++] = 8;\n        }\n        for (i = 0; i < 30; i++) {\n            ARR_DISTANCE_CODES[i] = CompressorHuffmanTree.bitReverse(i << 11);\n            ARR_DISTANCE_LENGTHS[i] = 5;\n        }\n    };\n    /**\n     * close the stream and write all pending buffer in to stream\n     * @returns {void}\n     */\n    CompressedStreamWriter.prototype.close = function () {\n        do {\n            this.pendingBufferFlush(true);\n            if (!this.compressData(true)) {\n                this.pendingBufferFlush(true);\n                this.pendingBufferAlignToByte();\n                if (!this.noWrap) {\n                    this.pendingBufferWriteShortBytes(this.checkSum >> 16);\n                    this.pendingBufferWriteShortBytes(this.checkSum & 0xffff);\n                }\n                this.pendingBufferFlush(true);\n            }\n        } while (!(this.inputEnd === this.inputOffset) ||\n            !(this.pendingBufLength === 0));\n    };\n    /**\n     * release allocated un-managed resource\n     * @returns {void}\n     */\n    CompressedStreamWriter.prototype.destroy = function () {\n        this.stream = [];\n        this.stream = undefined;\n        this.pendingBuffer = undefined;\n        this.treeLiteral = undefined;\n        this.treeDistances = undefined;\n        this.treeCodeLengths = undefined;\n        this.arrLiterals = undefined;\n        this.arrDistances = undefined;\n        this.hashHead = undefined;\n        this.hashPrevious = undefined;\n        this.dataWindow = undefined;\n        this.inputBuffer = undefined;\n        this.pendingBufLength = undefined;\n        this.pendingBufCache = undefined;\n        this.pendingBufBitsInCache = undefined;\n        this.bufferPosition = undefined;\n        this.extraBits = undefined;\n        this.currentHash = undefined;\n        this.matchStart = undefined;\n        this.matchLength = undefined;\n        this.matchPrevAvail = undefined;\n        this.blockStart = undefined;\n        this.stringStart = undefined;\n        this.lookAhead = undefined;\n        this.totalBytesIn = undefined;\n        this.inputOffset = undefined;\n        this.inputEnd = undefined;\n        this.windowSize = undefined;\n        this.windowMask = undefined;\n        this.hashSize = undefined;\n        this.hashMask = undefined;\n        this.hashShift = undefined;\n        this.maxDist = undefined;\n        this.checkSum = undefined;\n        this.noWrap = undefined;\n    };\n    CompressedStreamWriter.isHuffmanTreeInitiated = false;\n    return CompressedStreamWriter;\n}());\nexport { CompressedStreamWriter };\n/**\n * represent the Huffman Tree\n */\nvar CompressorHuffmanTree = /** @class */ (function () {\n    /**\n     * Create new Huffman Tree\n     * @param {CompressedStreamWriter} writer instance\n     * @param {number} elementCount - element count\n     * @param {number} minCodes - minimum count\n     * @param {number} maxLength - maximum count\n     */\n    function CompressorHuffmanTree(writer, elementCount, minCodes, maxLength) {\n        this.writer = writer;\n        this.codeMinCount = minCodes;\n        this.maxLength = maxLength;\n        this.codeFrequency = new Uint16Array(elementCount);\n        this.lengthCount = new Int32Array(maxLength);\n    }\n    Object.defineProperty(CompressorHuffmanTree.prototype, \"treeLength\", {\n        get: function () {\n            return this.codeCount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CompressorHuffmanTree.prototype, \"codeLengths\", {\n        get: function () {\n            return this.codeLength;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CompressorHuffmanTree.prototype, \"codeFrequencies\", {\n        get: function () {\n            return this.codeFrequency;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CompressorHuffmanTree.prototype.setStaticCodes = function (codes, lengths) {\n        var temp = new Int16Array(codes.length);\n        temp.set(codes, 0);\n        this.codes = temp;\n        var lengthTemp = new Uint8Array(lengths.length);\n        lengthTemp.set(lengths, 0);\n        this.codeLength = lengthTemp;\n    };\n    /**\n     * reset all code data in tree\n     * @returns {void}\n     */\n    CompressorHuffmanTree.prototype.reset = function () {\n        for (var i = 0; i < this.codeFrequency.length; i++) {\n            this.codeFrequency[i] = 0;\n        }\n        this.codes = undefined;\n        this.codeLength = undefined;\n    };\n    /**\n     * write code to the compressor output stream\n     * @param {number} code - code to be written\n     * @returns {void}\n     */\n    CompressorHuffmanTree.prototype.writeCodeToStream = function (code) {\n        this.writer.pendingBufferWriteBits(this.codes[code] & 0xffff, this.codeLength[code]);\n    };\n    /**\n     * calculate code from their frequencies\n     * @returns {void}\n     */\n    CompressorHuffmanTree.prototype.buildCodes = function () {\n        var nextCode = new Int32Array(this.maxLength);\n        this.codes = new Int16Array(this.codeCount);\n        var code = 0;\n        for (var bitsCount = 0; bitsCount < this.maxLength; bitsCount++) {\n            nextCode[bitsCount] = code;\n            code += this.lengthCount[bitsCount] << (15 - bitsCount);\n        }\n        for (var i = 0; i < this.codeCount; i++) {\n            var bits = this.codeLength[i];\n            if (bits > 0) {\n                this.codes[i] = CompressorHuffmanTree.bitReverse(nextCode[bits - 1]);\n                nextCode[bits - 1] += 1 << (16 - bits);\n            }\n        }\n    };\n    CompressorHuffmanTree.bitReverse = function (value) {\n        return (CompressorHuffmanTree.reverseBits[value & 15] << 12\n            | CompressorHuffmanTree.reverseBits[(value >> 4) & 15] << 8\n            | CompressorHuffmanTree.reverseBits[(value >> 8) & 15] << 4\n            | CompressorHuffmanTree.reverseBits[value >> 12]);\n    };\n    /**\n     * calculate length of compressed data\n     * @returns {number}\n     */\n    CompressorHuffmanTree.prototype.getEncodedLength = function () {\n        var len = 0;\n        for (var i = 0; i < this.codeFrequency.length; i++) {\n            len += this.codeFrequency[i] * this.codeLength[i];\n        }\n        return len;\n    };\n    /**\n     * calculate code frequencies\n     * @param {CompressorHuffmanTree} blTree\n     * @returns {void}\n     */\n    CompressorHuffmanTree.prototype.calculateBLFreq = function (blTree) {\n        var maxCount;\n        var minCount;\n        var count;\n        var curLen = -1;\n        var i = 0;\n        while (i < this.codeCount) {\n            count = 1;\n            var nextLen = this.codeLength[i];\n            if (nextLen === 0) {\n                maxCount = 138;\n                minCount = 3;\n            }\n            else {\n                maxCount = 6;\n                minCount = 3;\n                if (curLen !== nextLen) {\n                    blTree.codeFrequency[nextLen]++;\n                    count = 0;\n                }\n            }\n            curLen = nextLen;\n            i++;\n            while (i < this.codeCount && curLen === this.codeLength[i]) {\n                i++;\n                if (++count >= maxCount) {\n                    break;\n                }\n            }\n            if (count < minCount) {\n                blTree.codeFrequency[curLen] += count;\n            }\n            else if (curLen !== 0) {\n                blTree.codeFrequency[16]++;\n            }\n            else if (count <= 10) {\n                blTree.codeFrequency[17]++;\n            }\n            else {\n                blTree.codeFrequency[18]++;\n            }\n        }\n    };\n    /**\n     * @param {CompressorHuffmanTree} blTree - write tree to output stream\n     * @returns {void}\n     */\n    CompressorHuffmanTree.prototype.writeTree = function (blTree) {\n        var maxRepeatCount;\n        var minRepeatCount;\n        var currentRepeatCount;\n        var currentCodeLength = -1;\n        var i = 0;\n        while (i < this.codeCount) {\n            currentRepeatCount = 1;\n            var nextLen = this.codeLength[i];\n            if (nextLen === 0) {\n                maxRepeatCount = 138;\n                minRepeatCount = 3;\n            }\n            else {\n                maxRepeatCount = 6;\n                minRepeatCount = 3;\n                if (currentCodeLength !== nextLen) {\n                    blTree.writeCodeToStream(nextLen);\n                    currentRepeatCount = 0;\n                }\n            }\n            currentCodeLength = nextLen;\n            i++;\n            while (i < this.codeCount && currentCodeLength === this.codeLength[i]) {\n                i++;\n                if (++currentRepeatCount >= maxRepeatCount) {\n                    break;\n                }\n            }\n            if (currentRepeatCount < minRepeatCount) {\n                while (currentRepeatCount-- > 0) {\n                    blTree.writeCodeToStream(currentCodeLength);\n                }\n            }\n            else if (currentCodeLength !== 0) {\n                blTree.writeCodeToStream(16);\n                this.writer.pendingBufferWriteBits(currentRepeatCount - 3, 2);\n            }\n            else if (currentRepeatCount <= 10) {\n                blTree.writeCodeToStream(17);\n                this.writer.pendingBufferWriteBits(currentRepeatCount - 3, 3);\n            }\n            else {\n                blTree.writeCodeToStream(18);\n                this.writer.pendingBufferWriteBits(currentRepeatCount - 11, 7);\n            }\n        }\n    };\n    /**\n     * Build huffman tree\n     * @returns {void}\n     */\n    CompressorHuffmanTree.prototype.buildTree = function () {\n        var codesCount = this.codeFrequency.length;\n        var arrTree = new Int32Array(codesCount);\n        var treeLength = 0;\n        var maxCount = 0;\n        for (var n = 0; n < codesCount; n++) {\n            var freq = this.codeFrequency[n];\n            if (freq !== 0) {\n                var pos = treeLength++;\n                var pPos = 0;\n                while (pos > 0 && this.codeFrequency[arrTree[pPos = Math.floor((pos - 1) / 2)]] > freq) {\n                    arrTree[pos] = arrTree[pPos];\n                    pos = pPos;\n                }\n                arrTree[pos] = n;\n                maxCount = n;\n            }\n        }\n        while (treeLength < 2) {\n            arrTree[treeLength++] =\n                (maxCount < 2) ? ++maxCount : 0;\n        }\n        this.codeCount = Math.max(maxCount + 1, this.codeMinCount);\n        var leafsCount = treeLength;\n        var nodesCount = leafsCount;\n        var child = new Int32Array(4 * treeLength - 2);\n        var values = new Int32Array(2 * treeLength - 1);\n        for (var i = 0; i < treeLength; i++) {\n            var node = arrTree[i];\n            var iIndex = 2 * i;\n            child[iIndex] = node;\n            child[iIndex + 1] = -1;\n            values[i] = (this.codeFrequency[node] << 8);\n            arrTree[i] = i;\n        }\n        this.constructHuffmanTree(arrTree, treeLength, values, nodesCount, child);\n        this.buildLength(child);\n    };\n    CompressorHuffmanTree.prototype.constructHuffmanTree = function (arrTree, treeLength, values, nodesCount, child) {\n        do {\n            var first = arrTree[0];\n            var last = arrTree[--treeLength];\n            var lastVal = values[last];\n            var pPos = 0;\n            var path = 1;\n            while (path < treeLength) {\n                if (path + 1 < treeLength && values[arrTree[path]] > values[arrTree[path + 1]]) {\n                    path++;\n                }\n                arrTree[pPos] = arrTree[path];\n                pPos = path;\n                path = pPos * 2 + 1;\n            }\n            while ((path = pPos) > 0 && values[arrTree[pPos = Math.floor((path - 1) / 2)]] > lastVal) {\n                arrTree[path] = arrTree[pPos];\n            }\n            arrTree[path] = last;\n            var second = arrTree[0];\n            last = nodesCount++;\n            child[2 * last] = first;\n            child[2 * last + 1] = second;\n            var minDepth = Math.min(values[first] & 0xff, values[second] & 0xff);\n            values[last] = lastVal = values[first] + values[second] - minDepth + 1;\n            pPos = 0;\n            path = 1;\n            /* tslint:disable */\n            while (path < treeLength) {\n                if (path + 1 < treeLength && values[arrTree[path]] > values[arrTree[path + 1]]) {\n                    path++;\n                }\n                arrTree[pPos] = arrTree[path];\n                pPos = path;\n                path = pPos * 2 + 1;\n            } /* tslint:disable */\n            while ((path = pPos) > 0 && values[arrTree[pPos = Math.floor((path - 1) / 2)]] > lastVal) {\n                arrTree[path] = arrTree[pPos];\n            }\n            arrTree[path] = last;\n        } while (treeLength > 1);\n    };\n    CompressorHuffmanTree.prototype.buildLength = function (child) {\n        this.codeLength = new Uint8Array(this.codeFrequency.length);\n        var numNodes = Math.floor(child.length / 2);\n        var numLeafs = Math.floor((numNodes + 1) / 2);\n        var overflow = 0;\n        for (var i = 0; i < this.maxLength; i++) {\n            this.lengthCount[i] = 0;\n        }\n        overflow = this.calculateOptimalCodeLength(child, overflow, numNodes);\n        if (overflow === 0) {\n            return;\n        }\n        var iIncreasableLength = this.maxLength - 1;\n        do {\n            while (this.lengthCount[--iIncreasableLength] === 0) {\n                /* tslint:disable */\n            }\n            do {\n                this.lengthCount[iIncreasableLength]--;\n                this.lengthCount[++iIncreasableLength]++;\n                overflow -= (1 << (this.maxLength - 1 - iIncreasableLength));\n            } while (overflow > 0 && iIncreasableLength < this.maxLength - 1);\n        } while (overflow > 0);\n        this.recreateTree(child, overflow, numLeafs);\n    };\n    CompressorHuffmanTree.prototype.recreateTree = function (child, overflow, numLeafs) {\n        this.lengthCount[this.maxLength - 1] += overflow;\n        this.lengthCount[this.maxLength - 2] -= overflow;\n        var nodePtr = 2 * numLeafs;\n        for (var bits = this.maxLength; bits !== 0; bits--) {\n            var n = this.lengthCount[bits - 1];\n            while (n > 0) {\n                var childPtr = 2 * child[nodePtr++];\n                if (child[childPtr + 1] === -1) {\n                    this.codeLength[child[childPtr]] = bits;\n                    n--;\n                }\n            }\n        }\n    };\n    CompressorHuffmanTree.prototype.calculateOptimalCodeLength = function (child, overflow, numNodes) {\n        var lengths = new Int32Array(numNodes);\n        lengths[numNodes - 1] = 0;\n        for (var i = numNodes - 1; i >= 0; i--) {\n            var childIndex = 2 * i + 1;\n            if (child[childIndex] !== -1) {\n                var bitLength = lengths[i] + 1;\n                if (bitLength > this.maxLength) {\n                    bitLength = this.maxLength;\n                    overflow++;\n                }\n                lengths[child[childIndex - 1]] = lengths[child[childIndex]] = bitLength;\n            }\n            else {\n                var bitLength = lengths[i];\n                this.lengthCount[bitLength - 1]++;\n                this.codeLength[child[childIndex - 1]] = lengths[i];\n            }\n        }\n        return overflow;\n    };\n    CompressorHuffmanTree.reverseBits = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15];\n    CompressorHuffmanTree.huffCodeLengthOrders = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n    return CompressorHuffmanTree;\n}());\nexport { CompressorHuffmanTree };\n/**\n * Checksum calculator, based on Adler32 algorithm.\n */\nvar ChecksumCalculator = /** @class */ (function () {\n    function ChecksumCalculator() {\n    }\n    /**\n     * Updates checksum by calculating checksum of the\n     * given buffer and adding it to current value.\n     * @param {number} checksum - current checksum.\n     * @param {Uint8Array} buffer - data byte array.\n     * @param {number} offset - offset in the buffer.\n     * @param {number} length - length of data to be used from the stream.\n     * @returns {number}\n     */\n    ChecksumCalculator.checksumUpdate = function (checksum, buffer, offset, length) {\n        var uint = new Uint32Array(1);\n        uint[0] = checksum;\n        var checksum_uint = uint[0];\n        var s1 = uint[0] = checksum_uint & 65535;\n        var s2 = uint[0] = checksum_uint >> ChecksumCalculator.checkSumBitOffset;\n        while (length > 0) {\n            var steps = Math.min(length, ChecksumCalculator.checksumIterationCount);\n            length -= steps;\n            while (--steps >= 0) {\n                s1 = s1 + (uint[0] = (buffer[offset++] & 255));\n                s2 = s2 + s1;\n            }\n            s1 %= ChecksumCalculator.checksumBase;\n            s2 %= ChecksumCalculator.checksumBase;\n        }\n        checksum_uint = (s2 << ChecksumCalculator.checkSumBitOffset) | s1;\n        return checksum_uint;\n    };\n    ChecksumCalculator.checkSumBitOffset = 16;\n    ChecksumCalculator.checksumBase = 65521;\n    ChecksumCalculator.checksumIterationCount = 3800;\n    return ChecksumCalculator;\n}());\nexport { ChecksumCalculator };\n","/**\n * @private\n * @hidden\n */\nexport function defaultToString(item) {\n    // if (item === null) {\n    //     return 'COLLECTION_NULL';\n    // } else if (typeof item === 'undefined') {\n    //     return 'COLLECTION_UNDEFINED';\n    // } else if (Object.prototype.toString.call(item) === '[object String]') {\n    if (Object.prototype.toString.call(item) === '[object String]') {\n        return '$s' + item;\n    }\n    else {\n        return '$o' + item.toString();\n    }\n}\n","/**\n * Dictionary.ts class for EJ2-PDF\n * @private\n * @hidden\n */\nimport { defaultToString } from './utils';\n/**\n * @private\n * @hidden\n */\nvar Dictionary = /** @class */ (function () {\n    /**\n     * @private\n     * @hidden\n     */\n    function Dictionary(toStringFunction) {\n        this.table = {};\n        this.nElements = 0;\n        this.toStr = toStringFunction || defaultToString;\n    }\n    /**\n     * @private\n     * @hidden\n     */\n    Dictionary.prototype.getValue = function (key) {\n        var pair = this.table['$' + this.toStr(key)];\n        if (typeof pair === 'undefined') {\n            return undefined;\n        }\n        return pair.value;\n    };\n    /**\n     * @private\n     * @hidden\n     */\n    Dictionary.prototype.setValue = function (key, value) {\n        // if (typeof key === 'undefined' || typeof value === 'undefined') {\n        //     return undefined;\n        // }\n        var ret;\n        var k = '$' + this.toStr(key);\n        var previousElement = this.table[k];\n        // if (typeof previousElement === 'undefined') {\n        this.nElements++;\n        ret = undefined;\n        // }\n        this.table[k] = {\n            key: key,\n            value: value\n        };\n        return ret;\n    };\n    /**\n     * @private\n     * @hidden\n     */\n    Dictionary.prototype.remove = function (key) {\n        var k = '$' + this.toStr(key);\n        var previousElement = this.table[k];\n        // if (typeof previousElement !== 'undefined') {\n        delete this.table[k];\n        this.nElements--;\n        return previousElement.value;\n        // }\n        // return undefined;\n    };\n    /**\n     * @private\n     * @hidden\n     */\n    Dictionary.prototype.keys = function () {\n        var keysArray = [];\n        var namesOfKeys = Object.keys(this.table);\n        for (var index1 = 0; index1 < namesOfKeys.length; index1++) {\n            // if (Object.prototype.hasOwnProperty.call(this.table, namesOfKeys[index1])) {\n            var pair1 = this.table[namesOfKeys[index1]];\n            keysArray.push(pair1.key);\n            // }\n        }\n        return keysArray;\n    };\n    /**\n     * @private\n     * @hidden\n     */\n    Dictionary.prototype.values = function () {\n        var valuesArray = [];\n        var namesOfValues = Object.keys(this.table);\n        for (var index2 = 0; index2 < namesOfValues.length; index2++) {\n            // if (Object.prototype.hasOwnProperty.call(this.table, namesOfValues[index2])) {\n            var pair2 = this.table[namesOfValues[index2]];\n            valuesArray.push(pair2.value);\n            // }\n        }\n        return valuesArray;\n    };\n    /**\n     * @private\n     * @hidden\n     */\n    Dictionary.prototype.containsKey = function (key) {\n        var retutnValue = true;\n        if (typeof this.getValue(key) === 'undefined') {\n            retutnValue = true;\n        }\n        else {\n            retutnValue = false;\n        }\n        return !retutnValue;\n    };\n    /**\n     * @private\n     * @hidden\n     */\n    Dictionary.prototype.clear = function () {\n        this.table = {};\n        this.nElements = 0;\n    };\n    /**\n     * @private\n     * @hidden\n     */\n    Dictionary.prototype.size = function () {\n        return this.nElements;\n    };\n    return Dictionary;\n}()); // End of dictionary\nexport { Dictionary };\n","/**\n * ImageDecoder class\n */\nimport { ByteArray } from './byte-array';\nimport { PdfStream } from './../../primitives/pdf-stream';\nimport { DictionaryProperties } from './../../input-output/pdf-dictionary-properties';\nimport { PdfName } from './../../primitives/pdf-name';\nimport { PdfNumber } from './../../primitives/pdf-number';\nimport { PdfBoolean } from './../../primitives/pdf-boolean';\nimport { PdfDictionary } from './../../primitives/pdf-dictionary';\n/**\n * Specifies the image `format`.\n * @private\n */\nexport var ImageFormat;\n(function (ImageFormat) {\n    /**\n     * Specifies the type of `Unknown`.\n     * @hidden\n     * @private\n     */\n    ImageFormat[ImageFormat[\"Unknown\"] = 0] = \"Unknown\";\n    /**\n     * Specifies the type of `Bmp`.\n     * @hidden\n     * @private\n     */\n    ImageFormat[ImageFormat[\"Bmp\"] = 1] = \"Bmp\";\n    /**\n     * Specifies the type of `Emf`.\n     * @hidden\n     * @private\n     */\n    ImageFormat[ImageFormat[\"Emf\"] = 2] = \"Emf\";\n    /**\n     * Specifies the type of `Gif`.\n     * @hidden\n     * @private\n     */\n    ImageFormat[ImageFormat[\"Gif\"] = 3] = \"Gif\";\n    /**\n     * Specifies the type of `Jpeg`.\n     * @hidden\n     * @private\n     */\n    ImageFormat[ImageFormat[\"Jpeg\"] = 4] = \"Jpeg\";\n    /**\n     * Specifies the type of `Png`.\n     * @hidden\n     * @private\n     */\n    ImageFormat[ImageFormat[\"Png\"] = 5] = \"Png\";\n    /**\n     * Specifies the type of `Wmf`.\n     * @hidden\n     * @private\n     */\n    ImageFormat[ImageFormat[\"Wmf\"] = 6] = \"Wmf\";\n    /**\n     * Specifies the type of `Icon`.\n     * @hidden\n     * @private\n     */\n    ImageFormat[ImageFormat[\"Icon\"] = 7] = \"Icon\";\n})(ImageFormat || (ImageFormat = {}));\n/**\n * `Decode the image stream`.\n * @private\n */\nvar ImageDecoder = /** @class */ (function () {\n    /**\n     * Initialize the new instance for `image-decoder` class.\n     * @private\n     */\n    function ImageDecoder(stream) {\n        /**\n         * Specifies `format` of image.\n         * @hidden\n         * @private\n         */\n        this.mFormat = ImageFormat.Unknown;\n        /**\n         * `Bits per component`.\n         * @default 8\n         * @hidden\n         * @private\n         */\n        this.mbitsPerComponent = 8;\n        /**\n         * Internal variable for accessing fields from `DictionryProperties` class.\n         * @hidden\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        this.mStream = stream;\n        this.initialize();\n    }\n    Object.defineProperty(ImageDecoder.prototype, \"height\", {\n        /**\n         * Gets the `height` of image.\n         * @hidden\n         * @private\n         */\n        get: function () {\n            return this.mHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageDecoder.prototype, \"width\", {\n        /**\n         * Gets the `width` of image.\n         * @hidden\n         * @private\n         */\n        get: function () {\n            return this.mWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageDecoder.prototype, \"bitsPerComponent\", {\n        /**\n         * Gets `bits per component`.\n         * @hidden\n         * @private\n         */\n        get: function () {\n            return this.mbitsPerComponent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageDecoder.prototype, \"size\", {\n        /**\n         * Gets the `size` of an image data.\n         * @hidden\n         * @private\n         */\n        get: function () {\n            return this.mImageData.count;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageDecoder.prototype, \"imageData\", {\n        /**\n         * Gets the value of an `image data`.\n         * @hidden\n         * @private\n         */\n        get: function () {\n            return this.mImageData;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ImageDecoder.prototype, \"imageDataAsNumberArray\", {\n        /**\n         * Gets the value of an `image data as number array`.\n         * @hidden\n         * @private\n         */\n        get: function () {\n            return this.mImageData.internalBuffer.buffer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * `Initialize` image data and image stream.\n     * @hidden\n     * @private\n     */\n    ImageDecoder.prototype.initialize = function () {\n        if (this.mFormat === ImageFormat.Unknown && this.checkIfJpeg()) {\n            this.mFormat = ImageFormat.Jpeg;\n            this.parseJpegImage();\n        }\n        this.reset();\n        this.mImageData = new ByteArray(this.mStream.count);\n        this.mStream.read(this.mImageData, 0, this.mImageData.count);\n    };\n    /**\n     * `Reset` stream position into 0.\n     * @hidden\n     * @private\n     */\n    ImageDecoder.prototype.reset = function () {\n        this.mStream.position = 0;\n    };\n    /**\n     * `Parse` Jpeg image.\n     * @hidden\n     * @private\n     */\n    ImageDecoder.prototype.parseJpegImage = function () {\n        this.reset();\n        var imgData = new ByteArray(this.mStream.count);\n        this.mStream.read(imgData, 0, imgData.count);\n        var i = 4;\n        /* tslint:disable */\n        if (String.fromCharCode(imgData.getBuffer(i + 2)) === 'J' && String.fromCharCode(imgData.getBuffer(i + 3)) === 'F' && String.fromCharCode(imgData.getBuffer(i + 4)) === 'I' && String.fromCharCode(imgData.getBuffer(i + 5)) === 'F' && imgData.getBuffer(i + 6) === 0) {\n            var length_1 = imgData.getBuffer(i) * 256 + imgData.getBuffer(i + 1);\n            while (i + length_1 < imgData.count) {\n                i += length_1;\n                if (imgData.getBuffer(i + 1) === 192) {\n                    this.mHeight = imgData.getBuffer(i + 5) * 256 + imgData.getBuffer(i + 6);\n                    this.mWidth = imgData.getBuffer(i + 7) * 256 + imgData.getBuffer(i + 8);\n                    return;\n                }\n                else {\n                    i += 2;\n                    length_1 = imgData.getBuffer(i) * 256 + imgData.getBuffer(i + 1);\n                }\n            }\n        }\n        /* tslint:enable */\n    };\n    Object.defineProperty(ImageDecoder.prototype, \"format\", {\n        /**\n         * Gets the image `format`.\n         * @private\n         * @hidden\n         */\n        get: function () {\n            return this.mFormat;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * `Checks if JPG`.\n     * @private\n     * @hidden\n     */\n    ImageDecoder.prototype.checkIfJpeg = function () {\n        this.reset();\n        for (var i = 0; i < ImageDecoder.mJpegHeader.length; i++) {\n            if (ImageDecoder.mJpegHeader[i] !== this.mStream.readByte(i)) {\n                return false;\n            }\n            this.mStream.position++;\n        }\n        return true;\n    };\n    /**\n     * Return image `dictionary`.\n     * @hidden\n     * @private\n     */\n    ImageDecoder.prototype.getImageDictionary = function () {\n        if (this.mFormat === ImageFormat.Jpeg) {\n            var tempArrayBuffer = this.imageData.internalBuffer.length;\n            this.imageStream = new PdfStream();\n            this.imageStream.isImage = true;\n            var tempString = '';\n            var decodedString = '';\n            for (var i = 0; i < this.imageDataAsNumberArray.byteLength; i++) {\n                tempString += String.fromCharCode(null, this.mStream.readByte(i));\n            }\n            for (var i = 0; i < tempString.length; i++) {\n                if (i % 2 !== 0) {\n                    decodedString += tempString[i];\n                }\n            }\n            this.imageStream.data = [decodedString];\n            this.imageStream.compress = false;\n            this.imageStream.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.xObject));\n            this.imageStream.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.image));\n            this.imageStream.items.setValue(this.dictionaryProperties.width, new PdfNumber(this.width));\n            this.imageStream.items.setValue(this.dictionaryProperties.height, new PdfNumber(this.height));\n            this.imageStream.items.setValue(this.dictionaryProperties.bitsPerComponent, new PdfNumber(this.bitsPerComponent));\n            this.imageStream.items.setValue(this.dictionaryProperties.filter, new PdfName(this.dictionaryProperties.dctdecode));\n            this.imageStream.items.setValue(this.dictionaryProperties.colorSpace, new PdfName(this.getColorSpace()));\n            this.imageStream.items.setValue(this.dictionaryProperties.decodeParms, this.getDecodeParams());\n            return this.imageStream;\n        }\n        else {\n            return this.imageStream;\n        }\n    };\n    /**\n     * Return `colorSpace` of an image.\n     * @hidden\n     * @private\n     */\n    ImageDecoder.prototype.getColorSpace = function () {\n        return this.dictionaryProperties.deviceRgb;\n    };\n    /**\n     * Return `decode parameters` of an image.\n     * @hidden\n     * @private\n     */\n    ImageDecoder.prototype.getDecodeParams = function () {\n        var decodeParams = new PdfDictionary();\n        decodeParams.items.setValue(this.dictionaryProperties.columns, new PdfNumber(this.width));\n        decodeParams.items.setValue(this.dictionaryProperties.blackIs1, new PdfBoolean(true));\n        decodeParams.items.setValue(this.dictionaryProperties.k, new PdfNumber(-1));\n        decodeParams.items.setValue(this.dictionaryProperties.predictor, new PdfNumber(15));\n        decodeParams.items.setValue(this.dictionaryProperties.bitsPerComponent, new PdfNumber(this.bitsPerComponent));\n        return decodeParams;\n    };\n    /**\n     * Number array for `png header`.\n     * @hidden\n     * @private\n     */\n    ImageDecoder.mPngHeader = [137, 80, 78, 71, 13, 10, 26, 10];\n    /**\n     * Number Array for `jpeg header`.\n     * @hidden\n     * @private\n     */\n    ImageDecoder.mJpegHeader = [255, 216];\n    /**\n     * Number array for `gif header`.\n     * @hidden\n     * @private\n     */\n    ImageDecoder.GIF_HEADER = 'G,I,F,8';\n    /**\n     * Number array for `bmp header.`\n     * @hidden\n     * @private\n     */\n    ImageDecoder.BMP_HEADER = 'B,M';\n    return ImageDecoder;\n}());\nexport { ImageDecoder };\n","/**\n * `PdfBoolean` class is used to perform boolean related primitive operations.\n * @private\n */\nvar PdfBoolean = /** @class */ (function () {\n    //constructor\n    /**\n     * Initializes a new instance of the `PdfBoolean` class.\n     * @private\n     */\n    function PdfBoolean(value) {\n        /**\n         * Internal variable to store the `position`.\n         * @default -1\n         * @private\n         */\n        this.currentPosition = -1;\n        this.value = value;\n    }\n    Object.defineProperty(PdfBoolean.prototype, \"status\", {\n        //Properties\n        /**\n         * Gets or sets the `Status` of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.objectStatus;\n        },\n        set: function (value) {\n            this.objectStatus = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfBoolean.prototype, \"isSaving\", {\n        /**\n         * Gets or sets a value indicating whether this document `is saving` or not.\n         * @private\n         */\n        get: function () {\n            return this.saving;\n        },\n        set: function (value) {\n            this.saving = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfBoolean.prototype, \"objectCollectionIndex\", {\n        /**\n         * Gets or sets the `index` value of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.index;\n        },\n        set: function (value) {\n            this.index = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfBoolean.prototype, \"position\", {\n        /**\n         * Gets or sets the `position` of the object.\n         * @private\n         */\n        get: function () {\n            return this.currentPosition;\n        },\n        set: function (value) {\n            this.currentPosition = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfBoolean.prototype, \"clonedObject\", {\n        /**\n         * Returns `cloned object`.\n         * @private\n         */\n        get: function () {\n            var rValue = null;\n            return rValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * `Saves` the object using the specified writer.\n     * @private\n     */\n    PdfBoolean.prototype.save = function (writer) {\n        writer.write(this.boolToStr(this.value));\n    };\n    /**\n     * Creates a `copy of PdfBoolean`.\n     * @private\n     */\n    PdfBoolean.prototype.clone = function (crossTable) {\n        var newNumber = new PdfBoolean(this.value);\n        return newNumber;\n    };\n    // Implementation\n    /**\n     * Converts `boolean to string` - 0/1 'true'/'false'.\n     * @private\n     */\n    PdfBoolean.prototype.boolToStr = function (value) {\n        return value ? 'true' : 'false';\n    };\n    return PdfBoolean;\n}());\nexport { PdfBoolean };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * PdfBitmap.ts class for EJ2-PDF\n */\nimport { ImageDecoder } from './../../graphics/images/image-decoder';\nimport { ByteArray } from './../../graphics/images/byte-array';\nimport { DictionaryProperties } from './../../input-output/pdf-dictionary-properties';\nimport { PdfImage } from './pdf-image';\n/**\n * The 'PdfBitmap' contains methods and properties to handle the Bitmap images.\n * ```typescript\n * // create a new PDF document.\n * let document : PdfDocument = new PdfDocument();\n * // add a page to the document.\n * let page1 : PdfPage = document.pages.add();\n * // base64 string of an image\n * let imageString : string = '/9j/3+2w7em7HzY/KiijFw … 1OEYRUYrQ45yc5OUtz/9k=';\n * // load the image from the base64 string of original image.\n * let image : PdfBitmap = new PdfBitmap(imageString);\n * // draw the image\n * page1.graphics.drawImage(image, new RectangleF({x : 10, y : 10}, {width : 200, height : 200}));\n * // save the document.\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nvar PdfBitmap = /** @class */ (function (_super) {\n    __extends(PdfBitmap, _super);\n    /**\n     * Create an instance for `PdfBitmap` class.\n     * @param encodedString Base64 string of an image.\n     * ```typescript\n     * // create a new PDF document.\n     * let document : PdfDocument = new PdfDocument();\n     * // add a page to the document.\n     * let page1 : PdfPage = document.pages.add();\n     * // base64 string of an image\n     * let imageString : string = '/9j/3+2w7em7HzY/KiijFw … 1OEYRUYrQ45yc5OUtz/9k=';\n     * //\n     * // load the image from the base64 string of original image.\n     * let image : PdfBitmap = new PdfBitmap(imageString);\n     * //\n     * // draw the image\n     * page1.graphics.drawImage(image, new RectangleF({x : 10, y : 10}, {width : 200, height : 200}));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    function PdfBitmap(encodedString) {\n        var _this = _super.call(this) || this;\n        //Fields\n        /**\n         * Specifies the `status` of an image.\n         * @default true.\n         * @hidden\n         * @private\n         */\n        _this.imageStatus = true;\n        /**\n         * Internal variable for accessing fields from `DictionryProperties` class.\n         * @hidden\n         * @private\n         */\n        _this.dictionaryProperties = new DictionaryProperties();\n        _this.loadImage(encodedString);\n        return _this;\n    }\n    /**\n     * `Load image`.\n     * @hidden\n     * @private\n     */\n    PdfBitmap.prototype.loadImage = function (encodedString) {\n        var task = this.initializeAsync(encodedString);\n    };\n    /**\n     * `Initialize` image parameters.\n     * @private\n     */\n    PdfBitmap.prototype.initializeAsync = function (encodedString) {\n        var byteArray = new ByteArray(encodedString.length);\n        byteArray.writeFromBase64String(encodedString);\n        this.decoder = new ImageDecoder(byteArray);\n        this.height = this.decoder.height;\n        this.width = this.decoder.width;\n        // FrameCount = BitmapImageDecoder.FrameCount;\n        this.bitsPerComponent = this.decoder.bitsPerComponent;\n    };\n    /**\n     * `Saves` the image into stream.\n     * @private\n     */\n    PdfBitmap.prototype.save = function () {\n        this.imageStatus = true;\n        this.imageStream = this.decoder.getImageDictionary();\n    };\n    return PdfBitmap;\n}(PdfImage));\nexport { PdfBitmap };\n","/**\n * PdfPen.ts class for EJ2-PDF\n */\nimport { PdfColor } from './pdf-color';\nimport { PdfDashStyle, PdfColorSpace } from './enum';\nimport { PdfBrush } from './brushes/pdf-brush';\n/**\n * `PdfPen` class defining settings for drawing operations, that determines the color,\n * width, and style of the drawing elements.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // create a new page\n * let page1 : PdfPage = document.pages.add();\n * // set pen\n * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n * // draw rectangle\n * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\n * // save the document.\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nvar PdfPen = /** @class */ (function () {\n    function PdfPen(arg1, arg2) {\n        //Fields\n        /**\n         * Specifies the `color of the pen`.\n         * @default new PdfColor()\n         * @private\n         */\n        this.pdfColor = new PdfColor(0, 0, 0);\n        /**\n         * Specifies the `dash offset of the pen`.\n         * @default 0\n         * @private\n         */\n        this.dashOffsetValue = 0;\n        /**\n         * Specifies the `dash pattern of the pen`.\n         * @default [0]\n         * @private\n         */\n        this.penDashPattern = [0];\n        /**\n         * Specifies the `dash style of the pen`.\n         * @default Solid\n         * @private\n         */\n        this.pdfDashStyle = PdfDashStyle.Solid;\n        /**\n         * Specifies the `line cap of the pen`.\n         * @default 0\n         * @private\n         */\n        this.pdfLineCap = 0;\n        /**\n         * Specifies the `line join of the pen`.\n         * @default 0\n         * @private\n         */\n        this.pdfLineJoin = 0;\n        /**\n         * Specifies the `width of the pen`.\n         * @default 1.0\n         * @private\n         */\n        this.penWidth = 1.0;\n        /**\n         * Specifies the `mitter limit of the pen`.\n         * @default 0.0\n         * @private\n         */\n        this.internalMiterLimit = 0.0;\n        /**\n         * Stores the `colorspace` value.\n         * @default Rgb\n         * @private\n         */\n        this.colorSpace = PdfColorSpace.Rgb;\n        if (typeof arg2 === 'number') {\n            this.constructor(arg1);\n            this.width = arg2;\n        }\n        else if (typeof arg2 === 'undefined' && arg1 instanceof PdfBrush) {\n            this.setBrush(arg1);\n        }\n        else if (typeof arg2 === 'undefined' && arg1 instanceof PdfColor) {\n            this.color = arg1;\n        }\n    }\n    Object.defineProperty(PdfPen.prototype, \"color\", {\n        //Properties\n        /**\n         * Gets or sets the `color of the pen`.\n         * @private\n         */\n        get: function () {\n            return this.pdfColor;\n        },\n        set: function (value) {\n            this.pdfColor = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPen.prototype, \"dashOffset\", {\n        /**\n         * Gets or sets the `dash offset of the pen`.\n         * @private\n         */\n        get: function () {\n            if (typeof this.dashOffsetValue === 'undefined' || this.dashOffsetValue == null) {\n                return 0;\n            }\n            else {\n                return this.dashOffsetValue;\n            }\n        },\n        set: function (value) {\n            this.dashOffsetValue = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPen.prototype, \"dashPattern\", {\n        /**\n         * Gets or sets the `dash pattern of the pen`.\n         * @private\n         */\n        get: function () {\n            return this.penDashPattern;\n        },\n        set: function (value) {\n            this.penDashPattern = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPen.prototype, \"dashStyle\", {\n        /**\n         * Gets or sets the `dash style of the pen`.\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // create a new page\n         * let page1 : PdfPage = document.pages.add();\n         * // set pen\n         * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n         * //\n         * // set pen style\n         * pen.dashStyle = PdfDashStyle.DashDot;\n         * // get pen style\n         * let style : PdfDashStyle = pen.dashStyle;\n         * //\n         * // draw rectangle\n         * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\n         * // save the document.\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this.pdfDashStyle;\n        },\n        set: function (value) {\n            if (this.pdfDashStyle !== value) {\n                this.pdfDashStyle = value;\n                switch (this.pdfDashStyle) {\n                    case PdfDashStyle.Custom:\n                        break;\n                    case PdfDashStyle.Dash:\n                        this.penDashPattern = [3, 1];\n                        break;\n                    case PdfDashStyle.Dot:\n                        this.penDashPattern = [1, 1];\n                        break;\n                    case PdfDashStyle.DashDot:\n                        this.penDashPattern = [3, 1, 1, 1];\n                        break;\n                    case PdfDashStyle.DashDotDot:\n                        this.penDashPattern = [3, 1, 1, 1, 1, 1];\n                        break;\n                    case PdfDashStyle.Solid:\n                        break;\n                    default:\n                        this.pdfDashStyle = PdfDashStyle.Solid;\n                        this.penDashPattern = [0];\n                        break;\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPen.prototype, \"lineCap\", {\n        /**\n         * Gets or sets the `line cap of the pen`.\n         * @private\n         */\n        get: function () {\n            return this.pdfLineCap;\n        },\n        set: function (value) {\n            this.pdfLineCap = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPen.prototype, \"lineJoin\", {\n        /**\n         * Gets or sets the `line join style of the pen`.\n         * @private\n         */\n        get: function () {\n            return this.pdfLineJoin;\n        },\n        set: function (value) {\n            this.pdfLineJoin = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPen.prototype, \"miterLimit\", {\n        /**\n         * Gets or sets the `miter limit`.\n         * @private\n         */\n        get: function () {\n            return this.internalMiterLimit;\n        },\n        set: function (value) {\n            this.internalMiterLimit = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPen.prototype, \"width\", {\n        /**\n         * Gets or sets the `width of the pen`.\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // create a new page\n         * let page1 : PdfPage = document.pages.add();\n         * // set pen\n         * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n         * //\n         * // set pen width\n         * pen.width = 2;\n         * //\n         * // draw rectangle\n         * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\n         * // save the document.\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this.penWidth;\n        },\n        set: function (value) {\n            this.penWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Helper\n    /**\n     * `Clones` this instance of PdfPen class.\n     * @private\n     */\n    PdfPen.prototype.clone = function () {\n        var pen = this;\n        return pen;\n    };\n    /**\n     * `Sets the brush`.\n     * @private\n     */\n    PdfPen.prototype.setBrush = function (brush) {\n        var sBrush = brush;\n        this.color = sBrush.color;\n        this.pdfBrush = sBrush;\n    };\n    /**\n     * `Monitors the changes`.\n     * @private\n     */\n    PdfPen.prototype.monitorChanges = function (currentPen, streamWriter, getResources, saveState, currentColorSpace, matrix) {\n        var diff = false;\n        saveState = true;\n        if (currentPen == null) {\n            diff = true;\n        }\n        diff = this.dashControl(currentPen, saveState, streamWriter);\n        streamWriter.setLineWidth(this.width);\n        streamWriter.setLineJoin(this.lineJoin);\n        streamWriter.setLineCap(this.lineCap);\n        var miterLimit = this.miterLimit;\n        if (miterLimit > 0) {\n            streamWriter.setMiterLimit(miterLimit);\n            diff = true;\n        }\n        var brush = this.pdfBrush;\n        streamWriter.setColorAndSpace(this.color, currentColorSpace, true);\n        diff = true;\n        return diff;\n    };\n    /**\n     * `Controls the dash style` and behaviour of each line.\n     * @private\n     */\n    PdfPen.prototype.dashControl = function (pen, saveState, streamWriter) {\n        saveState = true;\n        var lineWidth = this.width;\n        var pattern = this.getPattern();\n        streamWriter.setLineDashPattern(pattern, this.dashOffset * lineWidth);\n        return saveState;\n    };\n    /**\n     * `Gets the pattern` of PdfPen.\n     * @private\n     */\n    PdfPen.prototype.getPattern = function () {\n        var pattern = this.dashPattern;\n        for (var i = 0; i < pattern.length; ++i) {\n            pattern[i] *= this.width;\n        }\n        return pattern;\n    };\n    return PdfPen;\n}());\nexport { PdfPen };\n","/**\n * PdfAutomaticFieldInfo.ts class for EJ2-PDF\n * @private\n */\nimport { PointF } from './../../drawing/pdf-drawing';\nimport { PdfAutomaticField } from './automatic-field';\n/**\n * Represents information about the automatic field.\n * @private\n */\nvar PdfAutomaticFieldInfo = /** @class */ (function () {\n    function PdfAutomaticFieldInfo(field, location, scaleX, scaleY) {\n        // Fields\n        /**\n         * Internal variable to store location of the field.\n         * @private\n         */\n        this.pageNumberFieldLocation = new PointF();\n        /**\n         * Internal variable to store field.\n         * @private\n         */\n        this.pageNumberField = null;\n        /**\n         * Internal variable to store x scaling factor.\n         * @private\n         */\n        this.scaleX = 1;\n        /**\n         * Internal variable to store y scaling factor.\n         * @private\n         */\n        this.scaleY = 1;\n        if (typeof location === 'undefined' && field instanceof PdfAutomaticFieldInfo) {\n            this.pageNumberField = field.field;\n            this.pageNumberFieldLocation = field.location;\n            this.scaleX = field.scalingX;\n            this.scaleY = field.scalingY;\n        }\n        else if (typeof scaleX === 'undefined' && location instanceof PointF && field instanceof PdfAutomaticField) {\n            this.pageNumberField = field;\n            this.pageNumberFieldLocation = location;\n        }\n        else {\n            this.pageNumberField = field;\n            this.pageNumberFieldLocation = location;\n            this.scaleX = scaleX;\n            this.scaleY = scaleY;\n        }\n    }\n    Object.defineProperty(PdfAutomaticFieldInfo.prototype, \"location\", {\n        /* tslint:enable */\n        // Properties\n        /**\n         * Gets or sets the location.\n         * @private\n         */\n        get: function () {\n            return this.pageNumberFieldLocation;\n        },\n        set: function (value) {\n            this.pageNumberFieldLocation = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfAutomaticFieldInfo.prototype, \"field\", {\n        /**\n         * Gets or sets the field.\n         * @private\n         */\n        get: function () {\n            return this.pageNumberField;\n        },\n        set: function (value) {\n            this.pageNumberField = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfAutomaticFieldInfo.prototype, \"scalingX\", {\n        /**\n         * Gets or sets the scaling X factor.\n         * @private\n         */\n        get: function () {\n            return this.scaleX;\n        },\n        set: function (value) {\n            this.scaleX = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfAutomaticFieldInfo.prototype, \"scalingY\", {\n        /**\n         * Gets or sets the scaling Y factor.\n         * @private\n         */\n        get: function () {\n            return this.scaleY;\n        },\n        set: function (value) {\n            this.scaleY = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfAutomaticFieldInfo;\n}());\nexport { PdfAutomaticFieldInfo };\n","import { Operators } from './pdf-operators';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PointF, RectangleF } from './../drawing/pdf-drawing';\nimport { PdfString } from './../primitives/pdf-string';\nimport { PdfName } from './../primitives/pdf-name';\n/**\n * Helper class to `write PDF graphic streams` easily.\n * @private\n */\nvar PdfStreamWriter = /** @class */ (function () {\n    /**\n     * Initialize an instance of `PdfStreamWriter` class.\n     * @private\n     */\n    function PdfStreamWriter(stream) {\n        if (stream == null) {\n            throw new Error('ArgumentNullException:stream');\n        }\n        this.stream = stream;\n    }\n    //Implementation\n    /**\n     * `Clear` the stream.\n     * @public\n     */\n    PdfStreamWriter.prototype.clear = function () {\n        this.stream.clearStream();\n    };\n    PdfStreamWriter.prototype.setGraphicsState = function (dictionaryName) {\n        if (dictionaryName instanceof PdfName) {\n            this.stream.write(dictionaryName.toString());\n            this.stream.write(Operators.whiteSpace);\n            this.writeOperator(Operators.setGraphicsState);\n        }\n        else {\n            this.stream.write(Operators.slash);\n            this.stream.write(dictionaryName);\n            this.stream.write(Operators.whiteSpace);\n            this.writeOperator(Operators.setGraphicsState);\n        }\n    };\n    /**\n     * `Executes the XObject`.\n     * @private\n     */\n    PdfStreamWriter.prototype.executeObject = function (name) {\n        this.stream.write(name.toString());\n        this.stream.write(Operators.whiteSpace);\n        this.writeOperator(Operators.paintXObject);\n        this.stream.write(Operators.newLine);\n    };\n    /**\n     * `Closes path object`.\n     * @private\n     */\n    PdfStreamWriter.prototype.closePath = function () {\n        this.writeOperator(Operators.closePath);\n    };\n    /**\n     * `Clips the path`.\n     * @private\n     */\n    PdfStreamWriter.prototype.clipPath = function (useEvenOddRule) {\n        this.stream.write(Operators.clipPath);\n        if (useEvenOddRule) {\n            this.stream.write(Operators.evenOdd);\n        }\n        this.stream.write(Operators.whiteSpace);\n        this.stream.write(Operators.endPath);\n        this.stream.write(Operators.newLine);\n    };\n    /**\n     * `Closes, then fills and strokes the path`.\n     * @private\n     */\n    PdfStreamWriter.prototype.closeFillStrokePath = function (useEvenOddRule) {\n        this.stream.write(Operators.closeFillStrokePath);\n        if (useEvenOddRule) {\n            this.stream.write(Operators.evenOdd);\n            this.stream.write(Operators.newLine);\n        }\n        else {\n            this.stream.write(Operators.newLine);\n        }\n    };\n    /**\n     * `Fills and strokes path`.\n     * @private\n     */\n    PdfStreamWriter.prototype.fillStrokePath = function (useEvenOddRule) {\n        this.stream.write(Operators.fillStroke);\n        if (useEvenOddRule) {\n            this.stream.write(Operators.evenOdd);\n            this.stream.write(Operators.newLine);\n        }\n        else {\n            this.stream.write(Operators.newLine);\n        }\n    };\n    /**\n     * `Fills path`.\n     * @private\n     */\n    PdfStreamWriter.prototype.fillPath = function (useEvenOddRule) {\n        this.stream.write(Operators.fill);\n        if (useEvenOddRule) {\n            this.stream.write(Operators.evenOdd);\n            this.stream.write(Operators.newLine);\n        }\n        else {\n            this.stream.write(Operators.newLine);\n        }\n    };\n    /**\n     * `Ends the path`.\n     * @private\n     */\n    PdfStreamWriter.prototype.endPath = function () {\n        this.writeOperator(Operators.n);\n    };\n    /**\n     * `Closes and fills the path`.\n     * @private\n     */\n    PdfStreamWriter.prototype.closeFillPath = function (useEvenOddRule) {\n        this.writeOperator(Operators.closePath);\n        this.stream.write(Operators.fill);\n        if (useEvenOddRule) {\n            this.stream.write(Operators.evenOdd);\n            this.stream.write(Operators.newLine);\n        }\n        else {\n            this.stream.write(Operators.newLine);\n        }\n    };\n    /**\n     * `Closes and strokes the path`.\n     * @private\n     */\n    PdfStreamWriter.prototype.closeStrokePath = function () {\n        this.writeOperator(Operators.closeStrokePath);\n    };\n    /**\n     * `Sets the text scaling`.\n     * @private\n     */\n    PdfStreamWriter.prototype.setTextScaling = function (textScaling) {\n        this.stream.write(PdfNumber.floatToString(textScaling));\n        this.stream.write(Operators.whiteSpace);\n        this.writeOperator(Operators.setTextScaling);\n    };\n    /**\n     * `Strokes path`.\n     * @private\n     */\n    PdfStreamWriter.prototype.strokePath = function () {\n        this.writeOperator(Operators.stroke);\n    };\n    /**\n     * `Restores` the graphics state.\n     * @private\n     */\n    PdfStreamWriter.prototype.restoreGraphicsState = function () {\n        this.writeOperator(Operators.restoreState);\n    };\n    /**\n     * `Saves` the graphics state.\n     * @private\n     */\n    PdfStreamWriter.prototype.saveGraphicsState = function () {\n        this.writeOperator(Operators.saveState);\n    };\n    PdfStreamWriter.prototype.startNextLine = function (arg1, arg2) {\n        if (typeof arg1 === 'undefined') {\n            this.writeOperator(Operators.goToNextLine);\n        }\n        else if (arg1 instanceof PointF) {\n            this.writePoint(arg1);\n            this.writeOperator(Operators.setCoords);\n        }\n        else {\n            this.writePoint(arg1, arg2);\n            this.writeOperator(Operators.setCoords);\n        }\n    };\n    /**\n     * Shows the `text`.\n     * @private\n     */\n    PdfStreamWriter.prototype.showText = function (text) {\n        this.checkTextParam(text);\n        this.writeText(text);\n        this.writeOperator(Operators.setText);\n    };\n    /**\n     * Sets `text leading`.\n     * @private\n     */\n    PdfStreamWriter.prototype.setLeading = function (leading) {\n        this.stream.write(PdfNumber.floatToString(leading));\n        this.stream.write(Operators.whiteSpace);\n        this.writeOperator(Operators.setTextLeading);\n    };\n    /**\n     * `Begins the path`.\n     * @private\n     */\n    PdfStreamWriter.prototype.beginPath = function (x, y) {\n        this.writePoint(x, y);\n        this.writeOperator(Operators.beginPath);\n    };\n    /**\n     * `Begins text`.\n     * @private\n     */\n    PdfStreamWriter.prototype.beginText = function () {\n        this.writeOperator(Operators.beginText);\n    };\n    /**\n     * `Ends text`.\n     * @private\n     */\n    PdfStreamWriter.prototype.endText = function () {\n        this.writeOperator(Operators.endText);\n    };\n    PdfStreamWriter.prototype.appendRectangle = function (arg1, arg2, arg3, arg4) {\n        if (arg1 instanceof RectangleF) {\n            this.appendRectangle(arg1.x, arg1.y, arg1.width, arg1.height);\n        }\n        else {\n            this.writePoint(arg1, arg2);\n            this.writePoint(arg3, arg4);\n            this.writeOperator(Operators.appendRectangle);\n        }\n    };\n    PdfStreamWriter.prototype.appendLineSegment = function (arg1, arg2) {\n        if (arg1 instanceof PointF) {\n            this.appendLineSegment(arg1.x, arg1.y);\n        }\n        else {\n            this.writePoint(arg1, arg2);\n            this.writeOperator(Operators.appendLineSegment);\n        }\n    };\n    /**\n     * Sets the `text rendering mode`.\n     * @private\n     */\n    PdfStreamWriter.prototype.setTextRenderingMode = function (renderingMode) {\n        this.stream.write(renderingMode.toString());\n        this.stream.write(Operators.whiteSpace);\n        this.writeOperator(Operators.setRenderingMode);\n    };\n    /**\n     * Sets the `character spacing`.\n     * @private\n     */\n    PdfStreamWriter.prototype.setCharacterSpacing = function (charSpacing) {\n        this.stream.write(PdfNumber.floatToString(charSpacing));\n        this.stream.write(Operators.whiteSpace);\n        this.stream.write(Operators.setCharacterSpace);\n        this.stream.write(Operators.newLine);\n    };\n    /**\n     * Sets the `word spacing`.\n     * @private\n     */\n    PdfStreamWriter.prototype.setWordSpacing = function (wordSpacing) {\n        this.stream.write(PdfNumber.floatToString(wordSpacing));\n        this.stream.write(Operators.whiteSpace);\n        this.writeOperator(Operators.setWordSpace);\n    };\n    PdfStreamWriter.prototype.showNextLineText = function (arg1, arg2) {\n        if (arg1 instanceof PdfString) {\n            this.checkTextParam(arg1);\n            this.writeText(arg1);\n            this.writeOperator(Operators.setTextOnNewLine);\n        }\n        else {\n            this.checkTextParam(arg1);\n            this.writeText(arg1, arg2);\n            this.writeOperator(Operators.setTextOnNewLine);\n        }\n    };\n    PdfStreamWriter.prototype.setColorSpace = function (arg1, arg2) {\n        if (arg1 instanceof PdfName && typeof arg2 === 'boolean') {\n            var temparg1 = arg1;\n            var temparg2 = arg2;\n            // if (temparg1 == null) {\n            //     throw new Error('ArgumentNullException:name');\n            // }\n            var op = (temparg2) ? Operators.selectcolorspaceforstroking : Operators.selectcolorspacefornonstroking;\n            this.stream.write(temparg1.toString());\n            this.stream.write(Operators.whiteSpace);\n            this.stream.write(op);\n            this.stream.write(Operators.newLine);\n        }\n        else {\n            var temparg1 = arg1;\n            var temparg2 = arg2;\n            this.setColorSpace(new PdfName(temparg1), temparg2);\n        }\n    };\n    /**\n     * Modifies current `transformation matrix`.\n     * @private\n     */\n    PdfStreamWriter.prototype.modifyCtm = function (matrix) {\n        if (matrix == null) {\n            throw new Error('ArgumentNullException:matrix');\n        }\n        this.stream.write(matrix.toString());\n        this.stream.write(Operators.whiteSpace);\n        this.writeOperator(Operators.modifyCtm);\n    };\n    PdfStreamWriter.prototype.setFont = function (font, name, size) {\n        if (typeof name === 'string') {\n            this.setFont(font, new PdfName(name), size);\n        }\n        else {\n            if (font == null) {\n                throw new Error('ArgumentNullException:font');\n            }\n            this.stream.write(name.toString());\n            this.stream.write(Operators.whiteSpace);\n            this.stream.write(PdfNumber.floatToString(size));\n            this.stream.write(Operators.whiteSpace);\n            this.writeOperator(Operators.setFont);\n        }\n    };\n    /**\n     * `Writes the operator`.\n     * @private\n     */\n    PdfStreamWriter.prototype.writeOperator = function (opcode) {\n        this.stream.write(opcode);\n        this.stream.write(Operators.newLine);\n    };\n    PdfStreamWriter.prototype.checkTextParam = function (text) {\n        if (text == null) {\n            throw new Error('ArgumentNullException:text');\n        }\n        if (typeof text === 'string' && text === '') {\n            throw new Error('ArgumentException:The text can not be an empty string, text');\n        }\n    };\n    PdfStreamWriter.prototype.writeText = function (arg1, arg2) {\n        if ((arg1 instanceof PdfString) && (typeof arg2 === 'undefined')) {\n            this.stream.write(arg1.pdfEncode());\n        }\n        else {\n            var start = void 0;\n            var end = void 0;\n            if (arg2) {\n                start = PdfString.hexStringMark[0];\n                end = PdfString.hexStringMark[1];\n            }\n            else {\n                start = PdfString.stringMark[0];\n                end = PdfString.stringMark[1];\n            }\n            this.stream.write(start);\n            this.stream.write(arg1);\n            this.stream.write(end);\n        }\n    };\n    PdfStreamWriter.prototype.writePoint = function (arg1, arg2) {\n        if ((arg1 instanceof PointF) && (typeof arg2 === 'undefined')) {\n            this.writePoint(arg1.x, arg1.y);\n        }\n        else {\n            var temparg1 = arg1;\n            this.stream.write(PdfNumber.floatToString(temparg1));\n            this.stream.write(Operators.whiteSpace);\n            // NOTE: Change Y co-ordinate because we shifted co-ordinate system only.\n            arg2 = this.updateY(arg2);\n            this.stream.write(PdfNumber.floatToString(arg2));\n            this.stream.write(Operators.whiteSpace);\n        }\n    };\n    /**\n     * `Updates y` co-ordinate.\n     * @private\n     */\n    PdfStreamWriter.prototype.updateY = function (arg) {\n        return -arg;\n    };\n    /**\n     * `Writes string` to the file.\n     * @private\n     */\n    PdfStreamWriter.prototype.write = function (string) {\n        var builder = '';\n        builder += string;\n        builder += Operators.newLine;\n        this.writeOperator(builder);\n    };\n    /**\n     * `Writes comment` to the file.\n     * @private\n     */\n    PdfStreamWriter.prototype.writeComment = function (comment) {\n        if (comment != null && comment.length > 0) {\n            var builder = '';\n            builder += Operators.comment;\n            builder += Operators.whiteSpace;\n            builder += comment;\n            //builder.Append( Operators.NewLine );\n            this.writeOperator(builder);\n        }\n        else {\n            throw new Error('Invalid comment');\n        }\n    };\n    /**\n     * Sets the `color and space`.\n     * @private\n     */\n    PdfStreamWriter.prototype.setColorAndSpace = function (color, colorSpace, forStroking) {\n        if (!color.isEmpty) {\n            // bool test = color is PdfExtendedColor;\n            this.stream.write(color.toString(colorSpace, forStroking));\n            this.stream.write(Operators.newLine);\n        }\n    };\n    // public setLineDashPattern(pattern : number[], patternOffset : number) : void\n    // {\n    //     let pat : PdfArray = new PdfArray(pattern);\n    //     let off : PdfNumber = new PdfNumber(patternOffset);\n    //     this.setLineDashPatternHelper(pat, off);\n    // }\n    // private setLineDashPatternHelper(pattern : PdfArray, patternOffset : PdfNumber) : void\n    // {\n    //     pattern.Save(this);\n    //     this.m_stream.write(Operators.whiteSpace);\n    //     patternOffset.Save(this);\n    //     this.m_stream.write(Operators.whiteSpace);\n    //     this.writeOperator(Operators.setDashPattern);\n    // }\n    /**\n     * Sets the `line dash pattern`.\n     * @private\n     */\n    PdfStreamWriter.prototype.setLineDashPattern = function (pattern, patternOffset) {\n        // let pat : PdfArray = new PdfArray(pattern);\n        // let off : PdfNumber = new PdfNumber(patternOffset);\n        // this.setLineDashPatternHelper(pat, off);\n        this.setLineDashPatternHelper(pattern, patternOffset);\n    };\n    /**\n     * Sets the `line dash pattern`.\n     * @private\n     */\n    PdfStreamWriter.prototype.setLineDashPatternHelper = function (pattern, patternOffset) {\n        var tempPattern = '[';\n        if (pattern.length > 1) {\n            for (var index = 0; index < pattern.length; index++) {\n                if (index === pattern.length - 1) {\n                    tempPattern += pattern[index].toString();\n                }\n                else {\n                    tempPattern += pattern[index].toString() + ' ';\n                }\n            }\n        }\n        tempPattern += '] ';\n        tempPattern += patternOffset.toString();\n        tempPattern += ' ' + Operators.setDashPattern;\n        this.stream.write(tempPattern);\n        this.stream.write(Operators.newLine);\n    };\n    /**\n     * Sets the `miter limit`.\n     * @private\n     */\n    PdfStreamWriter.prototype.setMiterLimit = function (miterLimit) {\n        this.stream.write(PdfNumber.floatToString(miterLimit));\n        this.stream.write(Operators.whiteSpace);\n        this.writeOperator(Operators.setMiterLimit);\n    };\n    /**\n     * Sets the `width of the line`.\n     * @private\n     */\n    PdfStreamWriter.prototype.setLineWidth = function (width) {\n        this.stream.write(PdfNumber.floatToString(width));\n        this.stream.write(Operators.whiteSpace);\n        this.writeOperator(Operators.setLineWidth);\n    };\n    /**\n     * Sets the `line cap`.\n     * @private\n     */\n    PdfStreamWriter.prototype.setLineCap = function (lineCapStyle) {\n        this.stream.write((lineCapStyle).toString());\n        this.stream.write(Operators.whiteSpace);\n        this.writeOperator(Operators.setLineCapStyle);\n    };\n    /**\n     * Sets the `line join`.\n     * @private\n     */\n    PdfStreamWriter.prototype.setLineJoin = function (lineJoinStyle) {\n        this.stream.write((lineJoinStyle).toString());\n        this.stream.write(Operators.whiteSpace);\n        this.writeOperator(Operators.setLineJoinStyle);\n    };\n    Object.defineProperty(PdfStreamWriter.prototype, \"position\", {\n        //IPdfWriter members\n        /**\n         * Gets or sets the current `position` within the stream.\n         * @private\n         */\n        get: function () {\n            return this.stream.position;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStreamWriter.prototype, \"length\", {\n        /**\n         * Gets `stream length`.\n         * @private\n         */\n        get: function () {\n            var returnValue = 0;\n            if (this.stream.data.length !== 0 && this.stream.data.length !== -1) {\n                for (var index = 0; index < this.stream.data.length; index++) {\n                    returnValue += this.stream.data[index].length;\n                }\n            }\n            return returnValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStreamWriter.prototype, \"document\", {\n        /**\n         * Gets and Sets the `current document`.\n         * @private\n         */\n        get: function () {\n            return null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfStreamWriter;\n}());\nexport { PdfStreamWriter };\n","/**\n * PdfTransformationMatrix.ts class for EJ2-PDF\n */\nimport { PointF } from './../drawing/pdf-drawing';\nimport { PdfNumber } from './../primitives/pdf-number';\n/**\n * Class for representing Root `transformation matrix`.\n */\nvar PdfTransformationMatrix = /** @class */ (function () {\n    function PdfTransformationMatrix(value) {\n        /**\n         * Value for `angle converting`.\n         * @default 180.0 / Math.PI\n         * @private\n         */\n        this.radDegFactor = 180.0 / Math.PI;\n        if (typeof value === 'undefined') {\n            this.transformationMatrix = new Matrix(1.00, 0.00, 0.00, 1.00, 0.00, 0.00);\n        }\n        else {\n            this.transformationMatrix = new Matrix(1.00, 0.00, 0.00, -1.00, 0.00, 0.00);\n        }\n    }\n    Object.defineProperty(PdfTransformationMatrix.prototype, \"matrix\", {\n        // Properties\n        /**\n         * Gets or sets the `internal matrix object`.\n         * @private\n         */\n        get: function () {\n            return this.transformationMatrix;\n        },\n        set: function (value) {\n            this.transformationMatrix = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Public methods\n    /**\n     * `Translates` coordinates by specified coordinates.\n     * @private\n     */\n    PdfTransformationMatrix.prototype.translate = function (offsetX, offsetY) {\n        this.transformationMatrix.translate(offsetX, offsetY);\n    };\n    /**\n     * `Scales` coordinates by specified coordinates.\n     * @private\n     */\n    PdfTransformationMatrix.prototype.scale = function (scaleX, scaleY) {\n        this.transformationMatrix.elements[0] = scaleX;\n        this.transformationMatrix.elements[3] = scaleY;\n    };\n    /**\n     * `Rotates` coordinate system in counterclockwise direction.\n     * @private\n     */\n    PdfTransformationMatrix.prototype.rotate = function (angle) {\n        //Convert from degree to radian \n        angle = (angle * Math.PI) / 180;\n        //Rotation \n        this.transformationMatrix.elements[0] = Math.cos(angle);\n        this.transformationMatrix.elements[1] = Math.sin(angle);\n        this.transformationMatrix.elements[2] = -Math.sin(angle);\n        this.transformationMatrix.elements[3] = Math.cos(angle);\n    };\n    // Overrides\n    /**\n     * Gets `PDF representation`.\n     * @private\n     */\n    PdfTransformationMatrix.prototype.toString = function () {\n        var builder = '';\n        var whitespace = ' ';\n        for (var i = 0, len = this.transformationMatrix.elements.length; i < len; i++) {\n            var temp = this.matrix.elements[i];\n            builder += PdfNumber.floatToString(this.transformationMatrix.elements[i]);\n            builder += whitespace;\n        }\n        return builder;\n    };\n    // Implementation\n    /**\n     * `Multiplies` matrices (changes coordinate system.)\n     * @private\n     */\n    PdfTransformationMatrix.prototype.multiply = function (matrix) {\n        this.transformationMatrix.multiply(matrix.matrix);\n    };\n    /**\n     * Converts `degrees to radians`.\n     * @private\n     */\n    PdfTransformationMatrix.degreesToRadians = function (degreesX) {\n        return this.degRadFactor * degreesX;\n    };\n    /**\n     * Converts `radians to degrees`.\n     * @private\n     */\n    PdfTransformationMatrix.prototype.radiansToDegrees = function (radians) {\n        return this.radDegFactor * radians;\n    };\n    /**\n     * `Clones` this instance of PdfTransformationMatrix.\n     * @private\n     */\n    PdfTransformationMatrix.prototype.clone = function () {\n        return this;\n    };\n    // Constants\n    /**\n     * Value for `angle converting`.\n     * @default Math.PI / 180.0\n     * @private\n     */\n    PdfTransformationMatrix.degRadFactor = Math.PI / 180.0;\n    return PdfTransformationMatrix;\n}());\nexport { PdfTransformationMatrix };\nvar Matrix = /** @class */ (function () {\n    function Matrix(arg1, arg2, arg3, arg4, arg5, arg6) {\n        if (typeof arg1 === 'undefined') {\n            this.metrixElements = [];\n        }\n        else if (typeof arg1 === 'number') {\n            this.constructor();\n            this.metrixElements.push(arg1);\n            this.metrixElements.push(arg2);\n            this.metrixElements.push(arg3);\n            this.metrixElements.push(arg4);\n            this.metrixElements.push(arg5);\n            this.metrixElements.push(arg6);\n        }\n        else {\n            this.metrixElements = arg1;\n        }\n    }\n    Object.defineProperty(Matrix.prototype, \"elements\", {\n        // Properties\n        /**\n         * Gets the `elements`.\n         * @private\n         */\n        get: function () {\n            return this.metrixElements;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Matrix.prototype, \"offsetX\", {\n        /**\n         * Gets the off set `X`.\n         * @private\n         */\n        get: function () {\n            return this.metrixElements[4];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Matrix.prototype, \"offsetY\", {\n        /**\n         * Gets the off set `Y`.\n         * @private\n         */\n        get: function () {\n            return this.metrixElements[5];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Implementation\n    /**\n     * `Translates` coordinates by specified coordinates.\n     * @private\n     */\n    Matrix.prototype.translate = function (offsetX, offsetY) {\n        this.metrixElements[4] = offsetX;\n        this.metrixElements[5] = offsetY;\n    };\n    /**\n     * `Translates` the specified offset X.\n     * @private\n     */\n    Matrix.prototype.transform = function (point) {\n        var x = point.x;\n        var y = point.y;\n        var x2 = x * this.elements[0] + y * this.elements[2] + this.offsetX;\n        var y2 = x * this.elements[1] + y * this.elements[3] + this.offsetY;\n        return new PointF(x2, y2);\n    };\n    /**\n     * `Multiplies matrices` (changes coordinate system.)\n     * @private\n     */\n    Matrix.prototype.multiply = function (matrix) {\n        var tempMatrix = [];\n        tempMatrix.push(this.elements[0] * matrix.elements[0] + this.elements[1] * matrix.elements[2]);\n        tempMatrix[1] = (this.elements[0] * matrix.elements[1] + this.elements[1] * matrix.elements[3]);\n        tempMatrix[2] = (this.elements[2] * matrix.elements[0] + this.elements[3] * matrix.elements[2]);\n        tempMatrix[3] = (this.elements[2] * matrix.elements[1] + this.elements[3] * matrix.elements[3]);\n        tempMatrix[4] = (this.offsetX * matrix.elements[0] + this.offsetY * matrix.elements[2] + matrix.offsetX);\n        tempMatrix[5] = (this.offsetX * matrix.elements[1] + this.offsetY * matrix.elements[3] + matrix.offsetY);\n        for (var i = 0; i < tempMatrix.length; i++) {\n            this.elements[i] = tempMatrix[i];\n        }\n    };\n    // IDisposable Members\n    /**\n     * `Dispose` this instance of PdfTransformationMatrix class.\n     * @private\n     */\n    Matrix.prototype.dispose = function () {\n        this.metrixElements = null;\n    };\n    // ICloneable Members\n    /**\n     * `Clones` this instance of PdfTransformationMatrix class.\n     * @private\n     */\n    Matrix.prototype.clone = function () {\n        var m = new Matrix(this.metrixElements);\n        return m;\n    };\n    return Matrix;\n}());\nexport { Matrix };\n","/**\n * `constants.ts` class for EJ2-PDF\n * @private\n */\nvar ProcedureSets = /** @class */ (function () {\n    function ProcedureSets() {\n        /**\n         * Specifies the `PDF` procedure set.\n         * @private\n         */\n        this.pdf = 'PDF';\n        /**\n         * Specifies the `Text` procedure set.\n         * @private\n         */\n        this.text = 'Text';\n        /**\n         * Specifies the `ImageB` procedure set.\n         * @private\n         */\n        this.imageB = 'ImageB';\n        /**\n         * Specifies the `ImageC` procedure set.\n         * @private\n         */\n        this.imageC = 'ImageC';\n        /**\n         * Specifies the `ImageI` procedure set.\n         * @private\n         */\n        this.imageI = 'ImageI';\n    }\n    return ProcedureSets;\n}());\nexport { ProcedureSets };\n","/**\n * Represent a `collection of automatic fields information`.\n * @private\n */\nvar PdfAutomaticFieldInfoCollection = /** @class */ (function () {\n    /**\n     * Initializes a new instance of the 'PdfPageNumberFieldInfoCollection' class.\n     * @private\n     */\n    function PdfAutomaticFieldInfoCollection() {\n        /**\n         * Internal variable to store instance of `pageNumberFields` class.\n         * @private\n         */\n        this.automaticFieldsInformation = [];\n        //\n    }\n    Object.defineProperty(PdfAutomaticFieldInfoCollection.prototype, \"automaticFields\", {\n        /**\n         * Gets the `page number fields collection`.\n         * @private\n         */\n        get: function () {\n            return this.automaticFieldsInformation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Public methods\n    /// Adds the specified field info.\n    /**\n     * Add page number field into collection.\n     * @private\n     */\n    PdfAutomaticFieldInfoCollection.prototype.add = function (fieldInfo) {\n        return this.automaticFields.push(fieldInfo);\n    };\n    return PdfAutomaticFieldInfoCollection;\n}());\nexport { PdfAutomaticFieldInfoCollection };\n","/**\n * TtfTableInfo.ts class for EJ2-PDF\n */\nvar TtfTableInfo = /** @class */ (function () {\n    function TtfTableInfo() {\n    }\n    Object.defineProperty(TtfTableInfo.prototype, \"empty\", {\n        //Properties\n        /**\n         * Gets a value indicating whether this table is empty.\n         * @private\n         */\n        get: function () {\n            var empty = (this.offset === this.length && this.length === this.checksum && this.checksum === 0);\n            return empty;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return TtfTableInfo;\n}());\nexport { TtfTableInfo };\n","var TtfNameTable = /** @class */ (function () {\n    function TtfNameTable() {\n    }\n    return TtfNameTable;\n}());\nexport { TtfNameTable };\n","/**\n * TtfNameRecord.ts class for EJ2-PDF\n */\nvar TtfNameRecord = /** @class */ (function () {\n    function TtfNameRecord() {\n    }\n    return TtfNameRecord;\n}());\nexport { TtfNameRecord };\n","/**\n * TtfHeadTable.ts class for EJ2-PDF\n */\nvar TtfHeadTable = /** @class */ (function () {\n    function TtfHeadTable() {\n    }\n    return TtfHeadTable;\n}());\nexport { TtfHeadTable };\n","var TtfMetrics = /** @class */ (function () {\n    function TtfMetrics() {\n    }\n    Object.defineProperty(TtfMetrics.prototype, \"isItalic\", {\n        //Properties\n        /**\n         * Gets a value indicating whether this instance is italic.\n         */\n        get: function () {\n            return ((this.macStyle & 2) !== 0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TtfMetrics.prototype, \"isBold\", {\n        /**\n         * Gets a value indicating whether this instance is bold.\n         */\n        get: function () {\n            return ((this.macStyle & 1) !== 0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return TtfMetrics;\n}());\nexport { TtfMetrics };\n","/**\n * TtfHorizontalHeaderTable.ts class for EJ2-PDF\n */\nvar TtfHorizontalHeaderTable = /** @class */ (function () {\n    function TtfHorizontalHeaderTable() {\n    }\n    return TtfHorizontalHeaderTable;\n}());\nexport { TtfHorizontalHeaderTable };\n","/**\n * TtfOS2Table.ts class for EJ2-PDF\n * The OS/2 table consists of a set of metrics that are required by Windows and OS/2.\n */\nvar TtfOS2Table = /** @class */ (function () {\n    function TtfOS2Table() {\n    }\n    return TtfOS2Table;\n}());\nexport { TtfOS2Table };\n","/**\n * TtfPostTable.ts class for EJ2-PDF\n */\nvar TtfPostTable = /** @class */ (function () {\n    function TtfPostTable() {\n    }\n    return TtfPostTable;\n}());\nexport { TtfPostTable };\n","/**\n * TtfLongHorMetric.ts class for EJ2-PDF\n */\nvar TtfLongHorMetric = /** @class */ (function () {\n    function TtfLongHorMetric() {\n    }\n    return TtfLongHorMetric;\n}());\nexport { TtfLongHorMetric };\n","/**\n * TtfCmapSubTable.ts class for EJ2-PDF\n */\nvar TtfCmapSubTable = /** @class */ (function () {\n    function TtfCmapSubTable() {\n    }\n    return TtfCmapSubTable;\n}());\nexport { TtfCmapSubTable };\n","/**\n * TtfCmapTable.ts class for EJ2-PDF\n */\nvar TtfCmapTable = /** @class */ (function () {\n    function TtfCmapTable() {\n    }\n    return TtfCmapTable;\n}());\nexport { TtfCmapTable };\n","/**\n * TtfGlyphInfo.ts class for EJ2-PDF\n */\nvar TtfGlyphInfo = /** @class */ (function () {\n    function TtfGlyphInfo() {\n    }\n    Object.defineProperty(TtfGlyphInfo.prototype, \"empty\", {\n        //Properties\n        /**\n         * Gets a value indicating whether this TtfGlyphInfo is empty.\n         */\n        get: function () {\n            var empty = (this.index === this.width && this.width === this.charCode && this.charCode === 0);\n            return empty;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //IComparable implementation\n    /**\n     * Compares two WidthDescriptor objects.\n     */\n    TtfGlyphInfo.prototype.compareTo = function (obj) {\n        var glyph = obj;\n        return this.index - glyph.index;\n    };\n    return TtfGlyphInfo;\n}());\nexport { TtfGlyphInfo };\n","/**\n * TtfLocaTable.ts class for EJ2-PDF\n */\nvar TtfLocaTable = /** @class */ (function () {\n    function TtfLocaTable() {\n    }\n    return TtfLocaTable;\n}());\nexport { TtfLocaTable };\n","/**\n * TtfAppleCmapSubTable.ts class for EJ2-PDF\n */\nvar TtfAppleCmapSubTable = /** @class */ (function () {\n    function TtfAppleCmapSubTable() {\n    }\n    return TtfAppleCmapSubTable;\n}());\nexport { TtfAppleCmapSubTable };\n","/**\n * TtfMicrosoftCmapSubTable.ts class for EJ2-PDF\n */\nvar TtfMicrosoftCmapSubTable = /** @class */ (function () {\n    function TtfMicrosoftCmapSubTable() {\n    }\n    return TtfMicrosoftCmapSubTable;\n}());\nexport { TtfMicrosoftCmapSubTable };\n","/**\n * TtfTrimmedCmapSubTable.ts class for EJ2-PDF\n */\nvar TtfTrimmedCmapSubTable = /** @class */ (function () {\n    function TtfTrimmedCmapSubTable() {\n    }\n    return TtfTrimmedCmapSubTable;\n}());\nexport { TtfTrimmedCmapSubTable };\n","/**\n * TtfLocaTable.ts class for EJ2-PDF\n */\nvar TtfGlyphHeader = /** @class */ (function () {\n    function TtfGlyphHeader() {\n    }\n    return TtfGlyphHeader;\n}());\nexport { TtfGlyphHeader };\n","/**\n * Writes data in BigEndian order.\n */\nvar BigEndianWriter = /** @class */ (function () {\n    //Constructors\n    /**\n     * Creates a new writer.\n     */\n    function BigEndianWriter(capacity) {\n        //Constants\n        /**\n         * Size of Int32 type.\n         */\n        this.int32Size = 4;\n        /**\n         * Size of Int16 type.\n         */\n        this.int16Size = 2;\n        /**\n         * Size of long type.\n         */\n        this.int64Size = 8;\n        this.bufferLength = capacity;\n        this.buffer = [];\n    }\n    Object.defineProperty(BigEndianWriter.prototype, \"data\", {\n        //Properties\n        /**\n         * Gets data written to the writer.\n         */\n        get: function () {\n            if (this.buffer.length < this.bufferLength) {\n                var length_1 = this.bufferLength - this.buffer.length;\n                for (var i = 0; i < length_1; i++) {\n                    this.buffer.push(0);\n                }\n            }\n            return this.buffer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BigEndianWriter.prototype, \"position\", {\n        /// <summary>\n        /// Gets position of the internal buffer.\n        /// </summary>\n        get: function () {\n            if (this.internalPosition === undefined || this.internalPosition === null) {\n                this.internalPosition = 0;\n            }\n            return this.internalPosition;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Writes short value.\n     */\n    BigEndianWriter.prototype.writeShort = function (value) {\n        var bytes = [((value & 0x0000ff00) >> 8), value & 0x000000ff];\n        this.flush(bytes);\n    };\n    /**\n     * Writes int value.\n     */\n    BigEndianWriter.prototype.writeInt = function (value) {\n        var i1 = (value & 0xff000000) >> 24;\n        i1 = i1 < 0 ? 256 + i1 : i1;\n        var i2 = (value & 0x00ff0000) >> 16;\n        i2 = i2 < 0 ? 256 + i2 : i2;\n        var i3 = (value & 0x0000ff00) >> 8;\n        i3 = i3 < 0 ? 256 + i3 : i3;\n        var i4 = value & 0x000000ff;\n        i4 = i4 < 0 ? 256 + i4 : i4;\n        var bytes = [(value & 0xff000000) >> 24, (value & 0x00ff0000) >> 16, (value & 0x0000ff00) >> 8, value & 0x000000ff];\n        this.flush(bytes);\n    };\n    /**\n     * Writes u int value.\n     */\n    BigEndianWriter.prototype.writeUInt = function (value) {\n        var buff = [(value & 0xff000000) >> 24, (value & 0x00ff0000) >> 16, (value & 0x0000ff00) >> 8, value & 0x000000ff];\n        this.flush(buff);\n    };\n    /**\n     * Writes string value.\n     */\n    BigEndianWriter.prototype.writeString = function (value) {\n        if (value == null) {\n            throw new Error('Argument Null Exception : value');\n        }\n        var bytes = [];\n        for (var i = 0; i < value.length; i++) {\n            bytes.push(value.charCodeAt(i));\n        }\n        this.flush(bytes);\n    };\n    /**\n     * Writes byte[] value.\n     */\n    BigEndianWriter.prototype.writeBytes = function (value) {\n        this.flush(value);\n    };\n    // //Implementation\n    BigEndianWriter.prototype.flush = function (buff) {\n        if (buff === null) {\n            throw new Error('Argument Null Exception : buff');\n        }\n        var result = [];\n        for (var i = 0; i < this.position; i++) {\n            result.push(this.buffer[i]);\n        }\n        for (var i = 0; i < buff.length; i++) {\n            result.push(buff[i]);\n        }\n        for (var i = this.position; i < this.buffer.length; i++) {\n            result.push(this.buffer[i]);\n        }\n        this.buffer = result;\n        this.internalPosition += buff.length;\n    };\n    return BigEndianWriter;\n}());\nexport { BigEndianWriter };\n","/**\n * TtfReader.ts class for EJ2-PDF\n */\nimport { TtfTableInfo } from './ttf-table-info';\nimport { Dictionary } from './../../collections/dictionary';\nimport { TtfNameTable } from './ttf-name-table';\nimport { TtfNameRecord } from './ttf-name-record';\nimport { TtfHeadTable } from './ttf-head-table';\nimport { TtfMetrics } from './ttf-metrics';\nimport { TtfHorizontalHeaderTable } from './ttf-horizontal-header-table';\nimport { TtfOS2Table } from './ttf-OS2-Table';\nimport { TtfPostTable } from './ttf-post-table';\nimport { TtfLongHorMetric } from './ttf-long-hor-metric';\nimport { TtfCmapSubTable } from './ttf-cmap-sub-table';\nimport { TtfCmapTable } from './ttf-cmap-table';\nimport { TtfGlyphInfo } from './ttf-glyph-info';\nimport { TtfLocaTable } from './ttf-loca-table';\nimport { TtfAppleCmapSubTable } from './ttf-apple-cmap-sub-table';\nimport { TtfMicrosoftCmapSubTable } from './ttf-microsoft-cmap-sub-table';\nimport { TtfTrimmedCmapSubTable } from './ttf-trimmed-cmap-sub-table';\nimport { TtfGlyphHeader } from './ttf-glyph-header';\nimport { Rectangle } from './../../drawing/pdf-drawing';\nimport { StringTokenizer } from './string-tokenizer';\nimport { TtfCmapFormat, TtfCmapEncoding, TtfPlatformID } from './enum';\nimport { TtfMicrosoftEncodingID, TtfMacintoshEncodingID, TtfCompositeGlyphFlags } from './enum';\nimport { BigEndianWriter } from './../../input-output/big-endian-writer';\nvar TtfReader = /** @class */ (function () {\n    //Constructors\n    function TtfReader(fontData) {\n        this.int32Size = 4;\n        this.isTtcFont = false;\n        this.isMacTtf = false;\n        this.metricsName = '';\n        this.isMacTTF = false;\n        this.missedGlyphs = 0;\n        this.tableNames = ['cvt ', 'fpgm', 'glyf', 'head', 'hhea', 'hmtx', 'loca', 'maxp', 'prep'];\n        this.entrySelectors = [0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4];\n        this.fontData = fontData;\n        this.initialize();\n    }\n    Object.defineProperty(TtfReader.prototype, \"macintosh\", {\n        //Properties\n        /**\n         * Gets glyphs for Macintosh or Symbol fonts (char - key, glyph - value).\n         */\n        get: function () {\n            if (this.macintoshDictionary === null || this.macintoshDictionary === undefined) {\n                this.macintoshDictionary = new Dictionary();\n            }\n            return this.macintoshDictionary;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TtfReader.prototype, \"microsoft\", {\n        /**\n         * Gets glyphs for Microsoft or Symbol fonts (char - key, glyph - value).\n         */\n        get: function () {\n            if (this.microsoftDictionary === null || this.microsoftDictionary === undefined) {\n                this.microsoftDictionary = new Dictionary();\n            }\n            return this.microsoftDictionary;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TtfReader.prototype, \"macintoshGlyphs\", {\n        /**\n         * Gets glyphs for Macintosh or Symbol fonts (glyph index - key, glyph - value).\n         */\n        get: function () {\n            if (this.internalMacintoshGlyphs === null || this.internalMacintoshGlyphs === undefined) {\n                this.internalMacintoshGlyphs = new Dictionary();\n            }\n            return this.internalMacintoshGlyphs;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TtfReader.prototype, \"microsoftGlyphs\", {\n        /**\n         * Gets glyphs for Microsoft Unicode fonts (glyph index - key, glyph - value).\n         */\n        get: function () {\n            if (this.internalMicrosoftGlyphs === null || this.internalMicrosoftGlyphs === undefined) {\n                this.internalMicrosoftGlyphs = new Dictionary();\n            }\n            return this.internalMicrosoftGlyphs;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Implementation\n    TtfReader.prototype.initialize = function () {\n        if (this.metrics === undefined) {\n            this.metrics = new TtfMetrics();\n        }\n        this.readFontDictionary();\n        var nameTable = this.readNameTable();\n        var headTable = this.readHeadTable();\n        this.initializeFontName(nameTable);\n        this.metrics.macStyle = headTable.macStyle;\n    };\n    TtfReader.prototype.readFontDictionary = function () {\n        this.offset = 0;\n        var version = this.checkPreambula();\n        //this.offset += 4;\n        var numTables = this.readInt16(this.offset);\n        var searchRange = this.readInt16(this.offset);\n        var entrySelector = this.readInt16(this.offset);\n        var rangeShift = this.readInt16(this.offset);\n        if (this.tableDirectory === undefined) {\n            this.tableDirectory = new Dictionary();\n        }\n        for (var i = 0; i < numTables; ++i) {\n            var table = new TtfTableInfo();\n            var tableKey = this.readString(this.int32Size);\n            table.checksum = this.readInt32(this.offset);\n            table.offset = this.readInt32(this.offset);\n            table.length = this.readInt32(this.offset);\n            this.tableDirectory.setValue(tableKey, table);\n        }\n        this.lowestPosition = this.offset;\n        if (!this.isTtcFont) {\n            this.fixOffsets();\n        }\n    };\n    TtfReader.prototype.fixOffsets = function () {\n        var minOffset = Number.MAX_VALUE;\n        // Search for a smallest offset and compare it with the lowest position found.\n        var tableKeys = this.tableDirectory.keys();\n        for (var i = 0; i < tableKeys.length; i++) {\n            var value = this.tableDirectory.getValue(tableKeys[i]);\n            var offset = value.offset;\n            if (minOffset > offset) {\n                minOffset = offset;\n                if (minOffset <= this.lowestPosition) {\n                    break;\n                }\n            }\n        }\n        var shift = minOffset - this.lowestPosition;\n        if (shift !== 0) {\n            var table = new Dictionary();\n            for (var i = 0; i < tableKeys.length; i++) {\n                var value = this.tableDirectory.getValue(tableKeys[i]);\n                value.offset -= shift;\n                table.setValue(tableKeys[i], value);\n            }\n            this.tableDirectory = table;\n        }\n    };\n    TtfReader.prototype.checkPreambula = function () {\n        var version = this.readInt32(this.offset);\n        this.isMacTtf = (version === 0x74727565) ? true : false;\n        if (version !== 0x10000 && version !== 0x74727565 && version !== 0x4f54544f) {\n            this.isTtcFont = true;\n            this.offset = 0;\n            var fontTag = this.readString(4);\n            if (fontTag !== 'ttcf') {\n                throw new Error('Can not read TTF font data');\n            }\n            //skip 4\n            this.offset += 4;\n            var ttcIdentificationNumber = this.readInt32(this.offset);\n            if (ttcIdentificationNumber < 0) {\n                throw new Error('Can not read TTF font data');\n            }\n            this.offset = this.readInt32(this.offset);\n            version = this.readInt32(this.offset);\n        }\n        return version;\n    };\n    TtfReader.prototype.readNameTable = function () {\n        var tableInfo = this.getTable('name');\n        this.offset = tableInfo.offset;\n        var table = new TtfNameTable();\n        table.formatSelector = this.readUInt16(this.offset);\n        table.recordsCount = this.readUInt16(this.offset);\n        table.offset = this.readUInt16(this.offset);\n        table.nameRecords = [];\n        var recordSize = 12;\n        var position = this.offset;\n        for (var i = 0; i < table.recordsCount; i++) {\n            this.offset = position;\n            var record = new TtfNameRecord();\n            record.platformID = this.readUInt16(this.offset);\n            record.encodingID = this.readUInt16(this.offset);\n            record.languageID = this.readUInt16(this.offset);\n            record.nameID = this.readUInt16(this.offset);\n            record.length = this.readUInt16(this.offset);\n            record.offset = this.readUInt16(this.offset);\n            this.offset = tableInfo.offset + table.offset + record.offset;\n            var unicode = (record.platformID === 0 || record.platformID === 3);\n            record.name = this.readString(record.length, unicode);\n            table.nameRecords[i] = record;\n            position += recordSize;\n        }\n        return table;\n    };\n    TtfReader.prototype.readHeadTable = function () {\n        var tableInfo = this.getTable('head');\n        this.offset = tableInfo.offset;\n        var table = new TtfHeadTable();\n        table.version = this.readFixed(this.offset);\n        table.fontRevision = this.readFixed(this.offset);\n        table.checkSumAdjustment = this.readUInt32(this.offset);\n        table.magicNumber = this.readUInt32(this.offset);\n        table.flags = this.readUInt16(this.offset);\n        table.unitsPerEm = this.readUInt16(this.offset);\n        table.created = this.readInt64(this.offset);\n        table.modified = this.readInt64(this.offset);\n        table.xMin = this.readInt16(this.offset);\n        table.yMin = this.readInt16(this.offset);\n        table.xMax = this.readInt16(this.offset);\n        table.yMax = this.readInt16(this.offset);\n        table.macStyle = this.readUInt16(this.offset);\n        table.lowestReadableSize = this.readUInt16(this.offset);\n        table.fontDirectionHint = this.readInt16(this.offset);\n        table.indexToLocalFormat = this.readInt16(this.offset);\n        table.glyphDataFormat = this.readInt16(this.offset);\n        return table;\n    };\n    TtfReader.prototype.readHorizontalHeaderTable = function () {\n        var tableInfo = this.getTable('hhea');\n        this.offset = tableInfo.offset;\n        var table = new TtfHorizontalHeaderTable();\n        table.version = this.readFixed(this.offset);\n        table.ascender = this.readInt16(this.offset);\n        table.descender = this.readInt16(this.offset);\n        table.lineGap = this.readInt16(this.offset);\n        table.advanceWidthMax = this.readUInt16(this.offset);\n        table.minLeftSideBearing = this.readInt16(this.offset);\n        table.minRightSideBearing = this.readInt16(this.offset);\n        table.xMaxExtent = this.readInt16(this.offset);\n        table.caretSlopeRise = this.readInt16(this.offset);\n        table.caretSlopeRun = this.readInt16(this.offset);\n        //skip 2 * 5\n        this.offset += 10;\n        table.metricDataFormat = this.readInt16(this.offset);\n        table.numberOfHMetrics = this.readUInt16(this.offset);\n        return table;\n    };\n    TtfReader.prototype.readOS2Table = function () {\n        var tableInfo = this.getTable('OS/2');\n        this.offset = tableInfo.offset;\n        var table = new TtfOS2Table();\n        table.version = this.readUInt16(this.offset);\n        table.xAvgCharWidth = this.readInt16(this.offset);\n        table.usWeightClass = this.readUInt16(this.offset);\n        table.usWidthClass = this.readUInt16(this.offset);\n        table.fsType = this.readInt16(this.offset);\n        table.ySubscriptXSize = this.readInt16(this.offset);\n        table.ySubscriptYSize = this.readInt16(this.offset);\n        table.ySubscriptXOffset = this.readInt16(this.offset);\n        table.ySubscriptYOffset = this.readInt16(this.offset);\n        table.ySuperscriptXSize = this.readInt16(this.offset);\n        table.ySuperscriptYSize = this.readInt16(this.offset);\n        table.ySuperscriptXOffset = this.readInt16(this.offset);\n        table.ySuperscriptYOffset = this.readInt16(this.offset);\n        table.yStrikeoutSize = this.readInt16(this.offset);\n        table.yStrikeoutPosition = this.readInt16(this.offset);\n        table.sFamilyClass = this.readInt16(this.offset);\n        table.panose = this.readBytes(10);\n        table.ulUnicodeRange1 = this.readUInt32(this.offset);\n        table.ulUnicodeRange2 = this.readUInt32(this.offset);\n        table.ulUnicodeRange3 = this.readUInt32(this.offset);\n        table.ulUnicodeRange4 = this.readUInt32(this.offset);\n        table.vendorIdentifier = this.readBytes(4);\n        table.fsSelection = this.readUInt16(this.offset);\n        table.usFirstCharIndex = this.readUInt16(this.offset);\n        table.usLastCharIndex = this.readUInt16(this.offset);\n        table.sTypoAscender = this.readInt16(this.offset);\n        table.sTypoDescender = this.readInt16(this.offset);\n        table.sTypoLineGap = this.readInt16(this.offset);\n        table.usWinAscent = this.readUInt16(this.offset);\n        table.usWinDescent = this.readUInt16(this.offset);\n        table.ulCodePageRange1 = this.readUInt32(this.offset);\n        table.ulCodePageRange2 = this.readUInt32(this.offset);\n        if (table.version > 1) {\n            table.sxHeight = this.readInt16(this.offset);\n            table.sCapHeight = this.readInt16(this.offset);\n            table.usDefaultChar = this.readUInt16(this.offset);\n            table.usBreakChar = this.readUInt16(this.offset);\n            table.usMaxContext = this.readUInt16(this.offset);\n        }\n        else {\n            table.sxHeight = 0;\n            table.sCapHeight = 0;\n            table.usDefaultChar = 0;\n            table.usBreakChar = 0;\n            table.usMaxContext = 0;\n        }\n        return table;\n    };\n    TtfReader.prototype.readPostTable = function () {\n        var tableInfo = this.getTable('post');\n        this.offset = tableInfo.offset;\n        var table = new TtfPostTable();\n        table.formatType = this.readFixed(this.offset);\n        table.italicAngle = this.readFixed(this.offset);\n        table.underlinePosition = this.readInt16(this.offset);\n        table.underlineThickness = this.readInt16(this.offset);\n        table.isFixedPitch = this.readUInt32(this.offset);\n        table.minType42 = this.readUInt32(this.offset);\n        table.maxType42 = this.readUInt32(this.offset);\n        table.minType1 = this.readUInt32(this.offset);\n        table.maxType1 = this.readUInt32(this.offset);\n        return table;\n    };\n    /**\n     * Reads Width of the glyphs.\n     */\n    TtfReader.prototype.readWidthTable = function (glyphCount, unitsPerEm) {\n        var tableInfo = this.getTable('hmtx');\n        this.offset = tableInfo.offset;\n        var width = [];\n        for (var i = 0; i < glyphCount; i++) {\n            var glyph = new TtfLongHorMetric();\n            glyph.advanceWidth = this.readUInt16(this.offset);\n            glyph.lsb = this.readInt16(this.offset);\n            var glyphWidth = glyph.advanceWidth * 1000 / unitsPerEm;\n            width.push(Math.floor(glyphWidth));\n        }\n        return width;\n    };\n    /**\n     * Reads the cmap table.\n     */\n    TtfReader.prototype.readCmapTable = function () {\n        var tableInfo = this.getTable('cmap');\n        this.offset = tableInfo.offset;\n        var table = new TtfCmapTable();\n        table.version = this.readUInt16(this.offset);\n        table.tablesCount = this.readUInt16(this.offset);\n        var position = this.offset;\n        var subTables = [];\n        for (var i = 0; i < table.tablesCount; i++) {\n            this.offset = position;\n            var subTable = new TtfCmapSubTable();\n            subTable.platformID = this.readUInt16(this.offset);\n            subTable.encodingID = this.readUInt16(this.offset);\n            subTable.offset = this.readUInt32(this.offset);\n            position = this.offset;\n            this.readCmapSubTable(subTable);\n            subTables[i] = subTable;\n        }\n        return subTables;\n    };\n    /**\n     * Reads the cmap sub table.\n     */\n    TtfReader.prototype.readCmapSubTable = function (subTable) {\n        var tableInfo = this.getTable('cmap');\n        this.offset = tableInfo.offset + subTable.offset;\n        var format = this.readUInt16(this.offset);\n        var encoding = this.getCmapEncoding(subTable.platformID, subTable.encodingID);\n        var platform = (encoding === TtfCmapEncoding.Macintosh) ? TtfPlatformID.Macintosh : TtfPlatformID.Microsoft;\n        if (encoding !== TtfCmapEncoding.Unknown) {\n            switch (format) {\n                case TtfCmapFormat.Apple:\n                    this.readAppleCmapTable(subTable, encoding);\n                    break;\n                case TtfCmapFormat.Microsoft:\n                    this.readMicrosoftCmapTable(subTable, encoding);\n                    break;\n                case TtfCmapFormat.Trimmed:\n                    this.readTrimmedCmapTable(subTable, encoding);\n                    break;\n            }\n        }\n    };\n    /**\n     * Reads Symbol cmap table.\n     */\n    TtfReader.prototype.readAppleCmapTable = function (subTable, encoding) {\n        var tableInfo = this.getTable('cmap');\n        this.offset = tableInfo.offset + subTable.offset;\n        var table = new TtfAppleCmapSubTable();\n        table.format = this.readUInt16(this.offset);\n        table.length = this.readUInt16(this.offset);\n        table.version = this.readUInt16(this.offset);\n        if (this.maxMacIndex === null || this.maxMacIndex === undefined) {\n            this.maxMacIndex = 0;\n        }\n        for (var i = 0; i < 256; ++i) {\n            var glyphInfo = new TtfGlyphInfo();\n            glyphInfo.index = this.readByte(this.offset);\n            glyphInfo.width = this.getWidth(glyphInfo.index);\n            glyphInfo.charCode = i;\n            this.macintosh.setValue(i, glyphInfo);\n            this.addGlyph(glyphInfo, encoding);\n            // NOTE: this code fixes char codes that extends 0x100. However, it might corrupt something.\n            this.maxMacIndex = Math.max(i, this.maxMacIndex);\n        }\n    };\n    /**\n     * Reads Symbol cmap table.\n     */\n    TtfReader.prototype.readMicrosoftCmapTable = function (subTable, encoding) {\n        var tableInfo = this.getTable('cmap');\n        this.offset = tableInfo.offset + subTable.offset;\n        var collection = (encoding === TtfCmapEncoding.Unicode) ? this.microsoft : this.macintosh;\n        var table = new TtfMicrosoftCmapSubTable();\n        table.format = this.readUInt16(this.offset);\n        table.length = this.readUInt16(this.offset);\n        table.version = this.readUInt16(this.offset);\n        table.segCountX2 = this.readUInt16(this.offset);\n        table.searchRange = this.readUInt16(this.offset);\n        table.entrySelector = this.readUInt16(this.offset);\n        table.rangeShift = this.readUInt16(this.offset);\n        var segCount = table.segCountX2 / 2;\n        table.endCount = this.readUshortArray(segCount);\n        table.reservedPad = this.readUInt16(this.offset);\n        table.startCount = this.readUshortArray(segCount);\n        table.idDelta = this.readUshortArray(segCount);\n        table.idRangeOffset = this.readUshortArray(segCount);\n        var length = (table.length / 2 - 8) - (segCount * 4);\n        table.glyphID = this.readUshortArray(length);\n        // Process glyphIdArray array.\n        var codeOffset = 0;\n        var index = 0;\n        for (var j = 0; j < segCount; j++) {\n            for (var k = table.startCount[j]; k <= table.endCount[j] && k !== 65535; k++) {\n                if (table.idRangeOffset[j] === 0) {\n                    codeOffset = (k + table.idDelta[j]) & 65535;\n                }\n                else {\n                    index = j + table.idRangeOffset[j] / 2 - segCount + k - table.startCount[j];\n                    if (index >= table.glyphID.length) {\n                        continue;\n                    }\n                    codeOffset = (table.glyphID[index] + table.idDelta[j]) & 65535;\n                }\n                var glyph = new TtfGlyphInfo();\n                glyph.index = codeOffset;\n                glyph.width = this.getWidth(glyph.index);\n                var id = (encoding === TtfCmapEncoding.Symbol) ? ((k & 0xff00) === 0xf000 ? k & 0xff : k) : k;\n                glyph.charCode = id;\n                collection.setValue(id, glyph);\n                this.addGlyph(glyph, encoding);\n            }\n        }\n    };\n    /**\n     * Reads Trimed cmap table.\n     */\n    TtfReader.prototype.readTrimmedCmapTable = function (subTable, encoding) {\n        var tableInfo = this.getTable('cmap');\n        this.offset = tableInfo.offset + subTable.offset;\n        var table = new TtfTrimmedCmapSubTable();\n        table.format = this.readUInt16(this.offset);\n        table.length = this.readUInt16(this.offset);\n        table.version = this.readUInt16(this.offset);\n        table.firstCode = this.readUInt16(this.offset);\n        table.entryCount = this.readUInt16(this.offset);\n        for (var i = 0; i < table.entryCount; ++i) {\n            var glyphInfo = new TtfGlyphInfo();\n            glyphInfo.index = this.readUInt16(this.offset);\n            glyphInfo.width = this.getWidth(glyphInfo.index);\n            glyphInfo.charCode = i + table.firstCode;\n            this.macintosh.setValue(i, glyphInfo);\n            this.addGlyph(glyphInfo, encoding);\n            // NOTE: this code fixes char codes that extends 0x100. However, it might corrupt something.\n            this.maxMacIndex = Math.max(i, this.maxMacIndex);\n        }\n    };\n    TtfReader.prototype.initializeFontName = function (nameTable) {\n        for (var i = 0; i < nameTable.recordsCount; i++) {\n            var record = nameTable.nameRecords[i];\n            if (record.nameID === 1) {\n                //font family\n                this.metrics.fontFamily = record.name;\n            }\n            else if (record.nameID === 6) {\n                //post script name\n                this.metrics.postScriptName = record.name;\n            }\n            /* tslint:disable */\n            if (this.metrics.fontFamily !== null && this.metrics.fontFamily !== undefined && this.metrics.postScriptName !== null && this.metrics.postScriptName !== undefined) {\n                break;\n            }\n            /* tslint:disable */\n        }\n    };\n    TtfReader.prototype.getTable = function (name) {\n        // if (name === null) {\n        //     throw new Error('Argument Null Exception : name');\n        // }\n        var table = new TtfTableInfo();\n        var obj;\n        if (this.tableDirectory.containsKey(name)) {\n            obj = this.tableDirectory.getValue(name);\n        }\n        if (obj !== null && obj !== undefined) {\n            table = obj;\n        }\n        return table;\n    };\n    /**\n     * Returns width of the glyph.\n     */\n    TtfReader.prototype.getWidth = function (glyphCode) {\n        glyphCode = (glyphCode < this.width.length) ? glyphCode : this.width.length - 1;\n        return this.width[glyphCode];\n    };\n    /**\n     * Gets CMAP encoding based on platform ID and encoding ID.\n     */\n    /* tslint:disable */\n    TtfReader.prototype.getCmapEncoding = function (platformID, encodingID) {\n        var format = TtfCmapEncoding.Unknown;\n        if (platformID == TtfPlatformID.Microsoft && encodingID == TtfMicrosoftEncodingID.Undefined) {\n            // When building a symbol font for Windows,\n            // the platform ID should be 3 and the encoding ID should be 0.\n            format = TtfCmapEncoding.Symbol;\n        }\n        else if (platformID == TtfPlatformID.Microsoft && encodingID == TtfMicrosoftEncodingID.Unicode) {\n            // When building a Unicode font for Windows,\n            // the platform ID should be 3 and the encoding ID should be 1.\n            format = TtfCmapEncoding.Unicode;\n        }\n        else if (platformID == TtfPlatformID.Macintosh && encodingID == TtfMacintoshEncodingID.Roman) {\n            // When building a font that will be used on the Macintosh,\n            // the platform ID should be 1 and the encoding ID should be 0.\n            format = TtfCmapEncoding.Macintosh;\n        }\n        return format;\n    };\n    /* tslint:enable */\n    /**\n     * Adds glyph to the collection.\n     */\n    TtfReader.prototype.addGlyph = function (glyph, encoding) {\n        var collection = null;\n        switch (encoding) {\n            case TtfCmapEncoding.Unicode:\n                collection = this.microsoftGlyphs;\n                break;\n            case TtfCmapEncoding.Macintosh:\n            case TtfCmapEncoding.Symbol:\n                collection = this.macintoshGlyphs;\n                break;\n        }\n        collection.setValue(glyph.index, glyph);\n    };\n    /**\n     * Initializes metrics.\n     */\n    /* tslint:disable */\n    TtfReader.prototype.initializeMetrics = function (nameTable, headTable, horizontalHeadTable, os2Table, postTable, cmapTables) {\n        /* tslint:enable */\n        // if (cmapTables === null) {\n        //     throw new Error('ArgumentNullException : cmapTables');\n        // }\n        this.initializeFontName(nameTable);\n        // Get font encoding.\n        var bSymbol = false;\n        for (var i = 0; i < cmapTables.length; i++) {\n            var subTable = cmapTables[i];\n            var encoding = this.getCmapEncoding(subTable.platformID, subTable.encodingID);\n            if (encoding === TtfCmapEncoding.Symbol) {\n                bSymbol = true;\n                break;\n            }\n        }\n        this.metrics.isSymbol = bSymbol;\n        this.metrics.macStyle = headTable.macStyle;\n        this.metrics.isFixedPitch = (postTable.isFixedPitch !== 0);\n        this.metrics.italicAngle = postTable.italicAngle;\n        var factor = 1000 / headTable.unitsPerEm;\n        this.metrics.winAscent = os2Table.sTypoAscender * factor;\n        this.metrics.macAscent = horizontalHeadTable.ascender * factor;\n        //m_metrics.MacAscent = os2Table.UsWinAscent * factor;\n        // NOTE: This is stange workaround. The value is good if os2Table.SCapHeight != 0, otherwise it should be properly computed.\n        this.metrics.capHeight = (os2Table.sCapHeight !== 0) ? os2Table.sCapHeight : 0.7 * headTable.unitsPerEm * factor;\n        this.metrics.winDescent = os2Table.sTypoDescender * factor;\n        this.metrics.macDescent = horizontalHeadTable.descender * factor;\n        //m_metrics.MacDescent = -os2Table.UsWinDescent * factor;\n        this.metrics.leading = (os2Table.sTypoAscender - os2Table.sTypoDescender + os2Table.sTypoLineGap) * factor;\n        this.metrics.lineGap = Math.ceil(horizontalHeadTable.lineGap * factor);\n        var left = headTable.xMin * factor;\n        var top = Math.ceil(this.metrics.macAscent + this.metrics.lineGap);\n        var right = headTable.xMax * factor;\n        var bottom = this.metrics.macDescent;\n        this.metrics.fontBox = new Rectangle(left, top, right, bottom);\n        // NOTE: Strange!\n        this.metrics.stemV = 80;\n        this.metrics.widthTable = this.updateWidth();\n        this.metrics.contains = this.tableDirectory.containsKey('CFF');\n        this.metrics.subScriptSizeFactor = headTable.unitsPerEm / os2Table.ySubscriptYSize;\n        this.metrics.superscriptSizeFactor = headTable.unitsPerEm / os2Table.ySuperscriptYSize;\n    };\n    /**\n     * Updates chars structure which is used in the case of ansi encoding (256 bytes).\n     */\n    TtfReader.prototype.updateWidth = function () {\n        var count = 256;\n        var bytes = [];\n        if (this.metrics.isSymbol) {\n            for (var i = 0; i < count; i++) {\n                var glyphInfo = this.getGlyph(String.fromCharCode(i));\n                bytes[i] = (glyphInfo.empty) ? 0 : glyphInfo.width;\n            }\n        }\n        else {\n            var byteToProcess = [];\n            var unknown = '?';\n            var space = String.fromCharCode(32);\n            for (var i = 0; i < count; i++) {\n                byteToProcess[0] = i;\n                var text = this.getString(byteToProcess, 0, byteToProcess.length);\n                var ch = (text.length > 0) ? text[0] : unknown;\n                var glyphInfo = this.getGlyph(ch);\n                if (!glyphInfo.empty) {\n                    bytes[i] = glyphInfo.width;\n                }\n                else {\n                    glyphInfo = this.getGlyph(space);\n                    bytes[i] = (glyphInfo.empty) ? 0 : glyphInfo.width;\n                }\n            }\n        }\n        return bytes;\n    };\n    /**\n     * Returns default glyph.\n     */\n    TtfReader.prototype.getDefaultGlyph = function () {\n        var glyph = this.getGlyph(StringTokenizer.whiteSpace);\n        return glyph;\n    };\n    /**\n     * Reads unicode string from byte array.\n     */\n    TtfReader.prototype.getString = function (byteToProcess, start, length) {\n        var result = '';\n        for (var index = 0; index < length; index++) {\n            result += String.fromCharCode(byteToProcess[index + start]);\n        }\n        return result;\n    };\n    /**\n     * Reads loca table.\n     */\n    TtfReader.prototype.readLocaTable = function (bShort) {\n        var tableInfo = this.getTable('loca');\n        this.offset = tableInfo.offset;\n        var table = new TtfLocaTable();\n        var buffer = null;\n        if (bShort) {\n            var len = tableInfo.length / 2;\n            buffer = [];\n            for (var i = 0; i < len; i++) {\n                buffer[i] = this.readUInt16(this.offset) * 2;\n            }\n        }\n        else {\n            var len = tableInfo.length / 4;\n            buffer = [];\n            for (var i = 0; i < len; i++) {\n                buffer[i] = this.readUInt32(this.offset);\n            }\n        }\n        table.offsets = buffer;\n        return table;\n    };\n    /**\n     * Updates hash table of used glyphs.\n     */\n    TtfReader.prototype.updateGlyphChars = function (glyphChars, locaTable) {\n        // if (glyphChars === null) {\n        //     throw new Error('Argument Null Exception : glyphChars');\n        // }\n        // Add zero key.\n        if (!glyphChars.containsKey(0)) {\n            glyphChars.setValue(0, 0);\n        }\n        var clone = new Dictionary();\n        var glyphCharKeys = glyphChars.keys();\n        for (var i = 0; i < glyphCharKeys.length; i++) {\n            clone.setValue(glyphCharKeys[i], glyphChars.getValue(glyphCharKeys[i]));\n        }\n        for (var i = 0; i < glyphCharKeys.length; i++) {\n            var nextKey = glyphCharKeys[i];\n            this.processCompositeGlyph(glyphChars, nextKey, locaTable);\n        }\n    };\n    /**\n     * Checks if glyph is composite or not.\n     */\n    TtfReader.prototype.processCompositeGlyph = function (glyphChars, glyph, locaTable) {\n        // if (glyphChars === null) {\n        //     throw new Error('Argument Null Exception : glyphChars');\n        // }\n        // Is in range.\n        if (glyph < locaTable.offsets.length - 1) {\n            var glyphOffset = locaTable.offsets[glyph];\n            if (glyphOffset !== locaTable.offsets[glyph + 1]) {\n                var tableInfo = this.getTable('glyf');\n                this.offset = tableInfo.offset + glyphOffset;\n                var glyphHeader = new TtfGlyphHeader();\n                glyphHeader.numberOfContours = this.readInt16(this.offset);\n                glyphHeader.xMin = this.readInt16(this.offset);\n                glyphHeader.yMin = this.readInt16(this.offset);\n                glyphHeader.xMax = this.readInt16(this.offset);\n                glyphHeader.yMax = this.readInt16(this.offset);\n                // Glyph is composite.\n                if (glyphHeader.numberOfContours < 0) {\n                    var skipBytes = 0;\n                    var entry = true;\n                    while (entry) {\n                        var flags = this.readUInt16(this.offset);\n                        var glyphIndex = this.readUInt16(this.offset);\n                        if (!glyphChars.containsKey(glyphIndex)) {\n                            glyphChars.setValue(glyphIndex, 0);\n                        }\n                        if ((flags & TtfCompositeGlyphFlags.MoreComponents) === 0) {\n                            break;\n                        }\n                        skipBytes = ((flags & TtfCompositeGlyphFlags.Arg1And2AreWords) !== 0) ? 4 : 2;\n                        if ((flags & TtfCompositeGlyphFlags.WeHaveScale) !== 0) {\n                            skipBytes += 2;\n                        }\n                        else if ((flags & TtfCompositeGlyphFlags.WeHaveAnXyScale) !== 0) {\n                            skipBytes += 4;\n                        }\n                        else if ((flags & TtfCompositeGlyphFlags.WeHaveTwoByTwo) !== 0) {\n                            skipBytes += 2 * 4;\n                        }\n                        this.offset += skipBytes;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Creates new glyph tables based on chars that are used for output.\n     */\n    /* tslint:disable */\n    TtfReader.prototype.generateGlyphTable = function (glyphChars, locaTable, newLocaTable, newGlyphTable) {\n        /* tslint:enable */\n        // if (glyphChars === null) {\n        //     throw new Error('Argument Null Exception : glyphChars');\n        // }\n        newLocaTable = [];\n        // Sorting used glyphs keys.\n        var activeGlyphs = glyphChars.keys();\n        activeGlyphs.sort(function (a, b) { return a - b; });\n        var glyphSize = 0;\n        for (var i = 0; i < activeGlyphs.length; i++) {\n            var glyphIndex = activeGlyphs[i];\n            if (locaTable.offsets.length > 0) {\n                glyphSize += locaTable.offsets[glyphIndex + 1] - locaTable.offsets[glyphIndex];\n            }\n        }\n        var glyphSizeAligned = this.align(glyphSize);\n        newGlyphTable = [];\n        for (var i = 0; i < glyphSizeAligned; i++) {\n            newGlyphTable.push(0);\n        }\n        var nextGlyphOffset = 0;\n        var nextGlyphIndex = 0;\n        var table = this.getTable('glyf');\n        // Creating NewLocaTable - that would hold offsets for filtered glyphs.\n        for (var i = 0; i < locaTable.offsets.length; i++) {\n            newLocaTable.push(nextGlyphOffset);\n            if (nextGlyphIndex < activeGlyphs.length && activeGlyphs[nextGlyphIndex] === i) {\n                ++nextGlyphIndex;\n                newLocaTable[i] = nextGlyphOffset;\n                var oldGlyphOffset = locaTable.offsets[i];\n                var oldNextGlyphOffset = locaTable.offsets[i + 1] - oldGlyphOffset;\n                if (oldNextGlyphOffset > 0) {\n                    this.offset = table.offset + oldGlyphOffset;\n                    var result = this.read(newGlyphTable, nextGlyphOffset, oldNextGlyphOffset);\n                    newGlyphTable = result.buffer;\n                    nextGlyphOffset += oldNextGlyphOffset;\n                }\n            }\n        }\n        return { glyphTableSize: glyphSize, newLocaTable: newLocaTable, newGlyphTable: newGlyphTable };\n    };\n    /**\n     * Updates new Loca table.\n     */\n    /* tslint:disable */\n    TtfReader.prototype.updateLocaTable = function (newLocaTable, bLocaIsShort, newLocaTableOut) {\n        /* tslint:enable */\n        if (newLocaTable === null) {\n            throw new Error('Argument Null Exception : newLocaTable');\n        }\n        var size = (bLocaIsShort) ? newLocaTable.length * 2 : newLocaTable.length * 4;\n        var count = this.align(size);\n        //BigEndianWiter\n        var writer = new BigEndianWriter(count);\n        for (var i = 0; i < newLocaTable.length; i++) {\n            var value = newLocaTable[i];\n            if (bLocaIsShort) {\n                value /= 2;\n                writer.writeShort(value);\n            }\n            else {\n                writer.writeInt(value);\n            }\n        }\n        return { newLocaUpdated: writer.data, newLocaSize: size };\n    };\n    /**\n     * Aligns number to be divisible on 4.\n     */\n    TtfReader.prototype.align = function (value) {\n        return (value + 3) & (~3);\n    };\n    /**\n     * Returns font program data.\n     */\n    /* tslint:disable */\n    TtfReader.prototype.getFontProgram = function (newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize) {\n        /* tslint:enable */\n        if (newLocaTableOut === null) {\n            throw new Error('Argument Null Exception : newLocaTableOut');\n        }\n        if (newGlyphTable === null) {\n            throw new Error('Argument Null Exception : newGlyphTable');\n        }\n        var tableNames = this.tableNames;\n        var result = this.getFontProgramLength(newLocaTableOut, newGlyphTable, 0);\n        var fontProgramLength = result.fontProgramLength;\n        var numTables = result.numTables;\n        var writer = new BigEndianWriter(fontProgramLength);\n        writer.writeInt(0x10000);\n        writer.writeShort(numTables);\n        var entrySelector = this.entrySelectors[numTables];\n        writer.writeShort((1 << (entrySelector & 31)) * 16);\n        writer.writeShort(entrySelector);\n        writer.writeShort((numTables - (1 << (entrySelector & 31))) * 16);\n        // Writing to destination buffer - checksums && sizes of used tables.\n        this.writeCheckSums(writer, numTables, newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize);\n        // // Writing to destination buffer - used glyphs.\n        this.writeGlyphs(writer, newLocaTableOut, newGlyphTable);\n        return writer.data;\n    };\n    /* tslint:disable */\n    TtfReader.prototype.getFontProgramLength = function (newLocaTableOut, newGlyphTable, numTables) {\n        /* tslint:enable */\n        if (newLocaTableOut === null) {\n            throw new Error('Argument Null Exception : newLocaTableOut');\n        }\n        if (newGlyphTable === null) {\n            throw new Error('Argument Null Exception : newGlyphTable');\n        }\n        // glyf and loca are used by default;\n        numTables = 2;\n        var tableNames = this.tableNames;\n        var fontProgramLength = 0;\n        for (var i = 0; i < tableNames.length; i++) {\n            var tableName = tableNames[i];\n            if (tableName !== 'glyf' && tableName !== 'loca') {\n                var table = this.getTable(tableName);\n                if (!table.empty) {\n                    ++numTables;\n                    fontProgramLength += this.align(table.length);\n                }\n            }\n        }\n        fontProgramLength += newLocaTableOut.length;\n        fontProgramLength += newGlyphTable.length;\n        var usedTablesSize = numTables * 16 + (3 * 4);\n        fontProgramLength += usedTablesSize;\n        return { fontProgramLength: fontProgramLength, numTables: numTables };\n    };\n    /**\n     * Writing to destination buffer - checksums and sizes of used tables.\n     */\n    /* tslint:disable */\n    TtfReader.prototype.writeCheckSums = function (writer, numTables, newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize) {\n        /* tslint:enable */\n        if (writer === null) {\n            throw new Error('Argument Null Exception : writer');\n        }\n        if (newLocaTableOut === null) {\n            throw new Error('Argument Null Exception : newLocaTableOut');\n        }\n        if (newGlyphTable === null) {\n            throw new Error('Argument Null Exception : newGlyphTable');\n        }\n        var tableNames = this.tableNames;\n        var usedTablesSize = numTables * 16 + (3 * 4);\n        var nextTableSize = 0;\n        for (var i = 0; i < tableNames.length; i++) {\n            var tableName = tableNames[i];\n            var tableInfo = this.getTable(tableName);\n            if (tableInfo.empty) {\n                continue;\n            }\n            writer.writeString(tableName);\n            if (tableName === 'glyf') {\n                var checksum = this.calculateCheckSum(newGlyphTable);\n                writer.writeInt(checksum);\n                nextTableSize = glyphTableSize;\n            }\n            else if (tableName === 'loca') {\n                var checksum = this.calculateCheckSum(newLocaTableOut);\n                writer.writeInt(checksum);\n                nextTableSize = locaTableSize;\n            }\n            else {\n                writer.writeInt(tableInfo.checksum);\n                nextTableSize = tableInfo.length;\n            }\n            writer.writeUInt(usedTablesSize);\n            writer.writeUInt(nextTableSize);\n            usedTablesSize += this.align(nextTableSize);\n        }\n    };\n    /**\n     * Gets checksum from source buffer.\n     */\n    TtfReader.prototype.calculateCheckSum = function (bytes) {\n        if (bytes === null) {\n            throw new Error('Argument Null Exception : bytes');\n        }\n        var pos = 0;\n        var byte1 = 0;\n        var byte2 = 0;\n        var byte3 = 0;\n        var byte4 = 0;\n        for (var i = 0; i < (bytes.length + 1) / 4; i++) {\n            byte4 += (bytes[pos++] & 255);\n            byte3 += (bytes[pos++] & 255);\n            byte2 += (bytes[pos++] & 255);\n            byte1 += (bytes[pos++] & 255);\n        }\n        var result = byte1;\n        result += (byte2 << 8);\n        result += (byte3 << 16);\n        result += (byte4 << 24);\n        return result;\n    };\n    /**\n     * Writing to destination buffer - used glyphs.\n     */\n    TtfReader.prototype.writeGlyphs = function (writer, newLocaTable, newGlyphTable) {\n        if (writer === null) {\n            throw new Error('Argument Null Exception : writer');\n        }\n        if (newLocaTable === null) {\n            throw new Error('Argument Null Exception : newLocaTableOut');\n        }\n        if (newGlyphTable === null) {\n            throw new Error('Argument Null Exception : newGlyphTable');\n        }\n        var tableNames = this.tableNames;\n        for (var i = 0; i < tableNames.length; i++) {\n            var tableName = tableNames[i];\n            var tableInfo = this.getTable(tableName);\n            if (tableInfo.empty) {\n                continue;\n            }\n            if (tableName === 'glyf') {\n                writer.writeBytes(newGlyphTable);\n            }\n            else if (tableName === 'loca') {\n                writer.writeBytes(newLocaTable);\n            }\n            else {\n                var count = this.align(tableInfo.length);\n                var buff = [];\n                for (var i_1 = 0; i_1 < count; i_1++) {\n                    buff.push(0);\n                }\n                this.offset = tableInfo.offset;\n                var result = this.read(buff, 0, tableInfo.length);\n                writer.writeBytes(result.buffer);\n            }\n        }\n    };\n    //public methods\n    /**\n     * Sets position value of font data.\n     */\n    TtfReader.prototype.setOffset = function (offset) {\n        this.offset = offset;\n    };\n    /**\n     * Creates font Internals\n     * @private\n     */\n    TtfReader.prototype.createInternals = function () {\n        this.metrics = new TtfMetrics();\n        var nameTable = this.readNameTable();\n        var headTable = this.readHeadTable();\n        this.bIsLocaShort = (headTable.indexToLocalFormat === 0);\n        var horizontalHeadTable = this.readHorizontalHeaderTable();\n        var os2Table = this.readOS2Table();\n        var postTable = this.readPostTable();\n        this.width = this.readWidthTable(horizontalHeadTable.numberOfHMetrics, headTable.unitsPerEm);\n        var subTables = this.readCmapTable();\n        this.initializeMetrics(nameTable, headTable, horizontalHeadTable, os2Table, postTable, subTables);\n    };\n    TtfReader.prototype.getGlyph = function (charCode) {\n        if (typeof charCode === 'number') {\n            var obj1 = null;\n            if (!this.metrics.isSymbol && this.microsoftGlyphs != null) {\n                if (this.microsoftGlyphs.containsKey(charCode)) {\n                    obj1 = this.microsoftGlyphs.getValue(charCode);\n                }\n            }\n            else if (this.metrics.isSymbol && this.macintoshGlyphs != null) {\n                if (this.macintoshGlyphs.containsKey(charCode)) {\n                    obj1 = this.macintoshGlyphs.getValue(charCode);\n                }\n            }\n            var glyph = (obj1 != null) ? obj1 : this.getDefaultGlyph();\n            return glyph;\n        }\n        else {\n            var obj = null;\n            var code = charCode.charCodeAt(0);\n            if (!this.metrics.isSymbol && this.microsoft !== null) {\n                if (this.microsoft.containsKey(code)) {\n                    obj = this.microsoft.getValue(code);\n                    if (code !== StringTokenizer.whiteSpace.charCodeAt(0)) {\n                        this.isFontPresent = true;\n                    }\n                }\n                else if (code !== StringTokenizer.whiteSpace.charCodeAt(0)) {\n                    this.isFontPresent = false;\n                }\n            }\n            else if (this.metrics.isSymbol && this.macintosh !== null || this.isMacTTF) {\n                // NOTE: this code fixes char codes that extends 0x100. However, it might corrupt something.\n                if (this.maxMacIndex !== 0) {\n                    code %= this.maxMacIndex + 1;\n                }\n                else {\n                    code = ((code & 0xff00) === 0xf000 ? code & 0xff : code);\n                }\n                if (this.macintosh.containsKey(code)) {\n                    obj = this.macintosh.getValue(code);\n                    this.isFontPresent = true;\n                }\n            }\n            // Fix for StackOverFlow exception in XPS to PDF converter\n            if (charCode === StringTokenizer.whiteSpace && obj === null) {\n                obj = new TtfGlyphInfo();\n            }\n            var glyph = (obj !== null) ? obj : this.getDefaultGlyph();\n            return glyph;\n        }\n    };\n    /**\n     * Gets hash table with chars indexed by glyph index.\n     */\n    TtfReader.prototype.getGlyphChars = function (chars) {\n        if (chars === null || chars === undefined) {\n            throw new Error('Argument Null Exception : chars');\n        }\n        var dictionary = new Dictionary();\n        var charKeys = chars.keys();\n        for (var i = 0; i < charKeys.length; i++) {\n            var ch = charKeys[i];\n            var glyph = this.getGlyph(ch);\n            if (!glyph.empty) {\n                dictionary.setValue(glyph.index, ch.charCodeAt(0));\n            }\n        }\n        return dictionary;\n    };\n    /**\n     * Gets all glyphs.\n     */\n    TtfReader.prototype.getAllGlyphs = function () {\n        var allGlyphInfo = [];\n        var info = new TtfGlyphInfo();\n        var index = 0;\n        for (var i = 0; i < this.width.length; i++) {\n            var width = this.width[i];\n            info.index = index;\n            info.width = width;\n            allGlyphInfo.push(info);\n            index++;\n        }\n        return allGlyphInfo;\n    };\n    /**\n     * Reads a font's program.\n     * @private\n     */\n    TtfReader.prototype.readFontProgram = function (chars) {\n        var glyphChars = this.getGlyphChars(chars);\n        var locaTable = this.readLocaTable(this.bIsLocaShort);\n        if (glyphChars.size() < chars.size()) {\n            this.missedGlyphs = chars.size() - glyphChars.size();\n        }\n        this.updateGlyphChars(glyphChars, locaTable);\n        /* tslint:disable */\n        var result1 = this.generateGlyphTable(glyphChars, locaTable, null, null);\n        /* tslint:enable */\n        var glyphTableSize = result1.glyphTableSize;\n        var newLocaTable = result1.newLocaTable;\n        var newGlyphTable = result1.newGlyphTable;\n        var result2 = this.updateLocaTable(newLocaTable, this.bIsLocaShort, null);\n        var newLocaSize = result2.newLocaSize;\n        var newLocaUpdated = result2.newLocaUpdated;\n        var fontProgram = this.getFontProgram(newLocaUpdated, newGlyphTable, glyphTableSize, newLocaSize);\n        return fontProgram;\n    };\n    /**\n     * Reconverts string to be in proper format saved into PDF file.\n     */\n    TtfReader.prototype.convertString = function (text) {\n        if (text === null) {\n            throw new Error('Argument Null Exception : text');\n        }\n        var glyph = '';\n        var i = 0;\n        for (var k = 0; k < text.length; k++) {\n            var ch = text[k];\n            var glyphInfo = this.getGlyph(ch);\n            if (!glyphInfo.empty) {\n                glyph += String.fromCharCode(glyphInfo.index);\n                i++;\n            }\n        }\n        return glyph;\n    };\n    /**\n     * Gets char width.\n     */\n    TtfReader.prototype.getCharWidth = function (code) {\n        var glyphInfo = this.getGlyph(code);\n        glyphInfo = (!glyphInfo.empty) ? glyphInfo : this.getDefaultGlyph();\n        var codeWidth = (!glyphInfo.empty) ? glyphInfo.width : 0;\n        return codeWidth;\n    };\n    TtfReader.prototype.readString = function (length, isUnicode) {\n        if (isUnicode === undefined) {\n            return this.readString(length, false);\n        }\n        else {\n            //let buffer : number[] = this.readBytes(length);\n            var result = '';\n            if (isUnicode) {\n                for (var i = 0; i < length; i++) {\n                    if (i % 2 !== 0) {\n                        result += String.fromCharCode(this.fontData[this.offset]);\n                    }\n                    this.offset += 1;\n                }\n            }\n            else {\n                for (var i = 0; i < length; i++) {\n                    result += String.fromCharCode(this.fontData[this.offset]);\n                    this.offset += 1;\n                }\n            }\n            return result;\n        }\n    };\n    TtfReader.prototype.readFixed = function (offset) {\n        var integer = this.readInt16(offset);\n        var sFraction = this.readInt16(offset + 2);\n        var fraction = sFraction / 16384;\n        return integer + fraction;\n    };\n    TtfReader.prototype.readInt32 = function (offset) {\n        var i1 = this.fontData[offset + 3];\n        var i2 = this.fontData[offset + 2];\n        var i3 = this.fontData[offset + 1];\n        var i4 = this.fontData[offset];\n        this.offset += 4;\n        return i1 + (i2 << 8) + (i3 << 16) + (i4 << 24);\n    };\n    TtfReader.prototype.readUInt32 = function (offset) {\n        var i1 = this.fontData[offset + 3];\n        var i2 = this.fontData[offset + 2];\n        var i3 = this.fontData[offset + 1];\n        var i4 = this.fontData[offset];\n        this.offset += 4;\n        return (i1 | i2 << 8 | i3 << 16 | i4 << 24);\n    };\n    // private readInt16(offset : number) : number {\n    //     let result : number = (this.fontData[offset] << 8) + this.fontData[offset + 1];\n    //     this.offset += 2;\n    //     return result;\n    // }\n    TtfReader.prototype.readInt16 = function (offset) {\n        var result = (this.fontData[offset] << 8) + this.fontData[offset + 1];\n        result = result & (1 << 15) ? result - 0x10000 : result;\n        this.offset += 2;\n        return result;\n    };\n    TtfReader.prototype.readInt64 = function (offset) {\n        var low = this.readInt32(offset + 4);\n        var n = this.readInt32(offset) * 4294967296.0 + low;\n        if (low < 0) {\n            n += 4294967296;\n        }\n        return n;\n    };\n    TtfReader.prototype.readUInt16 = function (offset) {\n        var result = (this.fontData[offset] << 8) | this.fontData[offset + 1];\n        this.offset += 2;\n        return result;\n    };\n    /**\n     * Reads ushort array.\n     */\n    TtfReader.prototype.readUshortArray = function (length) {\n        var buffer = [];\n        for (var i = 0; i < length; i++) {\n            buffer[i] = this.readUInt16(this.offset);\n        }\n        return buffer;\n    };\n    TtfReader.prototype.readBytes = function (length) {\n        var result = [];\n        for (var i = 0; i < length; i++) {\n            result.push(this.fontData[this.offset]);\n            this.offset += 1;\n        }\n        return result;\n    };\n    TtfReader.prototype.readByte = function (offset) {\n        var result = this.fontData[offset];\n        this.offset += 1;\n        return result;\n    };\n    /**\n     * Reads bytes to array in BigEndian order.\n     * @private\n     */\n    TtfReader.prototype.read = function (buffer, index, count) {\n        if (buffer === null) {\n            throw new Error('Argument Null Exception : buffer');\n        }\n        var written = 0;\n        var read = 0;\n        do {\n            for (var i = 0; (i < count - written) && (this.offset + i < this.fontData.length); i++) {\n                buffer[index + i] = this.fontData[this.offset + i];\n            }\n            read = count - written;\n            this.offset += read;\n            written += read;\n        } while (written < count);\n        return { buffer: buffer, written: written };\n    };\n    return TtfReader;\n}());\nexport { TtfReader };\n","/**\n * TrueTypeFont.ts class for EJ2-PDF\n */\nimport { ByteArray } from './../../graphics/images/index';\nimport { TtfReader } from './ttf-reader';\nimport { PdfDictionary, SaveDescendantFontEventHandler, SaveFontDictionaryEventHandler } from './../../primitives/pdf-dictionary';\nimport { SaveFontProgramEventHandler, SaveCmapEventHandler } from './../../primitives/pdf-stream';\nimport { PdfStream } from './../../primitives/pdf-stream';\nimport { PdfArray } from './../../primitives/pdf-array';\nimport { PdfName } from './../../primitives/pdf-name';\nimport { PdfNumber } from './../../primitives/pdf-number';\nimport { PdfString } from './../../primitives/pdf-string';\nimport { PdfReferenceHolder } from './../../primitives/pdf-reference';\nimport { PdfFontMetrics } from './pdf-font-metrics';\nimport { StandardWidthTable } from './pdf-font-metrics';\nimport { DictionaryProperties } from './../../input-output/pdf-dictionary-properties';\nimport { Dictionary } from './../../collections/dictionary';\nimport { FontDescriptorFlags } from './enum';\nimport { RectangleF } from './../../drawing/pdf-drawing';\nimport { Operators } from './../../input-output/pdf-operators';\nvar UnicodeTrueTypeFont = /** @class */ (function () {\n    /* tslint:enable */\n    //Constructors\n    /**\n     * Initializes a new instance of the `PdfTrueTypeFont` class.\n     * @private\n     */\n    function UnicodeTrueTypeFont(base64String, size) {\n        // Fields\n        this.nameString = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        /**\n         * Specifies the Internal variable to store fields of `PdfDictionaryProperties`.\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        /**\n         * Indicates whether the font program is compressed or not.\n         * @private\n         */\n        this.isCompress = false;\n        /**\n         * Indicates whether the font is embedded or not.\n         */\n        this.isEmbedFont = false;\n        /**\n         * Cmap table's start prefix.\n         */\n        /* tslint:disable */\n        this.cmapPrefix = '/CIDInit /ProcSet findresource begin\\n12 dict begin\\nbegincmap' + Operators.newLine + '/CIDSystemInfo << /Registry (Adobe)/Ordering (UCS)/Supplement 0>> def\\n/CMapName ' + '/Adobe-Identity-UCS def\\n/CMapType 2 def\\n1 begincodespacerange' + Operators.newLine;\n        /* tslint:enable */\n        /**\n         * Cmap table's start suffix.\n         */\n        this.cmapEndCodespaceRange = 'endcodespacerange' + Operators.newLine;\n        /**\n         * Cmap's begin range marker.\n         */\n        this.cmapBeginRange = 'beginbfrange' + Operators.newLine;\n        /**\n         * Cmap's end range marker.\n         */\n        this.cmapEndRange = 'endbfrange' + Operators.newLine;\n        /**\n         * Cmap table's end\n         */\n        /* tslint:disable */\n        this.cmapSuffix = 'endbfrange\\nendcmap\\nCMapName currentdict ' + '/CMap defineresource pop\\nend end' + Operators.newLine;\n        if (base64String === null || base64String === undefined) {\n            throw new Error('ArgumentNullException:base64String');\n        }\n        this.fontSize = size;\n        this.fontString = base64String;\n        this.Initialize();\n    }\n    //Implementation\n    /**\n     * Returns width of the char symbol.\n     */\n    UnicodeTrueTypeFont.prototype.getCharWidth = function (charCode) {\n        var codeWidth = this.ttfReader.getCharWidth(charCode);\n        return codeWidth;\n    };\n    /**\n     * Returns width of the text line.\n     */\n    UnicodeTrueTypeFont.prototype.getLineWidth = function (line) {\n        // if (line == null) {\n        //     throw new Error('ArgumentNullException : line');\n        // }\n        var width = 0;\n        for (var i = 0, len = line.length; i < len; i++) {\n            var ch = line[i];\n            var charWidth = this.getCharWidth(ch);\n            width += charWidth;\n        }\n        return width;\n    };\n    /**\n     * Initializes a new instance of the `PdfTrueTypeFont` class.\n     * @private\n     */\n    UnicodeTrueTypeFont.prototype.Initialize = function () {\n        var byteArray = new ByteArray(this.fontString.length);\n        byteArray.writeFromBase64String(this.fontString);\n        this.fontData = byteArray.internalBuffer;\n        this.ttfReader = new TtfReader(this.fontData);\n        this.ttfMetrics = this.ttfReader.metrics;\n    };\n    UnicodeTrueTypeFont.prototype.createInternals = function () {\n        this.fontDictionary = new PdfDictionary();\n        this.fontProgram = new PdfStream();\n        this.cmap = new PdfStream();\n        this.descendantFont = new PdfDictionary();\n        this.metrics = new PdfFontMetrics();\n        this.ttfReader.createInternals();\n        this.ttfMetrics = this.ttfReader.metrics;\n        this.initializeMetrics();\n        // Create all the dictionaries of the font.\n        this.subsetName = this.getFontName();\n        this.createDescendantFont();\n        this.createCmap();\n        this.createFontDictionary();\n        this.createFontProgram();\n    };\n    UnicodeTrueTypeFont.prototype.getInternals = function () {\n        return this.fontDictionary;\n    };\n    /**\n     * Initializes metrics.\n     */\n    UnicodeTrueTypeFont.prototype.initializeMetrics = function () {\n        var ttfMetrics = this.ttfReader.metrics;\n        this.metrics.ascent = ttfMetrics.macAscent;\n        this.metrics.descent = ttfMetrics.macDescent;\n        this.metrics.height = ttfMetrics.macAscent - ttfMetrics.macDescent + ttfMetrics.lineGap;\n        this.metrics.name = ttfMetrics.fontFamily;\n        this.metrics.postScriptName = ttfMetrics.postScriptName;\n        this.metrics.size = this.fontSize;\n        this.metrics.widthTable = new StandardWidthTable(ttfMetrics.widthTable);\n        this.metrics.lineGap = ttfMetrics.lineGap;\n        this.metrics.subScriptSizeFactor = ttfMetrics.subScriptSizeFactor;\n        this.metrics.superscriptSizeFactor = ttfMetrics.superscriptSizeFactor;\n        this.metrics.isBold = ttfMetrics.isBold;\n    };\n    /**\n     * Gets random string.\n     */\n    UnicodeTrueTypeFont.prototype.getFontName = function () {\n        var builder = '';\n        var name;\n        // if (this.isEmbed === false) {\n        for (var i = 0; i < 6; i++) {\n            var index = Math.floor(Math.random() * (25 - 0 + 1)) + 0;\n            builder += this.nameString[index];\n        }\n        builder += '+';\n        // }\n        builder += this.ttfReader.metrics.postScriptName;\n        name = builder.toString();\n        // if (name === '') {\n        //     name = this.ttfReader.metrics.fontFamily;\n        // }\n        name = this.formatName(name);\n        return name;\n    };\n    /**\n     * Generates name of the font.\n     */\n    UnicodeTrueTypeFont.prototype.formatName = function (fontName) {\n        // if (fontName === null) {\n        //     throw new Error('ArgumentNullException : fontName');\n        // }\n        // if (fontName === '') {\n        //     throw new Error('ArgumentOutOfRangeException : fontName, Parameter can not be empty');\n        // }\n        var ret = fontName.replace('(', '#28');\n        ret = ret.replace(')', '#29');\n        ret = ret.replace('[', '#5B');\n        ret = ret.replace(']', '#5D');\n        ret = ret.replace('<', '#3C');\n        ret = ret.replace('>', '#3E');\n        ret = ret.replace('{', '#7B');\n        ret = ret.replace('}', '#7D');\n        ret = ret.replace('/', '#2F');\n        ret = ret.replace('%', '#25');\n        return ret.replace(' ', '#20');\n    };\n    /**\n     * Creates descendant font.\n     */\n    UnicodeTrueTypeFont.prototype.createDescendantFont = function () {\n        // Set property used to clone Font every time\n        this.descendantFont.isFont = true;\n        this.descendantFont.descendantFontBeginSave = new SaveDescendantFontEventHandler(this);\n        this.descendantFont.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font));\n        this.descendantFont.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.cIDFontType2));\n        this.descendantFont.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.subsetName));\n        this.descendantFont.items.setValue(this.dictionaryProperties.cIDToGIDMap, new PdfName(this.dictionaryProperties.identity));\n        this.descendantFont.items.setValue(this.dictionaryProperties.dw, new PdfNumber(1000));\n        this.fontDescriptor = this.createFontDescriptor();\n        this.descendantFont.items.setValue(this.dictionaryProperties.fontDescriptor, new PdfReferenceHolder(this.fontDescriptor));\n        var systemInfo = this.createSystemInfo();\n        this.descendantFont.items.setValue(this.dictionaryProperties.cIDSystemInfo, systemInfo);\n    };\n    /**\n     * Creates font descriptor.\n     */\n    UnicodeTrueTypeFont.prototype.createFontDescriptor = function () {\n        var descriptor = new PdfDictionary();\n        var metrics = this.ttfReader.metrics;\n        // Set property used to clone Font every time\n        descriptor.isFont = true;\n        descriptor.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.fontDescriptor));\n        descriptor.items.setValue(this.dictionaryProperties.fontName, new PdfName(this.subsetName));\n        descriptor.items.setValue(this.dictionaryProperties.flags, new PdfNumber(this.getDescriptorFlags()));\n        descriptor.items.setValue(this.dictionaryProperties.fontBBox, PdfArray.fromRectangle(this.getBoundBox()));\n        descriptor.items.setValue(this.dictionaryProperties.missingWidth, new PdfNumber(metrics.widthTable[32]));\n        descriptor.items.setValue(this.dictionaryProperties.stemV, new PdfNumber(metrics.stemV));\n        descriptor.items.setValue(this.dictionaryProperties.italicAngle, new PdfNumber(metrics.italicAngle));\n        descriptor.items.setValue(this.dictionaryProperties.capHeight, new PdfNumber(metrics.capHeight));\n        descriptor.items.setValue(this.dictionaryProperties.ascent, new PdfNumber(metrics.winAscent));\n        descriptor.items.setValue(this.dictionaryProperties.descent, new PdfNumber(metrics.winDescent));\n        descriptor.items.setValue(this.dictionaryProperties.leading, new PdfNumber(metrics.leading));\n        descriptor.items.setValue(this.dictionaryProperties.avgWidth, new PdfNumber(metrics.widthTable[32]));\n        descriptor.items.setValue(this.dictionaryProperties.fontFile2, new PdfReferenceHolder(this.fontProgram));\n        descriptor.items.setValue(this.dictionaryProperties.maxWidth, new PdfNumber(metrics.widthTable[32]));\n        descriptor.items.setValue(this.dictionaryProperties.xHeight, new PdfNumber(0));\n        descriptor.items.setValue(this.dictionaryProperties.stemH, new PdfNumber(0));\n        return descriptor;\n    };\n    /**\n     * Generates cmap.\n     * @private\n     */\n    UnicodeTrueTypeFont.prototype.createCmap = function () {\n        this.cmap.cmapBeginSave = new SaveCmapEventHandler(this);\n    };\n    /**\n     * Generates font dictionary.\n     */\n    UnicodeTrueTypeFont.prototype.createFontDictionary = function () {\n        // Set property used to clone Font every time\n        this.fontDictionary.isFont = true;\n        this.fontDictionary.fontDictionaryBeginSave = new SaveFontDictionaryEventHandler(this);\n        this.fontDictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font));\n        this.fontDictionary.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.subsetName));\n        this.fontDictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.type0));\n        this.fontDictionary.items.setValue(this.dictionaryProperties.encoding, new PdfName(this.dictionaryProperties.identityH));\n        var descFonts = new PdfArray();\n        var reference = new PdfReferenceHolder(this.descendantFont);\n        // Set property used to clone Font every time\n        descFonts.isFont = true;\n        descFonts.add(reference);\n        this.fontDictionary.items.setValue(this.dictionaryProperties.descendantFonts, descFonts);\n    };\n    /**\n     * Creates font program.\n     */\n    UnicodeTrueTypeFont.prototype.createFontProgram = function () {\n        this.fontProgram.fontProgramBeginSave = new SaveFontProgramEventHandler(this);\n    };\n    /**\n     * Creates system info dictionary for CID font.\n     * @private\n     */\n    UnicodeTrueTypeFont.prototype.createSystemInfo = function () {\n        var systemInfo = new PdfDictionary();\n        systemInfo.items.setValue(this.dictionaryProperties.registry, new PdfString('Adobe'));\n        systemInfo.items.setValue(this.dictionaryProperties.ordering, new PdfString(this.dictionaryProperties.identity));\n        systemInfo.items.setValue(this.dictionaryProperties.supplement, new PdfNumber(0));\n        return systemInfo;\n    };\n    /**\n     * Runs before font Dictionary will be saved.\n     */\n    UnicodeTrueTypeFont.prototype.descendantFontBeginSave = function () {\n        if (this.usedChars !== null && this.usedChars !== undefined && this.usedChars.size() > 0) {\n            var width = this.getDescendantWidth();\n            if (width !== null) {\n                this.descendantFont.items.setValue(this.dictionaryProperties.w, width);\n            }\n        }\n    };\n    /**\n     * Runs before font Dictionary will be saved.\n     */\n    UnicodeTrueTypeFont.prototype.cmapBeginSave = function () {\n        this.generateCmap();\n    };\n    /**\n     * Runs before font Dictionary will be saved.\n     */\n    /* tslint:disable */\n    UnicodeTrueTypeFont.prototype.fontDictionaryBeginSave = function () {\n        if (this.usedChars !== null && this.usedChars !== undefined && this.usedChars.size() > 0 && !this.fontDictionary.containsKey(this.dictionaryProperties.toUnicode)) {\n            this.fontDictionary.items.setValue(this.dictionaryProperties.toUnicode, new PdfReferenceHolder(this.cmap));\n        }\n    };\n    /* tslint:enable */\n    /**\n     * Runs before font program stream save.\n     */\n    UnicodeTrueTypeFont.prototype.fontProgramBeginSave = function () {\n        this.isCompress = true;\n        this.generateFontProgram();\n    };\n    /**\n     * Gets width description pad array for c i d font.\n     */\n    UnicodeTrueTypeFont.prototype.getDescendantWidth = function () {\n        var array = new PdfArray();\n        if (this.usedChars !== null && this.usedChars !== undefined && this.usedChars.size() > 0) {\n            var glyphInfo = [];\n            // if (!this.isEmbedFont) {\n            var keys = this.usedChars.keys();\n            for (var i = 0; i < keys.length; i++) {\n                var chLen = keys[i];\n                var glyph = this.ttfReader.getGlyph(chLen);\n                if (glyph.empty) {\n                    continue;\n                }\n                glyphInfo.push(glyph);\n            }\n            // } else {\n            //     glyphInfo = this.ttfReader.getAllGlyphs();\n            // }\n            glyphInfo.sort(function (a, b) { return a.index - b.index; });\n            var firstGlyphIndex = 0;\n            var lastGlyphIndex = 0;\n            var firstGlyphIndexWasSet = false;\n            var widthDetails = new PdfArray();\n            // if (!this.isEmbedFont) {\n            for (var i = 0; i < glyphInfo.length; i++) {\n                var glyph = glyphInfo[i];\n                if (!firstGlyphIndexWasSet) {\n                    firstGlyphIndexWasSet = true;\n                    firstGlyphIndex = glyph.index;\n                    lastGlyphIndex = glyph.index - 1;\n                }\n                if ((lastGlyphIndex + 1 !== glyph.index || (i + 1 === glyphInfo.length)) && glyphInfo.length > 1) {\n                    // Add glyph index / width.\n                    array.add(new PdfNumber(firstGlyphIndex));\n                    if (i !== 0) {\n                        array.add(widthDetails);\n                    }\n                    firstGlyphIndex = glyph.index;\n                    widthDetails = new PdfArray();\n                }\n                widthDetails.add(new PdfNumber(glyph.width));\n                if (i + 1 === glyphInfo.length) {\n                    array.add(new PdfNumber(firstGlyphIndex));\n                    array.add(widthDetails);\n                }\n                lastGlyphIndex = glyph.index;\n            }\n            // } else {\n            //     for (let i : number = 0; i < glyphInfo.length; i++) {\n            //         let glyph : TtfGlyphInfo = glyphInfo[i];\n            //         if (!firstGlyphIndexWasSet) {\n            //             firstGlyphIndexWasSet = true;\n            //             lastGlyphIndex = glyph.index - 1;\n            //         }\n            //         firstGlyphIndex = glyph.index;\n            //         if ((lastGlyphIndex + 1 === glyph.index || (i + 1 === glyphInfo.length)) && glyphInfo.length > 1) {\n            //             // Add glyph index / width.\n            //             widthDetails.add(new PdfNumber(glyph.width));\n            //             array.add(new PdfNumber(firstGlyphIndex));\n            //             array.add(widthDetails);\n            //             widthDetails = new PdfArray();\n            //         }\n            //         lastGlyphIndex = glyph.index;\n            //     }\n            // }\n        }\n        return array;\n    };\n    /**\n     * Creates cmap.\n     */\n    UnicodeTrueTypeFont.prototype.generateCmap = function () {\n        if (this.usedChars !== null && this.usedChars !== undefined && this.usedChars.size() > 0) {\n            var glyphChars = this.ttfReader.getGlyphChars(this.usedChars);\n            if (glyphChars.size() > 0) {\n                var keys = glyphChars.keys().sort();\n                // add first and last glyph indexes\n                var first = keys[0];\n                var last = keys[keys.length - 1];\n                var middlePart = this.toHexString(first, false) + this.toHexString(last, false) + Operators.newLine;\n                var builder = '';\n                builder += this.cmapPrefix;\n                builder += middlePart;\n                builder += this.cmapEndCodespaceRange;\n                var nextRange = 0;\n                for (var i = 0; i < keys.length; i++) {\n                    if (nextRange === 0) {\n                        if (i !== 0) {\n                            builder += this.cmapEndRange;\n                        }\n                        nextRange = Math.min(100, keys.length - i);\n                        builder += nextRange;\n                        builder += Operators.whiteSpace;\n                        builder += this.cmapBeginRange;\n                    }\n                    nextRange -= 1;\n                    var key = keys[i];\n                    /* tslint:disable */\n                    builder += this.toHexString(key, true) + this.toHexString(key, true) + this.toHexString(glyphChars.getValue(key), true) + '\\n';\n                    /* tslint:enable */\n                }\n                builder += this.cmapSuffix;\n                this.cmap.clearStream();\n                this.cmap.isFont = true;\n                this.cmap.write(builder);\n            }\n        }\n    };\n    /**\n     * Generates font program.\n     */\n    UnicodeTrueTypeFont.prototype.generateFontProgram = function () {\n        var fontProgram = null;\n        this.usedChars = (this.usedChars === null || this.usedChars === undefined) ? new Dictionary() : this.usedChars;\n        this.ttfReader.setOffset(0);\n        fontProgram = this.ttfReader.readFontProgram(this.usedChars);\n        this.fontProgram.clearStream();\n        this.fontProgram.isFont = true;\n        this.fontProgram.writeBytes(fontProgram);\n    };\n    /**\n     * Calculates flags for the font descriptor.\n     * @private\n     */\n    UnicodeTrueTypeFont.prototype.getDescriptorFlags = function () {\n        var flags = 0;\n        var metrics = this.ttfReader.metrics;\n        if (metrics.isFixedPitch) {\n            flags |= FontDescriptorFlags.FixedPitch;\n        }\n        if (metrics.isSymbol) {\n            flags |= FontDescriptorFlags.Symbolic;\n        }\n        else {\n            flags |= FontDescriptorFlags.Nonsymbolic;\n        }\n        if (metrics.isItalic) {\n            flags |= FontDescriptorFlags.Italic;\n        }\n        if (metrics.isBold) {\n            flags |= FontDescriptorFlags.ForceBold;\n        }\n        return flags;\n    };\n    /**\n     * Calculates BoundBox of the descriptor.\n     * @private\n     */\n    UnicodeTrueTypeFont.prototype.getBoundBox = function () {\n        var rect = this.ttfReader.metrics.fontBox;\n        var width = Math.abs(rect.right - rect.left);\n        var height = Math.abs(rect.top - rect.bottom);\n        var rectangle = new RectangleF(rect.left, rect.bottom, width, height);\n        return rectangle;\n    };\n    /**\n     * Converts integer of decimal system to hex integer.\n     */\n    UnicodeTrueTypeFont.prototype.toHexString = function (n, isCaseChange) {\n        var s = n.toString(16);\n        if (isCaseChange) {\n            s = s.toUpperCase();\n        }\n        return '<0000'.substring(0, 5 - s.length) + s + '>';\n    };\n    /**\n     * Stores used symbols.\n     */\n    UnicodeTrueTypeFont.prototype.setSymbols = function (text) {\n        if (text === null) {\n            throw new Error('Argument Null Exception : text');\n        }\n        if (this.usedChars === null || this.usedChars === undefined) {\n            this.usedChars = new Dictionary();\n        }\n        for (var i = 0; i < text.length; i++) {\n            var ch = text[i];\n            this.usedChars.setValue(ch, String.fromCharCode(0));\n        }\n        // else {\n        //     if (text === null) {\n        //         throw new Error('Argument Null Exception : glyphs');\n        //     }\n        //     if (this.usedChars === null || this.usedChars === undefined) {\n        //             this.usedChars = new Dictionary<string, string>();\n        //     }\n        //     for (let i : number = 0; i < text.length; i++) {\n        //         let glyphIndex : number = text[i];\n        //         let glyph : TtfGlyphInfo =  this.ttfReader.getGlyph(glyphIndex);\n        //         if (!glyph == null) {\n        //             let c : string = glyph.charCode.toLocaleString();\n        //             this.usedChars.setValue(c, String.fromCharCode(0));\n        //         }\n        //     }\n        // }\n        if (this.isEmbedFont === false) {\n            this.getDescendantWidth();\n        }\n    };\n    return UnicodeTrueTypeFont;\n}());\nexport { UnicodeTrueTypeFont };\n","/**\n * ArabicShapeRenderer.ts class for EJ2-PDF\n */\nimport { Dictionary } from './../../../collections/dictionary';\nvar ArabicShapeRenderer = /** @class */ (function () {\n    //#endregion\n    //#region Constructor\n    function ArabicShapeRenderer() {\n        //#region Constants\n        this.arabicCharTable = [['\\u0621', '\\uFE80'], ['\\u0622', '\\uFE81', '\\uFE82'],\n            ['\\u0623', '\\uFE83', '\\uFE84'],\n            ['\\u0624', '\\uFE85', '\\uFE86'],\n            ['\\u0625', '\\uFE87', '\\uFE88'],\n            ['\\u0626', '\\uFE89', '\\uFE8A', '\\uFE8B', '\\uFE8C'],\n            ['\\u0627', '\\uFE8D', '\\uFE8E'],\n            ['\\u0628', '\\uFE8F', '\\uFE90', '\\uFE91', '\\uFE92'],\n            ['\\u0629', '\\uFE93', '\\uFE94'],\n            ['\\u062A', '\\uFE95', '\\uFE96', '\\uFE97', '\\uFE98'],\n            ['\\u062B', '\\uFE99', '\\uFE9A', '\\uFE9B', '\\uFE9C'],\n            ['\\u062C', '\\uFE9D', '\\uFE9E', '\\uFE9F', '\\uFEA0'],\n            ['\\u062D', '\\uFEA1', '\\uFEA2', '\\uFEA3', '\\uFEA4'],\n            ['\\u062E', '\\uFEA5', '\\uFEA6', '\\uFEA7', '\\uFEA8'],\n            ['\\u062F', '\\uFEA9', '\\uFEAA'],\n            ['\\u0630', '\\uFEAB', '\\uFEAC'],\n            ['\\u0631', '\\uFEAD', '\\uFEAE'],\n            ['\\u0632', '\\uFEAF', '\\uFEB0'],\n            ['\\u0633', '\\uFEB1', '\\uFEB2', '\\uFEB3', '\\uFEB4'],\n            ['\\u0634', '\\uFEB5', '\\uFEB6', '\\uFEB7', '\\uFEB8'],\n            ['\\u0635', '\\uFEB9', '\\uFEBA', '\\uFEBB', '\\uFEBC'],\n            ['\\u0636', '\\uFEBD', '\\uFEBE', '\\uFEBF', '\\uFEC0'],\n            ['\\u0637', '\\uFEC1', '\\uFEC2', '\\uFEC3', '\\uFEC4'],\n            ['\\u0638', '\\uFEC5', '\\uFEC6', '\\uFEC7', '\\uFEC8'],\n            ['\\u0639', '\\uFEC9', '\\uFECA', '\\uFECB', '\\uFECC'],\n            ['\\u063A', '\\uFECD', '\\uFECE', '\\uFECF', '\\uFED0'],\n            ['\\u0640', '\\u0640', '\\u0640', '\\u0640', '\\u0640'],\n            ['\\u0641', '\\uFED1', '\\uFED2', '\\uFED3', '\\uFED4'],\n            ['\\u0642', '\\uFED5', '\\uFED6', '\\uFED7', '\\uFED8'],\n            ['\\u0643', '\\uFED9', '\\uFEDA', '\\uFEDB', '\\uFEDC'],\n            ['\\u0644', '\\uFEDD', '\\uFEDE', '\\uFEDF', '\\uFEE0'],\n            ['\\u0645', '\\uFEE1', '\\uFEE2', '\\uFEE3', '\\uFEE4'],\n            ['\\u0646', '\\uFEE5', '\\uFEE6', '\\uFEE7', '\\uFEE8'],\n            ['\\u0647', '\\uFEE9', '\\uFEEA', '\\uFEEB', '\\uFEEC'],\n            ['\\u0648', '\\uFEED', '\\uFEEE'],\n            ['\\u0649', '\\uFEEF', '\\uFEF0', '\\uFBE8', '\\uFBE9'],\n            ['\\u064A', '\\uFEF1', '\\uFEF2', '\\uFEF3', '\\uFEF4'],\n            ['\\u0671', '\\uFB50', '\\uFB51'],\n            ['\\u0679', '\\uFB66', '\\uFB67', '\\uFB68', '\\uFB69'],\n            ['\\u067A', '\\uFB5E', '\\uFB5F', '\\uFB60', '\\uFB61'],\n            ['\\u067B', '\\uFB52', '\\uFB53', '\\uFB54', '\\uFB55'],\n            ['\\u067E', '\\uFB56', '\\uFB57', '\\uFB58', '\\uFB59'],\n            ['\\u067F', '\\uFB62', '\\uFB63', '\\uFB64', '\\uFB65'],\n            ['\\u0680', '\\uFB5A', '\\uFB5B', '\\uFB5C', '\\uFB5D'],\n            ['\\u0683', '\\uFB76', '\\uFB77', '\\uFB78', '\\uFB79'],\n            ['\\u0684', '\\uFB72', '\\uFB73', '\\uFB74', '\\uFB75'],\n            ['\\u0686', '\\uFB7A', '\\uFB7B', '\\uFB7C', '\\uFB7D'],\n            ['\\u0687', '\\uFB7E', '\\uFB7F', '\\uFB80', '\\uFB81'],\n            ['\\u0688', '\\uFB88', '\\uFB89'],\n            ['\\u068C', '\\uFB84', '\\uFB85'],\n            ['\\u068D', '\\uFB82', '\\uFB83'],\n            ['\\u068E', '\\uFB86', '\\uFB87'],\n            ['\\u0691', '\\uFB8C', '\\uFB8D'],\n            ['\\u0698', '\\uFB8A', '\\uFB8B'],\n            ['\\u06A4', '\\uFB6A', '\\uFB6B', '\\uFB6C', '\\uFB6D'],\n            ['\\u06A6', '\\uFB6E', '\\uFB6F', '\\uFB70', '\\uFB71'],\n            ['\\u06A9', '\\uFB8E', '\\uFB8F', '\\uFB90', '\\uFB91'],\n            ['\\u06AD', '\\uFBD3', '\\uFBD4', '\\uFBD5', '\\uFBD6'],\n            ['\\u06AF', '\\uFB92', '\\uFB93', '\\uFB94', '\\uFB95'],\n            ['\\u06B1', '\\uFB9A', '\\uFB9B', '\\uFB9C', '\\uFB9D'],\n            ['\\u06B3', '\\uFB96', '\\uFB97', '\\uFB98', '\\uFB99'],\n            ['\\u06BA', '\\uFB9E', '\\uFB9F'],\n            ['\\u06BB', '\\uFBA0', '\\uFBA1', '\\uFBA2', '\\uFBA3'],\n            ['\\u06BE', '\\uFBAA', '\\uFBAB', '\\uFBAC', '\\uFBAD'],\n            ['\\u06C0', '\\uFBA4', '\\uFBA5'],\n            ['\\u06C1', '\\uFBA6', '\\uFBA7', '\\uFBA8', '\\uFBA9'],\n            ['\\u06C5', '\\uFBE0', '\\uFBE1'],\n            ['\\u06C6', '\\uFBD9', '\\uFBDA'],\n            ['\\u06C7', '\\uFBD7', '\\uFBD8'],\n            ['\\u06C8', '\\uFBDB', '\\uFBDC'],\n            ['\\u06C9', '\\uFBE2', '\\uFBE3'],\n            ['\\u06CB', '\\uFBDE', '\\uFBDF'],\n            ['\\u06CC', '\\uFBFC', '\\uFBFD', '\\uFBFE', '\\uFBFF'],\n            ['\\u06D0', '\\uFBE4', '\\uFBE5', '\\uFBE6', '\\uFBE7'],\n            ['\\u06D2', '\\uFBAE', '\\uFBAF'],\n            ['\\u06D3', '\\uFBB0', '\\uFBB1']\n        ];\n        this.alef = '\\u0627';\n        this.alefHamza = '\\u0623';\n        this.alefHamzaBelow = '\\u0625';\n        this.alefMadda = '\\u0622';\n        this.lam = '\\u0644';\n        this.hamza = '\\u0621';\n        this.zeroWidthJoiner = '\\u200D';\n        this.hamzaAbove = '\\u0654';\n        this.hamzaBelow = '\\u0655';\n        this.wawHamza = '\\u0624';\n        this.yehHamza = '\\u0626';\n        this.waw = '\\u0648';\n        this.alefMaksura = '\\u0649';\n        this.yeh = '\\u064A';\n        this.farsiYeh = '\\u06CC';\n        this.shadda = '\\u0651';\n        this.madda = '\\u0653';\n        this.lwa = '\\uFEFB';\n        this.lwawh = '\\uFEF7';\n        this.lwawhb = '\\uFEF9';\n        this.lwawm = '\\uFEF5';\n        this.bwhb = '\\u06D3';\n        this.fathatan = '\\u064B';\n        this.superScriptalef = '\\u0670';\n        this.vowel = 0x1;\n        // #endregion\n        //#region Fields\n        this.arabicMapTable = new Dictionary();\n        for (var i = 0; i < this.arabicCharTable.length; i++) {\n            this.arabicMapTable.setValue(this.arabicCharTable[i][0], this.arabicCharTable[i]);\n        }\n    }\n    //#endregion\n    //#region implementation\n    ArabicShapeRenderer.prototype.getCharacterShape = function (input, index) {\n        if ((input >= this.hamza) && (input <= this.bwhb)) {\n            var value = [];\n            if (this.arabicMapTable.getValue(input)) {\n                value = this.arabicMapTable.getValue(input);\n                return value[index + 1];\n            }\n        }\n        else if (input >= this.lwawm && input <= this.lwa) {\n            return (input);\n        }\n        return input;\n    };\n    ArabicShapeRenderer.prototype.shape = function (text, level) {\n        var builder = '';\n        var str2 = '';\n        for (var i = 0; i < text.length; i++) {\n            var c = text[i];\n            if (c >= '؀' && c <= 'ۿ') {\n                //if(c>= 0x0600.toString() && c<= 0x06FF.toString()) {\n                str2 = str2 + c;\n            }\n            else {\n                if (str2.length > 0) {\n                    var st = this.doShape(str2.toString(), 0);\n                    builder = builder + st;\n                    str2 = '';\n                }\n                builder = builder + c;\n            }\n        }\n        if (str2.length > 0) {\n            var st = this.doShape(str2.toString(), 0);\n            builder = builder + st;\n        }\n        return builder.toString();\n    };\n    ArabicShapeRenderer.prototype.doShape = function (input, level) {\n        var str = '';\n        var ligature = 0;\n        var len = 0;\n        var i = 0;\n        var next = '';\n        var previous = new ArabicShape();\n        var present = new ArabicShape();\n        while (i < input.length) {\n            next = input[i++];\n            ligature = this.ligature(next, present);\n            if (ligature === 0) {\n                var shapeCount = this.getShapeCount(next);\n                len = (shapeCount === 1) ? 0 : 2;\n                if (previous.Shapes > 2) {\n                    len += 1;\n                }\n                len = len % (present.Shapes);\n                present.Value = this.getCharacterShape(present.Value, len);\n                str = this.append(str, previous, level);\n                previous = present;\n                present = new ArabicShape();\n                present.Value = next;\n                present.Shapes = shapeCount;\n                present.Ligature++;\n            }\n        }\n        len = (previous.Shapes > 2) ? 1 : 0;\n        len = len % (present.Shapes);\n        present.Value = this.getCharacterShape(present.Value, len);\n        str = this.append(str, previous, level);\n        str = this.append(str, present, level);\n        return str.toString();\n    };\n    ArabicShapeRenderer.prototype.append = function (builder, shape, level) {\n        if (shape.Value !== '') {\n            builder = builder + shape.Value;\n            shape.Ligature -= 1;\n            if (shape.Type !== '') {\n                if ((level & this.vowel) === 0) {\n                    builder = builder + shape.Type;\n                    shape.Ligature -= 1;\n                }\n                else {\n                    shape.Ligature -= 1;\n                }\n            }\n            if (shape.vowel !== '') {\n                if ((level & this.vowel) === 0) {\n                    builder = builder + shape.vowel;\n                    shape.Ligature -= 1;\n                }\n                else {\n                    shape.Ligature -= 1;\n                }\n            }\n        }\n        return builder;\n    };\n    ArabicShapeRenderer.prototype.ligature = function (value, shape) {\n        if (shape.Value !== '') {\n            var result = 0;\n            if ((value >= this.fathatan && value <= this.hamzaBelow) || value === this.superScriptalef) {\n                result = 1;\n                if ((shape.vowel !== '') && (value !== this.shadda)) {\n                    result = 2;\n                }\n                if (value === this.shadda) {\n                    if (shape.Type == null) {\n                        shape.Type = this.shadda;\n                    }\n                    else {\n                        return 0;\n                    }\n                }\n                else if (value === this.hamzaBelow) {\n                    if (shape.Value === this.alef) {\n                        shape.Value = this.alefHamzaBelow;\n                        result = 2;\n                    }\n                    else if (value === this.lwa) {\n                        shape.Value = this.lwawhb;\n                        result = 2;\n                    }\n                    else {\n                        shape.Type = this.hamzaBelow;\n                    }\n                }\n                else if (value === this.hamzaAbove) {\n                    if (shape.Value === this.alef) {\n                        shape.Value = this.alefHamza;\n                        result = 2;\n                    }\n                    else if (shape.Value === this.lwa) {\n                        shape.Value = this.lwawh;\n                        result = 2;\n                    }\n                    else if (shape.Value === this.waw) {\n                        shape.Value = this.wawHamza;\n                        result = 2;\n                    }\n                    else if (shape.Value === this.yeh || shape.Value === this.alefMaksura || shape.Value === this.farsiYeh) {\n                        shape.Value = this.yehHamza;\n                        result = 2;\n                    }\n                    else {\n                        shape.Type = this.hamzaAbove;\n                    }\n                }\n                else if (value === this.madda) {\n                    if (shape.Value === this.alef) {\n                        shape.Value = this.alefMadda;\n                        result = 2;\n                    }\n                }\n                else {\n                    shape.vowel = value;\n                }\n                if (result === 1) {\n                    shape.Ligature++;\n                }\n                return result;\n            }\n            if (shape.vowel !== '') {\n                return 0;\n            }\n            if (shape.Value === this.lam) {\n                if (value === this.alef) {\n                    shape.Value = this.lwa;\n                    shape.Shapes = 2;\n                    result = 3;\n                }\n                else if (value === this.alefHamza) {\n                    shape.Value = this.lwawh;\n                    shape.Shapes = 2;\n                    result = 3;\n                }\n                else if (value === this.alefHamzaBelow) {\n                    shape.Value = this.lwawhb;\n                    shape.Shapes = 2;\n                    result = 3;\n                }\n                else if (value === this.alefMadda) {\n                    shape.Value = this.lwawm;\n                    shape.Shapes = 2;\n                    result = 3;\n                }\n            }\n            // else if (shape.Value === '') {\n            //     shape.Value = value;\n            //     shape.Shapes = this.getShapeCount(value);\n            //     result = 1;\n            // }\n            return result;\n        }\n        else {\n            return 0;\n        }\n    };\n    ArabicShapeRenderer.prototype.getShapeCount = function (shape) {\n        if ((shape >= this.hamza) && (shape <= this.bwhb) && !((shape >= this.fathatan && shape <= this.hamzaBelow)\n            || shape === this.superScriptalef)) {\n            var c = [];\n            if (this.arabicMapTable.getValue(shape)) {\n                c = this.arabicMapTable.getValue(shape);\n                return c.length - 1;\n            }\n        }\n        else if (shape === this.zeroWidthJoiner) {\n            return 4;\n        }\n        return 1;\n    };\n    return ArabicShapeRenderer;\n}());\nexport { ArabicShapeRenderer };\n//#endregion\n//#region Internals\nvar ArabicShape = /** @class */ (function () {\n    function ArabicShape() {\n        //#region Fields\n        this.shapeValue = '';\n        this.shapeType = '';\n        this.shapeVowel = '';\n        this.shapeLigature = 0;\n        this.shapeShapes = 1;\n        //#endregion\n    }\n    Object.defineProperty(ArabicShape.prototype, \"Value\", {\n        //#endregion\n        //#region Properties \n        /**\n         * Gets or sets the values.\n         * @private\n         */\n        get: function () {\n            return this.shapeValue;\n        },\n        set: function (value) {\n            this.shapeValue = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArabicShape.prototype, \"Type\", {\n        /**\n         * Gets or sets the values.\n         * @private\n         */\n        get: function () {\n            return this.shapeType;\n        },\n        set: function (value) {\n            this.shapeType = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArabicShape.prototype, \"vowel\", {\n        /**\n         * Gets or sets the values.\n         * @private\n         */\n        get: function () {\n            return this.shapeVowel;\n        },\n        set: function (value) {\n            this.shapeVowel = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArabicShape.prototype, \"Ligature\", {\n        /**\n         * Gets or sets the values.\n         * @private\n         */\n        get: function () {\n            return this.shapeLigature;\n        },\n        set: function (value) {\n            this.shapeLigature = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArabicShape.prototype, \"Shapes\", {\n        /**\n         * Gets or sets the values.\n         * @private\n         */\n        get: function () {\n            return this.shapeShapes;\n        },\n        set: function (value) {\n            this.shapeShapes = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ArabicShape;\n}());\nexport { ArabicShape };\n//#endregion\n","/**\n * Bidi.ts class for EJ2-PDF\n */\nimport { Dictionary } from './../../../collections/dictionary';\n/**\n * `Metrics` of the font.\n * @private\n */\nvar Bidi = /** @class */ (function () {\n    //#endregion\n    //#region Constructor\n    function Bidi() {\n        //#region Fields\n        this.indexes = [];\n        this.indexLevels = [];\n        this.mirroringShapeCharacters = new Dictionary();\n        this.update();\n    }\n    //#endregion\n    //#region implementation\n    Bidi.prototype.doMirrorShaping = function (text) {\n        var result = [];\n        for (var i = 0; i < text.length; i++) {\n            if (((this.indexLevels[i] & 1) === 1) && this.mirroringShapeCharacters.containsKey(text[i].charCodeAt(0))) {\n                result[i] = String.fromCharCode(this.mirroringShapeCharacters.getValue(text[i].charCodeAt(0)));\n            }\n            else {\n                result[i] = text[i].toString();\n            }\n        }\n        var res = '';\n        for (var j = 0; j < result.length; j++) {\n            res = res + result[j];\n        }\n        return res;\n    };\n    Bidi.prototype.getLogicalToVisualString = function (inputText, isRtl) {\n        var rtlCharacters = new RtlCharacters();\n        this.indexLevels = rtlCharacters.getVisualOrder(inputText, isRtl);\n        this.setDefaultIndexLevel();\n        this.doOrder(0, this.indexLevels.length - 1);\n        var text = this.doMirrorShaping(inputText);\n        //let text : string = inputText;\n        var resultBuilder = '';\n        for (var i = 0; i < this.indexes.length; i++) {\n            var index = this.indexes[i];\n            resultBuilder += text[index];\n        }\n        return resultBuilder.toString();\n    };\n    Bidi.prototype.setDefaultIndexLevel = function () {\n        for (var i = 0; i < this.indexLevels.length; i++) {\n            this.indexes[i] = i;\n        }\n    };\n    Bidi.prototype.doOrder = function (sIndex, eIndex) {\n        var max = this.indexLevels[sIndex];\n        var min = max;\n        var odd = max;\n        var even = max;\n        for (var i = sIndex + 1; i <= eIndex; ++i) {\n            var data = this.indexLevels[i];\n            if (data > max) {\n                max = data;\n            }\n            else if (data < min) {\n                min = data;\n            }\n            odd &= data;\n            even |= data;\n        }\n        if ((even & 1) === 0) {\n            return;\n        }\n        if ((odd & 1) === 1) {\n            this.reArrange(sIndex, eIndex + 1);\n            return;\n        }\n        min |= 1;\n        while (max >= min) {\n            var pstart = sIndex;\n            /*tslint:disable:no-constant-condition */\n            while (true) {\n                while (pstart <= eIndex) {\n                    if (this.indexLevels[pstart] >= max) {\n                        break;\n                    }\n                    pstart += 1;\n                }\n                if (pstart > eIndex) {\n                    break;\n                }\n                var pend = pstart + 1;\n                while (pend <= eIndex) {\n                    if (this.indexLevels[pend] < max) {\n                        break;\n                    }\n                    pend += 1;\n                }\n                this.reArrange(pstart, pend);\n                pstart = pend + 1;\n            }\n            max -= 1;\n        }\n    };\n    Bidi.prototype.reArrange = function (i, j) {\n        var length = (i + j) / 2;\n        --j;\n        for (; i < length; ++i, --j) {\n            var temp = this.indexes[i];\n            this.indexes[i] = this.indexes[j];\n            this.indexes[j] = temp;\n        }\n    };\n    Bidi.prototype.update = function () {\n        this.mirroringShapeCharacters.setValue(40, 41);\n        this.mirroringShapeCharacters.setValue(41, 40);\n        this.mirroringShapeCharacters.setValue(60, 62);\n        this.mirroringShapeCharacters.setValue(62, 60);\n        this.mirroringShapeCharacters.setValue(91, 93);\n        this.mirroringShapeCharacters.setValue(93, 91);\n        this.mirroringShapeCharacters.setValue(123, 125);\n        this.mirroringShapeCharacters.setValue(125, 123);\n        this.mirroringShapeCharacters.setValue(171, 187);\n        this.mirroringShapeCharacters.setValue(187, 171);\n        this.mirroringShapeCharacters.setValue(8249, 8250);\n        this.mirroringShapeCharacters.setValue(8250, 8249);\n        this.mirroringShapeCharacters.setValue(8261, 8262);\n        this.mirroringShapeCharacters.setValue(8262, 8261);\n        this.mirroringShapeCharacters.setValue(8317, 8318);\n        this.mirroringShapeCharacters.setValue(8318, 8317);\n        this.mirroringShapeCharacters.setValue(8333, 8334);\n        this.mirroringShapeCharacters.setValue(8334, 8333);\n        this.mirroringShapeCharacters.setValue(8712, 8715);\n        this.mirroringShapeCharacters.setValue(8713, 8716);\n        this.mirroringShapeCharacters.setValue(8714, 8717);\n        this.mirroringShapeCharacters.setValue(8715, 8712);\n        this.mirroringShapeCharacters.setValue(8716, 8713);\n        this.mirroringShapeCharacters.setValue(8717, 8714);\n        this.mirroringShapeCharacters.setValue(8725, 10741);\n        this.mirroringShapeCharacters.setValue(8764, 8765);\n        this.mirroringShapeCharacters.setValue(8765, 8764);\n        this.mirroringShapeCharacters.setValue(8771, 8909);\n        this.mirroringShapeCharacters.setValue(8786, 8787);\n        this.mirroringShapeCharacters.setValue(8787, 8786);\n        this.mirroringShapeCharacters.setValue(8788, 8789);\n        this.mirroringShapeCharacters.setValue(8789, 8788);\n        this.mirroringShapeCharacters.setValue(8804, 8805);\n        this.mirroringShapeCharacters.setValue(8805, 8804);\n        this.mirroringShapeCharacters.setValue(8806, 8807);\n        this.mirroringShapeCharacters.setValue(8807, 8806);\n        this.mirroringShapeCharacters.setValue(8808, 8809);\n        this.mirroringShapeCharacters.setValue(8809, 8808);\n        this.mirroringShapeCharacters.setValue(8810, 8811);\n        this.mirroringShapeCharacters.setValue(8811, 8810);\n        this.mirroringShapeCharacters.setValue(8814, 8815);\n        this.mirroringShapeCharacters.setValue(8815, 8814);\n        this.mirroringShapeCharacters.setValue(8816, 8817);\n        this.mirroringShapeCharacters.setValue(8817, 8816);\n        this.mirroringShapeCharacters.setValue(8818, 8819);\n        this.mirroringShapeCharacters.setValue(8819, 8818);\n        this.mirroringShapeCharacters.setValue(8820, 8821);\n        this.mirroringShapeCharacters.setValue(8821, 8820);\n        this.mirroringShapeCharacters.setValue(8822, 8823);\n        this.mirroringShapeCharacters.setValue(8823, 8822);\n        this.mirroringShapeCharacters.setValue(8824, 8825);\n        this.mirroringShapeCharacters.setValue(8825, 8824);\n        this.mirroringShapeCharacters.setValue(8826, 8827);\n        this.mirroringShapeCharacters.setValue(8827, 8826);\n        this.mirroringShapeCharacters.setValue(8828, 8829);\n        this.mirroringShapeCharacters.setValue(8829, 8828);\n        this.mirroringShapeCharacters.setValue(8830, 8831);\n        this.mirroringShapeCharacters.setValue(8831, 8830);\n        this.mirroringShapeCharacters.setValue(8832, 8833);\n        this.mirroringShapeCharacters.setValue(8833, 8832);\n        this.mirroringShapeCharacters.setValue(8834, 8835);\n        this.mirroringShapeCharacters.setValue(8835, 8834);\n        this.mirroringShapeCharacters.setValue(8836, 8837);\n        this.mirroringShapeCharacters.setValue(8837, 8836);\n        this.mirroringShapeCharacters.setValue(8838, 8839);\n        this.mirroringShapeCharacters.setValue(8839, 8838);\n        this.mirroringShapeCharacters.setValue(8840, 8841);\n        this.mirroringShapeCharacters.setValue(8841, 8840);\n        this.mirroringShapeCharacters.setValue(8842, 8843);\n        this.mirroringShapeCharacters.setValue(8843, 8842);\n        this.mirroringShapeCharacters.setValue(8847, 8848);\n        this.mirroringShapeCharacters.setValue(8848, 8847);\n        this.mirroringShapeCharacters.setValue(8849, 8850);\n        this.mirroringShapeCharacters.setValue(8850, 8849);\n        this.mirroringShapeCharacters.setValue(8856, 10680);\n        this.mirroringShapeCharacters.setValue(8866, 8867);\n        this.mirroringShapeCharacters.setValue(8867, 8866);\n        this.mirroringShapeCharacters.setValue(8870, 10974);\n        this.mirroringShapeCharacters.setValue(8872, 10980);\n        this.mirroringShapeCharacters.setValue(8873, 10979);\n        this.mirroringShapeCharacters.setValue(8875, 10981);\n        this.mirroringShapeCharacters.setValue(8880, 8881);\n        this.mirroringShapeCharacters.setValue(8881, 8880);\n        this.mirroringShapeCharacters.setValue(8882, 8883);\n        this.mirroringShapeCharacters.setValue(8883, 8882);\n        this.mirroringShapeCharacters.setValue(8884, 8885);\n        this.mirroringShapeCharacters.setValue(8885, 8884);\n        /*tslint:disable:max-func-body-length */\n        this.mirroringShapeCharacters.setValue(8886, 8887);\n        this.mirroringShapeCharacters.setValue(8887, 8886);\n        this.mirroringShapeCharacters.setValue(8905, 8906);\n        this.mirroringShapeCharacters.setValue(8906, 8905);\n        this.mirroringShapeCharacters.setValue(8907, 8908);\n        this.mirroringShapeCharacters.setValue(8908, 8907);\n        this.mirroringShapeCharacters.setValue(8909, 8771);\n        this.mirroringShapeCharacters.setValue(8912, 8913);\n        this.mirroringShapeCharacters.setValue(8913, 8912);\n        this.mirroringShapeCharacters.setValue(8918, 8919);\n        this.mirroringShapeCharacters.setValue(8919, 8918);\n        this.mirroringShapeCharacters.setValue(8920, 8921);\n        this.mirroringShapeCharacters.setValue(8921, 8920);\n        this.mirroringShapeCharacters.setValue(8922, 8923);\n        this.mirroringShapeCharacters.setValue(8923, 8922);\n        this.mirroringShapeCharacters.setValue(8924, 8925);\n        this.mirroringShapeCharacters.setValue(8925, 8924);\n        this.mirroringShapeCharacters.setValue(8926, 8927);\n        this.mirroringShapeCharacters.setValue(8927, 8926);\n        this.mirroringShapeCharacters.setValue(8928, 8929);\n        this.mirroringShapeCharacters.setValue(8929, 8928);\n        this.mirroringShapeCharacters.setValue(8930, 8931);\n        this.mirroringShapeCharacters.setValue(8931, 8930);\n        this.mirroringShapeCharacters.setValue(8932, 8933);\n        this.mirroringShapeCharacters.setValue(8933, 8932);\n        this.mirroringShapeCharacters.setValue(8934, 8935);\n        this.mirroringShapeCharacters.setValue(8935, 8934);\n        this.mirroringShapeCharacters.setValue(8936, 8937);\n        this.mirroringShapeCharacters.setValue(8937, 8936);\n        this.mirroringShapeCharacters.setValue(8938, 8939);\n        this.mirroringShapeCharacters.setValue(8939, 8938);\n        this.mirroringShapeCharacters.setValue(8940, 8941);\n        this.mirroringShapeCharacters.setValue(8941, 8940);\n        this.mirroringShapeCharacters.setValue(8944, 8945);\n        this.mirroringShapeCharacters.setValue(8945, 8944);\n        this.mirroringShapeCharacters.setValue(8946, 8954);\n        this.mirroringShapeCharacters.setValue(8947, 8955);\n        this.mirroringShapeCharacters.setValue(8948, 8956);\n        this.mirroringShapeCharacters.setValue(8950, 8957);\n        this.mirroringShapeCharacters.setValue(8951, 8958);\n        this.mirroringShapeCharacters.setValue(8954, 8946);\n        this.mirroringShapeCharacters.setValue(8955, 8947);\n        this.mirroringShapeCharacters.setValue(8956, 8948);\n        this.mirroringShapeCharacters.setValue(8957, 8950);\n        this.mirroringShapeCharacters.setValue(8958, 8951);\n        this.mirroringShapeCharacters.setValue(8968, 8969);\n        this.mirroringShapeCharacters.setValue(8969, 8968);\n        this.mirroringShapeCharacters.setValue(8970, 8971);\n        this.mirroringShapeCharacters.setValue(8971, 8970);\n        this.mirroringShapeCharacters.setValue(9001, 9002);\n        this.mirroringShapeCharacters.setValue(9002, 9001);\n        this.mirroringShapeCharacters.setValue(10088, 10089);\n        this.mirroringShapeCharacters.setValue(10089, 10088);\n        this.mirroringShapeCharacters.setValue(10090, 10091);\n        this.mirroringShapeCharacters.setValue(10091, 10090);\n        this.mirroringShapeCharacters.setValue(10092, 10093);\n        this.mirroringShapeCharacters.setValue(10093, 10092);\n        this.mirroringShapeCharacters.setValue(10094, 10095);\n        this.mirroringShapeCharacters.setValue(10095, 10094);\n        this.mirroringShapeCharacters.setValue(10096, 10097);\n        this.mirroringShapeCharacters.setValue(10097, 10096);\n        this.mirroringShapeCharacters.setValue(10098, 10099);\n        this.mirroringShapeCharacters.setValue(10099, 10098);\n        this.mirroringShapeCharacters.setValue(10100, 10101);\n        this.mirroringShapeCharacters.setValue(10101, 10100);\n        this.mirroringShapeCharacters.setValue(10197, 10198);\n        this.mirroringShapeCharacters.setValue(10198, 10197);\n        this.mirroringShapeCharacters.setValue(10205, 10206);\n        this.mirroringShapeCharacters.setValue(10206, 10205);\n        this.mirroringShapeCharacters.setValue(10210, 10211);\n        this.mirroringShapeCharacters.setValue(10211, 10210);\n        this.mirroringShapeCharacters.setValue(10212, 10213);\n        this.mirroringShapeCharacters.setValue(10213, 10212);\n        this.mirroringShapeCharacters.setValue(10214, 10215);\n        this.mirroringShapeCharacters.setValue(10215, 10214);\n        this.mirroringShapeCharacters.setValue(10216, 10217);\n        this.mirroringShapeCharacters.setValue(10217, 10216);\n        this.mirroringShapeCharacters.setValue(10218, 10219);\n        this.mirroringShapeCharacters.setValue(10219, 10218);\n        this.mirroringShapeCharacters.setValue(10627, 10628);\n        this.mirroringShapeCharacters.setValue(10628, 10627);\n        this.mirroringShapeCharacters.setValue(10629, 10630);\n        this.mirroringShapeCharacters.setValue(10630, 10629);\n        this.mirroringShapeCharacters.setValue(10631, 10632);\n        this.mirroringShapeCharacters.setValue(10632, 10631);\n        this.mirroringShapeCharacters.setValue(10633, 10634);\n        this.mirroringShapeCharacters.setValue(10634, 10633);\n        this.mirroringShapeCharacters.setValue(10635, 10636);\n        this.mirroringShapeCharacters.setValue(10636, 10635);\n        this.mirroringShapeCharacters.setValue(10637, 10640);\n        this.mirroringShapeCharacters.setValue(10638, 10639);\n        this.mirroringShapeCharacters.setValue(10639, 10638);\n        this.mirroringShapeCharacters.setValue(10640, 10637);\n        this.mirroringShapeCharacters.setValue(10641, 10642);\n        this.mirroringShapeCharacters.setValue(10642, 10641);\n        this.mirroringShapeCharacters.setValue(10643, 10644);\n        this.mirroringShapeCharacters.setValue(10644, 10643);\n        this.mirroringShapeCharacters.setValue(10645, 10646);\n        this.mirroringShapeCharacters.setValue(10646, 10645);\n        this.mirroringShapeCharacters.setValue(10647, 10648);\n        this.mirroringShapeCharacters.setValue(10648, 10647);\n        this.mirroringShapeCharacters.setValue(10680, 8856);\n        this.mirroringShapeCharacters.setValue(10688, 10689);\n        this.mirroringShapeCharacters.setValue(10689, 10688);\n        this.mirroringShapeCharacters.setValue(10692, 10693);\n        this.mirroringShapeCharacters.setValue(10693, 10692);\n        this.mirroringShapeCharacters.setValue(10703, 10704);\n        this.mirroringShapeCharacters.setValue(10704, 10703);\n        this.mirroringShapeCharacters.setValue(10705, 10706);\n        this.mirroringShapeCharacters.setValue(10706, 10705);\n        this.mirroringShapeCharacters.setValue(10708, 10709);\n        this.mirroringShapeCharacters.setValue(10709, 10708);\n        this.mirroringShapeCharacters.setValue(10712, 10713);\n        this.mirroringShapeCharacters.setValue(10713, 10712);\n        this.mirroringShapeCharacters.setValue(10714, 10715);\n        this.mirroringShapeCharacters.setValue(10715, 10714);\n        this.mirroringShapeCharacters.setValue(10741, 8725);\n        this.mirroringShapeCharacters.setValue(10744, 10745);\n        this.mirroringShapeCharacters.setValue(10745, 10744);\n        this.mirroringShapeCharacters.setValue(10748, 10749);\n        this.mirroringShapeCharacters.setValue(10749, 10748);\n        this.mirroringShapeCharacters.setValue(10795, 10796);\n        this.mirroringShapeCharacters.setValue(10796, 10795);\n        this.mirroringShapeCharacters.setValue(10797, 10796);\n        this.mirroringShapeCharacters.setValue(10798, 10797);\n        this.mirroringShapeCharacters.setValue(10804, 10805);\n        this.mirroringShapeCharacters.setValue(10805, 10804);\n        this.mirroringShapeCharacters.setValue(10812, 10813);\n        this.mirroringShapeCharacters.setValue(10813, 10812);\n        this.mirroringShapeCharacters.setValue(10852, 10853);\n        this.mirroringShapeCharacters.setValue(10853, 10852);\n        this.mirroringShapeCharacters.setValue(10873, 10874);\n        this.mirroringShapeCharacters.setValue(10874, 10873);\n        this.mirroringShapeCharacters.setValue(10877, 10878);\n        this.mirroringShapeCharacters.setValue(10878, 10877);\n        this.mirroringShapeCharacters.setValue(10879, 10880);\n        this.mirroringShapeCharacters.setValue(10880, 10879);\n        this.mirroringShapeCharacters.setValue(10881, 10882);\n        this.mirroringShapeCharacters.setValue(10882, 10881);\n        this.mirroringShapeCharacters.setValue(10883, 10884);\n        this.mirroringShapeCharacters.setValue(10884, 10883);\n        this.mirroringShapeCharacters.setValue(10891, 10892);\n        this.mirroringShapeCharacters.setValue(10892, 10891);\n        this.mirroringShapeCharacters.setValue(10897, 10898);\n        this.mirroringShapeCharacters.setValue(10898, 10897);\n        this.mirroringShapeCharacters.setValue(10899, 10900);\n        this.mirroringShapeCharacters.setValue(10900, 10899);\n        this.mirroringShapeCharacters.setValue(10901, 10902);\n        this.mirroringShapeCharacters.setValue(10902, 10901);\n        this.mirroringShapeCharacters.setValue(10903, 10904);\n        this.mirroringShapeCharacters.setValue(10904, 10903);\n        this.mirroringShapeCharacters.setValue(10905, 10906);\n        this.mirroringShapeCharacters.setValue(10906, 10905);\n        this.mirroringShapeCharacters.setValue(10907, 10908);\n        this.mirroringShapeCharacters.setValue(10908, 10907);\n        this.mirroringShapeCharacters.setValue(10913, 10914);\n        this.mirroringShapeCharacters.setValue(10914, 10913);\n        this.mirroringShapeCharacters.setValue(10918, 10919);\n        this.mirroringShapeCharacters.setValue(10919, 10918);\n        this.mirroringShapeCharacters.setValue(10920, 10921);\n        this.mirroringShapeCharacters.setValue(10921, 10920);\n        this.mirroringShapeCharacters.setValue(10922, 10923);\n        this.mirroringShapeCharacters.setValue(10923, 10922);\n        this.mirroringShapeCharacters.setValue(10924, 10925);\n        this.mirroringShapeCharacters.setValue(10925, 10924);\n        this.mirroringShapeCharacters.setValue(10927, 10928);\n        this.mirroringShapeCharacters.setValue(10928, 10927);\n        this.mirroringShapeCharacters.setValue(10931, 10932);\n        this.mirroringShapeCharacters.setValue(10932, 10931);\n        this.mirroringShapeCharacters.setValue(10939, 10940);\n        this.mirroringShapeCharacters.setValue(10940, 10939);\n        this.mirroringShapeCharacters.setValue(10941, 10942);\n        this.mirroringShapeCharacters.setValue(10942, 10941);\n        this.mirroringShapeCharacters.setValue(10943, 10944);\n        this.mirroringShapeCharacters.setValue(10944, 10943);\n        this.mirroringShapeCharacters.setValue(10945, 10946);\n        this.mirroringShapeCharacters.setValue(10946, 10945);\n        this.mirroringShapeCharacters.setValue(10947, 10948);\n        this.mirroringShapeCharacters.setValue(10948, 10947);\n        this.mirroringShapeCharacters.setValue(10949, 10950);\n        this.mirroringShapeCharacters.setValue(10950, 10949);\n        this.mirroringShapeCharacters.setValue(10957, 10958);\n        this.mirroringShapeCharacters.setValue(10958, 10957);\n        this.mirroringShapeCharacters.setValue(10959, 10960);\n        this.mirroringShapeCharacters.setValue(10960, 10959);\n        this.mirroringShapeCharacters.setValue(10961, 10962);\n        this.mirroringShapeCharacters.setValue(10962, 10961);\n        this.mirroringShapeCharacters.setValue(10963, 10964);\n        this.mirroringShapeCharacters.setValue(10964, 10963);\n        this.mirroringShapeCharacters.setValue(10965, 10966);\n        this.mirroringShapeCharacters.setValue(10966, 10965);\n        this.mirroringShapeCharacters.setValue(10974, 8870);\n        this.mirroringShapeCharacters.setValue(10979, 8873);\n        this.mirroringShapeCharacters.setValue(10980, 8872);\n        this.mirroringShapeCharacters.setValue(10981, 8875);\n        this.mirroringShapeCharacters.setValue(10988, 10989);\n        this.mirroringShapeCharacters.setValue(10989, 10988);\n        this.mirroringShapeCharacters.setValue(10999, 11000);\n        this.mirroringShapeCharacters.setValue(11000, 10999);\n        this.mirroringShapeCharacters.setValue(11001, 11002);\n        this.mirroringShapeCharacters.setValue(11002, 11001);\n        this.mirroringShapeCharacters.setValue(12296, 12297);\n        this.mirroringShapeCharacters.setValue(12297, 12296);\n        this.mirroringShapeCharacters.setValue(12298, 12299);\n        this.mirroringShapeCharacters.setValue(12299, 12298);\n        this.mirroringShapeCharacters.setValue(12300, 12301);\n        this.mirroringShapeCharacters.setValue(12301, 12300);\n        this.mirroringShapeCharacters.setValue(12302, 12303);\n        this.mirroringShapeCharacters.setValue(12303, 12302);\n        this.mirroringShapeCharacters.setValue(12304, 12305);\n        this.mirroringShapeCharacters.setValue(12305, 12304);\n        this.mirroringShapeCharacters.setValue(12308, 12309);\n        this.mirroringShapeCharacters.setValue(12309, 12308);\n        this.mirroringShapeCharacters.setValue(12310, 12311);\n        this.mirroringShapeCharacters.setValue(12311, 12310);\n        this.mirroringShapeCharacters.setValue(12312, 12313);\n        this.mirroringShapeCharacters.setValue(12313, 12312);\n        this.mirroringShapeCharacters.setValue(12314, 12315);\n        this.mirroringShapeCharacters.setValue(12315, 12314);\n        this.mirroringShapeCharacters.setValue(65288, 65289);\n        this.mirroringShapeCharacters.setValue(65289, 65288);\n        this.mirroringShapeCharacters.setValue(65308, 65310);\n        this.mirroringShapeCharacters.setValue(65310, 65308);\n        this.mirroringShapeCharacters.setValue(65339, 65341);\n        this.mirroringShapeCharacters.setValue(65341, 65339);\n        this.mirroringShapeCharacters.setValue(65371, 65373);\n        this.mirroringShapeCharacters.setValue(65373, 65371);\n        this.mirroringShapeCharacters.setValue(65375, 65376);\n        this.mirroringShapeCharacters.setValue(65376, 65375);\n        this.mirroringShapeCharacters.setValue(65378, 65379);\n        this.mirroringShapeCharacters.setValue(65379, 65378);\n    };\n    return Bidi;\n}());\nexport { Bidi };\nvar RtlCharacters = /** @class */ (function () {\n    //#endregion\n    //#region constructors\n    function RtlCharacters() {\n        //#region fields\n        /// <summary>\n        /// Specifies the character types.\n        /// </summary>\n        this.types = [];\n        /// <summary>\n        /// Specifies the text order (RTL or LTR).\n        /// </summary>\n        this.textOrder = -1;\n        /// <summary>\n        /// Specifies the RTL character types.\n        /// </summary>\n        /* tslint:disable-next-line:prefer-array-literal */\n        this.rtlCharacterTypes = new Array(65536);\n        //#endregion\n        //#region constants\n        /// <summary>\n        /// Left-to-Right (Non-European or non-Arabic digits).\n        /// </summary>\n        this.L = 0;\n        /// <summary>\n        /// Left-to-Right Embedding\n        /// </summary>\n        this.LRE = 1;\n        /// <summary>\n        /// Left-to-Right Override\n        /// </summary>\n        this.LRO = 2;\n        /// <summary>\n        /// Right-to-Left (Hebrew alphabet, and related punctuation).\n        /// </summary>\n        this.R = 3;\n        /// <summary>\n        /// Right-to-Left Arabic \n        /// </summary>\n        this.AL = 4;\n        /// <summary>\n        /// Right-to-Left Embedding.\n        /// </summary>\n        this.RLE = 5;\n        /// <summary>\n        /// Right-to-Left Override\n        /// </summary>\n        this.RLO = 6;\n        /// <summary>\n        /// Pop Directional Format\n        /// </summary>\n        this.PDF = 7;\n        /// <summary>\n        /// European Number (European digits, Eastern Arabic-Indic digits).\n        /// </summary>\n        this.EN = 8;\n        /// <summary>\n        /// European Number Separator (Plus sign, Minus sign).\n        /// </summary>\n        this.ES = 9;\n        /// <summary>\n        /// European Number Terminator (Degree sign, currency symbols).\n        /// </summary>\n        this.ET = 10;\n        /// <summary>\n        /// Arabic Number (Arabic-Indic digits, Arabic decimal and thousands separators).\n        /// </summary>\n        this.AN = 11;\n        /// <summary>\n        /// Common Number Separator (Colon, Comma, Full Stop, No-Break Space.\n        /// </summary>\n        this.CS = 12;\n        /// <summary>\n        /// Nonspacing Mark (Characters with the General_Category values).\n        /// </summary>\n        this.NSM = 13;\n        /// <summary>\n        /// Boundary Neutral (Default ignorables, non-characters, and control characters, other than those explicitly given other types.)\n        /// </summary>\n        this.BN = 14;\n        /// <summary>\n        /// Paragraph Separator (Paragraph separator, appropriate Newline Functions, higher-level protocol paragraph determination).\n        /// </summary>\n        this.B = 15;\n        /// <summary>\n        /// \tSegment Separator (tab).\n        /// </summary>\n        this.S = 16;\n        /// <summary>\n        /// Whitespace (Space, Figure space, Line separator, Form feed, General Punctuation spaces).\n        /// </summary>\n        this.WS = 17;\n        /// <summary>\n        /// Other Neutrals (All other characters, including object replacement character).\n        /// </summary>\n        this.ON = 18;\n        /// <summary>\n        /// RTL character types.\n        /// </summary>\n        this.charTypes = [\n            this.L, this.EN, this.BN, this.ES, this.ES, this.S, this.ET, this.ET, this.B, this.AN, this.AN, this.S, this.CS, this.CS,\n            this.WS, this.NSM, this.NSM, this.B, this.BN, 27, this.BN, 28, 30, this.B, 31, 31, this.S, 32, 32, this.WS, 33, 34,\n            this.ON, 35, 37, this.ET, 38, 42, this.ON, 43, 43, this.ET, 44, 44, this.CS, 45, 45, this.ET, 46, 46, this.CS,\n            47, 47, this.CS, 48, 57, this.EN, 58, 58, this.CS, 59, 64, this.ON, 65, 90, this.L, 91, 96, this.ON, 97, 122, this.L,\n            123, 126, this.ON, 127, 132, this.BN, 133, 133, this.B, 134, 159, this.BN, 160, 160, this.CS,\n            161, 161, this.ON, 162, 165, this.ET, 166, 169, this.ON, 170, 170, this.L, 171, 175, this.ON,\n            176, 177, this.ET, 178, 179, this.EN, 180, 180, this.ON, 181, 181, this.L, 182, 184, this.ON,\n            185, 185, this.EN, 186, 186, this.L, 187, 191, this.ON, 192, 214, this.L, 215, 215, this.ON,\n            216, 246, this.L, 247, 247, this.ON, 248, 696, this.L, 697, 698, this.ON, 699, 705, this.L,\n            706, 719, this.ON, 720, 721, this.L, 722, 735, this.ON, 736, 740, this.L, 741, 749, this.ON,\n            750, 750, this.L, 751, 767, this.ON, 768, 855, this.NSM, 856, 860, this.L, 861, 879, this.NSM,\n            880, 883, this.L, 884, 885, this.ON, 886, 893, this.L, 894, 894, this.ON, 895, 899, this.L,\n            900, 901, this.ON, 902, 902, this.L, 903, 903, this.ON, 904, 1013, this.L, 1014, 1014, this.ON,\n            1015, 1154, this.L, 1155, 1158, this.NSM, 1159, 1159, this.L, 1160, 1161, this.NSM,\n            1162, 1417, this.L, 1418, 1418, this.ON, 1419, 1424, this.L, 1425, 1441, this.NSM,\n            1442, 1442, this.L, 1443, 1465, this.NSM, 1466, 1466, this.L, 1467, 1469, this.NSM,\n            1470, 1470, this.R, 1471, 1471, this.NSM, 1472, 1472, this.R, 1473, 1474, this.NSM,\n            1475, 1475, this.R, 1476, 1476, this.NSM, 1477, 1487, this.L, 1488, 1514, this.R,\n            1515, 1519, this.L, 1520, 1524, this.R, 1525, 1535, this.L, 1536, 1539, this.AL,\n            1540, 1547, this.L, 1548, 1548, this.CS, 1549, 1549, this.AL, 1550, 1551, this.ON,\n            1552, 1557, this.NSM, 1558, 1562, this.L, 1563, 1563, this.AL, 1564, 1566, this.L,\n            1567, 1567, this.AL, 1568, 1568, this.L, 1569, 1594, this.AL, 1595, 1599, this.L,\n            1600, 1610, this.AL, 1611, 1624, this.NSM, 1625, 1631, this.L, 1632, 1641, this.AN,\n            1642, 1642, this.ET, 1643, 1644, this.AN, 1645, 1647, this.AL, 1648, 1648, this.NSM,\n            1649, 1749, this.AL, 1750, 1756, this.NSM, 1757, 1757, this.AL, 1758, 1764, this.NSM,\n            1765, 1766, this.AL, 1767, 1768, this.NSM, 1769, 1769, this.ON, 1770, 1773, this.NSM,\n            1774, 1775, this.AL, 1776, 1785, this.EN, 1786, 1805, this.AL, 1806, 1806, this.L,\n            1807, 1807, this.BN, 1808, 1808, this.AL, 1809, 1809, this.NSM, 1810, 1839, this.AL,\n            1840, 1866, this.NSM, 1867, 1868, this.L, 1869, 1871, this.AL, 1872, 1919, this.L,\n            1920, 1957, this.AL, 1958, 1968, this.NSM, 1969, 1969, this.AL, 1970, 2304, this.L,\n            2305, 2306, this.NSM, 2307, 2363, this.L, 2364, 2364, this.NSM, 2365, 2368, this.L,\n            2369, 2376, this.NSM, 2377, 2380, this.L, 2381, 2381, this.NSM, 2382, 2384, this.L,\n            2385, 2388, this.NSM, 2389, 2401, this.L, 2402, 2403, this.NSM, 2404, 2432, this.L,\n            2433, 2433, this.NSM, 2434, 2491, this.L, 2492, 2492, this.NSM, 2493, 2496, this.L,\n            2497, 2500, this.NSM, 2501, 2508, this.L, 2509, 2509, this.NSM, 2510, 2529, this.L,\n            2530, 2531, this.NSM, 2532, 2545, this.L, 2546, 2547, this.ET, 2548, 2560, this.L,\n            2561, 2562, this.NSM, 2563, 2619, this.L, 2620, 2620, this.NSM, 2621, 2624, this.L,\n            2625, 2626, this.NSM, 2627, 2630, this.L, 2631, 2632, this.NSM, 2633, 2634, this.L,\n            2635, 2637, this.NSM, 2638, 2671, this.L, 2672, 2673, this.NSM, 2674, 2688, this.L,\n            2689, 2690, this.NSM, 2691, 2747, this.L, 2748, 2748, this.NSM, 2749, 2752, this.L,\n            2753, 2757, this.NSM, 2758, 2758, this.L, 2759, 2760, this.NSM, 2761, 2764, this.L,\n            2765, 2765, this.NSM, 2766, 2785, this.L, 2786, 2787, this.NSM, 2788, 2800, this.L,\n            2801, 2801, this.ET, 2802, 2816, this.L, 2817, 2817, this.NSM, 2818, 2875, this.L,\n            2876, 2876, this.NSM, 2877, 2878, this.L, 2879, 2879, this.NSM, 2880, 2880, this.L,\n            2881, 2883, this.NSM, 2884, 2892, this.L, 2893, 2893, this.NSM, 2894, 2901, this.L,\n            2902, 2902, this.NSM, 2903, 2945, this.L, 2946, 2946, this.NSM, 2947, 3007, this.L,\n            3008, 3008, this.NSM, 3009, 3020, this.L, 3021, 3021, this.NSM, 3022, 3058, this.L,\n            3059, 3064, this.ON, 3065, 3065, this.ET, 3066, 3066, this.ON, 3067, 3133, this.L,\n            3134, 3136, this.NSM, 3137, 3141, this.L, 3142, 3144, this.NSM, 3145, 3145, this.L,\n            3146, 3149, this.NSM, 3150, 3156, this.L, 3157, 3158, this.NSM, 3159, 3259, this.L,\n            3260, 3260, this.NSM, 3261, 3275, this.L, 3276, 3277, this.NSM, 3278, 3392, this.L,\n            3393, 3395, this.NSM, 3396, 3404, this.L, 3405, 3405, this.NSM, 3406, 3529, this.L,\n            3530, 3530, this.NSM, 3531, 3537, this.L, 3538, 3540, this.NSM, 3541, 3541, this.L,\n            3542, 3542, this.NSM, 3543, 3632, this.L, 3633, 3633, this.NSM, 3634, 3635, this.L,\n            3636, 3642, this.NSM, 3643, 3646, this.L, 3647, 3647, this.ET, 3648, 3654, this.L,\n            3655, 3662, this.NSM, 3663, 3760, this.L, 3761, 3761, this.NSM, 3762, 3763, this.L,\n            3764, 3769, this.NSM, 3770, 3770, this.L, 3771, 3772, this.NSM, 3773, 3783, this.L,\n            3784, 3789, this.NSM, 3790, 3863, this.L, 3864, 3865, this.NSM, 3866, 3892, this.L,\n            3893, 3893, this.NSM, 3894, 3894, this.L, 3895, 3895, this.NSM, 3896, 3896, this.L,\n            3897, 3897, this.NSM, 3898, 3901, this.ON, 3902, 3952, this.L, 3953, 3966, this.NSM,\n            3967, 3967, this.L, 3968, 3972, this.NSM, 3973, 3973, this.L, 3974, 3975, this.NSM,\n            3976, 3983, this.L, 3984, 3991, this.NSM, 3992, 3992, this.L, 3993, 4028, this.NSM,\n            4029, 4037, this.L, 4038, 4038, this.NSM, 4039, 4140, this.L, 4141, 4144, this.NSM,\n            4145, 4145, this.L, 4146, 4146, this.NSM, 4147, 4149, this.L, 4150, 4151, this.NSM,\n            4152, 4152, this.L, 4153, 4153, this.NSM, 4154, 4183, this.L, 4184, 4185, this.NSM,\n            4186, 5759, this.L, 5760, 5760, this.WS, 5761, 5786, this.L, 5787, 5788, this.ON,\n            5789, 5905, this.L, 5906, 5908, this.NSM, 5909, 5937, this.L, 5938, 5940, this.NSM,\n            5941, 5969, this.L, 5970, 5971, this.NSM, 5972, 6001, this.L, 6002, 6003, this.NSM,\n            6004, 6070, this.L, 6071, 6077, this.NSM, 6078, 6085, this.L, 6086, 6086, this.NSM,\n            6087, 6088, this.L, 6089, 6099, this.NSM, 6100, 6106, this.L, 6107, 6107, this.ET,\n            6108, 6108, this.L, 6109, 6109, this.NSM, 6110, 6127, this.L, 6128, 6137, this.ON,\n            6138, 6143, this.L, 6144, 6154, this.ON, 6155, 6157, this.NSM, 6158, 6158, this.WS,\n            6159, 6312, this.L, 6313, 6313, this.NSM, 6314, 6431, this.L, 6432, 6434, this.NSM,\n            6435, 6438, this.L, 6439, 6443, this.NSM, 6444, 6449, this.L, 6450, 6450, this.NSM,\n            6451, 6456, this.L, 6457, 6459, this.NSM, 6460, 6463, this.L, 6464, 6464, this.ON,\n            6465, 6467, this.L, 6468, 6469, this.ON, 6470, 6623, this.L, 6624, 6655, this.ON,\n            6656, 8124, this.L, 8125, 8125, this.ON, 8126, 8126, this.L, 8127, 8129, this.ON,\n            8130, 8140, this.L, 8141, 8143, this.ON, 8144, 8156, this.L, 8157, 8159, this.ON,\n            8160, 8172, this.L, 8173, 8175, this.ON, 8176, 8188, this.L, 8189, 8190, this.ON,\n            8191, 8191, this.L, 8192, 8202, this.WS, 8203, 8205, this.BN, 8206, 8206, this.L,\n            8207, 8207, this.R, 8208, 8231, this.ON, 8232, 8232, this.WS, 8233, 8233, this.B,\n            8234, 8234, this.LRE, 8235, 8235, this.RLE, 8236, 8236, this.PDF, 8237, 8237, this.LRO,\n            8238, 8238, this.RLO, 8239, 8239, this.WS, 8240, 8244, this.ET, 8245, 8276, this.ON,\n            8277, 8278, this.L, 8279, 8279, this.ON, 8280, 8286, this.L, 8287, 8287, this.WS,\n            8288, 8291, this.BN, 8292, 8297, this.L, 8298, 8303, this.BN, 8304, 8304, this.EN,\n            8305, 8307, this.L, 8308, 8313, this.EN, 8314, 8315, this.ET, 8316, 8318, this.ON,\n            8319, 8319, this.L, 8320, 8329, this.EN, 8330, 8331, this.ET, 8332, 8334, this.ON,\n            8335, 8351, this.L, 8352, 8369, this.ET, 8370, 8399, this.L, 8400, 8426, this.NSM,\n            8427, 8447, this.L, 8448, 8449, this.ON, 8450, 8450, this.L, 8451, 8454, this.ON,\n            8455, 8455, this.L, 8456, 8457, this.ON, 8458, 8467, this.L, 8468, 8468, this.ON,\n            8469, 8469, this.L, 8470, 8472, this.ON, 8473, 8477, this.L, 8478, 8483, this.ON,\n            8484, 8484, this.L, 8485, 8485, this.ON, 8486, 8486, this.L, 8487, 8487, this.ON,\n            8488, 8488, this.L, 8489, 8489, this.ON, 8490, 8493, this.L, 8494, 8494, this.ET,\n            8495, 8497, this.L, 8498, 8498, this.ON, 8499, 8505, this.L, 8506, 8507, this.ON,\n            8508, 8511, this.L, 8512, 8516, this.ON, 8517, 8521, this.L, 8522, 8523, this.ON,\n            8524, 8530, this.L, 8531, 8543, this.ON, 8544, 8591, this.L, 8592, 8721, this.ON,\n            8722, 8723, this.ET, 8724, 9013, this.ON, 9014, 9082, this.L, 9083, 9108, this.ON,\n            9109, 9109, this.L, 9110, 9168, this.ON, 9169, 9215, this.L, 9216, 9254, this.ON,\n            9255, 9279, this.L, 9280, 9290, this.ON, 9291, 9311, this.L, 9312, 9371, this.EN,\n            9372, 9449, this.L, 9450, 9450, this.EN, 9451, 9751, this.ON, 9752, 9752, this.L,\n            9753, 9853, this.ON, 9854, 9855, this.L, 9856, 9873, this.ON, 9874, 9887, this.L,\n            9888, 9889, this.ON, 9890, 9984, this.L, 9985, 9988, this.ON, 9989, 9989, this.L,\n            9990, 9993, this.ON, 9994, 9995, this.L, 9996, 10023, this.ON, 10024, 10024, this.L,\n            10025, 10059, this.ON, 10060, 10060, this.L, 10061, 10061, this.ON, 10062, 10062, this.L,\n            10063, 10066, this.ON, 10067, 10069, this.L, 10070, 10070, this.ON, 10071, 10071, this.L,\n            10072, 10078, this.ON, 10079, 10080, this.L, 10081, 10132, this.ON, 10133, 10135, this.L,\n            10136, 10159, this.ON, 10160, 10160, this.L, 10161, 10174, this.ON, 10175, 10191, this.L,\n            10192, 10219, this.ON, 10220, 10223, this.L, 10224, 11021, this.ON, 11022, 11903, this.L,\n            11904, 11929, this.ON, 11930, 11930, this.L, 11931, 12019, this.ON, 12020, 12031, this.L,\n            12032, 12245, this.ON, 12246, 12271, this.L, 12272, 12283, this.ON, 12284, 12287, this.L,\n            12288, 12288, this.WS, 12289, 12292, this.ON, 12293, 12295, this.L, 12296, 12320, this.ON,\n            12321, 12329, this.L, 12330, 12335, this.NSM, 12336, 12336, this.ON, 12337, 12341, this.L,\n            12342, 12343, this.ON, 12344, 12348, this.L, 12349, 12351, this.ON, 12352, 12440, this.L,\n            12441, 12442, this.NSM, 12443, 12444, this.ON, 12445, 12447, this.L, 12448, 12448, this.ON,\n            12449, 12538, this.L, 12539, 12539, this.ON, 12540, 12828, this.L, 12829, 12830, this.ON,\n            12831, 12879, this.L, 12880, 12895, this.ON, 12896, 12923, this.L, 12924, 12925, this.ON,\n            12926, 12976, this.L, 12977, 12991, this.ON, 12992, 13003, this.L, 13004, 13007, this.ON,\n            13008, 13174, this.L, 13175, 13178, this.ON, 13179, 13277, this.L, 13278, 13279, this.ON,\n            13280, 13310, this.L, 13311, 13311, this.ON, 13312, 19903, this.L, 19904, 19967, this.ON,\n            19968, 42127, this.L, 42128, 42182, this.ON, 42183, 64284, this.L, 64285, 64285, this.R,\n            64286, 64286, this.NSM, 64287, 64296, this.R, 64297, 64297, this.ET, 64298, 64310, this.R,\n            64311, 64311, this.L, 64312, 64316, this.R, 64317, 64317, this.L, 64318, 64318, this.R,\n            64319, 64319, this.L, 64320, 64321, this.R, 64322, 64322, this.L, 64323, 64324, this.R,\n            64325, 64325, this.L, 64326, 64335, this.R, 64336, 64433, this.AL, 64434, 64466, this.L,\n            64467, 64829, this.AL, 64830, 64831, this.ON, 64832, 64847, this.L, 64848, 64911, this.AL,\n            64912, 64913, this.L, 64914, 64967, this.AL, 64968, 65007, this.L, 65008, 65020, this.AL,\n            65021, 65021, this.ON, 65022, 65023, this.L, 65024, 65039, this.NSM, 65040, 65055, this.L,\n            65056, 65059, this.NSM, 65060, 65071, this.L, 65072, 65103, this.ON, 65104, 65104, this.CS,\n            65105, 65105, this.ON, 65106, 65106, this.CS, 65107, 65107, this.L, 65108, 65108, this.ON,\n            65109, 65109, this.CS, 65110, 65118, this.ON, 65119, 65119, this.ET, 65120, 65121, this.ON,\n            65122, 65123, this.ET, 65124, 65126, this.ON, 65127, 65127, this.L, 65128, 65128, this.ON,\n            65129, 65130, this.ET, 65131, 65131, this.ON, 65132, 65135, this.L, 65136, 65140, this.AL,\n            65141, 65141, this.L, 65142, 65276, this.AL, 65277, 65278, this.L, 65279, 65279, this.BN,\n            65280, 65280, this.L, 65281, 65282, this.ON, 65283, 65285, this.ET, 65286, 65290, this.ON,\n            65291, 65291, this.ET, 65292, 65292, this.CS, 65293, 65293, this.ET, 65294, 65294, this.CS,\n            65295, 65295, this.ES, 65296, 65305, this.EN, 65306, 65306, this.CS, 65307, 65312, this.ON,\n            65313, 65338, this.L, 65339, 65344, this.ON, 65345, 65370, this.L, 65371, 65381, this.ON,\n            65382, 65503, this.L, 65504, 65505, this.ET, 65506, 65508, this.ON, 65509, 65510, this.ET,\n            65511, 65511, this.L, 65512, 65518, this.ON, 65519, 65528, this.L, 65529, 65531, this.BN,\n            65532, 65533, this.ON, 65534, 65535, this.L\n        ];\n        for (var i = 0; i < this.charTypes.length; ++i) {\n            var start = this.charTypes[i];\n            var end = this.charTypes[++i];\n            var b = this.charTypes[++i];\n            while (start <= end) {\n                this.rtlCharacterTypes[start++] = b;\n            }\n        }\n    }\n    //#endregion\n    //#region implementation\n    RtlCharacters.prototype.getVisualOrder = function (inputText, isRtl) {\n        this.types = this.getCharacterCode(inputText);\n        this.textOrder = isRtl ? this.LRE : this.L;\n        this.doVisualOrder();\n        var result = [];\n        for (var i = 0; i < this.levels.length; i++) {\n            result[i] = this.levels[i];\n        }\n        return result;\n    };\n    RtlCharacters.prototype.getCharacterCode = function (text) {\n        var characterCodes = [];\n        for (var i = 0; i < text.length; i++) {\n            characterCodes[i] = this.rtlCharacterTypes[text[i].charCodeAt(0)];\n        }\n        return characterCodes;\n    };\n    RtlCharacters.prototype.setDefaultLevels = function () {\n        for (var i = 0; i < this.length; i++) {\n            this.levels[i] = this.textOrder;\n        }\n    };\n    RtlCharacters.prototype.setLevels = function () {\n        this.setDefaultLevels();\n        for (var n = 0; n < this.length; ++n) {\n            var level = this.levels[n];\n            if ((level & 0x80) !== 0) {\n                level &= 0x7f;\n                this.result[n] = ((level & 0x1) === 0) ? this.L : this.R;\n            }\n            this.levels[n] = level;\n        }\n    };\n    RtlCharacters.prototype.updateLevels = function (index, level, length) {\n        if ((level & 1) === 0) {\n            for (var i = index; i < length; ++i) {\n                if (this.result[i] === this.R) {\n                    this.levels[i] += 1;\n                }\n                else if (this.result[i] !== this.L) {\n                    this.levels[i] += 2;\n                }\n            }\n        }\n        else {\n            for (var i = index; i < length; ++i) {\n                if (this.result[i] !== this.R) {\n                    this.levels[i] += 1;\n                }\n            }\n        }\n    };\n    RtlCharacters.prototype.doVisualOrder = function () {\n        this.length = this.types.length;\n        this.result = this.types;\n        this.levels = [];\n        this.setLevels();\n        this.length = this.getEmbeddedCharactersLength();\n        var preview = this.textOrder;\n        var i = 0;\n        while (i < this.length) {\n            var level = this.levels[i];\n            var preType = ((Math.max(preview, level) & 0x1) === 0) ? this.L : this.R;\n            var length_1 = i + 1;\n            while (length_1 < this.length && this.levels[length_1] === level) {\n                ++length_1;\n            }\n            var success = length_1 < this.length ? this.levels[length_1] : this.textOrder;\n            var type = ((Math.max(success, level) & 0x1) === 0) ? this.L : this.R;\n            this.checkNSM(i, length_1, level, preType, type);\n            this.updateLevels(i, level, length_1);\n            preview = level;\n            i = length_1;\n        }\n        this.checkEmbeddedCharacters(this.length);\n    };\n    RtlCharacters.prototype.getEmbeddedCharactersLength = function () {\n        var index = 0;\n        for (var i = 0; i < this.length; ++i) {\n            if (!(this.types[i] === this.LRE || this.types[i] === this.RLE || this.types[i] === this.LRO ||\n                this.types[i] === this.RLO || this.types[i] === this.PDF || this.types[i] === this.BN)) {\n                this.result[index] = this.result[i];\n                this.levels[index] = this.levels[i];\n                index++;\n            }\n        }\n        return index;\n    };\n    RtlCharacters.prototype.checkEmbeddedCharacters = function (length) {\n        for (var i = this.types.length - 1; i >= 0; --i) {\n            if (this.types[i] === this.LRE || this.types[i] === this.RLE || this.types[i] === this.LRO ||\n                this.types[i] === this.RLO || this.types[i] === this.PDF || this.types[i] === this.BN) {\n                this.result[i] = this.types[i];\n                this.levels[i] = -1;\n            }\n            else {\n                length -= 1;\n                this.result[i] = this.result[length];\n                this.levels[i] = this.levels[length];\n            }\n        }\n        for (var i = 0; i < this.types.length; i++) {\n            if (this.levels[i] === -1) {\n                if (i === 0) {\n                    this.levels[i] = this.textOrder;\n                }\n                else {\n                    this.levels[i] = this.levels[i - 1];\n                }\n            }\n        }\n    };\n    RtlCharacters.prototype.checkNSM = function (index, length, level, startType, endType) {\n        var charType = startType;\n        for (var i = index; i < length; ++i) {\n            if (this.result[i] === this.NSM) {\n                this.result[i] = charType;\n            }\n            else {\n                charType = this.result[i];\n            }\n        }\n        this.checkEuropeanDigits(index, length, level, startType, endType);\n    };\n    RtlCharacters.prototype.checkEuropeanDigits = function (index, length, level, startType, endType) {\n        for (var i = index; i < length; ++i) {\n            if (this.result[i] === this.EN) {\n                for (var j = i - 1; j >= index; --j) {\n                    if (this.result[j] === this.L || this.result[j] === this.R || this.result[j] === this.AL) {\n                        if (this.result[j] === this.AL) {\n                            this.result[i] = this.AN;\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n        this.checkArabicCharacters(index, length, level, startType, endType);\n    };\n    RtlCharacters.prototype.checkArabicCharacters = function (index, length, level, startType, endType) {\n        for (var i = index; i < length; ++i) {\n            if (this.result[i] === this.AL) {\n                this.result[i] = this.R;\n            }\n        }\n        this.checkEuropeanNumberSeparator(index, length, level, startType, endType);\n    };\n    RtlCharacters.prototype.checkEuropeanNumberSeparator = function (index, length, level, startType, endType) {\n        for (var i = index + 1; i < length - 1; ++i) {\n            if (this.result[i] === this.ES || this.result[i] === this.CS) {\n                var preview = this.result[i - 1];\n                var success = this.result[i + 1];\n                if (preview === this.EN && success === this.EN) {\n                    this.result[i] = this.EN;\n                }\n                else if (this.result[i] === this.CS && preview === this.AN && success === this.AN) {\n                    this.result[i] = this.AN;\n                }\n            }\n        }\n        this.checkEuropeanNumberTerminator(index, length, level, startType, endType);\n    };\n    RtlCharacters.prototype.checkEuropeanNumberTerminator = function (index, length, level, startType, endType) {\n        for (var i = index; i < length; ++i) {\n            if (this.result[i] === this.ET) {\n                var s = i;\n                var b = [];\n                b.push(this.ET);\n                var l = this.getLength(s, length, b);\n                var data = s === index ? startType : this.result[s - 1];\n                if (data !== this.EN) {\n                    data = (l === length) ? endType : this.result[l];\n                }\n                if (data === this.EN) {\n                    for (var j = s; j < l; ++j) {\n                        this.result[j] = this.EN;\n                    }\n                }\n                i = l;\n            }\n        }\n        this.checkOtherNeutrals(index, length, level, startType, endType);\n    };\n    RtlCharacters.prototype.checkOtherNeutrals = function (index, length, level, startType, endType) {\n        for (var i = index; i < length; ++i) {\n            if (this.result[i] === this.ES || this.result[i] === this.ET || this.result[i] === this.CS) {\n                this.result[i] = this.ON;\n            }\n        }\n        this.checkOtherCharacters(index, length, level, startType, endType);\n    };\n    RtlCharacters.prototype.checkOtherCharacters = function (index, length, level, startType, endType) {\n        for (var i = index; i < length; ++i) {\n            if (this.result[i] === this.EN) {\n                var pst = startType;\n                for (var j = i - 1; j >= index; --j) {\n                    if (this.result[j] === this.L || this.result[j] === this.R) {\n                        pst = this.result[j];\n                        break;\n                    }\n                }\n                if (pst === this.L) {\n                    this.result[i] = this.L;\n                }\n            }\n        }\n        this.checkCommanCharacters(index, length, level, startType, endType);\n    };\n    RtlCharacters.prototype.getLength = function (index, length, validSet) {\n        --index;\n        while (++index < length) {\n            var t = this.result[index];\n            for (var i = 0; i < validSet.length; ++i) {\n                if (t === validSet[i]) {\n                    index = this.getLength(++index, length, validSet);\n                }\n            }\n            return index;\n        }\n        return length;\n    };\n    RtlCharacters.prototype.checkCommanCharacters = function (index, length, level, startType, endType) {\n        for (var i = index; i < length; ++i) {\n            if (this.result[i] === this.WS || this.result[i] === this.ON || this.result[i] === this.B ||\n                this.result[i] === this.S) {\n                var s = i;\n                var byte = [this.B, this.S, this.WS, this.ON];\n                var l = this.getLength(s, length, byte);\n                var lt = 0;\n                var tt = 0;\n                var rt = 0;\n                if (s === index) {\n                    lt = startType;\n                }\n                else {\n                    lt = this.result[s - 1];\n                    if (lt === this.AN) {\n                        lt = this.R;\n                    }\n                    else if (lt === this.EN) {\n                        lt = this.R;\n                    }\n                }\n                if (l === length) {\n                    tt = endType;\n                }\n                else {\n                    tt = this.result[l];\n                    if (tt === this.AN) {\n                        tt = this.R;\n                    }\n                    else if (tt === this.EN) {\n                        tt = this.R;\n                    }\n                }\n                if (lt === tt) {\n                    rt = lt;\n                }\n                else {\n                    rt = ((level & 0x1) === 0) ? this.L : this.R;\n                }\n                for (var j = s; j < l; ++j) {\n                    this.result[j] = rt;\n                }\n                i = l;\n            }\n        }\n    };\n    return RtlCharacters;\n}());\nexport { RtlCharacters };\n","import { PdfString } from './../../primitives/pdf-string';\nimport { ArabicShapeRenderer } from './rtl/rtl-text-shape';\nimport { PdfTextDirection } from './../enum';\nimport { Bidi } from './rtl/rtl-bidirectional';\n/**\n * `Metrics` of the font.\n * @private\n */\nvar RtlRenderer = /** @class */ (function () {\n    function RtlRenderer() {\n        //region Constants\n        /// Open bracket symbol.\n        /// </summary>\n        this.openBracket = '(';\n        /// <summary>\n        /// Close bracket symbol.\n        /// </summary>\n        this.closeBracket = ')';\n        //#endregion\n    }\n    //#region Constructors\n    /// <summary>\n    /// Initializes a new instance of the <see cref=\"RtlRenderer\"/> class.\n    /// </summary>\n    // public constructor() {\n    // }\n    //#region Public Methods\n    /// <summary>\n    /// Layouts text. Changes blocks position in the RTL text.\n    /// Ligates the text if needed.\n    /// </summary>\n    /// <param name=\"line\">Line of the text.</param>\n    /// <param name=\"font\">Font to be used for string printing.</param>\n    /// <param name=\"rtl\">Font alignment.</param>\n    /// <param name=\"wordSpace\">Indicates whether Word Spacing used or not.</param>\n    /// <returns>Layout string.</returns>\n    RtlRenderer.prototype.layout = function (line, font, rtl, wordSpace, format) {\n        if (line == null) {\n            throw new Error('ArgumentNullException : line');\n        }\n        if (font == null) {\n            throw new Error('ArgumentNullException : font');\n        }\n        var result = [];\n        if (font.Unicode) {\n            result = this.customLayout(line, rtl, format, font, wordSpace);\n        }\n        else {\n            result = [];\n            result[0] = line;\n        }\n        return result;\n    };\n    /// <summary>\n    /// Layouts a string and splits it by the words and using correct lay outing.\n    /// </summary>\n    /// <param name=\"line\">Text line.</param>\n    /// <param name=\"font\">Font object.</param>\n    /// <param name=\"rtl\">Indicates whether RTL should be applied.</param>\n    /// <param name=\"wordSpace\">Indicates whether word spacing is used.</param>\n    /// <returns>Array of words if converted, null otherwise.</returns>\n    RtlRenderer.prototype.splitLayout = function (line, font, rtl, wordSpace, format) {\n        if (line == null) {\n            throw new Error('ArgumentNullException : line');\n        }\n        if (font == null) {\n            throw new Error('ArgumentNullException : font');\n        }\n        var words = [];\n        var system = false;\n        if (!system || words == null) {\n            words = this.customSplitLayout(line, font, rtl, wordSpace, format);\n        }\n        return words;\n    };\n    //#endregion\n    //#region Implementation\n    // private isEnglish( word : string) : boolean\n    // {\n    //     let c : string = (word.length > 0) ? word[0] : '';\n    //     return (c >= '0' && c < 'ÿ');\n    // }\n    // private keepOrder( words : string, startIndex : number, count: number, result : string[], resultIndex : number) : void\n    // {\n    //     for (let i : number = 0, ri = resultIndex - count + 1; i < count; ++i, ++ri) {\n    //         result[ri] = words[i + startIndex];\n    //     }\n    // }\n    /// <summary>\n    /// Uses system API to layout the text.\n    /// </summary>\n    /// <param name=\"line\">Line of the text to be layouted.</param>\n    /// <param name=\"font\">Font which is used for text printing.</param>\n    /// <param name=\"rtl\">Indicates whether we use RTL or RTL lay outing of the text container.</param>\n    /// <returns>Layout string.</returns>\n    /* tslint:disable-next-line:max-line-length */\n    RtlRenderer.prototype.getGlyphIndex = function (line, font, rtl, /*out*/ glyphs, custom) {\n        var success = true;\n        var fail = false;\n        if (line == null) {\n            throw new Error('ArgumentNullException : line');\n        }\n        if (font == null) {\n            throw new Error('ArgumentNullException : font');\n        }\n        glyphs = null;\n        if (line.length === 0) {\n            return { success: fail, glyphs: glyphs };\n        }\n        var renderer = new ArabicShapeRenderer();\n        var text = renderer.shape(line, 0);\n        var internalFont = font.fontInternal;\n        var ttfReader = internalFont.ttfReader;\n        glyphs = new Uint16Array(text.length);\n        var i = 0;\n        for (var k = 0, len = text.length; k < len; k++) {\n            var ch = text[k];\n            var glyphInfo = ttfReader.getGlyph(ch);\n            if (glyphInfo !== null && typeof glyphInfo !== 'undefined') {\n                glyphs[i++] = (glyphInfo).index;\n            }\n        }\n        return { success: success, glyphs: glyphs };\n    };\n    /* tslint:disable-next-line:max-line-length */\n    RtlRenderer.prototype.customLayout = function (line, rtl, format, font, wordSpace) {\n        if (wordSpace === null || typeof wordSpace === 'undefined') {\n            if (line == null) {\n                throw new Error('ArgumentNullException : line');\n            }\n            var result = null;\n            //bidirectional order.\n            if (format !== null && format.textDirection !== PdfTextDirection.None) {\n                var bidi = new Bidi();\n                result = bidi.getLogicalToVisualString(line, rtl);\n            }\n            return result;\n        }\n        else {\n            if (line == null) {\n                throw new Error('ArgumentNullException : line');\n            }\n            if (font == null) {\n                throw new Error('ArgumentNullException : font');\n            }\n            var layouted = null;\n            if (format !== null && format.textDirection !== PdfTextDirection.None) {\n                var renderer = new ArabicShapeRenderer();\n                var txt = renderer.shape(line, 0);\n                layouted = this.customLayout(txt, rtl, format);\n            }\n            // else {\n            //     layouted = this.customLayout(line, rtl, format);\n            // }\n            // We have unicode font, but from the file.        \n            var result = [];\n            // Split the text by words if word spacing is not default.\n            if (wordSpace) {\n                var words = layouted.split('');\n                var count = words.length;\n                for (var i = 0; i < count; i++) {\n                    words[i] = this.addChars(font, words[i]);\n                }\n                result = words;\n            }\n            else {\n                result = [];\n                result[0] = this.addChars(font, layouted);\n            }\n            return result;\n        }\n    };\n    /// <summary>\n    /// Add information about used glyphs to the font.\n    /// </summary>\n    /// <param name=\"font\">Font used for text rendering.</param>\n    /// <param name=\"glyphs\">Array of used glyphs.</param>\n    /// <returns>String in the form to be written to the file.</returns>\n    RtlRenderer.prototype.addChars = function (font, glyphs) {\n        var line = glyphs;\n        if (font == null) {\n            throw new Error('ArgumentNullException : font');\n        }\n        if (line == null) {\n            throw new Error('ArgumentNullException : line');\n        }\n        var text = line;\n        var internalFont = font.fontInternal;\n        var ttfReader = internalFont.ttfReader;\n        font.setSymbols(text);\n        // Reconvert string according to unicode standard.\n        text = ttfReader.convertString(text);\n        var bytes = PdfString.toUnicodeArray(text, false);\n        text = PdfString.byteToString(bytes);\n        return text;\n        // else {\n        //     if (font == null) {\n        //         throw new Error('ArgumentNullException : font');\n        //     }\n        //     if (glyphs == null) {\n        //         throw new Error('ArgumentNullException : glyphs');\n        //     }\n        //     // Mark the chars as used.\n        //     let text : string = '';\n        //     font.setSymbols(glyphs);\n        //     // Create string from the glyphs.\n        //     \n        //     let chars : string[] = [];\n        //     for (let i : number = 0; i < glyphs.length; i++) {\n        //         chars[i] = glyphs[i].toString();\n        //     }\n        //     for (let j : number = 0 ; j < chars.length; j++) {\n        //         text = text + chars[j];\n        //     }\n        //     let bytes : number[] = PdfString.toUnicodeArray(text, false);\n        //     text = PdfString.byteToString(bytes);\n        //     return text;\n        // }\n    };\n    /// <summary>\n    /// Layouts a string and splits it by the words by using custom lay outing.\n    /// </summary>\n    /// <param name=\"line\">Text line.</param>\n    /// <param name=\"font\">Font object.</param>\n    /// <param name=\"rtl\">Indicates whether RTL should be applied.</param>\n    /// <param name=\"wordSpace\">Indicates whether word spacing is used.</param>\n    /// <returns>Array of words if converted, null otherwise.</returns>\n    /* tslint:disable-next-line:max-line-length */\n    RtlRenderer.prototype.customSplitLayout = function (line, font, rtl, wordSpace, format) {\n        if (line == null) {\n            throw new Error('ArgumentNullException : line');\n        }\n        if (font == null) {\n            throw new Error('ArgumentNullException : font');\n        }\n        var reversedLine = this.customLayout(line, rtl, format);\n        var words = reversedLine.split('');\n        return words;\n    };\n    return RtlRenderer;\n}());\nexport { RtlRenderer };\n","/**\n * PdfGraphics.ts class for EJ2-PDF\n */\nimport { PdfColorSpace, TextRenderingMode, PdfFillMode, PdfTextAlignment } from './enum';\nimport { PdfVerticalAlignment, PdfBlendMode } from './enum';\nimport { PdfSubSuperScript } from './fonts/enum';\nimport { PdfStreamWriter } from './../input-output/pdf-stream-writer';\nimport { PdfPen } from './pdf-pen';\nimport { PdfBrush } from './brushes/pdf-brush';\nimport { PdfSolidBrush } from './brushes/pdf-solid-brush';\nimport { PdfFont } from './fonts/pdf-font';\nimport { PdfTransformationMatrix } from './pdf-transformation-matrix';\nimport { PointF, SizeF, RectangleF } from './../drawing/pdf-drawing';\nimport { ProcedureSets } from './constants';\nimport { PdfString } from './../primitives/pdf-string';\nimport { PdfStringFormat } from './fonts/pdf-string-format';\nimport { TemporaryDictionary } from './../collections/object-object-pair/dictionary';\nimport { PdfTransparency } from './pdf-transparency';\nimport { PdfStringLayouter, LineType } from './fonts/string-layouter';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\nimport { StringTokenizer } from './fonts/string-tokenizer';\nimport { PdfAutomaticFieldInfoCollection } from './../document/automatic-fields/automatic-field-info-collection';\nimport { PdfAutomaticFieldInfo } from './../document/automatic-fields/automatic-field-info';\nimport { Operators } from './../input-output/pdf-operators';\nimport { UnicodeTrueTypeFont } from './fonts/unicode-true-type-font';\nimport { InternalEnum } from './../primitives/pdf-string';\nimport { RtlRenderer } from './fonts/rtl-renderer';\nimport { PdfTextDirection } from './enum';\n/**\n * `PdfGraphics` class represents a graphics context of the objects.\n * It's used for performing all the graphics operations.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * // set the font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * //\n * //graphics of the page\n * let page1Graphics : PdfGraphics = page1.graphics;\n * // draw the text on the page1 graphics\n * page1Graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * //\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nvar PdfGraphics = /** @class */ (function () {\n    function PdfGraphics(arg1, arg2, arg3) {\n        /**\n         * Represents the `Current color space`.\n         * @private\n         */\n        this.currentColorSpace = PdfColorSpace.Rgb;\n        /**\n         * Stores `previous rendering mode`.\n         * @private\n         */\n        this.previousTextRenderingMode = TextRenderingMode.Fill;\n        /**\n         * Previous `character spacing` value or 0.\n         * @private\n         */\n        this.previousCharacterSpacing = 0.0;\n        /**\n         * Previous `word spacing` value or 0.\n         * @private\n         */\n        this.previousWordSpacing = 0.0;\n        /**\n         * The `previously used text scaling` value.\n         * @private\n         */\n        this.previousTextScaling = 100.0;\n        /**\n         * Instance of `ProcedureSets` class.\n         * @private\n         */\n        this.procedureSets = new ProcedureSets();\n        /**\n         * To check wihether it is a `direct text rendering`.\n         * @default true\n         * @private\n         */\n        this.isNormalRender = true;\n        /**\n         * check whether to `use font size` to calculate the shift.\n         * @default false\n         * @private\n         */\n        this.isUseFontSize = false;\n        /**\n         * check whether the font is in `italic type`.\n         * @default false\n         * @private\n         */\n        this.isItalic = false;\n        /**\n         * Check whether it is an `emf Text Matrix`.\n         * @default false\n         * @private\n         */\n        this.isEmfTextScaled = false;\n        /**\n         * Check whether it is an `emf` call.\n         * @default false\n         * @private\n         */\n        this.isEmf = false;\n        /**\n         * Check whether it is an `emf plus` call.\n         * @default false\n         * @private\n         */\n        this.isEmfPlus = false;\n        /**\n         * Check whether it is in `base line format`.\n         * @default true\n         * @private\n         */\n        this.isBaselineFormat = true;\n        /**\n         * Emf Text `Scaling Factor`.\n         * @private\n         */\n        this.emfScalingFactor = new SizeF(0, 0);\n        /**\n         * To check whether the `last color space` of document and garphics is saved.\n         * @private\n         */\n        this.colorSpaceChanged = false;\n        /**\n         * Stores an instance of `DictionaryProperties`.\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        /**\n         * Checks whether the x co-ordinate is need to set as client size or not.\n         * @hidden\n         * @private\n         */\n        this.isOverloadWithPosition = false;\n        /**\n         * Checks whether the x co-ordinate is need to set as client size or not.\n         * @hidden\n         * @private\n         */\n        this.isPointOverload = false;\n        /**\n         * Current colorspaces.\n         * @hidden\n         * @private\n         */\n        this.currentColorSpaces = ['RGB', 'CMYK', 'GrayScale', 'Indexed'];\n        /**\n         * Checks the current image `is optimized` or not.\n         * @default false.\n         * @private\n         */\n        this.isImageOptimized = false;\n        /**\n         * Stores the `graphics states`.\n         * @private\n         */\n        this.graphicsState = [];\n        /**\n         * Indicates whether the object `had trasparency`.\n         * @default false\n         * @private\n         */\n        this.istransparencySet = false;\n        /**\n         * Stores the instance of `PdfAutomaticFieldInfoCollection` class .\n         * @default null\n         * @private\n         */\n        this.internalAutomaticFields = null;\n        /**\n         * Stores the index of the start line that should draw with in the next page.\n         * @private\n         */\n        this.startCutIndex = -1;\n        if (arg3 instanceof PdfStreamWriter) {\n            this.pdfStreamWriter = arg3;\n            this.getResources = arg2;\n            this.canvasSize = arg1;\n            this.initialize();\n        }\n        else {\n            this.constructor(arg1, arg2, new PdfStreamWriter(arg3));\n        }\n    }\n    Object.defineProperty(PdfGraphics.prototype, \"stringLayoutResult\", {\n        //  Properties\n        /**\n         * Returns the `result` after drawing string.\n         * @private\n         */\n        get: function () {\n            return this.pdfStringLayoutResult;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"size\", {\n        /**\n         * Gets the `size` of the canvas.\n         * @private\n         */\n        get: function () {\n            return this.canvasSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"mediaBoxUpperRightBound\", {\n        /**\n         * Gets and Sets the value of `MediaBox upper right bound`.\n         * @private\n         */\n        get: function () {\n            if (typeof this.internalMediaBoxUpperRightBound === 'undefined') {\n                this.internalMediaBoxUpperRightBound = 0;\n            }\n            return this.internalMediaBoxUpperRightBound;\n        },\n        set: function (value) {\n            this.internalMediaBoxUpperRightBound = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"clientSize\", {\n        /**\n         * Gets the `size` of the canvas reduced by margins and page templates.\n         * @private\n         */\n        get: function () {\n            return new SizeF(this.clipBounds.width, this.clipBounds.height);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"colorSpace\", {\n        /**\n         * Gets or sets the current `color space` of the document\n         * @private\n         */\n        get: function () {\n            return this.currentColorSpace;\n        },\n        set: function (value) {\n            this.currentColorSpace = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"streamWriter\", {\n        /**\n         * Gets the `stream writer`.\n         * @private\n         */\n        get: function () {\n            return this.pdfStreamWriter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"matrix\", {\n        /**\n         * Gets the `transformation matrix` reflecting current transformation.\n         * @private\n         */\n        get: function () {\n            if (this.transformationMatrix == null) {\n                this.transformationMatrix = new PdfTransformationMatrix();\n            }\n            return this.transformationMatrix;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"layer\", {\n        /**\n         * Gets the `layer` for the graphics, if exists.\n         * @private\n         */\n        get: function () {\n            return this.pageLayer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"page\", {\n        /**\n         * Gets the `page` for this graphics, if exists.\n         * @private\n         */\n        get: function () {\n            return this.pageLayer.page;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"automaticFields\", {\n        get: function () {\n            if (this.internalAutomaticFields == null || typeof this.internalAutomaticFields === 'undefined') {\n                this.internalAutomaticFields = new PdfAutomaticFieldInfoCollection();\n            }\n            return this.internalAutomaticFields;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Implementation\n    /**\n     * `Initializes` this instance.\n     * @private\n     */\n    PdfGraphics.prototype.initialize = function () {\n        this.bStateSaved = false;\n        this.currentPen = null;\n        this.currentBrush = null;\n        this.currentFont = null;\n        this.currentColorSpace = PdfColorSpace.Rgb;\n        this.bCSInitialized = false;\n        this.transformationMatrix = null;\n        this.previousTextRenderingMode = (-1); //.Fill;\n        this.previousCharacterSpacing = -1.0;\n        this.previousWordSpacing = -1.0;\n        this.previousTextScaling = -100.0;\n        // this.m_trasparencies = null;\n        this.currentStringFormat = null;\n        this.clipBounds = new RectangleF(new PointF(0, 0), this.size);\n        this.getResources.getResources().requireProcedureSet(this.procedureSets.pdf);\n    };\n    PdfGraphics.prototype.drawPdfTemplate = function (template, location, size) {\n        if (typeof size === 'undefined') {\n            if (template == null) {\n                throw Error('ArgumentNullException-template');\n            }\n            this.drawPdfTemplate(template, location, template.size);\n        }\n        else {\n            // let crossTable : PdfCrossTable = null;\n            // if (this.pageLayer != null) {\n            //     crossTable = (this.page as PdfPage).section.parentDocument.crossTable;\n            // }\n            if (template == null) {\n                throw Error('ArgumentNullException-template');\n            }\n            var scaleX = (template.width > 0) ? size.width / template.width : 1;\n            var scaleY = (template.height > 0) ? size.height / template.height : 1;\n            var bNeedScale = !(scaleX === 1 && scaleY === 1);\n            // Save state.\n            var state = this.save();\n            // Take into consideration that rect location is bottom/left.\n            var matrix = new PdfTransformationMatrix();\n            if (this.pageLayer != null) {\n                this.getTranslateTransform(location.x, location.y + size.height, matrix);\n            }\n            if (bNeedScale) {\n                this.getScaleTransform(scaleX, scaleY, matrix);\n            }\n            this.pdfStreamWriter.modifyCtm(matrix);\n            // Output template.\n            var resources = this.getResources.getResources();\n            var name_1 = resources.getName(template);\n            this.pdfStreamWriter.executeObject(name_1);\n            // Restore state.\n            this.restore(state);\n            //Transfer automatic fields from template.\n            var g = template.graphics;\n            if (g != null) {\n                for (var index = 0; index < g.automaticFields.automaticFields.length; index++) {\n                    var fieldInfo = g.automaticFields.automaticFields[index];\n                    var newLocation = new PointF(fieldInfo.location.x + location.x, fieldInfo.location.y + location.y);\n                    var scalingX = template.size.width == 0 ? 0 : size.width / template.size.width;\n                    var scalingY = template.size.height == 0 ? 0 : size.height / template.size.height;\n                    this.automaticFields.add(new PdfAutomaticFieldInfo(fieldInfo.field, newLocation, scalingX, scalingY));\n                    this.page.dictionary.modify();\n                }\n            }\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.imageB);\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.imageC);\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.imageI);\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n        }\n    };\n    /* tslint:disable */\n    /**\n     * @public\n     */\n    PdfGraphics.prototype.drawString = function (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {\n        if (typeof arg1 === 'string' && arg2 instanceof PdfFont && (arg3 instanceof PdfPen || arg3 === null) && (arg4 instanceof PdfBrush || arg4 === null) && typeof arg5 === 'number' && typeof arg6 === 'number' && (arg7 instanceof PdfStringFormat || arg7 === null) && typeof arg8 === 'undefined') {\n            this.isOverloadWithPosition = true;\n            this.drawString(arg1, arg2, arg3, arg4, arg5, arg6, (this.clientSize.width - arg5), 0, arg7);\n        }\n        else {\n            var temparg3 = arg3;\n            var temparg4 = arg4;\n            var temparg5 = arg5;\n            var temparg6 = arg6;\n            var temparg7 = arg7;\n            var temparg8 = arg8;\n            var temparg9 = arg9;\n            var layouter = new PdfStringLayouter();\n            var result = layouter.layout(arg1, arg2, temparg9, new SizeF(temparg7, temparg8), this.isOverloadWithPosition, this.clientSize);\n            if (!result.empty) {\n                var rect = this.checkCorrectLayoutRectangle(result.actualSize, temparg5, temparg6, temparg9);\n                if (temparg7 <= 0) {\n                    temparg5 = rect.x;\n                    temparg7 = rect.width;\n                }\n                if (temparg8 <= 0) {\n                    temparg6 = rect.y;\n                    temparg8 = rect.height;\n                }\n                this.drawStringLayoutResult(result, arg2, temparg3, temparg4, new RectangleF(temparg5, temparg6, temparg7, temparg8), temparg9);\n                this.isEmfTextScaled = false;\n                this.emfScalingFactor = new SizeF(0, 0);\n            }\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n            this.isNormalRender = true;\n            this.pdfStringLayoutResult = result;\n            this.isUseFontSize = false;\n        }\n    }; /* tslint:enable */\n    PdfGraphics.prototype.drawLine = function (arg1, arg2, arg3, arg4, arg5) {\n        if (arg2 instanceof PointF) {\n            var temparg2 = arg2;\n            var temparg3 = arg3;\n            this.drawLine(arg1, temparg2.x, temparg2.y, temparg3.x, temparg3.y);\n        }\n        else {\n            var temparg2 = arg2;\n            var temparg3 = arg3;\n            var temparg4 = arg4;\n            var temparg5 = arg5;\n            this.stateControl(arg1, null, null);\n            var sw = this.streamWriter;\n            sw.beginPath(temparg2, temparg3);\n            sw.appendLineSegment(temparg4, temparg5);\n            sw.strokePath();\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.pdf);\n        }\n    };\n    /* tslint:disable */\n    PdfGraphics.prototype.drawRectangle = function (arg1, arg2, arg3, arg4, arg5, arg6) {\n        if (arg1 instanceof PdfPen && typeof arg2 === 'number') {\n            var temparg3 = arg3;\n            this.drawRectangle(arg1, null, arg2, temparg3, arg4, arg5);\n        }\n        else if (arg1 instanceof PdfBrush && typeof arg2 === 'number') {\n            var temparg3 = arg3;\n            this.drawRectangle(null, arg1, arg2, temparg3, arg4, arg5);\n        }\n        else {\n            var temparg3 = arg3;\n            var temparg4 = arg4;\n            var temparg5 = arg5;\n            var temparg6 = arg6;\n            if (arg2 instanceof PdfSolidBrush && arg2.color.isEmpty) {\n                arg2 = null;\n            }\n            var temparg1 = arg1;\n            var temparg2 = arg2;\n            this.stateControl(temparg1, temparg2, null);\n            this.streamWriter.appendRectangle(temparg3, temparg4, temparg5, temparg6);\n            this.drawPath(temparg1, temparg2, false);\n        }\n    };\n    PdfGraphics.prototype.drawPath = function (arg1, arg2, arg3, arg4) {\n        if (typeof arg3 === 'boolean') {\n            var temparg3 = arg3;\n            this.drawPath(arg1, arg2, PdfFillMode.Winding, temparg3);\n        }\n        else {\n            var temparg3 = arg3;\n            var temparg4 = arg4;\n            var isPen = arg1 != null;\n            var isBrush = arg2 != null;\n            var isEvenOdd = (temparg3 === PdfFillMode.Alternate);\n            if (isPen && isBrush) {\n                this.streamWriter.fillStrokePath(isEvenOdd);\n            }\n            else if (!isPen && !isBrush) {\n                this.streamWriter.endPath();\n            }\n            else if (isPen) {\n                this.streamWriter.strokePath();\n            }\n            else {\n                this.streamWriter.fillPath(isEvenOdd);\n            }\n        }\n    };\n    /* tslint:disable */\n    PdfGraphics.prototype.drawImage = function (arg1, arg2, arg3, arg4, arg5) {\n        if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {\n            var size = arg1.physicalDimension;\n            this.drawImage(arg1, arg2, arg3, size.width, size.height);\n        }\n        else {\n            var temparg2 = arg2;\n            var temparg3 = arg3;\n            var temparg4 = arg4;\n            var temparg5 = arg5;\n            arg1.save();\n            var matrix = new PdfTransformationMatrix();\n            this.getTranslateTransform(temparg2, (temparg3 + temparg5), matrix);\n            this.getScaleTransform(arg4, arg5, matrix);\n            this.pdfStreamWriter.write('q');\n            this.pdfStreamWriter.modifyCtm(matrix);\n            // Output template.\n            var resources = this.getResources.getResources();\n            if (typeof this.pageLayer !== 'undefined' && this.page != null) {\n                resources.document = this.page.document;\n            }\n            var name_2 = resources.getName(arg1);\n            if (typeof this.pageLayer !== 'undefined') {\n                this.page.setResources(resources);\n            }\n            this.pdfStreamWriter.executeObject(name_2);\n            this.pdfStreamWriter.write(Operators.restoreState);\n            this.pdfStreamWriter.write(Operators.newLine);\n            var resource = this.getResources.getResources();\n            resource.requireProcedureSet(this.procedureSets.imageB);\n            resource.requireProcedureSet(this.procedureSets.imageC);\n            resource.requireProcedureSet(this.procedureSets.imageI);\n            resource.requireProcedureSet(this.procedureSets.text);\n        }\n    };\n    //Implementation\n    /* tslint:disable */\n    /**\n     * Returns `bounds` of the line info.\n     * @private\n     */\n    PdfGraphics.prototype.getLineBounds = function (lineIndex, result, font, layoutRectangle, format) {\n        var bounds;\n        if (!result.empty && lineIndex < result.lineCount && lineIndex >= 0) {\n            var line = result.lines[lineIndex];\n            var vShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n            var y = vShift + layoutRectangle.y + (result.lineHeight * lineIndex);\n            var lineWidth = line.width;\n            var hShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n            var lineIndent = this.getLineIndent(line, format, layoutRectangle, (lineIndex === 0));\n            hShift += (!this.rightToLeft(format)) ? lineIndent : 0;\n            var x = layoutRectangle.x + hShift;\n            /* tslint:disable */\n            var width = (!this.shouldJustify(line, layoutRectangle.width, format)) ? lineWidth - lineIndent : layoutRectangle.width - lineIndent; /* tslint:enable */\n            var height = result.lineHeight;\n            bounds = new RectangleF(x, y, width, height);\n        }\n        else {\n            bounds = new RectangleF(0, 0, 0, 0);\n        }\n        return bounds;\n    };\n    /**\n     * Creates `lay outed rectangle` depending on the text settings.\n     * @private\n     */\n    PdfGraphics.prototype.checkCorrectLayoutRectangle = function (textSize, x, y, format) {\n        var layoutedRectangle = new RectangleF(x, y, textSize.width, textSize.width);\n        if (format != null) {\n            switch (format.alignment) {\n                case PdfTextAlignment.Center:\n                    layoutedRectangle.x -= layoutedRectangle.width / 2;\n                    break;\n                case PdfTextAlignment.Right:\n                    layoutedRectangle.x -= layoutedRectangle.width;\n                    break;\n            }\n            switch (format.lineAlignment) {\n                case PdfVerticalAlignment.Middle:\n                    layoutedRectangle.y -= layoutedRectangle.height / 2;\n                    break;\n                case PdfVerticalAlignment.Bottom:\n                    layoutedRectangle.y -= layoutedRectangle.height;\n                    break;\n            }\n        }\n        return layoutedRectangle;\n    };\n    /**\n     * Sets the `layer` for the graphics.\n     * @private\n     */\n    PdfGraphics.prototype.setLayer = function (layer) {\n        this.pageLayer = layer;\n        var page = layer.page;\n        if (page != null && typeof page !== 'undefined') {\n            page.beginSave = this.pageSave;\n        }\n    };\n    /**\n     * Adding page number field before page saving.\n     * @private\n     */\n    /* tslint:disable */\n    PdfGraphics.prototype.pageSave = function (page) {\n        if (page.graphics.automaticFields != null) {\n            for (var i = 0; i < page.graphics.automaticFields.automaticFields.length; i++) {\n                var fieldInfo = page.graphics.automaticFields.automaticFields[i];\n                fieldInfo.field.performDraw(page.graphics, fieldInfo.location, fieldInfo.scalingX, fieldInfo.scalingY);\n            }\n        }\n    };\n    /**\n     * `Draws a layout result`.\n     * @private\n     */\n    PdfGraphics.prototype.drawStringLayoutResult = function (result, font, pen, brush, layoutRectangle, format) {\n        if (!result.empty) {\n            this.applyStringSettings(font, pen, brush, format, layoutRectangle);\n            // Set text scaling\n            var textScaling = (format != null) ? format.horizontalScalingFactor : 100.0;\n            if (textScaling !== this.previousTextScaling && !this.isEmfTextScaled) {\n                this.pdfStreamWriter.setTextScaling(textScaling);\n                this.previousTextScaling = textScaling;\n            }\n            var height = (format == null || format.lineSpacing === 0) ? font.height : format.lineSpacing + font.height;\n            var subScript = (format != null && format.subSuperScript === PdfSubSuperScript.SubScript);\n            var shift = 0;\n            shift = (subScript) ? height - (font.height + font.metrics.getDescent(format)) : (height - font.metrics.getAscent(format));\n            this.shift = shift;\n            this.pdfStreamWriter.startNextLine(layoutRectangle.x, layoutRectangle.y - shift);\n            this.pdfStreamWriter.setLeading(+height);\n            var resultHeight = 0;\n            var remainingString = '';\n            for (var i = 0; i < result.lines.length; i++) {\n                resultHeight += result.lineHeight;\n                if ((layoutRectangle.y + resultHeight) > this.clientSize.height) {\n                    this.startCutIndex = i;\n                    break;\n                }\n            }\n            for (var j = this.startCutIndex; (j < result.lines.length && j >= 0); j++) {\n                remainingString += result.lines[j].text;\n            }\n            var bounds = new RectangleF(layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height);\n            this.drawLayoutResult(result, font, format, layoutRectangle);\n            this.underlineStrikeoutText(pen, brush, result, font, bounds, format);\n            this.isEmfPlus = false;\n            this.isUseFontSize = false;\n            if (this.startCutIndex !== -1) {\n                var page = this.getNextPage();\n                page.graphics.drawString(remainingString, font, pen, brush, layoutRectangle.x, 0, layoutRectangle.width, 0, format);\n            }\n        }\n        else {\n            throw new Error('ArgumentNullException:result');\n        }\n    };\n    /**\n     * Gets the `next page`.\n     * @private\n     */\n    PdfGraphics.prototype.getNextPage = function () {\n        var section = this.currentPage.section;\n        var nextPage = null;\n        var index = section.indexOf(this.currentPage);\n        if (index === section.count - 1) {\n            nextPage = section.add();\n        }\n        else {\n            nextPage = section.getPages()[index + 1];\n        }\n        return nextPage;\n    };\n    PdfGraphics.prototype.setClip = function (rectangle, mode) {\n        if (typeof mode === 'undefined') {\n            this.setClip(rectangle, PdfFillMode.Winding);\n        }\n        else {\n            this.pdfStreamWriter.appendRectangle(rectangle);\n            this.pdfStreamWriter.clipPath((mode === PdfFillMode.Alternate));\n        }\n    };\n    /**\n     * Applies all the `text settings`.\n     * @private\n     */\n    PdfGraphics.prototype.applyStringSettings = function (font, pen, brush, format, bounds) {\n        var setLineWidth = false;\n        var tm = this.getTextRenderingMode(pen, brush, format);\n        this.stateControl(pen, brush, font, format);\n        this.pdfStreamWriter.beginText();\n        if ((tm) !== this.previousTextRenderingMode) {\n            this.pdfStreamWriter.setTextRenderingMode(tm);\n            this.previousTextRenderingMode = tm;\n        }\n        // Set character spacing.\n        var cs = (format != null) ? format.characterSpacing : 0;\n        if (cs !== this.previousCharacterSpacing && !this.isEmfTextScaled) {\n            this.pdfStreamWriter.setCharacterSpacing(cs);\n            this.previousCharacterSpacing = cs;\n        }\n        // Set word spacing.\n        // NOTE: it works only if the space code is equal to 32 (0x20).\n        var ws = (format != null) ? format.wordSpacing : 0;\n        if (ws !== this.previousWordSpacing) {\n            this.pdfStreamWriter.setWordSpacing(ws);\n            this.previousWordSpacing = ws;\n        }\n    };\n    /**\n     * Calculates `shift value` if the text is vertically aligned.\n     * @private\n     */\n    PdfGraphics.prototype.getTextVerticalAlignShift = function (textHeight, boundsHeight, format) {\n        var shift = 0;\n        if (boundsHeight >= 0 && format != null && format.lineAlignment !== PdfVerticalAlignment.Top) {\n            switch (format.lineAlignment) {\n                case PdfVerticalAlignment.Middle:\n                    shift = (boundsHeight - textHeight) / 2;\n                    break;\n                case PdfVerticalAlignment.Bottom:\n                    shift = boundsHeight - textHeight;\n                    break;\n            }\n        }\n        return shift;\n    };\n    /* tslint:disable */\n    /**\n     * `Draws layout result`.\n     * @private\n     */\n    PdfGraphics.prototype.drawLayoutResult = function (result, font, format, layoutRectangle) {\n        var vAlignShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n        if (vAlignShift !== 0) {\n            this.pdfStreamWriter.startNextLine(0, vAlignShift);\n        }\n        var ttfFont = font;\n        var unicode = (ttfFont != null && ttfFont.isUnicode);\n        var embed = (ttfFont != null && ttfFont.isEmbedFont);\n        var lines = result.lines;\n        for (var i = 0, len = lines.length; (i < len && i !== this.startCutIndex); i++) {\n            var lineInfo = lines[i];\n            var line = lineInfo.text;\n            var lineWidth = lineInfo.width;\n            var hAlignShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n            var lineIndent = this.getLineIndent(lineInfo, format, layoutRectangle, (i === 0));\n            hAlignShift += (!this.rightToLeft(format)) ? lineIndent : 0;\n            if (hAlignShift !== 0 && !this.isEmfTextScaled) {\n                this.pdfStreamWriter.startNextLine(hAlignShift, 0);\n            }\n            if (unicode) {\n                this.drawUnicodeLine(lineInfo, layoutRectangle, font, format);\n            }\n            else {\n                this.drawAsciiLine(lineInfo, layoutRectangle, font, format);\n            }\n            if (hAlignShift !== 0 && !this.isEmfTextScaled) {\n                this.pdfStreamWriter.startNextLine(-hAlignShift, 0);\n            }\n            if (this.isOverloadWithPosition && lines.length > 1) {\n                this.pdfStreamWriter.startNextLine(-(layoutRectangle.x), 0);\n                layoutRectangle.x = 0;\n                layoutRectangle.width = this.clientSize.width;\n                this.isOverloadWithPosition = false;\n                this.isPointOverload = true;\n            }\n        }\n        this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n        if (vAlignShift !== 0) {\n            this.pdfStreamWriter.startNextLine(0, -(vAlignShift - result.lineHeight));\n        }\n        this.pdfStreamWriter.endText();\n    };\n    /**\n     * `Draws Ascii line`.\n     * @private\n     */\n    PdfGraphics.prototype.drawAsciiLine = function (lineInfo, layoutRectangle, font, format) {\n        this.justifyLine(lineInfo, layoutRectangle.width, format);\n        var value = '';\n        if (lineInfo.text.indexOf('(') !== -1 || lineInfo.text.indexOf(')') !== -1) {\n            for (var i = 0; i < lineInfo.text.length; i++) {\n                if (lineInfo.text[i] === '(') {\n                    value += '\\\\\\(';\n                }\n                else if (lineInfo.text[i] === ')') {\n                    value += '\\\\\\)';\n                }\n                else {\n                    value += lineInfo.text[i];\n                }\n            }\n        }\n        if (value === '') {\n            value = lineInfo.text;\n        }\n        var line = '(' + value + ')';\n        this.pdfStreamWriter.showNextLineText(new PdfString(line));\n    };\n    /**\n     * Draws unicode line.\n     * @private\n     */\n    PdfGraphics.prototype.drawUnicodeLine = function (lineInfo, layoutRectangle, font, format) {\n        var line = lineInfo.text;\n        var lineWidth = lineInfo.width;\n        var rtl = (format !== null && format.rightToLeft);\n        var useWordSpace = (format !== null && (format.wordSpacing !== 0 || format.alignment === PdfTextAlignment.Justify));\n        var ttfFont = font;\n        var wordSpacing = this.justifyLine(lineInfo, layoutRectangle.width, format);\n        var rtlRender = new RtlRenderer();\n        if (rtl || (format !== null && format.textDirection !== PdfTextDirection.None)) {\n            var blocks = null;\n            var rightAlign = (format !== null && format.alignment === PdfTextAlignment.Right);\n            if (format !== null && format.textDirection !== PdfTextDirection.None) {\n                /* tslint:disable-next-line:max-line-length */\n                blocks = rtlRender.layout(line, ttfFont, (format.textDirection === PdfTextDirection.RightToLeft) ? true : false, useWordSpace, format);\n            }\n            else {\n                blocks = rtlRender.layout(line, ttfFont, rightAlign, useWordSpace, format);\n            }\n            var words = null;\n            if (blocks.length > 1) {\n                if (format !== null && format.textDirection !== PdfTextDirection.None) {\n                    /* tslint:disable-next-line:max-line-length */\n                    words = rtlRender.splitLayout(line, ttfFont, (format.textDirection === PdfTextDirection.RightToLeft) ? true : false, useWordSpace, format);\n                }\n                else {\n                    words = rtlRender.splitLayout(line, ttfFont, rightAlign, useWordSpace, format);\n                }\n            }\n            else {\n                words = [line];\n            }\n            this.drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);\n        }\n        else {\n            if (useWordSpace) {\n                var result = this.breakUnicodeLine(line, ttfFont, null);\n                var blocks = result.tokens;\n                var words = result.words;\n                this.drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);\n            }\n            else {\n                var token = this.convertToUnicode(line, ttfFont);\n                var value = this.getUnicodeString(token);\n                this.streamWriter.showNextLineText(value);\n            }\n        }\n    };\n    /**\n     * Draws array of unicode tokens.\n     */\n    /* tslint:disable */\n    PdfGraphics.prototype.drawUnicodeBlocks = function (blocks, words, font, format, wordSpacing) {\n        /* tslint:enable */\n        if (blocks == null) {\n            throw new Error('Argument Null Exception : blocks');\n        }\n        if (words == null) {\n            throw new Error('Argument Null Exception : words');\n        }\n        if (font == null) {\n            throw new Error('Argument Null Exception : font');\n        }\n        this.streamWriter.startNextLine();\n        var x = 0;\n        var xShift = 0;\n        var firstLineIndent = 0;\n        var paragraphIndent = 0;\n        try {\n            if (format !== null) {\n                firstLineIndent = format.firstLineIndent;\n                paragraphIndent = format.paragraphIndent;\n                format.firstLineIndent = 0;\n                format.paragraphIndent = 0;\n            }\n            var spaceWidth = font.getCharWidth(StringTokenizer.whiteSpace, format) + wordSpacing;\n            var characterSpacing = (format != null) ? format.characterSpacing : 0;\n            var wordSpace = (format !== null && wordSpacing === 0) ? format.wordSpacing : 0;\n            spaceWidth += characterSpacing + wordSpace;\n            for (var i = 0; i < blocks.length; i++) {\n                var token = blocks[i];\n                var word = words[i];\n                var tokenWidth = 0;\n                if (x !== 0) {\n                    this.streamWriter.startNextLine(x, 0);\n                }\n                if (word.length > 0) {\n                    tokenWidth += /*Utils.Round(*/ font.measureString(word, format).width /*)*/;\n                    tokenWidth += characterSpacing;\n                    var val = this.getUnicodeString(token);\n                    this.streamWriter.showText(val);\n                }\n                if (i !== blocks.length - 1) {\n                    x = tokenWidth + spaceWidth;\n                    xShift += x;\n                }\n            }\n            // Rolback current line position.\n            if (xShift > 0) {\n                this.streamWriter.startNextLine(-xShift, 0);\n            }\n        }\n        finally {\n            if (format !== null) {\n                format.firstLineIndent = firstLineIndent;\n                format.paragraphIndent = paragraphIndent;\n            }\n        }\n    };\n    /**\n     * Breakes the unicode line to the words and converts symbols to glyphs.\n     */\n    PdfGraphics.prototype.breakUnicodeLine = function (line, ttfFont, words) {\n        if (line === null) {\n            throw new Error('Argument Null Exception : line');\n        }\n        words = line.split(null);\n        var tokens = [];\n        for (var i = 0; i < words.length; i++) {\n            // Reconvert string according to unicode standard.\n            var word = words[i];\n            var token = this.convertToUnicode(word, ttfFont);\n            tokens[i] = token;\n        }\n        return { tokens: tokens, words: words };\n    };\n    /**\n     * Creates PdfString from the unicode text.\n     */\n    PdfGraphics.prototype.getUnicodeString = function (token) {\n        if (token === null) {\n            throw new Error('Argument Null Exception : token');\n        }\n        var val = new PdfString(token);\n        val.converted = true;\n        val.encode = InternalEnum.ForceEncoding.Ascii;\n        return val;\n    };\n    /**\n     * Converts to unicode format.\n     */\n    PdfGraphics.prototype.convertToUnicode = function (text, ttfFont) {\n        var token = null;\n        if (text == null) {\n            throw new Error('Argument Null Exception : text');\n        }\n        if (ttfFont == null) {\n            throw new Error('Argument Null Exception : ttfFont');\n        }\n        if (ttfFont.fontInternal instanceof UnicodeTrueTypeFont) {\n            var ttfReader = ttfFont.fontInternal.ttfReader;\n            ttfFont.setSymbols(text);\n            token = ttfReader.convertString(text);\n            var bytes = PdfString.toUnicodeArray(token, false);\n            token = PdfString.byteToString(bytes);\n        }\n        return token;\n    };\n    /**\n     * `Justifies` the line if needed.\n     * @private\n     */\n    PdfGraphics.prototype.justifyLine = function (lineInfo, boundsWidth, format) {\n        var line = lineInfo.text;\n        var lineWidth = lineInfo.width;\n        var shouldJustify = this.shouldJustify(lineInfo, boundsWidth, format);\n        var hasWordSpacing = (format != null && format.wordSpacing !== 0);\n        var symbols = StringTokenizer.spaces;\n        var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\n        var wordSpace = 0;\n        if (shouldJustify) {\n            // Correct line width.\n            if (hasWordSpacing) {\n                lineWidth -= (whitespacesCount * format.wordSpacing);\n            }\n            var difference = boundsWidth - lineWidth;\n            wordSpace = difference / whitespacesCount;\n            this.pdfStreamWriter.setWordSpacing(wordSpace);\n        }\n        else {\n            // If there is justifying, but the line shouldn't be justified, restore default word spacing.\n            if (hasWordSpacing) {\n                this.pdfStreamWriter.setWordSpacing(format.wordSpacing);\n            }\n            else {\n                this.pdfStreamWriter.setWordSpacing(0);\n            }\n        }\n        return wordSpace;\n    };\n    /**\n     * `Reset` or reinitialize the current graphic value.\n     * @private\n     */\n    PdfGraphics.prototype.reset = function (size) {\n        this.canvasSize = size;\n        this.streamWriter.clear();\n        this.initialize();\n        this.initializeCoordinates();\n    };\n    /**\n     * Checks whether the line should be `justified`.\n     * @private\n     */\n    PdfGraphics.prototype.shouldJustify = function (lineInfo, boundsWidth, format) {\n        var line = lineInfo.text;\n        var lineWidth = lineInfo.width;\n        var justifyStyle = (format != null && format.alignment === PdfTextAlignment.Justify);\n        var goodWidth = (boundsWidth >= 0 && lineWidth < boundsWidth);\n        var symbols = StringTokenizer.spaces;\n        var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\n        var hasSpaces = (whitespacesCount > 0 && line[0] !== StringTokenizer.whiteSpace);\n        var goodLineBreakStyle = ((lineInfo.lineType & LineType.LayoutBreak) > 0);\n        /* tslint:disable */\n        var shouldJustify = (justifyStyle && goodWidth && hasSpaces && (goodLineBreakStyle || format.alignment === PdfTextAlignment.Justify)); /* tslint:enable */\n        return shouldJustify;\n    };\n    /* tslint:disable */\n    /**\n     * Emulates `Underline, Strikeout` of the text if needed.\n     * @private\n     */\n    PdfGraphics.prototype.underlineStrikeoutText = function (pen, brush, result, font, layoutRectangle, format) {\n        if (font.underline || font.strikeout) {\n            // Calculate line width.\n            var linePen = this.createUnderlineStikeoutPen(pen, brush, font, format);\n            if (linePen != null) {\n                // Approximate line positions.\n                var vShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n                var underlineYOffset = 0;\n                underlineYOffset = layoutRectangle.y + vShift + font.metrics.getAscent(format) + 1.5 * linePen.width;\n                var strikeoutYOffset = layoutRectangle.y + vShift + font.metrics.getHeight(format) / 2 + 1.5 * linePen.width;\n                var lines = result.lines;\n                // Run through the text and draw lines.\n                for (var i = 0, len = result.lineCount; i < len; i++) {\n                    var lineInfo = lines[i];\n                    var line = lineInfo.text;\n                    var lineWidth = lineInfo.width;\n                    var hShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n                    var lineIndent = this.getLineIndent(lineInfo, format, layoutRectangle, (i === 0));\n                    hShift += (!this.rightToLeft(format)) ? lineIndent : 0;\n                    var x1 = layoutRectangle.x + hShift;\n                    /* tslint:disable */\n                    var x2 = (!this.shouldJustify(lineInfo, layoutRectangle.width, format)) ? x1 + lineWidth - lineIndent : x1 + layoutRectangle.width - lineIndent;\n                    /* tslint:enable */\n                    if (font.underline) {\n                        var y = underlineYOffset;\n                        this.drawLine(linePen, x1, y, x2, y);\n                        underlineYOffset += result.lineHeight;\n                    }\n                    if (font.strikeout) {\n                        var y = strikeoutYOffset;\n                        this.drawLine(linePen, x1, y, x2, y);\n                        strikeoutYOffset += result.lineHeight;\n                    }\n                    if (this.isPointOverload && lines.length > 1) {\n                        layoutRectangle.x = 0;\n                        layoutRectangle.width = this.clientSize.width;\n                    }\n                }\n                this.isPointOverload = false;\n            }\n        }\n    };\n    /**\n     * `Creates a pen` for drawing lines in the text.\n     * @private\n     */\n    PdfGraphics.prototype.createUnderlineStikeoutPen = function (pen, brush, font, format) {\n        // Calculate line width.\n        var lineWidth = font.metrics.getSize(format) / 20;\n        var linePen = null;\n        // Create a pen fo the lines.\n        if (pen != null) {\n            linePen = new PdfPen(pen.color, lineWidth);\n        }\n        else if (brush != null) {\n            linePen = new PdfPen(brush, lineWidth);\n        }\n        return linePen;\n    };\n    /**\n     * Return `text rendering mode`.\n     * @private\n     */\n    PdfGraphics.prototype.getTextRenderingMode = function (pen, brush, format) {\n        var tm = TextRenderingMode.None;\n        if (pen != null && brush != null) {\n            tm = TextRenderingMode.FillStroke;\n        }\n        else if (pen != null) {\n            tm = TextRenderingMode.Stroke;\n        }\n        else {\n            tm = TextRenderingMode.Fill;\n        }\n        if (format != null && format.clipPath) {\n            tm |= TextRenderingMode.ClipFlag;\n        }\n        return tm;\n    };\n    /**\n     * Returns `line indent` for the line.\n     * @private\n     */\n    PdfGraphics.prototype.getLineIndent = function (lineInfo, format, layoutBounds, firstLine) {\n        var lineIndent = 0;\n        var firstParagraphLine = ((lineInfo.lineType & LineType.FirstParagraphLine) > 0);\n        if (format != null && firstParagraphLine) {\n            lineIndent = (firstLine) ? format.firstLineIndent : format.paragraphIndent;\n            lineIndent = (layoutBounds.width > 0) ? Math.min(layoutBounds.width, lineIndent) : lineIndent;\n        }\n        return lineIndent;\n    };\n    /**\n     * Calculates shift value if the line is `horizontaly aligned`.\n     * @private\n     */\n    PdfGraphics.prototype.getHorizontalAlignShift = function (lineWidth, boundsWidth, format) {\n        var shift = 0;\n        if (boundsWidth >= 0 && format != null && format.alignment !== PdfTextAlignment.Left) {\n            switch (format.alignment) {\n                case PdfTextAlignment.Center:\n                    shift = (boundsWidth - lineWidth) / 2;\n                    break;\n                case PdfTextAlignment.Right:\n                    shift = boundsWidth - lineWidth;\n                    break;\n            }\n        }\n        return shift;\n    };\n    /**\n     * Gets or sets the value that indicates `text direction` mode.\n     * @private\n     */\n    PdfGraphics.prototype.rightToLeft = function (format) {\n        var rtl = (format != null && format.rightToLeft);\n        if (format !== null && typeof format !== 'undefined') {\n            if (format.textDirection !== PdfTextDirection.None && typeof format.textDirection !== 'undefined') {\n                rtl = true;\n            }\n        }\n        return rtl;\n    };\n    PdfGraphics.prototype.stateControl = function (pen, brush, font, format) {\n        if (typeof format === 'undefined') {\n            this.stateControl(pen, brush, font, null);\n        }\n        else {\n            var saveState = false;\n            if (brush !== null) {\n                var solidBrush = brush;\n                if (typeof this.pageLayer !== 'undefined' && this.pageLayer != null) {\n                    if (this.colorSpaceChanged === false) {\n                        this.lastDocumentCS = this.pageLayer.page.document.colorSpace;\n                        this.lastGraphicsCS = this.pageLayer.page.graphics.colorSpace;\n                        this.colorSpace = this.pageLayer.page.document.colorSpace;\n                        this.currentColorSpace = this.pageLayer.page.document.colorSpace;\n                        this.colorSpaceChanged = true;\n                    }\n                }\n                this.initCurrentColorSpace(this.currentColorSpace);\n            }\n            else if (pen != null) {\n                var pdfPen = pen;\n                if (typeof this.pageLayer !== 'undefined' && this.pageLayer != null) {\n                    /* tslint:disable */\n                    this.colorSpace = this.pageLayer.page.document.colorSpace;\n                    this.currentColorSpace = this.pageLayer.page.document.colorSpace;\n                }\n                this.initCurrentColorSpace(this.currentColorSpace);\n            }\n            this.penControl(pen, saveState);\n            this.brushControl(brush, saveState);\n            this.fontControl(font, format, saveState);\n        }\n    };\n    /**\n     * Initializes the `current color space`.\n     * @private\n     */\n    PdfGraphics.prototype.initCurrentColorSpace = function (colorspace) {\n        var re = this.getResources.getResources();\n        if (!this.bCSInitialized) {\n            this.pdfStreamWriter.setColorSpace('Device' + this.currentColorSpaces[this.currentColorSpace], true);\n            this.pdfStreamWriter.setColorSpace('Device' + this.currentColorSpaces[this.currentColorSpace], false);\n            this.bCSInitialized = true;\n        }\n    };\n    /**\n     * Controls the `pen state`.\n     * @private\n     */\n    PdfGraphics.prototype.penControl = function (pen, saveState) {\n        if (pen != null) {\n            this.currentPen = pen;\n            this.colorSpace = PdfColorSpace.Rgb;\n            /* tslint:disable */\n            pen.monitorChanges(this.currentPen, this.pdfStreamWriter, this.getResources, saveState, this.colorSpace, this.matrix.clone());\n            /* tslint:enable */\n            this.currentPen = pen.clone();\n        }\n    };\n    /**\n     * Controls the `brush state`.\n     * @private\n     */\n    PdfGraphics.prototype.brushControl = function (brush, saveState) {\n        if (brush != null) {\n            this.currentBrush = brush;\n            /* tslint:disable */\n            brush.monitorChanges(this.currentBrush, this.pdfStreamWriter, this.getResources, saveState, this.colorSpace);\n            /* tslint:enable */\n            this.currentBrush = brush;\n            brush = null;\n        }\n    };\n    /**\n     * Saves the font and other `font settings`.\n     * @private\n     */\n    PdfGraphics.prototype.fontControl = function (font, format, saveState) {\n        if (font != null) {\n            var curSubSuper = (format != null) ? format.subSuperScript : PdfSubSuperScript.None;\n            /* tslint:disable */\n            var prevSubSuper = (this.currentStringFormat != null) ? this.currentStringFormat.subSuperScript : PdfSubSuperScript.None; /* tslint:enable */\n            if (saveState || font !== this.currentFont || curSubSuper !== prevSubSuper) {\n                var resources = this.getResources.getResources();\n                this.currentFont = font;\n                this.currentStringFormat = format;\n                var size = font.metrics.getSize(format);\n                /* tslint:disable */\n                this.isEmfTextScaled = false;\n                var fontName = resources.getName(font);\n                this.pdfStreamWriter.setFont(font, fontName, size);\n            }\n        }\n    };\n    PdfGraphics.prototype.setTransparency = function (arg1, arg2, arg3) {\n        if (typeof arg2 === 'undefined') {\n            this.istransparencySet = true;\n            this.setTransparency(arg1, arg1, PdfBlendMode.Normal);\n        }\n        else if (typeof arg2 === 'number' && typeof arg3 === 'undefined') {\n            this.setTransparency(arg1, arg2, PdfBlendMode.Normal);\n        }\n        else {\n            if (this.trasparencies == null) {\n                this.trasparencies = new TemporaryDictionary();\n            }\n            var transp = null;\n            var td = new TransparencyData(arg1, arg2, arg3);\n            if (this.trasparencies.containsKey(td)) {\n                transp = this.trasparencies.getValue(td);\n            }\n            if (transp == null) {\n                transp = new PdfTransparency(arg1, arg2, arg3);\n                this.trasparencies.setValue(td, transp);\n            }\n            var resources = this.getResources.getResources();\n            var name_3 = resources.getName(transp);\n            var sw = this.streamWriter;\n            sw.setGraphicsState(name_3);\n        }\n    };\n    PdfGraphics.prototype.clipTranslateMargins = function (x, y, left, top, right, bottom) {\n        if (x instanceof RectangleF && typeof y === 'undefined') {\n            this.clipBounds = x;\n            this.pdfStreamWriter.writeComment('Clip margins.');\n            this.pdfStreamWriter.appendRectangle(x);\n            this.pdfStreamWriter.closePath();\n            this.pdfStreamWriter.clipPath(false);\n            this.pdfStreamWriter.writeComment('Translate co-ordinate system.');\n            this.translateTransform(x.x, x.y);\n        }\n        else if (typeof x === 'number') {\n            var clipArea = new RectangleF(left, top, this.size.width - left - right, this.size.height - top - bottom);\n            this.clipBounds = clipArea;\n            this.pdfStreamWriter.writeComment(\"Clip margins.\");\n            this.pdfStreamWriter.appendRectangle(clipArea);\n            this.pdfStreamWriter.closePath();\n            this.pdfStreamWriter.clipPath(false);\n            this.pdfStreamWriter.writeComment(\"Translate co-ordinate system.\");\n            this.translateTransform(x, y);\n        }\n    };\n    /**\n     * `Updates y` co-ordinate.\n     * @private\n     */\n    PdfGraphics.prototype.updateY = function (y) {\n        return -y;\n    };\n    /**\n     * Used to `translate the transformation`.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // set pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // set translate transform\n     * page1.graphics.translateTransform(100, 100);\n     * //\n     * // draw the rectangle after applying translate transform\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     * @param offsetX The x-coordinate of the translation.\n     * @param offsetY The y-coordinate of the translation.\n     */\n    PdfGraphics.prototype.translateTransform = function (offsetX, offsetY) {\n        var matrix = new PdfTransformationMatrix();\n        this.getTranslateTransform(offsetX, offsetY, matrix);\n        this.pdfStreamWriter.modifyCtm(matrix);\n        this.matrix.multiply(matrix);\n    };\n    /**\n     * `Translates` coordinates of the input matrix.\n     * @private\n     */\n    PdfGraphics.prototype.getTranslateTransform = function (x, y, input) {\n        input.translate(x, this.updateY(y));\n        return input;\n    };\n    /* tslint:disable */\n    /**\n     * Applies the specified `scaling operation` to the transformation matrix of this Graphics by prepending it to the object's transformation matrix.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // create pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // apply scaling trasformation\n     * page1.graphics.scaleTransform(1.5, 2);\n     * //\n     * // draw the rectangle after applying scaling transform\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     * @param scaleX Scale factor in the x direction.\n     * @param scaleY Scale factor in the y direction.\n     */\n    /* tslint:enable */\n    PdfGraphics.prototype.scaleTransform = function (scaleX, scaleY) {\n        var matrix = new PdfTransformationMatrix();\n        this.getScaleTransform(scaleX, scaleY, matrix);\n        this.pdfStreamWriter.modifyCtm(matrix);\n        this.matrix.multiply(matrix);\n    };\n    /**\n     * `Scales` coordinates of the input matrix.\n     * @private\n     */\n    PdfGraphics.prototype.getScaleTransform = function (x, y, input) {\n        if (input == null) {\n            input = new PdfTransformationMatrix();\n        }\n        input.scale(x, y);\n        return input;\n    };\n    /**\n     * Applies the specified `rotation` to the transformation matrix of this Graphics.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // create pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // set RotateTransform with 25 degree of angle\n     * page1.graphics.rotateTransform(25);\n     * //\n     * // draw the rectangle after RotateTransformation\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     * @param angle Angle of rotation in degrees.\n     */\n    PdfGraphics.prototype.rotateTransform = function (angle) {\n        var matrix = new PdfTransformationMatrix();\n        this.getRotateTransform(angle, matrix);\n        this.pdfStreamWriter.modifyCtm(matrix);\n        this.matrix.multiply(matrix);\n    };\n    /**\n     * `Initializes coordinate system`.\n     * @private\n     */\n    PdfGraphics.prototype.initializeCoordinates = function () {\n        // Matrix equation: TM(T-1)=M', where T=[1 0 0 -1 0 h]\n        this.pdfStreamWriter.writeComment('Change co-ordinate system to left/top.');\n        // Translate co-ordinates only, don't flip.\n        if (this.mediaBoxUpperRightBound !== -(this.size.height)) {\n            if (this.cropBox == null) {\n                if (this.mediaBoxUpperRightBound === this.size.height || this.mediaBoxUpperRightBound === 0) {\n                    this.translateTransform(0, this.updateY(this.size.height));\n                }\n                else {\n                    this.translateTransform(0, this.updateY(this.mediaBoxUpperRightBound));\n                }\n            }\n        }\n    };\n    /**\n     * `Rotates` coordinates of the input matrix.\n     * @private\n     */\n    PdfGraphics.prototype.getRotateTransform = function (angle, input) {\n        if (input == null || typeof input === 'undefined') {\n            input = new PdfTransformationMatrix();\n        }\n        input.rotate(this.updateY(angle));\n        return input;\n    };\n    /**\n     * `Saves` the current state of this Graphics and identifies the saved state with a GraphicsState.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // create pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // save the graphics state\n     * let state1 : PdfGraphicsState = page1.graphics.save();\n     * //\n     * page1.graphics.scaleTransform(1.5, 2);\n     * // draw the rectangle\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n     * // restore the graphics state\n     * page1.graphics.restore(state1);\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfGraphics.prototype.save = function () {\n        var state = new PdfGraphicsState(this, this.matrix.clone());\n        state.brush = this.currentBrush;\n        state.pen = this.currentPen;\n        state.font = this.currentFont;\n        state.colorSpace = this.currentColorSpace;\n        state.characterSpacing = this.previousCharacterSpacing;\n        state.wordSpacing = this.previousWordSpacing;\n        state.textScaling = this.previousTextScaling;\n        state.textRenderingMode = this.previousTextRenderingMode;\n        this.graphicsState.push(state);\n        this.pdfStreamWriter.saveGraphicsState();\n        return state;\n    };\n    PdfGraphics.prototype.restore = function (state) {\n        if (typeof state === 'undefined') {\n            if (this.graphicsState.length > 0) {\n                this.doRestoreState();\n            }\n        }\n        else {\n            if (this.graphicsState.indexOf(state) !== -1) {\n                for (;;) {\n                    if (this.graphicsState.length === 0) {\n                        break;\n                    }\n                    var popState = this.doRestoreState();\n                    if (popState === state) {\n                        break;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * `Restores graphics state`.\n     * @private\n     */\n    PdfGraphics.prototype.doRestoreState = function () {\n        var state = this.graphicsState.pop();\n        this.transformationMatrix = state.matrix;\n        this.currentBrush = state.brush;\n        this.currentPen = state.pen;\n        this.currentFont = state.font;\n        this.currentColorSpace = state.colorSpace;\n        this.previousCharacterSpacing = state.characterSpacing;\n        this.previousWordSpacing = state.wordSpacing;\n        this.previousTextScaling = state.textScaling;\n        this.previousTextRenderingMode = state.textRenderingMode;\n        this.pdfStreamWriter.restoreGraphicsState();\n        return state;\n    };\n    // Constants\n    /**\n     * Specifies the mask of `path type values`.\n     * @private\n     */\n    PdfGraphics.pathTypesValuesMask = 0xf;\n    /**\n     * Checks whether the object is `transparencyObject`.\n     * @hidden\n     * @private\n     */\n    PdfGraphics.transparencyObject = false;\n    return PdfGraphics;\n}());\nexport { PdfGraphics };\n/**\n * `GetResourceEventHandler` class is alternate for event handlers and delegates.\n * @private\n * @hidden\n */\nvar GetResourceEventHandler = /** @class */ (function () {\n    /**\n     * Initialize instance of `GetResourceEventHandler` class.\n     * Alternate for event handlers and delegates.\n     * @private\n     */\n    function GetResourceEventHandler(sender) {\n        this.sender = sender;\n    }\n    /**\n     * Return the instance of `PdfResources` class.\n     * @private\n     */\n    GetResourceEventHandler.prototype.getResources = function () {\n        return this.sender.getResources();\n    };\n    return GetResourceEventHandler;\n}());\nexport { GetResourceEventHandler };\nvar PdfGraphicsState = /** @class */ (function () {\n    function PdfGraphicsState(graphics, matrix) {\n        /**\n         * Stores `previous rendering mode`.\n         * @default TextRenderingMode.Fill\n         * @private\n         */\n        this.internalTextRenderingMode = TextRenderingMode.Fill;\n        /**\n         * `Previous character spacing` value or 0.\n         * @default 0.0\n         * @private\n         */\n        this.internalCharacterSpacing = 0.0;\n        /**\n         * `Previous word spacing` value or 0.\n         * @default 0.0\n         * @private\n         */\n        this.internalWordSpacing = 0.0;\n        /**\n         * The previously used `text scaling value`.\n         * @default 100.0\n         * @private\n         */\n        this.internalTextScaling = 100.0;\n        /**\n         * `Current color space`.\n         * @default PdfColorSpace.Rgb\n         * @private\n         */\n        this.pdfColorSpace = PdfColorSpace.Rgb;\n        if (typeof graphics !== 'undefined') {\n            this.pdfGraphics = graphics;\n            this.transformationMatrix = matrix;\n        }\n    }\n    Object.defineProperty(PdfGraphicsState.prototype, \"graphics\", {\n        // Properties\n        /**\n         * Gets the parent `graphics object`.\n         * @private\n         */\n        get: function () {\n            return this.pdfGraphics;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"matrix\", {\n        /**\n         * Gets the `current matrix`.\n         * @private\n         */\n        get: function () {\n            return this.transformationMatrix;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"characterSpacing\", {\n        /**\n         * Gets or sets the `current character spacing`.\n         * @private\n         */\n        get: function () {\n            return this.internalCharacterSpacing;\n        },\n        set: function (value) {\n            this.internalCharacterSpacing = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"wordSpacing\", {\n        /**\n         * Gets or sets the `word spacing` value.\n         * @private\n         */\n        get: function () {\n            return this.internalWordSpacing;\n        },\n        set: function (value) {\n            this.internalWordSpacing = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"textScaling\", {\n        /**\n         * Gets or sets the `text scaling` value.\n         * @private\n         */\n        get: function () {\n            return this.internalTextScaling;\n        },\n        set: function (value) {\n            this.internalTextScaling = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"pen\", {\n        /**\n         * Gets or sets the `current pen` object.\n         * @private\n         */\n        get: function () {\n            return this.pdfPen;\n        },\n        set: function (value) {\n            this.pdfPen = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"brush\", {\n        /**\n         * Gets or sets the `brush`.\n         * @private\n         */\n        get: function () {\n            return this.pdfBrush;\n        },\n        set: function (value) {\n            this.pdfBrush = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"font\", {\n        /**\n         * Gets or sets the `current font` object.\n         * @private\n         */\n        get: function () {\n            return this.pdfFont;\n        },\n        set: function (value) {\n            this.pdfFont = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"colorSpace\", {\n        /**\n         * Gets or sets the `current color space` value.\n         * @private\n         */\n        get: function () {\n            return this.pdfColorSpace;\n        },\n        set: function (value) {\n            this.pdfColorSpace = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"textRenderingMode\", {\n        /**\n         * Gets or sets the `text rendering mode`.\n         * @private\n         */\n        get: function () {\n            return this.internalTextRenderingMode;\n        },\n        set: function (value) {\n            this.internalTextRenderingMode = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGraphicsState;\n}());\nexport { PdfGraphicsState };\nvar TransparencyData = /** @class */ (function () {\n    // Constructors\n    /**\n     * Initializes a new instance of the `TransparencyData` class.\n     * @private\n     */\n    function TransparencyData(alphaPen, alphaBrush, blendMode) {\n        this.alphaPen = alphaPen;\n        this.alphaBrush = alphaBrush;\n        this.blendMode = blendMode;\n    }\n    return TransparencyData;\n}());\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * Worksheets class\n * @private\n */\nvar Worksheets = /** @class */ (function (_super) {\n    __extends(Worksheets, _super);\n    function Worksheets() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return Worksheets;\n}(Array));\nexport { Worksheets };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * Worksheet class\n * @private\n */\nvar Worksheet = /** @class */ (function () {\n    function Worksheet() {\n        this.isSummaryRowBelow = true;\n        this.showGridLines = true;\n    }\n    return Worksheet;\n}());\nexport { Worksheet };\n/**\n * Hyperlink class\n * @private\n */\nvar HyperLink = /** @class */ (function () {\n    function HyperLink() {\n    }\n    return HyperLink;\n}());\nexport { HyperLink };\n/**\n * Grouping class\n * @private\n */\nvar Grouping = /** @class */ (function () {\n    function Grouping() {\n    }\n    return Grouping;\n}());\nexport { Grouping };\n/**\n * FreezePane class\n * @private\n */\nvar FreezePane = /** @class */ (function () {\n    function FreezePane() {\n    }\n    return FreezePane;\n}());\nexport { FreezePane };\n/**\n * MergeCell\n * @private\n */\nvar MergeCell = /** @class */ (function () {\n    function MergeCell() {\n    }\n    return MergeCell;\n}());\nexport { MergeCell };\n/**\n * MergeCells class\n * @private\n */\nvar MergeCells = /** @class */ (function (_super) {\n    __extends(MergeCells, _super);\n    function MergeCells() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.add = function (mergeCell) {\n            var inserted = false;\n            var count = 0;\n            for (var _i = 0, _a = _this; _i < _a.length; _i++) {\n                var mCell = _a[_i];\n                if (MergeCells.isIntersecting(mCell, mergeCell)) {\n                    var intersectingCell = new MergeCell();\n                    intersectingCell.x = Math.min(mCell.x, mergeCell.x);\n                    intersectingCell.y = Math.min(mCell.Y, mergeCell.y);\n                    intersectingCell.width = Math.max(mCell.Width + mCell.X, mergeCell.width + mergeCell.x);\n                    intersectingCell.height = Math.max(mCell.Height + mCell.Y, mergeCell.height + mergeCell.y);\n                    intersectingCell.ref = (_this[count].ref.split(':')[0]) + ':' + (mergeCell.ref.split(':')[1]);\n                    _this[count] = intersectingCell;\n                    mergeCell = intersectingCell;\n                    inserted = true;\n                }\n                count++;\n            }\n            if (!inserted) {\n                _this.push(mergeCell);\n            }\n            return mergeCell;\n        };\n        return _this;\n    }\n    MergeCells.isIntersecting = function (base, compare) {\n        return (base.x <= compare.x + compare.width)\n            && (compare.x <= base.x + base.width)\n            && (base.y <= compare.y + compare.height)\n            && (compare.y <= base.y + base.height);\n    };\n    return MergeCells;\n}(Array));\nexport { MergeCells };\n","/**\n * CellStyle class\n * @private\n */\nvar CellStyle = /** @class */ (function () {\n    function CellStyle() {\n        this.numFmtId = 0;\n        this.backColor = 'none';\n        this.fontName = 'Calibri';\n        this.fontSize = 14;\n        this.fontColor = '#000000';\n        this.italic = false;\n        this.bold = false;\n        this.underline = false;\n        this.wrapText = false;\n        this.hAlign = 'general';\n        this.vAlign = 'bottom';\n        this.indent = 0;\n        this.rotation = 0;\n        this.numberFormat = 'GENERAL';\n        this.type = 'datetime';\n        this.borders = new Borders();\n        this.isGlobalStyle = false;\n    }\n    return CellStyle;\n}());\nexport { CellStyle };\n/**\n * Font Class\n * @private\n */\nvar Font = /** @class */ (function () {\n    function Font() {\n        this.sz = 14;\n        this.name = 'Calibri';\n        this.u = false;\n        this.b = false;\n        this.i = false;\n        this.color = 'FF000000';\n    }\n    return Font;\n}());\nexport { Font };\n/**\n * CellXfs class\n * @private\n */\nvar CellXfs = /** @class */ (function () {\n    function CellXfs() {\n    }\n    return CellXfs;\n}());\nexport { CellXfs };\n/**\n * Alignment class\n * @private\n */\nvar Alignment = /** @class */ (function () {\n    function Alignment() {\n    }\n    return Alignment;\n}());\nexport { Alignment };\n/**\n * CellStyleXfs class\n * @private\n */\nvar CellStyleXfs = /** @class */ (function () {\n    function CellStyleXfs() {\n    }\n    return CellStyleXfs;\n}());\nexport { CellStyleXfs };\n/**\n * CellStyles class\n * @private\n */\nvar CellStyles = /** @class */ (function () {\n    function CellStyles() {\n        this.name = 'Normal';\n        this.xfId = 0;\n    }\n    return CellStyles;\n}());\nexport { CellStyles };\n/**\n * NumFmt class\n * @private\n */\nvar NumFmt = /** @class */ (function () {\n    function NumFmt(id, code) {\n        this.numFmtId = id;\n        this.formatCode = code;\n    }\n    return NumFmt;\n}());\nexport { NumFmt };\n/**\n * Border class\n * @private\n */\nvar Border = /** @class */ (function () {\n    function Border(mLine, mColor) {\n        this.lineStyle = mLine;\n        this.color = mColor;\n    }\n    return Border;\n}());\nexport { Border };\n/**\n * Borders class\n * @private\n */\nvar Borders = /** @class */ (function () {\n    function Borders() {\n        this.left = new Border('none', '#FFFFFF');\n        this.right = new Border('none', '#FFFFFF');\n        this.top = new Border('none', '#FFFFFF');\n        this.bottom = new Border('none', '#FFFFFF');\n        this.all = new Border('none', '#FFFFFF');\n    }\n    return Borders;\n}());\nexport { Borders };\n","/**\n * Column class\n * @private\n */\nvar Column = /** @class */ (function () {\n    function Column() {\n    }\n    return Column;\n}());\nexport { Column };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * Row class\n * @private\n */\nvar Row = /** @class */ (function () {\n    function Row() {\n    }\n    return Row;\n}());\nexport { Row };\n/**\n * Rows class\n * @private\n */\nvar Rows = /** @class */ (function (_super) {\n    __extends(Rows, _super);\n    function Rows() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.add = function (row) {\n            var inserted = false;\n            var count = 0;\n            for (var _i = 0, _a = _this; _i < _a.length; _i++) {\n                var r = _a[_i];\n                if (r.index === row.index) {\n                    _this[count] = row;\n                    inserted = true;\n                }\n                count++;\n            }\n            if (!inserted) {\n                _this.push(row);\n            }\n        };\n        return _this;\n    }\n    return Rows;\n}(Array));\nexport { Rows };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * Worksheet class\n * @private\n */\nvar Cell = /** @class */ (function () {\n    function Cell() {\n    }\n    return Cell;\n}());\nexport { Cell };\n/**\n * Cells class\n * @private\n */\nvar Cells = /** @class */ (function (_super) {\n    __extends(Cells, _super);\n    function Cells() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.add = function (cell) {\n            var inserted = false;\n            var count = 0;\n            for (var _i = 0, _a = _this; _i < _a.length; _i++) {\n                var c = _a[_i];\n                if (c.index === cell.index) {\n                    _this[count] = cell;\n                    inserted = true;\n                }\n                count++;\n            }\n            if (!inserted) {\n                _this.push(cell);\n            }\n        };\n        return _this;\n    }\n    return Cells;\n}(Array));\nexport { Cells };\n","import { CompressedStreamWriter } from './compression-writer';\nimport { Save } from '@syncfusion/ej2-file-utils';\nvar CRC32TABLE = [];\n/**\n * class provide compression library\n * ```typescript\n * let archive = new ZipArchive();\n * archive.compressionLevel = 'Normal';\n * let archiveItem = new ZipArchiveItem(archive, 'directoryName\\fileName.txt');\n * archive.addItem(archiveItem);\n * archive.save(fileName.zip);\n * ```\n */\nvar ZipArchive = /** @class */ (function () {\n    /**\n     * constructor for creating ZipArchive instance\n     */\n    function ZipArchive() {\n        if (CRC32TABLE.length === 0) {\n            ZipArchive.initCrc32Table();\n        }\n        this.files = [];\n        this.level = 'Normal';\n        Save.isMicrosoftBrowser = !(!navigator.msSaveBlob);\n    }\n    Object.defineProperty(ZipArchive.prototype, \"compressionLevel\", {\n        /**\n         * gets compression level\n         */\n        get: function () {\n            return this.level;\n        },\n        /**\n         * sets compression level\n         */\n        set: function (level) {\n            this.level = level;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ZipArchive.prototype, \"length\", {\n        /**\n         * gets items count\n         */\n        get: function () {\n            if (this.files === undefined) {\n                return 0;\n            }\n            return this.files.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * add new item to archive\n     * @param {ZipArchiveItem} item - item to be added\n     * @returns {void}\n     */\n    ZipArchive.prototype.addItem = function (item) {\n        if (item === null || item === undefined) {\n            throw new Error('ArgumentException: item cannot be null or undefined');\n        }\n        for (var i = 0; i < this.files.length; i++) {\n            var file = this.files[i];\n            if (file instanceof ZipArchiveItem) {\n                if (file.name === item.name) {\n                    throw new Error('item with same name already exist');\n                }\n            }\n        }\n        this.files.push(item);\n    };\n    /**\n     * add new directory to archive\n     * @param directoryName directoryName to be created\n     * @returns {void}\n     */\n    ZipArchive.prototype.addDirectory = function (directoryName) {\n        if (directoryName === null || directoryName === undefined) {\n            throw new Error('ArgumentException: string cannot be null or undefined');\n        }\n        if (directoryName.length === 0) {\n            throw new Error('ArgumentException: string cannot be empty');\n        }\n        if (directoryName.slice(-1) !== '/') {\n            directoryName += '/';\n        }\n        if (this.files.indexOf(directoryName) !== -1) {\n            throw new Error('item with same name already exist');\n        }\n        this.files.push(directoryName);\n    };\n    /**\n     * gets item at specified index\n     * @param {number} index - item index\n     * @returns {ZipArchiveItem}\n     */\n    ZipArchive.prototype.getItem = function (index) {\n        if (index >= 0 && index < this.files.length) {\n            return this.files[index];\n        }\n        return undefined;\n    };\n    /**\n     * determines whether an element is in the collection\n     * @param {string | ZipArchiveItem} item - item to search\n     * @returns {boolean}\n     */\n    ZipArchive.prototype.contains = function (item) {\n        return this.files.indexOf(item) !== -1 ? true : false;\n    };\n    /**\n     * save archive with specified file name\n     * @param {string} fileName save archive with specified file name\n     * @returns {Promise<ZipArchive>}\n     */\n    ZipArchive.prototype.save = function (fileName) {\n        if (fileName === null || fileName === undefined || fileName.length === 0) {\n            throw new Error('ArgumentException: fileName cannot be null or undefined');\n        }\n        if (this.files.length === 0) {\n            throw new Error('InvalidOperation');\n        }\n        var zipArchive = this;\n        var promise;\n        return promise = new Promise(function (resolve, reject) {\n            zipArchive.saveInternal(fileName, false).then(function () {\n                resolve(zipArchive);\n            });\n        });\n    };\n    /**\n     * Save archive as blob\n     * @return {Promise<Blob>}\n     */\n    ZipArchive.prototype.saveAsBlob = function () {\n        var zipArchive = this;\n        var promise;\n        return promise = new Promise(function (resolve, reject) {\n            zipArchive.saveInternal('', true).then(function (blob) {\n                resolve(blob);\n            });\n        });\n    };\n    ZipArchive.prototype.saveInternal = function (fileName, skipFileSave) {\n        var _this = this;\n        var zipArchive = this;\n        var promise;\n        return promise = new Promise(function (resolve, reject) {\n            var zipData = [];\n            var dirLength = 0;\n            for (var i = 0; i < zipArchive.files.length; i++) {\n                var compressedObject = _this.getCompressedData(_this.files[i]);\n                compressedObject.then(function (data) {\n                    dirLength = zipArchive.constructZippedObject(zipData, data, dirLength, data.isDirectory);\n                    if (zipData.length === zipArchive.files.length) {\n                        var blob = zipArchive.writeZippedContent(fileName, zipData, dirLength, skipFileSave);\n                        resolve(blob);\n                    }\n                });\n            }\n        });\n    };\n    /**\n     * release allocated un-managed resource\n     * @returns {void}\n     */\n    ZipArchive.prototype.destroy = function () {\n        if (this.files !== undefined && this.files.length > 0) {\n            for (var i = 0; i < this.files.length; i++) {\n                var file = this.files[i];\n                if (file instanceof ZipArchiveItem) {\n                    file.destroy();\n                }\n                file = undefined;\n            }\n            this.files = [];\n        }\n        this.files = undefined;\n        this.level = undefined;\n    };\n    ZipArchive.prototype.getCompressedData = function (item) {\n        var zipArchive = this;\n        var promise = new Promise(function (resolve, reject) {\n            if (item instanceof ZipArchiveItem) {\n                var reader_1 = new FileReader();\n                reader_1.onload = function () {\n                    var input = new Uint8Array(reader_1.result);\n                    var data = {\n                        fileName: item.name, crc32Value: 0, compressedData: [],\n                        compressedSize: undefined, uncompressedDataSize: input.length, compressionType: undefined,\n                        isDirectory: false\n                    };\n                    if (zipArchive.level === 'Normal') {\n                        zipArchive.compressData(input, data, CRC32TABLE);\n                        var length_1 = 0;\n                        for (var i = 0; i < data.compressedData.length; i++) {\n                            length_1 += data.compressedData[i].length;\n                        }\n                        data.compressedSize = length_1;\n                        data.compressionType = '\\x08\\x00'; //Deflated = 8\n                    }\n                    else {\n                        data.compressedSize = input.length;\n                        data.crc32Value = zipArchive.calculateCrc32Value(0, input, CRC32TABLE);\n                        data.compressionType = '\\x00\\x00'; // Stored = 0\n                        data.compressedData.push(input);\n                    }\n                    resolve(data);\n                };\n                reader_1.readAsArrayBuffer(item.data);\n            }\n            else {\n                var data = {\n                    fileName: item, crc32Value: 0, compressedData: '', compressedSize: 0, uncompressedDataSize: 0,\n                    compressionType: '\\x00\\x00', isDirectory: true\n                };\n                resolve(data);\n            }\n        });\n        return promise;\n    };\n    ZipArchive.prototype.compressData = function (input, data, crc32Table) {\n        var compressor = new CompressedStreamWriter(true);\n        var currentIndex = 0;\n        var nextIndex = 0;\n        do {\n            if (currentIndex >= input.length) {\n                compressor.close();\n                break;\n            }\n            nextIndex = Math.min(input.length, currentIndex + 16384);\n            var subArray = input.subarray(currentIndex, nextIndex);\n            data.crc32Value = this.calculateCrc32Value(data.crc32Value, subArray, crc32Table);\n            compressor.write(subArray, 0, nextIndex - currentIndex);\n            currentIndex = nextIndex;\n        } while (currentIndex <= input.length);\n        data.compressedData = compressor.compressedData;\n        compressor.destroy();\n    };\n    ZipArchive.prototype.constructZippedObject = function (zipParts, data, dirLength, isDirectory) {\n        var extFileAttr = 0;\n        var date = new Date();\n        if (isDirectory) {\n            extFileAttr = extFileAttr | 0x00010; // directory flag\n        }\n        extFileAttr = extFileAttr | (0 & 0x3F);\n        var header = this.writeHeader(data, date);\n        var localHeader = 'PK\\x03\\x04' + header + data.fileName;\n        var centralDir = this.writeCentralDirectory(data, header, dirLength, extFileAttr);\n        zipParts.push({ localHeader: localHeader, centralDir: centralDir, compressedData: data });\n        return dirLength + localHeader.length + data.compressedSize;\n    };\n    ZipArchive.prototype.writeHeader = function (data, date) {\n        var zipHeader = '';\n        zipHeader += '\\x0A\\x00' + '\\x00\\x00'; // version needed to extract & general purpose bit flag\n        zipHeader += data.compressionType; // compression method Deflate=8,Stored=0\n        zipHeader += this.getBytes(this.getModifiedTime(date), 2); // last modified Time\n        zipHeader += this.getBytes(this.getModifiedDate(date), 2); // last modified date\n        zipHeader += this.getBytes(data.crc32Value, 4); // crc-32 value\n        zipHeader += this.getBytes(data.compressedSize, 4); // compressed file size\n        zipHeader += this.getBytes(data.uncompressedDataSize, 4); // uncompressed file size\n        zipHeader += this.getBytes(data.fileName.length, 2); // file name length\n        zipHeader += this.getBytes(0, 2); // extra field length\n        return zipHeader;\n    };\n    ZipArchive.prototype.writeZippedContent = function (fileName, zipData, localDirLen, skipFileSave) {\n        var cenDirLen = 0;\n        var buffer = [];\n        for (var i = 0; i < zipData.length; i++) {\n            var item = zipData[i];\n            cenDirLen += item.centralDir.length;\n            buffer.push(this.getArrayBuffer(item.localHeader));\n            while (item.compressedData.compressedData.length) {\n                buffer.push(item.compressedData.compressedData.shift().buffer);\n            }\n        }\n        for (var i = 0; i < zipData.length; i++) {\n            buffer.push(this.getArrayBuffer(zipData[i].centralDir));\n        }\n        buffer.push(this.getArrayBuffer(this.writeFooter(zipData, cenDirLen, localDirLen)));\n        var blob = new Blob(buffer, { type: 'application/zip' });\n        if (!skipFileSave) {\n            Save.save(fileName, blob);\n        }\n        return blob;\n    };\n    ZipArchive.prototype.writeCentralDirectory = function (data, localHeader, offset, externalFileAttribute) {\n        var directoryHeader = 'PK\\x01\\x02' +\n            this.getBytes(0x0014, 2) + localHeader + // inherit from file header\n            this.getBytes(0, 2) + // comment length\n            '\\x00\\x00' + '\\x00\\x00' + // internal file attributes \n            this.getBytes(externalFileAttribute, 4) + // external file attributes\n            this.getBytes(offset, 4) + // local fileHeader relative offset\n            data.fileName;\n        return directoryHeader;\n    };\n    ZipArchive.prototype.writeFooter = function (zipData, centralLength, localLength) {\n        var dirEnd = 'PK\\x05\\x06' + '\\x00\\x00' + '\\x00\\x00' +\n            this.getBytes(zipData.length, 2) + this.getBytes(zipData.length, 2) +\n            this.getBytes(centralLength, 4) + this.getBytes(localLength, 4) +\n            this.getBytes(0, 2);\n        return dirEnd;\n    };\n    ZipArchive.prototype.getArrayBuffer = function (input) {\n        var a = new Uint8Array(input.length);\n        for (var j = 0; j < input.length; ++j) {\n            a[j] = input.charCodeAt(j) & 0xFF;\n        }\n        return a.buffer;\n    };\n    ZipArchive.prototype.getBytes = function (value, offset) {\n        var bytes = '';\n        for (var i = 0; i < offset; i++) {\n            bytes += String.fromCharCode(value & 0xff);\n            value = value >>> 8;\n        }\n        return bytes;\n    };\n    ZipArchive.prototype.getModifiedTime = function (date) {\n        var modTime = date.getHours();\n        modTime = modTime << 6;\n        modTime = modTime | date.getMinutes();\n        modTime = modTime << 5;\n        return modTime = modTime | date.getSeconds() / 2;\n    };\n    ZipArchive.prototype.getModifiedDate = function (date) {\n        var modiDate = date.getFullYear() - 1980;\n        modiDate = modiDate << 4;\n        modiDate = modiDate | (date.getMonth() + 1);\n        modiDate = modiDate << 5;\n        return modiDate = modiDate | date.getDate();\n    };\n    ZipArchive.prototype.calculateCrc32Value = function (crc32Value, input, crc32Table) {\n        crc32Value ^= -1;\n        for (var i = 0; i < input.length; i++) {\n            crc32Value = (crc32Value >>> 8) ^ crc32Table[(crc32Value ^ input[i]) & 0xFF];\n        }\n        return (crc32Value ^ (-1));\n    };\n    /**\n     * construct cyclic redundancy code table\n     * @private\n     */\n    ZipArchive.initCrc32Table = function () {\n        var i;\n        for (var j = 0; j < 256; j++) {\n            i = j;\n            for (var k = 0; k < 8; k++) {\n                i = ((i & 1) ? (0xEDB88320 ^ (i >>> 1)) : (i >>> 1));\n            }\n            CRC32TABLE[j] = i;\n        }\n    };\n    return ZipArchive;\n}());\nexport { ZipArchive };\n/**\n * Class represent unique ZipArchive item\n * ```typescript\n * let archiveItem = new ZipArchiveItem(archive, 'directoryName\\fileName.txt');\n * ```\n */\nvar ZipArchiveItem = /** @class */ (function () {\n    /**\n     * constructor for creating {ZipArchiveItem} instance\n     * @param {Blob|ArrayBuffer} data file data\n     * @param {itemName} itemName absolute file path\n     */\n    function ZipArchiveItem(data, itemName) {\n        if (data === null || data === undefined) {\n            throw new Error('ArgumentException: data cannot be null or undefined');\n        }\n        if (itemName === null || itemName === undefined) {\n            throw new Error('ArgumentException: string cannot be null or undefined');\n        }\n        if (itemName.length === 0) {\n            throw new Error('string cannot be empty');\n        }\n        this.data = data;\n        this.name = itemName;\n    }\n    Object.defineProperty(ZipArchiveItem.prototype, \"name\", {\n        /**\n         * Get the name of archive item\n         * @returns string\n         */\n        get: function () {\n            return this.fileName;\n        },\n        /**\n         * Set the name of archive item\n         * @param  {string} value\n         */\n        set: function (value) {\n            this.fileName = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * release allocated un-managed resource\n     * @returns {void}\n     */\n    ZipArchiveItem.prototype.destroy = function () {\n        this.fileName = undefined;\n        this.data = undefined;\n    };\n    return ZipArchiveItem;\n}());\nexport { ZipArchiveItem };\n","import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Internationalization } from '@syncfusion/ej2-base';\n// import { IValueFormatter } from '../base/interface';\n/**\n * ValueFormatter class to globalize the value.\n * @private\n */\nvar ValueFormatter = /** @class */ (function () {\n    function ValueFormatter(cultureName) {\n        this.intl = new Internationalization();\n        // if (!isNullOrUndefined(cultureName)) {\n        //     this.intl.culture = cultureName;\n        // }\n    }\n    ValueFormatter.prototype.getFormatFunction = function (format) {\n        if (format.type) {\n            return this.intl.getDateFormat(format);\n        }\n        else {\n            return this.intl.getNumberFormat(format);\n        }\n    };\n    // public getParserFunction(format: NumberFormatOptions | DateFormatOptions): Function {\n    //     if ((<DateFormatOptions>format).type) {\n    //         return this.intl.getDateParser(<DateFormatOptions>format);\n    //     } else {\n    //         return this.intl.getNumberParser(<DateFormatOptions>format);\n    //     }\n    // }\n    // public fromView(value: string, format: Function, type?: string): string | number | Date {\n    //     if (type === 'date' || type === 'datetime' || type === 'number') {\n    //         return format(value);\n    //     } else {\n    //         return value;\n    //     }\n    // }\n    ValueFormatter.prototype.toView = function (value, format) {\n        var result = value;\n        if (!isNullOrUndefined(format) && !isNullOrUndefined(value)) {\n            result = format(value);\n        }\n        return result;\n    };\n    // public setCulture(cultureName: string): void {\n    //     if (!isNullOrUndefined(cultureName)) {\n    //         setCulture(cultureName);\n    //     }\n    // }\n    /* tslint:disable:no-any */\n    ValueFormatter.prototype.displayText = function (value, format) {\n        return this.toView(value, this.getFormatFunction(format));\n    };\n    return ValueFormatter;\n}());\nexport { ValueFormatter };\n","import { ValueFormatter } from './value-formatter';\n/**\n * CsvHelper class\n * @private\n */\nvar CsvHelper = /** @class */ (function () {\n    /* tslint:disable:no-any */\n    function CsvHelper(json) {\n        this.csvStr = '';\n        this.formatter = new ValueFormatter();\n        this.isMicrosoftBrowser = !(!navigator.msSaveBlob);\n        if (json.styles !== null && json.styles !== undefined) {\n            this.globalStyles = new Map();\n            for (var i = 0; i < json.styles.length; i++) {\n                if (json.styles[i].name !== undefined && json.styles[i].numberFormat !== undefined) {\n                    this.globalStyles.set(json.styles[i].name, json.styles[i].numberFormat);\n                }\n            }\n        }\n        // Parses Worksheets data to DOM.        \n        if (json.worksheets !== null && json.worksheets !== undefined) {\n            this.parseWorksheet(json.worksheets[0]);\n        }\n        //this.csvStr = 'a1,a2,a3\\nb1,b2,b3';\n    }\n    CsvHelper.prototype.parseWorksheet = function (json) {\n        //Rows\n        if (json.rows !== null && json.rows !== undefined) {\n            this.parseRows(json.rows);\n        }\n    };\n    /* tslint:disable:no-any */\n    CsvHelper.prototype.parseRows = function (rows) {\n        var count = 1;\n        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n            var row = rows_1[_i];\n            //Row index\n            if (row.index !== null && row.index !== undefined) {\n                while (count < row.index) {\n                    this.csvStr += '\\n';\n                    count++;\n                }\n                this.parseRow(row);\n            }\n            else {\n                throw Error('Row index is missing.');\n            }\n        }\n    };\n    /* tslint:disable:no-any */\n    CsvHelper.prototype.parseRow = function (row) {\n        if (row.cells !== null && row.cells !== undefined) {\n            var count = 1;\n            for (var _i = 0, _a = row.cells; _i < _a.length; _i++) {\n                var cell = _a[_i];\n                //cell index\n                if (cell.index !== null && cell.index !== undefined) {\n                    while (count < cell.index) {\n                        this.csvStr += ',';\n                        count++;\n                    }\n                    this.parseCell(cell);\n                }\n                else {\n                    throw Error('Cell index is missing.');\n                }\n            }\n        }\n    };\n    /* tslint:disable:no-any */\n    CsvHelper.prototype.parseCell = function (cell) {\n        var csv = this.csvStr;\n        if (cell.value !== undefined) {\n            if (cell.value instanceof Date) {\n                if (cell.style !== undefined && cell.style.numberFormat !== undefined) {\n                    /* tslint:disable-next-line:max-line-length */\n                    csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: 'dateTime', skeleton: cell.style.numberFormat }));\n                }\n                else if (cell.style !== undefined && cell.style.name !== undefined && this.globalStyles.has(cell.style.name)) {\n                    /* tslint:disable-next-line:max-line-length */\n                    csv += this.parseCellValue(this.formatter.displayText(cell.value, { type: 'dateTime', skeleton: this.globalStyles.get(cell.style.name) }));\n                }\n                else {\n                    csv += cell.value;\n                }\n            }\n            else if (typeof (cell.value) === 'boolean') {\n                csv += cell.value ? 'TRUE' : 'FALSE';\n            }\n            else if (typeof (cell.value) === 'number') {\n                if (cell.style !== undefined && cell.style.numberFormat !== undefined) {\n                    /* tslint:disable-next-line:max-line-length */\n                    csv += this.parseCellValue(this.formatter.displayText(cell.value, { format: cell.style.numberFormat }));\n                }\n                else if (cell.style !== undefined && cell.style.name !== undefined && this.globalStyles.has(cell.style.name)) {\n                    /* tslint:disable-next-line:max-line-length */\n                    csv += this.parseCellValue(this.formatter.displayText(cell.value, { format: this.globalStyles.get(cell.style.name) }));\n                }\n                else {\n                    csv += cell.value;\n                }\n            }\n            else {\n                csv += this.parseCellValue(cell.value);\n            }\n        }\n        this.csvStr = csv;\n    };\n    CsvHelper.prototype.parseCellValue = function (value) {\n        if (value.indexOf(',') !== -1) {\n            return value = '\\\"' + value + '\\\"';\n        }\n        else {\n            return value;\n        }\n    };\n    /**\n     * Saves the file with specified name and sends the file to client browser\n     * @param  {string} fileName- file name to save.\n     * @param  {Blob} buffer- the content to write in file\n     */\n    CsvHelper.prototype.save = function (fileName) {\n        this.buffer = new Blob(['\\ufeff' + this.csvStr], { type: 'text/csv;charset=UTF-8' });\n        if (this.isMicrosoftBrowser) {\n            navigator.msSaveBlob(this.buffer, fileName);\n        }\n        else {\n            var dataUrl_1 = window.URL.createObjectURL(this.buffer);\n            var dwlLink = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');\n            dwlLink.download = fileName;\n            dwlLink.href = dataUrl_1;\n            var event_1 = document.createEvent('MouseEvent');\n            event_1.initEvent('click', true, true);\n            dwlLink.dispatchEvent(event_1);\n            setTimeout(function () {\n                window.URL.revokeObjectURL(dataUrl_1);\n            });\n        }\n    };\n    CsvHelper.prototype.saveAsBlob = function () {\n        return new Blob(['\\ufeff' + this.csvStr], { type: 'text/csv;charset=UTF-8' });\n    };\n    return CsvHelper;\n}());\nexport { CsvHelper };\n","/**\n * BlobHelper class\n * @private\n */\nvar BlobHelper = /** @class */ (function () {\n    function BlobHelper() {\n        /* tslint:disable:no-any */\n        this.parts = [];\n    }\n    /* tslint:disable:no-any */\n    BlobHelper.prototype.append = function (part) {\n        this.parts.push(part);\n        this.blob = undefined; // Invalidate the blob\n    };\n    BlobHelper.prototype.getBlob = function () {\n        return new Blob(this.parts, { type: 'text/plain' });\n    };\n    return BlobHelper;\n}());\nexport { BlobHelper };\n","import { Worksheets } from './worksheets';\nimport { Worksheet, FreezePane, MergeCell, MergeCells, HyperLink, Grouping } from './worksheet';\nimport { CellStyle, Font, Borders, CellXfs, Alignment, NumFmt, CellStyleXfs, CellStyles } from './cell-style';\nimport { Column } from './column';\nimport { Row, Rows } from './row';\nimport { Cell, Cells } from './cell';\nimport { ZipArchive, ZipArchiveItem } from '@syncfusion/ej2-compression';\nimport { CsvHelper } from './csv-helper';\nimport { Internationalization, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { BlobHelper } from './blob-helper';\n/**\n * Workbook class\n */\nvar Workbook = /** @class */ (function () {\n    /* tslint:disable:no-any */\n    function Workbook(json, saveType, culture, currencyString) {\n        this.sharedStringCount = 0;\n        this.unitsProportions = [\n            96 / 75.0,\n            96 / 300.0,\n            96,\n            96 / 25.4,\n            96 / 2.54,\n            1,\n            96 / 72.0,\n            96 / 72.0 / 12700,\n        ];\n        /* tslint:disable:no-any */\n        this.hyperlinkStyle = { fontColor: '#0000FF', underline: true };\n        if (culture !== undefined) {\n            this.culture = culture;\n        }\n        else {\n            this.culture = 'en-US';\n        }\n        if (currencyString !== undefined) {\n            this.currency = currencyString;\n        }\n        else {\n            this.currency = 'USD';\n        }\n        this.intl = new Internationalization(this.culture);\n        this.mSaveType = saveType;\n        if (saveType === 'xlsx') {\n            this.mArchive = new ZipArchive();\n            this.sharedString = [];\n            this.mFonts = [];\n            this.mBorders = [];\n            this.mStyles = [];\n            this.printTitles = new Map();\n            this.cellStyles = new Map();\n            this.mNumFmt = new Map();\n            this.mFills = new Map();\n            this.mStyles.push(new CellStyle());\n            this.mFonts.push(new Font());\n            /* tslint:disable */\n            this.cellStyles.set('Normal', new CellStyles());\n            /* tslint:enable */\n            this.mCellXfs = [];\n            this.mCellStyleXfs = [];\n            if (json.styles !== null && json.styles !== undefined) {\n                /* tslint:disable-next-line:no-any */\n                this.globalStyles = new Map();\n                for (var i = 0; i < json.styles.length; i++) {\n                    if (json.styles[i].name !== undefined) {\n                        if (!this.cellStyles.has(json.styles[i].name)) {\n                            var cellStyle = new CellStyle();\n                            cellStyle.isGlobalStyle = true;\n                            this.parserCellStyle(json.styles[i], cellStyle, 'none');\n                            var cellStylesIn = new CellStyles();\n                            cellStylesIn.name = cellStyle.name;\n                            cellStylesIn.xfId = (cellStyle.index - 1);\n                            this.cellStyles.set(cellStylesIn.name, cellStylesIn);\n                            /* tslint:disable-next-line:no-any */\n                            var tFormat = {};\n                            if (json.styles[i].numberFormat !== undefined) {\n                                tFormat.format = json.styles[i].numberFormat;\n                            }\n                            if (json.styles[i].type !== undefined) {\n                                tFormat.type = json.styles[i].type;\n                            }\n                            else {\n                                tFormat.type = 'datetime';\n                            }\n                            if (tFormat.format !== undefined) {\n                                this.globalStyles.set(json.styles[i].name, tFormat);\n                            }\n                        }\n                        else {\n                            throw Error('Style name ' + json.styles[i].name + ' is already existed');\n                        }\n                    }\n                }\n            }\n            // Parses Worksheets data to DOM.        \n            if (json.worksheets !== null && json.worksheets !== undefined) {\n                this.parserWorksheets(json.worksheets);\n            }\n            else {\n                throw Error('Worksheet is expected.');\n            }\n            // Parses the BuiltInProperties data to DOM.        \n            if (json.builtInProperties !== null && json.builtInProperties !== undefined) {\n                this.builtInProperties = new BuiltInProperties();\n                this.parserBuiltInProperties(json.builtInProperties, this.builtInProperties);\n            }\n        }\n        else {\n            this.csvHelper = new CsvHelper(json);\n        }\n    }\n    /* tslint:disable:no-any */\n    Workbook.prototype.parserBuiltInProperties = function (jsonBuiltInProperties, builtInProperties) {\n        //Author\n        if (jsonBuiltInProperties.author !== null && jsonBuiltInProperties.author !== undefined) {\n            builtInProperties.author = jsonBuiltInProperties.author;\n        }\n        //Comments\n        if (jsonBuiltInProperties.comments !== null && jsonBuiltInProperties.comments !== undefined) {\n            builtInProperties.comments = jsonBuiltInProperties.comments;\n        }\n        //Category\n        if (jsonBuiltInProperties.category !== null && jsonBuiltInProperties.category !== undefined) {\n            builtInProperties.category = jsonBuiltInProperties.category;\n        }\n        //Company\n        if (jsonBuiltInProperties.company !== null && jsonBuiltInProperties.company !== undefined) {\n            builtInProperties.company = jsonBuiltInProperties.company;\n        }\n        //Manager\n        if (jsonBuiltInProperties.manager !== null && jsonBuiltInProperties.manager !== undefined) {\n            builtInProperties.manager = jsonBuiltInProperties.manager;\n        }\n        //Subject\n        if (jsonBuiltInProperties.subject !== null && jsonBuiltInProperties.subject !== undefined) {\n            builtInProperties.subject = jsonBuiltInProperties.subject;\n        }\n        //Title\n        if (jsonBuiltInProperties.title !== null && jsonBuiltInProperties.title !== undefined) {\n            builtInProperties.title = jsonBuiltInProperties.title;\n        }\n        //Creation date\n        if (jsonBuiltInProperties.createdDate !== null && jsonBuiltInProperties.createdDate !== undefined) {\n            builtInProperties.createdDate = jsonBuiltInProperties.createdDate;\n        }\n        //Modified date\n        if (jsonBuiltInProperties.modifiedDate !== null && jsonBuiltInProperties.modifiedDate !== undefined) {\n            builtInProperties.modifiedDate = jsonBuiltInProperties.modifiedDate;\n        }\n        //Tags\n        if (jsonBuiltInProperties.tags !== null && jsonBuiltInProperties.tags !== undefined) {\n            builtInProperties.tags = jsonBuiltInProperties.tags;\n        }\n        //Status\n        if (jsonBuiltInProperties.status !== null && jsonBuiltInProperties.status !== undefined) {\n            builtInProperties.status = jsonBuiltInProperties.status;\n        }\n    };\n    /* tslint:disable:no-any */\n    Workbook.prototype.parserWorksheets = function (json) {\n        this.worksheets = new Worksheets();\n        var length = json.length;\n        for (var i = 0; i < length; i++) {\n            var jsonSheet = json[i];\n            var sheet = new Worksheet();\n            this.mergeCells = new MergeCells();\n            this.mergedCellsStyle = new Map();\n            this.mHyperLinks = [];\n            //Name\n            if (jsonSheet.name !== null && jsonSheet.name !== undefined) {\n                sheet.name = jsonSheet.name;\n            }\n            else {\n                sheet.name = 'Sheet' + (i + 1).toString();\n            }\n            sheet.index = (i + 1);\n            //Columns\n            if (jsonSheet.columns !== null && jsonSheet.columns !== undefined) {\n                this.parserColumns(jsonSheet.columns, sheet);\n            }\n            //Rows\n            if (jsonSheet.rows !== null && jsonSheet.rows !== undefined) {\n                this.parserRows(jsonSheet.rows, sheet);\n            }\n            //showGridLines\n            if (jsonSheet.showGridLines !== null && jsonSheet.showGridLines !== undefined) {\n                sheet.showGridLines = jsonSheet.showGridLines;\n            }\n            //FreezePanes\n            if (jsonSheet.freeze !== null && jsonSheet.freeze !== undefined) {\n                this.parserFreezePanes(jsonSheet.freeze, sheet);\n            }\n            //Print Title\n            if (jsonSheet.printTitle !== null && jsonSheet.printTitle !== undefined) {\n                this.parserPrintTitle(jsonSheet.printTitle, sheet);\n            }\n            if (jsonSheet.pageSetup !== undefined) {\n                if (jsonSheet.pageSetup.isSummaryRowBelow !== undefined) {\n                    sheet.isSummaryRowBelow = jsonSheet.pageSetup.isSummaryRowBelow;\n                }\n            }\n            sheet.index = (i + 1);\n            sheet.mergeCells = this.mergeCells;\n            sheet.hyperLinks = this.mHyperLinks;\n            this.worksheets.push(sheet);\n        }\n    };\n    /* tslint:disable:no-any */\n    Workbook.prototype.mergeOptions = function (fromJson, toJson) {\n        /* tslint:disable:no-any */\n        var result = {};\n        this.applyProperties(fromJson, result);\n        this.applyProperties(toJson, result);\n        return result;\n    };\n    /* tslint:disable:no-any */\n    Workbook.prototype.applyProperties = function (sourceJson, destJson) {\n        var keys = Object.keys(sourceJson);\n        for (var index = 0; index < keys.length; index++) {\n            if (keys[index] !== 'name') {\n                destJson[keys[index]] = sourceJson[keys[index]];\n            }\n        }\n    };\n    Workbook.prototype.getCellName = function (row, column) {\n        return this.getColumnName(column) + row.toString();\n    };\n    Workbook.prototype.getColumnName = function (col) {\n        col--;\n        var strColumnName = '';\n        do {\n            var iCurrentDigit = col % 26;\n            col = col / 26 - 1;\n            strColumnName = String.fromCharCode(65 + iCurrentDigit) + strColumnName;\n        } while (col >= 0);\n        return strColumnName;\n    };\n    /* tslint:disable:no-any */\n    Workbook.prototype.parserPrintTitle = function (json, sheet) {\n        var printTitleName = '';\n        var titleRowName;\n        if (json.fromRow !== null && json.fromRow !== undefined) {\n            var fromRow = json.fromRow;\n            var toRow = void 0;\n            if (json.toRow !== null && json.toRow !== undefined) {\n                toRow = json.toRow;\n            }\n            else {\n                toRow = json.fromRow;\n            }\n            titleRowName = '$' + fromRow + ':$' + toRow;\n        }\n        var titleColName;\n        if (json.fromColumn !== null && json.fromColumn !== undefined) {\n            var fromColumn = json.fromColumn;\n            var toColumn = void 0;\n            if (json.toColumn !== null && json.toColumn !== undefined) {\n                toColumn = json.toColumn;\n            }\n            else {\n                toColumn = json.fromColumn;\n            }\n            titleColName = '$' + this.getColumnName(fromColumn) + ':$' + this.getColumnName(toColumn);\n        }\n        if (titleRowName !== undefined) {\n            printTitleName += (sheet.name + '!' + titleRowName);\n        }\n        if (titleColName !== undefined && titleRowName !== undefined) {\n            printTitleName += ',' + (sheet.name + '!' + titleColName);\n        }\n        else if (titleColName !== undefined) {\n            printTitleName += (sheet.name + '!' + titleColName);\n        }\n        if (printTitleName !== '') {\n            this.printTitles.set(sheet.index - 1, printTitleName);\n        }\n    };\n    /* tslint:disable:no-any */\n    Workbook.prototype.parserFreezePanes = function (json, sheet) {\n        sheet.freezePanes = new FreezePane();\n        if (json.row !== null && json.row !== undefined) {\n            sheet.freezePanes.row = json.row;\n        }\n        else {\n            sheet.freezePanes.row = 0;\n        }\n        if (json.column !== null && json.column !== undefined) {\n            sheet.freezePanes.column = json.column;\n        }\n        else {\n            sheet.freezePanes.column = 0;\n        }\n        sheet.freezePanes.leftCell = this.getCellName(sheet.freezePanes.row + 1, sheet.freezePanes.column + 1);\n    };\n    /* tslint:disable:no-any */\n    Workbook.prototype.parserColumns = function (json, sheet) {\n        var columnsLength = json.length;\n        sheet.columns = [];\n        for (var column = 0; column < columnsLength; column++) {\n            var col = new Column();\n            if (json[column].index !== null && json[column].index !== undefined) {\n                col.index = json[column].index;\n            }\n            else {\n                throw Error('Column index is missing.');\n            }\n            if (json[column].width !== null && json[column].width !== undefined) {\n                col.width = json[column].width;\n            }\n            sheet.columns.push(col);\n        }\n    };\n    /* tslint:disable:no-any */\n    Workbook.prototype.parserRows = function (json, sheet) {\n        var rowsLength = json.length;\n        sheet.rows = new Rows();\n        var rowId = 0;\n        for (var r = 0; r < rowsLength; r++) {\n            var row = this.parserRow(json[r], rowId);\n            rowId = row.index;\n            sheet.rows.add(row);\n        }\n        this.insertMergedCellsStyle(sheet);\n    };\n    Workbook.prototype.insertMergedCellsStyle = function (sheet) {\n        var _this = this;\n        if (this.mergeCells.length > 0) {\n            this.mergedCellsStyle.forEach(function (value, key) {\n                var row = sheet.rows.filter(function (item) {\n                    return item.index === value.y;\n                })[0];\n                if (!isNullOrUndefined(row)) {\n                    var cell = row.cells.filter(function (item) {\n                        return item.index === value.x;\n                    })[0];\n                    if (!isNullOrUndefined(cell)) {\n                        cell.styleIndex = value.styleIndex;\n                    }\n                    else {\n                        var cells = row.cells.filter(function (item) {\n                            return item.index <= value.x;\n                        });\n                        var insertIndex = 0;\n                        if (cells.length > 0) {\n                            insertIndex = row.cells.indexOf(cells[cells.length - 1]) + 1;\n                        }\n                        row.cells.splice(insertIndex, 0, _this.createCell(value, key));\n                    }\n                }\n                else {\n                    var rows = sheet.rows.filter(function (item) {\n                        return item.index <= value.y;\n                    });\n                    var rowToInsert = new Row();\n                    rowToInsert.index = value.y;\n                    rowToInsert.cells = new Cells();\n                    rowToInsert.cells.add(_this.createCell(value, key));\n                    var insertIndex = 0;\n                    if (rows.length > 0) {\n                        insertIndex = sheet.rows.indexOf(rows[rows.length - 1]) + 1;\n                    }\n                    sheet.rows.splice(insertIndex, 0, rowToInsert);\n                }\n            });\n        }\n    };\n    Workbook.prototype.createCell = function (value, key) {\n        var cellToInsert = new Cell();\n        cellToInsert.refName = key;\n        cellToInsert.index = value.x;\n        cellToInsert.cellStyle = new CellStyle();\n        cellToInsert.styleIndex = value.styleIndex;\n        return cellToInsert;\n    };\n    /* tslint:disable:no-any */\n    Workbook.prototype.parserRow = function (json, rowIndex) {\n        var row = new Row();\n        //Row Height\n        if (json.height !== null && json.height !== undefined) {\n            row.height = json.height;\n        }\n        //Row index\n        if (json.index !== null && json.index !== undefined) {\n            row.index = json.index;\n        }\n        else {\n            throw Error('Row index is missing.');\n        }\n        if (json.grouping !== null && json.grouping !== undefined) {\n            this.parseGrouping(json.grouping, row);\n        }\n        this.parseCells(json.cells, row);\n        return row;\n    };\n    /* tslint:disable:no-any */\n    Workbook.prototype.parseGrouping = function (json, row) {\n        row.grouping = new Grouping();\n        if (json.outlineLevel !== undefined) {\n            row.grouping.outlineLevel = json.outlineLevel;\n        }\n        if (json.isCollapsed !== undefined) {\n            row.grouping.isCollapsed = json.isCollapsed;\n        }\n        if (json.isHidden !== undefined) {\n            row.grouping.isHidden = json.isHidden;\n        }\n    };\n    /* tslint:disable:no-any */\n    Workbook.prototype.parseCells = function (json, row) {\n        row.cells = new Cells();\n        var cellsLength = json !== undefined ? json.length : 0;\n        var spanMin = 1;\n        var spanMax = 1;\n        var curCellIndex = 0;\n        for (var cellId = 0; cellId < cellsLength; cellId++) {\n            /* tslint:disable:no-any */\n            var jsonCell = json[cellId];\n            var cell = new Cell();\n            //cell index\n            if (jsonCell.index !== null && jsonCell.index !== undefined) {\n                cell.index = jsonCell.index;\n            }\n            else {\n                throw Error('Cell index is missing.');\n            }\n            if (cell.index < spanMin) {\n                spanMin = cell.index;\n            }\n            else if (cell.index > spanMax) {\n                spanMax = cell.index;\n            }\n            //Update the Cell name\n            cell.refName = this.getCellName(row.index, cell.index);\n            //Row span\n            if (jsonCell.rowSpan !== null && jsonCell.rowSpan !== undefined) {\n                cell.rowSpan = jsonCell.rowSpan - 1;\n            }\n            else {\n                cell.rowSpan = 0;\n            }\n            //Column span\n            if (jsonCell.colSpan !== null && jsonCell.colSpan !== undefined) {\n                cell.colSpan = jsonCell.colSpan - 1;\n            }\n            else {\n                cell.colSpan = 0;\n            }\n            //Hyperlink\n            if (jsonCell.hyperlink !== null && jsonCell.hyperlink !== undefined) {\n                var hyperLink = new HyperLink();\n                if (jsonCell.hyperlink.target !== undefined) {\n                    hyperLink.target = jsonCell.hyperlink.target;\n                    if (jsonCell.hyperlink.displayText !== undefined) {\n                        cell.value = jsonCell.hyperlink.displayText;\n                    }\n                    else {\n                        cell.value = jsonCell.hyperlink.target;\n                    }\n                    cell.type = this.getCellValueType(cell.value);\n                    hyperLink.ref = cell.refName;\n                    hyperLink.rId = (this.mHyperLinks.length + 1);\n                    this.mHyperLinks.push(hyperLink);\n                    cell.cellStyle = new CellStyle();\n                    /* tslint:disable-next-line:max-line-length */\n                    this.parserCellStyle((jsonCell.style !== undefined ? this.mergeOptions(jsonCell.style, this.hyperlinkStyle) : this.hyperlinkStyle), cell.cellStyle, 'string');\n                    cell.styleIndex = cell.cellStyle.index;\n                }\n            }\n            // formulas\n            if (jsonCell.formula !== null && jsonCell.formula !== undefined) {\n                cell.formula = jsonCell.formula;\n                cell.type = 'formula';\n            }\n            //Cell value\n            if (jsonCell.value !== null && jsonCell.value !== undefined) {\n                if (cell.formula !== undefined) {\n                    cell.value = 0;\n                }\n                else {\n                    cell.value = jsonCell.value;\n                    cell.type = this.getCellValueType(cell.value);\n                }\n            }\n            if (jsonCell.style !== null && jsonCell.style !== undefined && cell.styleIndex === undefined) {\n                cell.cellStyle = new CellStyle();\n                if (cell.value instanceof Date) {\n                    this.parserCellStyle(jsonCell.style, cell.cellStyle, cell.type, 14);\n                }\n                else {\n                    this.parserCellStyle(jsonCell.style, cell.cellStyle, cell.type);\n                }\n                cell.styleIndex = cell.cellStyle.index;\n            }\n            else if (cell.value instanceof Date) {\n                cell.cellStyle = new CellStyle();\n                this.parserCellStyle({}, cell.cellStyle, cell.type, 14);\n                cell.styleIndex = cell.cellStyle.index;\n            }\n            this.parseCellType(cell);\n            this.mergeCells = this.processMergeCells(cell, row.index, this.mergeCells);\n            row.cells.add(cell);\n            curCellIndex = (cell.index + 1);\n        }\n        row.spans = (spanMin) + ':' + (spanMax);\n    };\n    Workbook.prototype.applyGlobalStyle = function (json, cellStyle) {\n        var index = 0;\n        if (this.cellStyles.has(json.name)) {\n            cellStyle.index = this.mStyles.filter(function (a) { return (a.name === json.name); })[0].index;\n            cellStyle.name = json.name;\n        }\n    };\n    /* tslint:disable:no-any */\n    Workbook.prototype.parserCellStyle = function (json, cellStyle, cellType, defStyleIndex) {\n        //name\n        if (json.name !== null && json.name !== undefined) {\n            if (cellStyle.isGlobalStyle) {\n                cellStyle.name = json.name;\n            }\n            else {\n                this.applyGlobalStyle(json, cellStyle);\n                return;\n            }\n        }\n        //background color\n        if (json.backColor !== null && json.backColor !== undefined) {\n            cellStyle.backColor = json.backColor;\n        }\n        //borders\n        //leftBorder\n        cellStyle.borders = new Borders();\n        //AllBorder\n        if (json.borders !== null && json.borders !== undefined) {\n            this.parserBorder(json.borders, cellStyle.borders.all);\n        }\n        //leftborder\n        if (json.leftBorder !== null && json.leftBorder !== undefined) {\n            this.parserBorder(json.leftBorder, cellStyle.borders.left);\n        }\n        //rightBorder\n        if (json.rightBorder !== null && json.rightBorder !== undefined) {\n            this.parserBorder(json.rightBorder, cellStyle.borders.right);\n        }\n        //topBorder\n        if (json.topBorder !== null && json.topBorder !== undefined) {\n            this.parserBorder(json.topBorder, cellStyle.borders.top);\n        }\n        //bottomBorder\n        if (json.bottomBorder !== null && json.bottomBorder !== undefined) {\n            this.parserBorder(json.bottomBorder, cellStyle.borders.bottom);\n        }\n        //fontName\n        if (json.fontName !== null && json.fontName !== undefined) {\n            cellStyle.fontName = json.fontName;\n        }\n        //fontSize\n        if (json.fontSize !== null && json.fontSize !== undefined) {\n            cellStyle.fontSize = json.fontSize;\n        }\n        //fontColor\n        if (json.fontColor !== null && json.fontColor !== undefined) {\n            cellStyle.fontColor = json.fontColor;\n        }\n        //italic\n        if (json.italic !== null && json.italic !== undefined) {\n            cellStyle.italic = json.italic;\n        }\n        //bold\n        if (json.bold !== null && json.bold !== undefined) {\n            cellStyle.bold = json.bold;\n        }\n        //hAlign\n        if (json.hAlign !== null && json.hAlign !== undefined) {\n            cellStyle.hAlign = json.hAlign.toLowerCase();\n        }\n        //indent\n        if (json.indent !== null && json.indent !== undefined) {\n            cellStyle.indent = json.indent;\n            if (!(cellStyle.hAlign === 'left' || cellStyle.hAlign === 'right')) {\n                cellStyle.hAlign = 'left';\n            }\n        }\n        if (json.rotation !== null && json.rotation !== undefined) {\n            cellStyle.rotation = json.rotation;\n        }\n        //vAlign\n        if (json.vAlign !== null && json.vAlign !== undefined) {\n            cellStyle.vAlign = json.vAlign.toLowerCase();\n        }\n        //underline\n        if (json.underline !== null && json.underline !== undefined) {\n            cellStyle.underline = json.underline;\n        }\n        //wrapText\n        if (json.wrapText !== null && json.wrapText !== undefined) {\n            cellStyle.wrapText = json.wrapText;\n        }\n        //numberFormat\n        if (json.numberFormat !== null && json.numberFormat !== undefined) {\n            if (json.type !== null && json.type !== undefined) {\n                cellStyle.numberFormat = this.getNumberFormat(json.numberFormat, json.type);\n            }\n            else {\n                cellStyle.numberFormat = this.getNumberFormat(json.numberFormat, cellType);\n            }\n        }\n        else if (defStyleIndex !== undefined) {\n            cellStyle.numFmtId = 14;\n            cellStyle.numberFormat = 'GENERAL';\n        }\n        else {\n            cellStyle.numberFormat = 'GENERAL';\n        }\n        cellStyle.index = this.processCellStyle(cellStyle);\n    };\n    Workbook.prototype.switchNumberFormat = function (numberFormat, type) {\n        var format = this.getNumberFormat(numberFormat, type);\n        if (format !== numberFormat) {\n            var numFmt = this.mNumFmt.get(numberFormat);\n            if (numFmt !== undefined) {\n                numFmt.formatCode = format;\n                if (this.mNumFmt.has(format)) {\n                    for (var _i = 0, _a = this.mCellStyleXfs; _i < _a.length; _i++) {\n                        var cellStyleXfs = _a[_i];\n                        if (cellStyleXfs.numFmtId === numFmt.numFmtId) {\n                            cellStyleXfs.numFmtId = this.mNumFmt.get(format).numFmtId;\n                        }\n                    }\n                    for (var _b = 0, _c = this.mCellXfs; _b < _c.length; _b++) {\n                        var cellXfs = _c[_b];\n                        if (cellXfs.numFmtId === numFmt.numFmtId) {\n                            cellXfs.numFmtId = this.mNumFmt.get(format).numFmtId;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    Workbook.prototype.getNumberFormat = function (numberFormat, type) {\n        var returnFormat;\n        switch (type) {\n            case 'number':\n                try {\n                    returnFormat = this.intl.getNumberPattern({ format: numberFormat, currency: this.currency });\n                }\n                catch (error) {\n                    returnFormat = numberFormat;\n                }\n                break;\n            case 'datetime':\n                try {\n                    returnFormat = this.intl.getDatePattern({ skeleton: numberFormat, type: 'dateTime' }, true);\n                }\n                catch (error) {\n                    returnFormat = numberFormat;\n                }\n                break;\n            case 'date':\n                try {\n                    returnFormat = this.intl.getDatePattern({ skeleton: numberFormat, type: 'date' }, true);\n                }\n                catch (error) {\n                    returnFormat = numberFormat;\n                }\n                break;\n            case 'time':\n                try {\n                    returnFormat = this.intl.getDatePattern({ skeleton: numberFormat, type: 'time' }, true);\n                }\n                catch (error) {\n                    returnFormat = numberFormat;\n                }\n                break;\n            default:\n                returnFormat = numberFormat;\n                break;\n        }\n        return returnFormat;\n    };\n    /* tslint:disable:no-any */\n    Workbook.prototype.parserBorder = function (json, border) {\n        if (json.color !== null && json.color !== undefined) {\n            border.color = json.color;\n        }\n        else {\n            border.color = '#000000';\n        }\n        if (json.lineStyle !== null && json.lineStyle !== undefined) {\n            border.lineStyle = json.lineStyle;\n        }\n        else {\n            border.lineStyle = 'thin';\n        }\n    };\n    Workbook.prototype.processCellStyle = function (style) {\n        if (style.isGlobalStyle) {\n            this.processNumFormatId(style);\n            this.mStyles.push(style);\n            return this.mStyles.length;\n        }\n        else {\n            var compareResult = this.compareStyle(style);\n            if (!compareResult.result) {\n                this.processNumFormatId(style);\n                this.mStyles.push(style);\n                return this.mStyles.length;\n            }\n            else {\n                //Return the index of the already existing style.\n                return compareResult.index;\n            }\n        }\n    };\n    Workbook.prototype.processNumFormatId = function (style) {\n        if (style.numberFormat !== 'GENERAL' && !this.mNumFmt.has(style.numberFormat)) {\n            var id = this.mNumFmt.size + 164;\n            this.mNumFmt.set(style.numberFormat, new NumFmt(id, style.numberFormat));\n        }\n    };\n    Workbook.prototype.isNewFont = function (toCompareStyle) {\n        var result = false;\n        var index = 0;\n        for (var _i = 0, _a = this.mFonts; _i < _a.length; _i++) {\n            var font = _a[_i];\n            index++;\n            var fontColor = undefined;\n            if (toCompareStyle.fontColor !== undefined) {\n                fontColor = ('FF' + toCompareStyle.fontColor.replace('#', ''));\n            }\n            result = font.color === fontColor &&\n                font.b === toCompareStyle.bold &&\n                font.i === toCompareStyle.italic &&\n                font.u === toCompareStyle.underline &&\n                font.name === toCompareStyle.fontName &&\n                font.sz === toCompareStyle.fontSize;\n            if (result) {\n                break;\n            }\n        }\n        index = index - 1;\n        return { index: index, result: result };\n    };\n    Workbook.prototype.isNewBorder = function (toCompareStyle) {\n        var bStyle = new CellStyle();\n        if (this.isAllBorder(toCompareStyle.borders)) {\n            return (bStyle.borders.all.color === toCompareStyle.borders.all.color &&\n                bStyle.borders.all.lineStyle === toCompareStyle.borders.all.lineStyle);\n        }\n        else {\n            return (bStyle.borders.left.color === toCompareStyle.borders.left.color &&\n                bStyle.borders.left.lineStyle === toCompareStyle.borders.left.lineStyle &&\n                bStyle.borders.right.color === toCompareStyle.borders.right.color &&\n                bStyle.borders.right.lineStyle === toCompareStyle.borders.right.lineStyle &&\n                bStyle.borders.top.color === toCompareStyle.borders.top.color &&\n                bStyle.borders.top.lineStyle === toCompareStyle.borders.top.lineStyle &&\n                bStyle.borders.bottom.color === toCompareStyle.borders.bottom.color &&\n                bStyle.borders.bottom.lineStyle === toCompareStyle.borders.bottom.lineStyle);\n        }\n    };\n    Workbook.prototype.isAllBorder = function (toCompareBorder) {\n        var allBorderStyle = new CellStyle();\n        return allBorderStyle.borders.all.color !== toCompareBorder.all.color &&\n            allBorderStyle.borders.all.lineStyle !== toCompareBorder.all.lineStyle;\n    };\n    Workbook.prototype.compareStyle = function (toCompareStyle) {\n        var result = true;\n        var index = 0;\n        var globalStyleIndex = 0;\n        for (var _i = 0, _a = this.mStyles; _i < _a.length; _i++) {\n            var baseStyle = _a[_i];\n            result = baseStyle.isGlobalStyle ? false : (baseStyle.backColor === toCompareStyle.backColor &&\n                baseStyle.bold === toCompareStyle.bold &&\n                baseStyle.numFmtId === toCompareStyle.numFmtId &&\n                baseStyle.numberFormat === toCompareStyle.numberFormat &&\n                baseStyle.type === toCompareStyle.type &&\n                baseStyle.fontColor === toCompareStyle.fontColor &&\n                baseStyle.fontName === toCompareStyle.fontName &&\n                baseStyle.fontSize === toCompareStyle.fontSize &&\n                baseStyle.hAlign === toCompareStyle.hAlign &&\n                baseStyle.italic === toCompareStyle.italic &&\n                baseStyle.underline === toCompareStyle.underline &&\n                baseStyle.vAlign === toCompareStyle.vAlign &&\n                baseStyle.indent === toCompareStyle.indent &&\n                baseStyle.rotation === toCompareStyle.rotation &&\n                baseStyle.wrapText === toCompareStyle.wrapText &&\n                (baseStyle.borders.all.color === toCompareStyle.borders.all.color &&\n                    baseStyle.borders.all.lineStyle === toCompareStyle.borders.all.lineStyle) &&\n                (baseStyle.borders.left.color === toCompareStyle.borders.left.color &&\n                    baseStyle.borders.left.lineStyle === toCompareStyle.borders.left.lineStyle &&\n                    baseStyle.borders.right.color === toCompareStyle.borders.right.color &&\n                    baseStyle.borders.right.lineStyle === toCompareStyle.borders.right.lineStyle &&\n                    baseStyle.borders.top.color === toCompareStyle.borders.top.color &&\n                    baseStyle.borders.top.lineStyle === toCompareStyle.borders.top.lineStyle &&\n                    baseStyle.borders.bottom.color === toCompareStyle.borders.bottom.color &&\n                    baseStyle.borders.bottom.lineStyle === toCompareStyle.borders.bottom.lineStyle));\n            if (result) {\n                index = baseStyle.index;\n                break;\n            }\n        }\n        return { index: index, result: result };\n    };\n    Workbook.prototype.contains = function (array, item) {\n        var index = array.indexOf(item);\n        return index > -1 && index < array.length;\n    };\n    Workbook.prototype.getCellValueType = function (value) {\n        if (value instanceof Date) {\n            return 'datetime';\n        }\n        else if (typeof (value) === 'boolean') {\n            return 'boolean';\n        }\n        else if (typeof (value) === 'number') {\n            return 'number';\n        }\n        else {\n            return 'string';\n        }\n    };\n    Workbook.prototype.parseCellType = function (cell) {\n        var type = cell.type;\n        var saveType;\n        var value = cell.value;\n        switch (type) {\n            case 'datetime':\n                value = this.toOADate(value);\n                if (cell.cellStyle !== undefined && cell.cellStyle.name !== undefined) {\n                    if (this.globalStyles.has(cell.cellStyle.name)) {\n                        var value_1 = this.globalStyles.get(cell.cellStyle.name);\n                        this.switchNumberFormat(value_1.format, value_1.type);\n                    }\n                }\n                saveType = 'n';\n                break;\n            //TODO: Update the number format index and style\n            case 'boolean':\n                value = value ? 1 : 0;\n                saveType = 'b';\n                break;\n            case 'number':\n                saveType = 'n';\n                if (cell.cellStyle !== undefined && cell.cellStyle.name !== undefined) {\n                    if (this.globalStyles.has(cell.cellStyle.name)) {\n                        this.switchNumberFormat(this.globalStyles.get(cell.cellStyle.name).format, 'number');\n                    }\n                }\n                break;\n            case 'string':\n                this.sharedStringCount++;\n                saveType = 's';\n                if (!this.contains(this.sharedString, value)) {\n                    this.sharedString.push(value);\n                }\n                value = this.sharedString.indexOf(value);\n                break;\n            default:\n                break;\n        }\n        cell.saveType = saveType;\n        cell.value = value;\n    };\n    Workbook.prototype.saveAsBlob = function (blobSaveType) {\n        var _this = this;\n        switch (blobSaveType) {\n            case 'text/csv':\n                return new Promise(function (resolve, reject) {\n                    var obj = {};\n                    obj.blobData = _this.csvHelper.saveAsBlob();\n                    resolve(obj);\n                });\n            default:\n                return new Promise(function (resolve, reject) {\n                    _this.saveInternal();\n                    _this.mArchive.saveAsBlob().then(function (blob) {\n                        var obj = {};\n                        obj.blobData = new Blob([blob], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n                        resolve(obj);\n                    });\n                });\n        }\n    };\n    Workbook.prototype.save = function (fileName, proxyUrl) {\n        var _this = this;\n        if (fileName === null || fileName === undefined || fileName === '') {\n            throw new Error('Argument Null Exception: fileName cannot be null or empty');\n        }\n        var xlsxMatch = fileName.match('.xlsx$');\n        var csvMatch = fileName.match('.csv$');\n        if (xlsxMatch !== null && xlsxMatch[0] === ('.' + this.mSaveType)) {\n            this.saveInternal();\n            this.mArchive.save(fileName).then(function () {\n                _this.mArchive.destroy();\n            });\n        }\n        else if (csvMatch !== null && csvMatch[0] === ('.' + this.mSaveType)) {\n            this.csvHelper.save(fileName);\n        }\n        else {\n            throw Error('Save type and file extension is different.');\n        }\n    };\n    Workbook.prototype.saveInternal = function () {\n        this.saveWorkbook();\n        this.saveWorksheets();\n        this.saveSharedString();\n        this.saveStyles();\n        this.saveApp(this.builtInProperties);\n        this.saveCore(this.builtInProperties);\n        this.saveContentType();\n        this.saveTopLevelRelation();\n        this.saveWorkbookRelation();\n    };\n    Workbook.prototype.saveWorkbook = function () {\n        /* tslint:disable-next-line:max-line-length */\n        var workbookTemp = '<?xml version=\"1.0\" encoding=\"utf-8\"?><workbook xmlns:r = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns= \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"><workbookPr codeName=\"ThisWorkbook\" defaultThemeVersion= \"153222\"/><bookViews><workbookView activeTab=\"0\"/></bookViews>';\n        var sheets = '<sheets>';\n        var length = this.worksheets.length;\n        for (var i = 0; i < length; i++) {\n            /* tslint:disable-next-line:max-line-length */\n            sheets += '<sheet name=\"' + this.worksheets[i].name + '\" sheetId=\"' + (i + 1).toString() + '\" r:id =\"rId' + (i + 1).toString() + '\" />';\n        }\n        sheets += '</sheets>';\n        workbookTemp += sheets;\n        if (this.printTitles.size > 0) {\n            var printTitle_1 = '<definedNames>';\n            this.printTitles.forEach(function (value, key) {\n                printTitle_1 += '<definedName name=\"_xlnm.Print_Titles\" localSheetId=\"' + key + '\">' + value + '</definedName>';\n            });\n            printTitle_1 += '</definedNames>';\n            workbookTemp += printTitle_1;\n        }\n        this.addToArchive(workbookTemp + '</workbook>', 'xl/workbook.xml');\n    };\n    Workbook.prototype.saveWorksheets = function () {\n        var length = this.worksheets.length;\n        for (var i = 0; i < length; i++) {\n            this.saveWorksheet(this.worksheets[i], i);\n        }\n    };\n    Workbook.prototype.saveWorksheet = function (sheet, index) {\n        var sheetBlob = new BlobHelper();\n        /* tslint:disable-next-line:max-line-length */\n        var sheetString = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><worksheet xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:x14=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">';\n        if (!sheet.isSummaryRowBelow) {\n            sheetString += ('<sheetPr>' + '<outlinePr ' + 'summaryBelow=\"0\" >' + '</outlinePr>' + '</sheetPr>');\n        }\n        else {\n            sheetString += ('<sheetPr />');\n        }\n        sheetString += this.saveSheetView(sheet);\n        if (sheet.columns !== undefined) {\n            var colString = '<cols>';\n            for (var _i = 0, _a = sheet.columns; _i < _a.length; _i++) {\n                var column = _a[_i];\n                /* tslint:disable-next-line:max-line-length */\n                if (column.width !== undefined) {\n                    colString += '<col min=\"' + (column.index) + '\" max=\"' + (column.index) + '\" width=\"' + this.pixelsToColumnWidth(column.width) + '\" customWidth=\"1\" />';\n                }\n                else {\n                    colString += '<col min=\"' + (column.index) + '\" max=\"' + (column.index) + '\" width=\"' + '8.43' + '\" customWidth=\"1\" />';\n                }\n            }\n            sheetString += (colString + '</cols>');\n        }\n        sheetString += ('<sheetData>');\n        sheetBlob.append(sheetString);\n        sheetString = '';\n        if (sheet.rows !== undefined) {\n            for (var _b = 0, _c = sheet.rows; _b < _c.length; _b++) {\n                var row = _c[_b];\n                var rowString = '<row r=\"' + (row.index) + '\" ';\n                if (!isNullOrUndefined(row.spans)) {\n                    rowString += 'spans=\"' + row.spans + '\" ';\n                }\n                if (row.height !== undefined) {\n                    rowString += ('ht=\"' + this.pixelsToRowHeight(row.height) + '\" customHeight=\"1\" ');\n                }\n                if (row.grouping !== undefined) {\n                    if (row.grouping.isHidden) {\n                        rowString += ('hidden=\"1\" ');\n                    }\n                    if (row.grouping.outlineLevel !== undefined) {\n                        rowString += ('outlineLevel=\"' + row.grouping.outlineLevel + '\" ');\n                    }\n                    if (row.grouping.isCollapsed) {\n                        rowString += ('collapsed=\"1\" ');\n                    }\n                }\n                rowString += ('>');\n                for (var _d = 0, _e = row.cells; _d < _e.length; _d++) {\n                    var cell = _e[_d];\n                    if (cell !== undefined && (cell.value !== undefined || cell.cellStyle !== undefined)) {\n                        rowString += ('<c r=\"' + cell.refName + '\" ');\n                        if (cell.saveType !== undefined) {\n                            rowString += ('t=\"' + cell.saveType + '\" ');\n                        }\n                        if (cell.styleIndex !== undefined) {\n                            rowString += ('s=\"' + cell.styleIndex + '\" ');\n                        }\n                        rowString += (' >');\n                        if (cell.formula !== undefined) {\n                            rowString += ('<f>' + cell.formula + '</f>');\n                        }\n                        if (cell.value !== undefined) {\n                            rowString += ('<v>' + cell.value + '</v></c>');\n                        }\n                        else {\n                            rowString += ('</c>');\n                        }\n                    }\n                }\n                rowString += ('</row>');\n                sheetBlob.append(rowString);\n            }\n        }\n        sheetString += ('</sheetData>');\n        if (sheet.mergeCells.length > 0) {\n            sheetString += ('<mergeCells count=\"' + sheet.mergeCells.length + '\">');\n            for (var _f = 0, _g = sheet.mergeCells; _f < _g.length; _f++) {\n                var mCell = _g[_f];\n                sheetString += ('<mergeCell ref=\"' + mCell.ref + '\" />');\n            }\n            sheetString += ('</mergeCells>');\n        }\n        if (sheet.hyperLinks.length > 0) {\n            sheetString += ('<hyperlinks>');\n            for (var _h = 0, _j = sheet.hyperLinks; _h < _j.length; _h++) {\n                var hLink = _j[_h];\n                sheetString += ('<hyperlink ref=\"' + hLink.ref + '\" r:id=\"rId' + hLink.rId + '\" />');\n            }\n            sheetString += ('</hyperlinks>');\n            this.addToArchive(this.saveSheetRelations(sheet), ('xl/worksheets/_rels/sheet' + sheet.index + '.xml.rels'));\n        }\n        /* tslint:disable-next-line:max-line-length */\n        sheetString += ('<pageMargins left=\"0.75\" right=\"0.75\" top=\"1\" bottom=\"1\" header=\"0.5\" footer=\"0.5\" /><headerFooter scaleWithDoc=\"1\" alignWithMargins=\"0\" differentFirst=\"0\" differentOddEven=\"0\" /></worksheet>');\n        sheetBlob.append(sheetString);\n        this.addToArchive(sheetBlob.getBlob(), 'xl/worksheets' + '/sheet' + (index + 1) + '.xml');\n    };\n    Workbook.prototype.pixelsToColumnWidth = function (pixels) {\n        var dDigitWidth = 7;\n        var val = (pixels > dDigitWidth + 5) ?\n            this.trunc((pixels - 5) / dDigitWidth * 100 + 0.5) / 100 :\n            pixels / (dDigitWidth + 5);\n        return (val > 1) ?\n            ((val * dDigitWidth + 5) / dDigitWidth * 256.0) / 256.0 :\n            (val * (dDigitWidth + 5) / dDigitWidth * 256.0) / 256.0;\n    };\n    Workbook.prototype.trunc = function (x) {\n        var n = x - x % 1;\n        return n === 0 && (x < 0 || (x === 0 && (1 / x !== 1 / 0))) ? -0 : n;\n    };\n    Workbook.prototype.pixelsToRowHeight = function (pixels) {\n        return (pixels * this.unitsProportions[5] / this.unitsProportions[6]);\n    };\n    Workbook.prototype.saveSheetRelations = function (sheet) {\n        /* tslint:disable-next-line:max-line-length */\n        var relStr = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">';\n        for (var _i = 0, _a = sheet.hyperLinks; _i < _a.length; _i++) {\n            var hLink = _a[_i];\n            /* tslint:disable-next-line:max-line-length */\n            relStr += '<Relationship Id=\"rId' + hLink.rId + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\" Target=\"' + hLink.target + '\" TargetMode=\"External\" />';\n        }\n        relStr += '</Relationships>';\n        return relStr;\n    };\n    Workbook.prototype.saveSheetView = function (sheet) {\n        var paneString = '<sheetViews><sheetView workbookViewId=\"0\" ';\n        if (sheet.showGridLines === false) {\n            paneString += 'showGridLines=\"0\" >';\n        }\n        else {\n            paneString += '>';\n        }\n        if (sheet.freezePanes !== undefined) {\n            paneString += '<pane state=\"frozen\"' +\n                ' topLeftCell=\"' + sheet.freezePanes.leftCell + '\" ';\n            if (sheet.freezePanes.row !== 0) {\n                paneString += 'ySplit=\"' + sheet.freezePanes.row + '\" ';\n            }\n            if (sheet.freezePanes.column !== 0) {\n                paneString += 'xSplit=\"' + sheet.freezePanes.column + '\" ';\n            }\n            paneString += '/>';\n        }\n        paneString += '</sheetView></sheetViews > ';\n        return paneString;\n    };\n    Workbook.prototype.saveSharedString = function () {\n        var length = this.sharedString.length;\n        if (length > 0) {\n            /* tslint:disable-next-line:max-line-length */\n            var sstStart = '<?xml version=\"1.0\" encoding=\"utf-8\"?><sst uniqueCount=\"' + length + '\" count=\"' + this.sharedStringCount + '\" xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">';\n            var si = '';\n            for (var i = 0; i < length; i++) {\n                si += '<si><t>';\n                si += this.processString(this.sharedString[i]);\n                si += '</t></si>';\n            }\n            si += '</sst>';\n            this.addToArchive(sstStart + si, 'xl/sharedStrings.xml');\n        }\n    };\n    Workbook.prototype.processString = function (value) {\n        if (value.indexOf('&') !== -1) {\n            value = value.replace(/&/g, '&amp;');\n        }\n        if (value.indexOf('<') !== -1) {\n            value = value.replace(/</g, '&lt;');\n        }\n        if (value.indexOf('>') !== -1) {\n            value = value.replace(/>/g, '&gt;');\n        }\n        return value;\n    };\n    Workbook.prototype.saveStyles = function () {\n        this.updateCellXfsStyleXfs();\n        /* tslint:disable-next-line:max-line-length */\n        var styleTemp = '<?xml version=\"1.0\" encoding=\"utf-8\"?><styleSheet xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\" xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">';\n        styleTemp += this.saveNumberFormats();\n        styleTemp += this.saveFonts();\n        styleTemp += this.saveFills();\n        styleTemp += this.saveBorders();\n        styleTemp += this.saveCellStyleXfs();\n        styleTemp += this.saveCellXfs();\n        styleTemp += this.saveCellStyles();\n        this.addToArchive(styleTemp + '</styleSheet>', 'xl/styles.xml');\n    };\n    Workbook.prototype.updateCellXfsStyleXfs = function () {\n        for (var _i = 0, _a = this.mStyles; _i < _a.length; _i++) {\n            var style = _a[_i];\n            var cellXfs = undefined;\n            if (style.isGlobalStyle) {\n                cellXfs = new CellStyleXfs();\n                cellXfs.xfId = (style.index - 1);\n            }\n            else {\n                cellXfs = new CellXfs();\n                cellXfs.xfId = 0;\n            }\n            //Add font\n            var compareFontResult = this.isNewFont(style);\n            if (!compareFontResult.result) {\n                var font = new Font();\n                font.b = style.bold;\n                font.i = style.italic;\n                font.name = style.fontName;\n                font.sz = style.fontSize;\n                font.u = style.underline;\n                font.color = ('FF' + style.fontColor.replace('#', ''));\n                this.mFonts.push(font);\n                cellXfs.fontId = this.mFonts.length - 1;\n            }\n            else {\n                cellXfs.fontId = compareFontResult.index;\n            }\n            //Add fill\n            if (style.backColor !== 'none') {\n                var backColor = 'FF' + style.backColor.replace('#', '');\n                if (this.mFills.has(backColor)) {\n                    var fillId = this.mFills.get(backColor);\n                    cellXfs.fillId = fillId;\n                }\n                else {\n                    var fillId = this.mFills.size + 2;\n                    this.mFills.set(backColor, fillId);\n                    cellXfs.fillId = (fillId);\n                }\n            }\n            else {\n                cellXfs.fillId = 0;\n            }\n            //Add border            \n            if (!this.isNewBorder(style)) {\n                this.mBorders.push(style.borders);\n                cellXfs.borderId = this.mBorders.length;\n            }\n            else {\n                cellXfs.borderId = 0;\n            }\n            //Add Number Format            \n            if (style.numberFormat !== 'GENERAL') {\n                if (this.mNumFmt.has(style.numberFormat)) {\n                    var numFmt = this.mNumFmt.get(style.numberFormat);\n                    cellXfs.numFmtId = numFmt.numFmtId;\n                }\n                else {\n                    var id = this.mNumFmt.size + 164;\n                    this.mNumFmt.set(style.numberFormat, new NumFmt(id, style.numberFormat));\n                    cellXfs.numFmtId = id;\n                }\n            }\n            else {\n                if (style.numberFormat === 'GENERAL' && style.numFmtId === 14) {\n                    cellXfs.numFmtId = 14;\n                }\n                else {\n                    cellXfs.numFmtId = 0;\n                }\n            }\n            //Add alignment            \n            if (!style.isGlobalStyle) {\n                cellXfs.applyAlignment = 1;\n            }\n            cellXfs.alignment = new Alignment();\n            cellXfs.alignment.indent = style.indent;\n            cellXfs.alignment.horizontal = style.hAlign;\n            cellXfs.alignment.vertical = style.vAlign;\n            cellXfs.alignment.wrapText = style.wrapText ? 1 : 0;\n            cellXfs.alignment.rotation = style.rotation;\n            if (style.isGlobalStyle) {\n                this.mCellStyleXfs.push(cellXfs);\n                this.mCellXfs.push(cellXfs);\n            }\n            else {\n                //Add cellxfs\n                this.mCellXfs.push(cellXfs);\n            }\n        }\n    };\n    Workbook.prototype.saveNumberFormats = function () {\n        if (this.mNumFmt.size >= 1) {\n            var numFmtStyle_1 = '<numFmts count=\"' + (this.mNumFmt.size) + '\">';\n            this.mNumFmt.forEach(function (value, key) {\n                numFmtStyle_1 += '<numFmt numFmtId=\"' + value.numFmtId + '\" formatCode=\"' + value.formatCode.replace(/\"/g, '&quot;') + '\" />';\n            });\n            return (numFmtStyle_1 += '</numFmts>');\n        }\n        else {\n            return '';\n        }\n    };\n    Workbook.prototype.saveFonts = function () {\n        /* tslint:disable-next-line:max-line-length */\n        var fontStyle = '<fonts count=\"' + (this.mFonts.length) + '\">';\n        if (this.mFonts.length >= 1) {\n            for (var _i = 0, _a = this.mFonts; _i < _a.length; _i++) {\n                var font = _a[_i];\n                fontStyle += '<font>';\n                if (font.b) {\n                    fontStyle += '<b />';\n                }\n                if (font.i) {\n                    fontStyle += '<i />';\n                }\n                if (font.u) {\n                    fontStyle += '<u />';\n                }\n                fontStyle += '<sz val=\"' + this.pixelsToRowHeight(font.sz) + '\" />';\n                fontStyle += '<color rgb=\"' + font.color + '\" />';\n                fontStyle += '<name val=\"' + font.name + '\" /></font>';\n            }\n        }\n        return fontStyle + '</fonts>';\n    };\n    Workbook.prototype.saveFills = function () {\n        /* tslint:disable-next-line:max-line-length */\n        var fillsStyle = '<fills count=\"' + (this.mFills.size + 2) + '\"><fill><patternFill patternType=\"none\"></patternFill></fill><fill><patternFill patternType=\"gray125\"></patternFill></fill>';\n        if (this.mFills.size >= 1) {\n            this.mFills.forEach(function (value, key) {\n                /* tslint:disable-next-line:max-line-length */\n                fillsStyle += '<fill><patternFill patternType=\"solid\"><fgColor rgb=\"' + key + '\" /><bgColor rgb=\"FFFFFFFF\" /></patternFill></fill>';\n            });\n        }\n        return fillsStyle + '</fills>';\n    };\n    Workbook.prototype.saveBorders = function () {\n        /* tslint:disable-next-line:max-line-length */\n        var bordersStyle = '<borders count=\"' + (this.mBorders.length + 1) + '\"><border><left /><right /><top /><bottom /><diagonal /></border>';\n        if (this.mBorders.length >= 1) {\n            for (var _i = 0, _a = this.mBorders; _i < _a.length; _i++) {\n                var borders = _a[_i];\n                if (this.isAllBorder(borders)) {\n                    var color = borders.all.color.replace('#', '');\n                    var lineStyle = borders.all.lineStyle;\n                    /* tslint:disable-next-line:max-line-length */\n                    bordersStyle += '<border><left style=\"' + lineStyle + '\"><color rgb=\"FF' + color + '\" /></left><right style=\"' + lineStyle + '\"><color rgb=\"FF' + color + '\" /></right><top style=\"' + lineStyle + '\"><color rgb=\"FF' + color + '\" /></top><bottom style=\"' + lineStyle + '\"><color rgb=\"FF' + color + '\" /></bottom></border>';\n                }\n                else {\n                    /* tslint:disable-next-line:max-line-length */\n                    bordersStyle += '<border><left style=\"' + borders.left.lineStyle + '\"><color rgb=\"FF' + borders.left.color.replace('#', '') + '\" /></left><right style=\"' + borders.right.lineStyle + '\"><color rgb=\"FF' + borders.right.color.replace('#', '') + '\" /></right><top style=\"' + borders.top.lineStyle + '\"><color rgb=\"FF' + borders.top.color.replace('#', '') + '\" /></top><bottom style=\"' + borders.bottom.lineStyle + '\"><color rgb=\"FF' + borders.bottom.color.replace('#', '') + '\" /></bottom></border>';\n                }\n            }\n        }\n        return bordersStyle + '</borders>';\n    };\n    Workbook.prototype.saveCellStyles = function () {\n        var _this = this;\n        var cellStyleString = '<cellStyles  count=\"' + (this.cellStyles.size) + '\">';\n        this.cellStyles.forEach(function (value, key) {\n            cellStyleString += '<cellStyle name=\"' + key + '\" xfId=\"' + _this.cellStyles.get(key).xfId + '\"';\n            if (key === 'Normal') {\n                cellStyleString += ' builtinId=\"0\"';\n            }\n            cellStyleString += ' />';\n        });\n        return cellStyleString += '</cellStyles>';\n    };\n    Workbook.prototype.saveCellStyleXfs = function () {\n        /* tslint:disable-next-line:max-line-length */\n        var cellXfsStyle = '<cellStyleXfs count=\"' + (this.mCellStyleXfs.length + 1) + '\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" />';\n        if (this.mCellStyleXfs.length >= 1) {\n            for (var _i = 0, _a = this.mCellStyleXfs; _i < _a.length; _i++) {\n                var cellStyleXf = _a[_i];\n                /* tslint:disable-next-line:max-line-length */\n                cellXfsStyle += '<xf numFmtId=\"' + cellStyleXf.numFmtId + '\" fontId=\"' + cellStyleXf.fontId + '\" fillId=\"' + cellStyleXf.fillId + '\" borderId=\"' + cellStyleXf.borderId + '\" ';\n                if (cellStyleXf.alignment !== undefined) {\n                    cellXfsStyle += '>' + this.saveAlignment(cellStyleXf) + '</xf>';\n                }\n                else {\n                    cellXfsStyle += ' />';\n                }\n            }\n        }\n        return cellXfsStyle + '</cellStyleXfs>';\n    };\n    Workbook.prototype.saveCellXfs = function () {\n        /* tslint:disable-next-line:max-line-length */\n        var cellXfsStyle = '<cellXfs count=\"' + (this.mCellXfs.length + 1) + '\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\" />';\n        if (this.mCellXfs.length >= 1) {\n            for (var _i = 0, _a = this.mCellXfs; _i < _a.length; _i++) {\n                var cellXf = _a[_i];\n                /* tslint:disable-next-line:max-line-length */\n                cellXfsStyle += '<xf numFmtId=\"' + cellXf.numFmtId + '\" fontId=\"' + cellXf.fontId + '\" fillId=\"' + cellXf.fillId + '\" borderId=\"' + cellXf.borderId + '\" xfId=\"' + cellXf.xfId + '\" ';\n                if (cellXf.applyAlignment === 1) {\n                    cellXfsStyle += 'applyAlignment=\"1\"';\n                }\n                cellXfsStyle += '>' + this.saveAlignment(cellXf) + '</xf>';\n            }\n        }\n        return cellXfsStyle + '</cellXfs>';\n    };\n    Workbook.prototype.saveAlignment = function (cellXf) {\n        var alignString = '<alignment ';\n        if (cellXf.alignment.horizontal !== undefined) {\n            alignString += 'horizontal=\"' + cellXf.alignment.horizontal + '\" ';\n        }\n        if (cellXf.alignment.indent !== undefined && cellXf.alignment.indent !== 0) {\n            alignString += 'indent=\"' + cellXf.alignment.indent + '\" ';\n        }\n        else if (cellXf.alignment.rotation !== undefined && cellXf.alignment.rotation !== 0) {\n            alignString += 'textRotation=\"' + cellXf.alignment.rotation + '\" ';\n        }\n        if (cellXf.alignment.vertical !== undefined) {\n            alignString += 'vertical=\"' + cellXf.alignment.vertical + '\" ';\n        }\n        alignString += 'wrapText=\"' + cellXf.alignment.wrapText + '\" />';\n        return alignString;\n    };\n    Workbook.prototype.saveApp = function (builtInProperties) {\n        /* tslint:disable-next-line:max-line-length */\n        var appString = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\"><Application>Essential XlsIO</Application>';\n        if (builtInProperties !== undefined) {\n            if (builtInProperties.manager !== undefined) {\n                appString += '<Manager>' + builtInProperties.manager + '</Manager>';\n            }\n            if (builtInProperties.company !== undefined) {\n                appString += '<Company>' + builtInProperties.company + '</Company>';\n            }\n        }\n        this.addToArchive((appString + '</Properties>'), 'docProps/app.xml');\n    };\n    Workbook.prototype.saveCore = function (builtInProperties) {\n        var createdDate = new Date();\n        /* tslint:disable-next-line:max-line-length */\n        var coreString = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><cp:coreProperties xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:dcmitype=\"http://purl.org/dc/dcmitype/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:cp=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\">';\n        if (this.builtInProperties !== undefined) {\n            if (builtInProperties.author !== undefined) {\n                coreString += '<dc:creator>' + builtInProperties.author + '</dc:creator>';\n            }\n            if (builtInProperties.subject !== undefined) {\n                coreString += '<dc:subject>' + builtInProperties.subject + '</dc:subject>';\n            }\n            if (builtInProperties.category !== undefined) {\n                coreString += '<cp:category>' + builtInProperties.category + '</cp:category>';\n            }\n            if (builtInProperties.comments !== undefined) {\n                coreString += '<dc:description>' + builtInProperties.comments + '</dc:description>';\n            }\n            if (builtInProperties.title !== undefined) {\n                coreString += '<dc:title>' + builtInProperties.title + '</dc:title>';\n            }\n            if (builtInProperties.tags !== undefined) {\n                coreString += '<cp:keywords>' + builtInProperties.tags + '</cp:keywords>';\n            }\n            if (builtInProperties.status !== undefined) {\n                coreString += '<cp:contentStatus>' + builtInProperties.status + '</cp:contentStatus>';\n            }\n            if (builtInProperties.createdDate !== undefined) {\n                /* tslint:disable-next-line:max-line-length */\n                coreString += '<dcterms:created xsi:type=\"dcterms:W3CDTF\">' + builtInProperties.createdDate.toISOString() + '</dcterms:created>';\n            }\n            else {\n                coreString += '<dcterms:created xsi:type=\"dcterms:W3CDTF\">' + createdDate.toISOString() + '</dcterms:created>';\n            }\n            if (builtInProperties.modifiedDate !== undefined) {\n                /* tslint:disable-next-line:max-line-length */\n                coreString += '<dcterms:modified xsi:type=\"dcterms:W3CDTF\">' + builtInProperties.modifiedDate.toISOString() + '</dcterms:modified>';\n            }\n            else {\n                coreString += '<dcterms:modified xsi:type=\"dcterms:W3CDTF\">' + createdDate.toISOString() + '</dcterms:modified>';\n            }\n        }\n        else {\n            coreString += '<dcterms:created xsi:type=\"dcterms:W3CDTF\">' + createdDate.toISOString() + '</dcterms:created>';\n            coreString += '<dcterms:modified xsi:type=\"dcterms:W3CDTF\">' + createdDate.toISOString() + '</dcterms:modified>';\n        }\n        /* tslint:disable-next-line:max-line-length */\n        coreString += '</cp:coreProperties>';\n        this.addToArchive(coreString, 'docProps/core.xml');\n    };\n    Workbook.prototype.saveTopLevelRelation = function () {\n        /* tslint:disable-next-line:max-line-length */\n        var topRelation = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\" /><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\" Target=\"docProps/app.xml\" /><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\" Target=\"docProps/core.xml\" /></Relationships>';\n        this.addToArchive(topRelation, '_rels/.rels');\n    };\n    Workbook.prototype.saveWorkbookRelation = function () {\n        /* tslint:disable-next-line:max-line-length */\n        var wbRelation = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">';\n        var length = this.worksheets.length;\n        var count = 0;\n        for (var i = 0; i < length; i++, count++) {\n            /* tslint:disable-next-line:max-line-length */\n            wbRelation += '<Relationship Id=\"rId' + (i + 1).toString() + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet' + (i + 1).toString() + '.xml\" />';\n        }\n        /* tslint:disable-next-line:max-line-length */\n        wbRelation += '<Relationship Id=\"rId' + (++count).toString() + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\" />';\n        if (this.sharedStringCount > 0) {\n            /* tslint:disable-next-line:max-line-length */\n            wbRelation += '<Relationship Id=\"rId' + (++count).toString() + '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\" Target=\"sharedStrings.xml\" />';\n        }\n        this.addToArchive((wbRelation + '</Relationships>'), 'xl/_rels/workbook.xml.rels');\n    };\n    Workbook.prototype.saveContentType = function () {\n        /* tslint:disable-next-line:max-line-length */\n        var contentTypeString = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?><Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\"><Default Extension=\"xml\" ContentType=\"application/xml\" /><Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\" /><Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\" /><Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\" /><Override PartName=\"/docProps/app.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.extended-properties+xml\" /><Override PartName=\"/docProps/core.xml\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\" />';\n        var sheetsOverride = '';\n        var length = this.worksheets.length;\n        for (var i = 0; i < length; i++) {\n            /* tslint:disable-next-line:max-line-length */\n            sheetsOverride += '<Override PartName=\"/xl/worksheets/sheet' + (i + 1).toString() + '.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\" />';\n        }\n        if (this.sharedStringCount > 0) {\n            /* tslint:disable-next-line:max-line-length */\n            contentTypeString += '<Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\" />';\n        }\n        this.addToArchive((contentTypeString + sheetsOverride + '</Types>'), '[Content_Types].xml');\n    };\n    Workbook.prototype.addToArchive = function (xmlString, itemName) {\n        if (typeof (xmlString) === 'string') {\n            var blob = new Blob([xmlString], { type: 'text/plain' });\n            var archiveItem = new ZipArchiveItem(blob, itemName);\n            this.mArchive.addItem(archiveItem);\n        }\n        else {\n            var archiveItem = new ZipArchiveItem(xmlString, itemName);\n            this.mArchive.addItem(archiveItem);\n        }\n    };\n    Workbook.prototype.processMergeCells = function (cell, rowIndex, mergeCells) {\n        if (cell.rowSpan !== 0 || cell.colSpan !== 0) {\n            var mCell = new MergeCell();\n            mCell.x = cell.index;\n            mCell.width = cell.colSpan;\n            mCell.y = rowIndex;\n            mCell.height = cell.rowSpan;\n            var startCell = this.getCellName(mCell.y, mCell.x);\n            var endCell = this.getCellName(rowIndex + mCell.height, cell.index + mCell.width);\n            mCell.ref = startCell + ':' + endCell;\n            var mergedCell = mergeCells.add(mCell);\n            var start = { x: mCell.x, y: mCell.y };\n            var end = {\n                x: (cell.index + mCell.width), y: (rowIndex + mCell.height)\n            };\n            this.updatedMergedCellStyles(start, end, cell);\n        }\n        return mergeCells;\n    };\n    Workbook.prototype.updatedMergedCellStyles = function (sCell, eCell, cell) {\n        for (var x = sCell.x; x <= eCell.x; x++) {\n            for (var y = sCell.y; y <= eCell.y; y++) {\n                this.mergedCellsStyle.set(this.getCellName(y, x), { x: x, y: y, styleIndex: cell.styleIndex });\n            }\n        }\n    };\n    /**\n     * Returns the tick count corresponding to the given year, month, and day.\n     * @param year number value of year\n     * @param month number value of month\n     * @param day number value of day\n     */\n    Workbook.prototype.dateToTicks = function (year, month, day) {\n        var ticksPerDay = 10000 * 1000 * 60 * 60 * 24;\n        var daysToMonth365 = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];\n        var daysToMonth366 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];\n        if (year >= 1 && year <= 9999 && month >= 1 && month <= 12) {\n            var days = this.isLeapYear(year) ? daysToMonth366 : daysToMonth365;\n            var y = year - 1;\n            var n = y * 365 + ((y / 4) | 0) - ((y / 100) | 0) + ((y / 400) | 0) + days[month - 1] + day - 1;\n            return n * ticksPerDay;\n        }\n        throw new Error('Not a valid date');\n    };\n    /**\n     * Return the tick count corresponding to the given hour, minute, second.\n     * @param hour number value of hour\n     * @param minute number value if minute\n     * @param second number value of second\n     */\n    Workbook.prototype.timeToTicks = function (hour, minute, second) {\n        if (hour >= 0 && hour < 24 && minute >= 0 && minute < 60 && second >= 0 && second < 60) {\n            var totalSeconds = hour * 3600 + minute * 60 + second;\n            return totalSeconds * 10000 * 1000;\n        }\n        throw new Error('Not valid time');\n    };\n    /**\n     * Checks if given year is a leap year.\n     * @param year Year value.\n     */\n    Workbook.prototype.isLeapYear = function (year) {\n        return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n    };\n    /**\n     * Converts `DateTime` to the equivalent OLE Automation date.\n     */\n    Workbook.prototype.toOADate = function (date) {\n        var ticks = 0;\n        /* tslint:disable-next-line:max-line-length */\n        ticks = this.dateToTicks(date.getFullYear(), (date.getMonth() + 1), date.getDate()) + this.timeToTicks(date.getHours(), date.getMinutes(), date.getSeconds());\n        if (ticks === 0) {\n            return 0.0;\n        }\n        var ticksPerDay = 10000 * 1000 * 60 * 60 * 24;\n        var daysTo1899 = (((365 * 4 + 1) * 25 - 1) * 4 + 1) * 4 + ((365 * 4 + 1) * 25 - 1) * 3 - 367;\n        var doubleDateOffset = daysTo1899 * ticksPerDay;\n        var oaDateMinAsTicks = (((365 * 4 + 1) * 25 - 1) - 365) * ticksPerDay;\n        if (ticks < oaDateMinAsTicks) {\n            throw new Error('Arg_OleAutDateInvalid');\n        }\n        var millisPerDay = 1000 * 60 * 60 * 24;\n        return ((ticks - doubleDateOffset) / 10000) / millisPerDay;\n    };\n    return Workbook;\n}());\nexport { Workbook };\n/**\n * BuiltInProperties Class\n * @private\n */\nvar BuiltInProperties = /** @class */ (function () {\n    function BuiltInProperties() {\n    }\n    return BuiltInProperties;\n}());\nexport { BuiltInProperties };\n","/**\n * ByteArray class\n * Used to keep information about image stream as byte array.\n * @private\n */\nvar ByteArray = /** @class */ (function () {\n    /**\n     * Initialize the new instance for `byte-array` class\n     * @hidden\n     * @private\n     */\n    function ByteArray(length) {\n        /**\n         * Current stream `position`.\n         * @default 0\n         * @private\n         */\n        this.mPosition = 0;\n        this.buffer = new Uint8Array(length);\n        this.dataView = new DataView(this.buffer.buffer);\n    }\n    Object.defineProperty(ByteArray.prototype, \"position\", {\n        /**\n         * Gets and Sets a current `position` of byte array.\n         * @hidden\n         * @private\n         */\n        get: function () {\n            return this.mPosition;\n        },\n        set: function (value) {\n            this.mPosition = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * `Read` from current stream position.\n     * @default 0\n     * @hidden\n     * @private\n     */\n    ByteArray.prototype.read = function (buffer, offset, count) {\n        for (var index = offset; index < count; index++) {\n            var position = this.position;\n            buffer.buffer[index] = this.readByte(position);\n            this.position++;\n        }\n    };\n    /**\n     * @hidden\n     */\n    ByteArray.prototype.getBuffer = function (index) {\n        return this.buffer[index];\n    };\n    /**\n     * @hidden\n     */\n    ByteArray.prototype.writeFromBase64String = function (base64) {\n        var arr = this.encodedString(base64);\n        this.buffer = arr;\n    };\n    /**\n     * @hidden\n     */\n    ByteArray.prototype.encodedString = function (input) {\n        var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n        var chr1;\n        var chr2;\n        var chr3;\n        var enc1;\n        var enc2;\n        var enc3;\n        var enc4;\n        var i = 0;\n        var resultIndex = 0;\n        var dataUrlPrefix = 'data:';\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n        var totalLength = input.length * 3 / 4;\n        if (input.charAt(input.length - 1) === keyStr.charAt(64)) {\n            totalLength--;\n        }\n        var output = new Uint8Array(totalLength | 0);\n        while (i < input.length) {\n            enc1 = keyStr.indexOf(input.charAt(i++));\n            enc2 = keyStr.indexOf(input.charAt(i++));\n            enc3 = keyStr.indexOf(input.charAt(i++));\n            enc4 = keyStr.indexOf(input.charAt(i++));\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n            output[resultIndex++] = chr1;\n            output[resultIndex++] = chr2;\n            output[resultIndex++] = chr3;\n        }\n        return output;\n    };\n    /**\n     * @hidden\n     */\n    ByteArray.prototype.readByte = function (offset) {\n        return (this.buffer[offset]);\n    };\n    Object.defineProperty(ByteArray.prototype, \"internalBuffer\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.buffer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ByteArray.prototype, \"count\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.buffer.byteLength;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ByteArray;\n}());\nexport { ByteArray };\n","import { extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { closest as closestElement, removeClass, classList, remove } from '@syncfusion/ej2-base';\nimport { getElementIndex, inArray, parentsUntil, getPosition, isActionPrevent } from '../base/util';\nimport * as events from '../base/constant';\n/**\n *\n * The `Reorder` module is used for reordering columns.\n */\nvar Reorder = /** @class */ (function () {\n    /**\n     * Constructor for the Grid reorder module\n     * @hidden\n     */\n    function Reorder(parent) {\n        this.parent = parent;\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.on(events.headerDrop, this.headerDrop, this);\n        this.parent.on(events.uiUpdate, this.enableAfterRender, this);\n        this.parent.on(events.reorderComplete, this.onActionComplete, this);\n        this.parent.on(events.columnDrag, this.drag, this);\n        this.parent.on(events.columnDragStart, this.dragStart, this);\n        this.parent.on(events.columnDragStop, this.dragStop, this);\n        this.parent.on(events.headerDrop, this.headerDrop, this);\n        this.parent.on(events.headerRefreshed, this.createReorderElement, this);\n    }\n    Reorder.prototype.chkDropPosition = function (srcElem, destElem) {\n        var col = this.parent.getColumnByUid(destElem.firstElementChild.getAttribute('e-mappinguid'));\n        var bool = col ? !col.lockColumn : true;\n        return (srcElem.parentElement.isEqualNode(destElem.parentElement) || (this.parent.getFrozenColumns()\n            && Array.prototype.indexOf.call(closestElement(srcElem, 'thead').children, srcElem.parentElement)\n                === Array.prototype.indexOf.call(closestElement(destElem, 'thead').children, destElem.parentElement)))\n            && this.targetParentContainerIndex(srcElem, destElem) > -1 && bool;\n    };\n    Reorder.prototype.chkDropAllCols = function (srcElem, destElem) {\n        var isFound;\n        var headers = this.getHeaderCells();\n        var header;\n        while (!isFound && headers.length > 0) {\n            header = headers.pop();\n            isFound = srcElem !== header && this.targetParentContainerIndex(srcElem, destElem) > -1;\n        }\n        return isFound;\n    };\n    Reorder.prototype.findColParent = function (col, cols, parent) {\n        parent = parent;\n        for (var i = 0, len = cols.length; i < len; i++) {\n            if (col === cols[i]) {\n                return true;\n            }\n            else if (cols[i].columns) {\n                var cnt = parent.length;\n                parent.push(cols[i]);\n                if (!this.findColParent(col, cols[i].columns, parent)) {\n                    parent.splice(cnt, parent.length - cnt);\n                }\n                else {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    Reorder.prototype.getColumnsModel = function (cols) {\n        var columnModel = [];\n        var subCols = [];\n        for (var i = 0, len = cols.length; i < len; i++) {\n            columnModel.push(cols[i]);\n            if (cols[i].columns) {\n                subCols = subCols.concat(cols[i].columns);\n            }\n        }\n        if (subCols.length) {\n            columnModel = columnModel.concat(this.getColumnsModel(subCols));\n        }\n        return columnModel;\n    };\n    Reorder.prototype.headerDrop = function (e) {\n        var gObj = this.parent;\n        var dropElement = this.element.querySelector('.e-headercelldiv') || this.element.querySelector('.e-stackedheadercelldiv');\n        var uId = dropElement.getAttribute('e-mappinguid');\n        var column = gObj.getColumnByUid(uId);\n        if (!closestElement(e.target, 'th') || (!isNullOrUndefined(column) && (!column.allowReordering || column.lockColumn))) {\n            return;\n        }\n        var destElem = closestElement(e.target, '.e-headercell');\n        var destElemDiv = destElem.querySelector('.e-headercelldiv') || destElem.querySelector('.e-stackedheadercelldiv');\n        var destElemUid = destElemDiv.getAttribute('e-mappinguid');\n        if (!isNullOrUndefined(destElemUid)) {\n            var destColumn = gObj.getColumnByUid(destElemUid);\n            if (isNullOrUndefined(destColumn) || !destColumn.allowReordering || destColumn.lockColumn) {\n                return;\n            }\n        }\n        if (destElem && !(!this.chkDropPosition(this.element, destElem) || !this.chkDropAllCols(this.element, destElem))) {\n            if (this.parent.enableColumnVirtualization) {\n                var columns = this.parent.columns;\n                var sourceUid_1 = this.element.querySelector('.e-headercelldiv').getAttribute('e-mappinguid');\n                var col = this.parent.getColumns(true).filter(function (col) { return col.uid === sourceUid_1; });\n                var colMatchIndex_1 = null;\n                var column_1 = col[0];\n                var destUid_1 = destElem.querySelector('.e-headercelldiv').getAttribute('e-mappinguid');\n                var bool = columns.some(function (col, index) {\n                    if (col.uid === destUid_1) {\n                        colMatchIndex_1 = index;\n                        return col.uid === destUid_1;\n                    }\n                    return false;\n                });\n                if (!isNullOrUndefined(colMatchIndex_1)) {\n                    this.moveColumns(colMatchIndex_1, column_1);\n                }\n            }\n            else {\n                var newIndex = this.targetParentContainerIndex(this.element, destElem);\n                var uid = this.element.firstElementChild.getAttribute('e-mappinguid');\n                this.destElement = destElem;\n                if (uid) {\n                    this.moveColumns(newIndex, this.parent.getColumnByUid(uid));\n                }\n                else {\n                    var headers = this.getHeaderCells();\n                    var oldIdx = getElementIndex(this.element, headers);\n                    var columns = this.getColumnsModel(this.parent.columns);\n                    var column_2 = columns[oldIdx];\n                    this.moveColumns(newIndex, column_2);\n                }\n            }\n        }\n    };\n    Reorder.prototype.isActionPrevent = function (gObj) {\n        return isActionPrevent(gObj);\n    };\n    Reorder.prototype.moveColumns = function (destIndex, column, reorderByColumn) {\n        var gObj = this.parent;\n        if (this.isActionPrevent(gObj)) {\n            gObj.notify(events.preventBatch, { instance: this, handler: this.moveColumns, arg1: destIndex, arg2: column });\n            return;\n        }\n        var parent = this.getColParent(column, this.parent.columns);\n        var cols = parent ? parent.columns : this.parent.columns;\n        var srcIdx = inArray(column, cols);\n        if (((this.parent.getFrozenColumns() && parent) || this.parent.lockcolPositionCount) && !reorderByColumn) {\n            for (var i = 0; i < cols.length; i++) {\n                if (cols[i].field === column.field) {\n                    srcIdx = i;\n                    break;\n                }\n            }\n            var col = this.parent.getColumnByUid(this.destElement.firstElementChild.getAttribute('e-mappinguid'));\n            if (col) {\n                for (var i = 0; i < cols.length; i++) {\n                    if (cols[i].field === col.field) {\n                        destIndex = i;\n                        break;\n                    }\n                }\n            }\n            else {\n                for (var i = 0; i < cols.length; i++) {\n                    if (cols[i].headerText === this.destElement.innerText.trim()) {\n                        destIndex = i;\n                    }\n                }\n            }\n        }\n        if (!gObj.allowReordering || srcIdx === destIndex || srcIdx === -1 || destIndex === -1) {\n            return;\n        }\n        cols.splice(destIndex, 0, cols.splice(srcIdx, 1)[0]);\n        gObj.getColumns(true);\n        gObj.notify(events.columnPositionChanged, { fromIndex: destIndex, toIndex: srcIdx });\n        gObj.notify(events.modelChanged, {\n            type: events.actionBegin, requestType: 'reorder'\n        });\n    };\n    Reorder.prototype.targetParentContainerIndex = function (srcElem, destElem) {\n        var headers = this.getHeaderCells();\n        var cols = this.parent.columns;\n        var flatColumns = this.getColumnsModel(cols);\n        var parent = this.getColParent(flatColumns[getElementIndex(srcElem, headers)], cols);\n        cols = parent ? parent.columns : cols;\n        return inArray(flatColumns[getElementIndex(destElem, headers)], cols);\n    };\n    Reorder.prototype.getHeaderCells = function () {\n        var frozenColumns = this.parent.getFrozenColumns();\n        if (frozenColumns || this.parent.lockcolPositionCount) {\n            var fTh = void 0;\n            var mTh = void 0;\n            var fHeaders = [];\n            var fRows = [].slice.call(this.parent.getHeaderTable().querySelectorAll('.e-columnheader'));\n            if (frozenColumns) {\n                var mRows = [].slice.call(this.parent.getHeaderContent()\n                    .querySelector('.e-movableheader').querySelectorAll('.e-columnheader'));\n                for (var i = 0; i < fRows.length; i++) {\n                    fTh = [].slice.call(fRows[i].getElementsByClassName('e-headercell'));\n                    mTh = [].slice.call(mRows[i].getElementsByClassName('e-headercell'));\n                    var isAvail = void 0;\n                    for (var k = 0; k < fTh.length; k++) {\n                        for (var j = 0; j < mTh.length; j++) {\n                            if (mTh[j].innerText === fTh[k].innerText) {\n                                isAvail = true;\n                                break;\n                            }\n                        }\n                        if (!isAvail) {\n                            fHeaders = fHeaders.concat([fTh[k]]);\n                        }\n                    }\n                    for (var j = 0; j < mTh.length; j++) {\n                        fHeaders.push(mTh[j]);\n                    }\n                }\n            }\n            else {\n                for (var i = 0; i < fRows.length; i++) {\n                    mTh = [].slice.call(fRows[i].getElementsByClassName('e-headercell'));\n                    for (var k = 0; k < mTh.length; k++) {\n                        var isAvail = void 0;\n                        for (var j = k + 1; j < mTh.length; j++) {\n                            if (mTh[j].innerText === mTh[k].innerText) {\n                                isAvail = true;\n                                break;\n                            }\n                        }\n                        if (!isAvail) {\n                            fHeaders = fHeaders.concat([mTh[k]]);\n                        }\n                    }\n                }\n            }\n            return fHeaders;\n        }\n        else {\n            return [].slice.call(this.parent.element.getElementsByClassName('e-headercell'));\n        }\n    };\n    Reorder.prototype.getColParent = function (column, columns) {\n        var parents = [];\n        this.findColParent(column, columns, parents);\n        return parents[parents.length - 1];\n    };\n    Reorder.prototype.reorderSingleColumn = function (fromFName, toFName) {\n        var fColumn = this.parent.getColumnByField(fromFName);\n        var toColumn = this.parent.getColumnByField(toFName);\n        if ((!isNullOrUndefined(fColumn) && (!fColumn.allowReordering || fColumn.lockColumn)) ||\n            (!isNullOrUndefined(toColumn) && (!toColumn.allowReordering || fColumn.lockColumn))) {\n            return;\n        }\n        var column = this.parent.getColumnByField(toFName);\n        var parent = this.getColParent(column, this.parent.columns);\n        var columns = parent ? parent.columns : this.parent.columns;\n        var destIndex = inArray(column, columns);\n        if (destIndex > -1) {\n            this.moveColumns(destIndex, this.parent.getColumnByField(fromFName), true);\n        }\n    };\n    Reorder.prototype.reorderMultipleColumns = function (fromFNames, toFName) {\n        var toIndex = this.parent.getColumnIndexByField(toFName);\n        var toColumn = this.parent.getColumnByField(toFName);\n        if (toIndex < 0 || (!isNullOrUndefined(toColumn) && (!toColumn.allowReordering || toColumn.lockColumn))) {\n            return;\n        }\n        for (var i = 0; i < fromFNames.length; i++) {\n            var column = this.parent.getColumnByField(fromFNames[i]);\n            if (!isNullOrUndefined(column) && (!column.allowReordering || column.lockColumn)) {\n                return;\n            }\n        }\n        for (var i = 0; i < fromFNames.length; i++) {\n            var column = this.parent.getColumnByIndex(toIndex);\n            var parent_1 = this.getColParent(column, this.parent.columns);\n            var columns = parent_1 ? parent_1.columns : this.parent.columns;\n            var destIndex = inArray(column, columns);\n            if (destIndex > -1) {\n                this.moveColumns(destIndex, this.parent.getColumnByField(fromFNames[i]), true);\n            }\n            if (this.parent.getColumnIndexByField(fromFNames[i + 1]) >= destIndex) {\n                toIndex++; //R to L\n            }\n        }\n    };\n    Reorder.prototype.moveTargetColumn = function (column, toIndex) {\n        if (toIndex > -1) {\n            this.moveColumns(toIndex, column, true);\n        }\n    };\n    Reorder.prototype.reorderSingleColumnByTarget = function (fieldName, toIndex) {\n        var column = this.parent.getColumnByField(fieldName);\n        this.moveTargetColumn(column, toIndex);\n    };\n    Reorder.prototype.reorderMultipleColumnByTarget = function (fieldName, toIndex) {\n        for (var i = 0; i < fieldName.length; i++) {\n            this.reorderSingleColumnByTarget(fieldName[i], toIndex);\n        }\n    };\n    /**\n     * Changes the position of the Grid columns by field names.\n     * @param  {string | string[]} fromFName - Defines the origin field names.\n     * @param  {string} toFName - Defines the destination field name.\n     * @return {void}\n     */\n    Reorder.prototype.reorderColumns = function (fromFName, toFName) {\n        typeof fromFName === 'string' ? this.reorderSingleColumn(fromFName, toFName) : this.reorderMultipleColumns(fromFName, toFName);\n    };\n    /**\n     * Changes the position of the Grid columns by field index.\n     * @param  {number} fromIndex - Defines the origin field index.\n     * @param  {number} toIndex - Defines the destination field index.\n     * @return {void}\n     */\n    Reorder.prototype.reorderColumnByIndex = function (fromIndex, toIndex) {\n        var column = this.parent.getColumnByIndex(fromIndex);\n        this.moveTargetColumn(column, toIndex);\n    };\n    /**\n     * Changes the position of the Grid columns by field index.\n     * @param  {string | string[]} fieldName - Defines the field name.\n     * @param  {number} toIndex - Defines the destination field index.\n     * @return {void}\n     */\n    Reorder.prototype.reorderColumnByTargetIndex = function (fieldName, toIndex) {\n        typeof fieldName === 'string' ? this.reorderSingleColumnByTarget(fieldName, toIndex) :\n            this.reorderMultipleColumnByTarget(fieldName, toIndex);\n    };\n    Reorder.prototype.enableAfterRender = function (e) {\n        if (e.module === this.getModuleName() && e.enable) {\n            this.createReorderElement();\n        }\n    };\n    Reorder.prototype.createReorderElement = function () {\n        var header = this.parent.element.querySelector('.e-headercontent');\n        this.upArrow = header.appendChild(this.parent\n            .createElement('div', { className: 'e-icons e-icon-reorderuparrow e-reorderuparrow', attrs: { style: 'display:none' } }));\n        this.downArrow = header.appendChild(this.parent\n            .createElement('div', { className: 'e-icons e-icon-reorderdownarrow e-reorderdownarrow', attrs: { style: 'display:none' } }));\n    };\n    /**\n     * The function used to trigger onActionComplete\n     * @return {void}\n     * @hidden\n     */\n    Reorder.prototype.onActionComplete = function (e) {\n        this.parent.trigger(events.actionComplete, extend(e, { type: events.actionComplete }));\n    };\n    /**\n     * To destroy the reorder\n     * @return {void}\n     * @hidden\n     */\n    Reorder.prototype.destroy = function () {\n        var gridElement = this.parent.element;\n        if (this.parent.isDestroyed || !gridElement || (!gridElement.querySelector('.e-gridheader') &&\n            !gridElement.querySelector('.e-gridcontent'))) {\n            return;\n        }\n        remove(this.upArrow);\n        remove(this.downArrow);\n        this.parent.off(events.headerDrop, this.headerDrop);\n        this.parent.off(events.uiUpdate, this.enableAfterRender);\n        this.parent.off(events.reorderComplete, this.onActionComplete);\n        this.parent.off(events.columnDrag, this.drag);\n        this.parent.off(events.columnDragStart, this.dragStart);\n        this.parent.off(events.columnDragStop, this.dragStop);\n        this.parent.off(events.headerRefreshed, this.createReorderElement);\n        //call ejdrag and drop destroy\n    };\n    Reorder.prototype.drag = function (e) {\n        var gObj = this.parent;\n        var target = e.target;\n        if (!e.column.allowReordering || e.column.lockColumn) {\n            return;\n        }\n        var closest = closestElement(target, '.e-headercell:not(.e-stackedHeaderCell)');\n        var cloneElement = gObj.element.querySelector('.e-cloneproperties');\n        var isLeft = this.x > getPosition(e.event).x + gObj.getContent().firstElementChild.scrollLeft;\n        removeClass(gObj.getHeaderTable().querySelectorAll('.e-reorderindicate'), ['e-reorderindicate']);\n        this.setDisplay('none');\n        this.stopTimer();\n        classList(cloneElement, ['e-defaultcur'], ['e-notallowedcur']);\n        this.updateScrollPostion(e.event);\n        if (closest && !closest.isEqualNode(this.element)) {\n            target = closest;\n            //consider stacked, detail header cell \n            if (!(!this.chkDropPosition(this.element, target) || !this.chkDropAllCols(this.element, target))) {\n                this.updateArrowPosition(target, isLeft);\n                classList(target, ['e-allowDrop', 'e-reorderindicate'], []);\n            }\n            else if (!(gObj.allowGrouping && parentsUntil(e.target, 'e-groupdroparea'))) {\n                classList(cloneElement, ['e-notallowedcur'], ['e-defaultcur']);\n            }\n        }\n        gObj.trigger(events.columnDrag, { target: target, draggableType: 'headercell', column: e.column });\n    };\n    Reorder.prototype.updateScrollPostion = function (e) {\n        var _this = this;\n        var frzCols = this.parent.getFrozenColumns();\n        var x = getPosition(e).x;\n        var cliRect = this.parent.element.getBoundingClientRect();\n        var cliRectBaseLeft = frzCols ? this.parent.element.querySelector('.e-movableheader')\n            .getBoundingClientRect().left : cliRect.left;\n        var cliRectBaseRight = cliRect.right;\n        var scrollElem = frzCols ? this.parent.getContent().querySelector('.e-movablecontent')\n            : this.parent.getContent().firstElementChild;\n        if (x > cliRectBaseLeft && x < cliRectBaseLeft + 35) {\n            this.timer = window.setInterval(function () { _this.setScrollLeft(scrollElem, true); }, 50);\n        }\n        else if (x < cliRectBaseRight && x > cliRectBaseRight - 35) {\n            this.timer = window.setInterval(function () { _this.setScrollLeft(scrollElem, false); }, 50);\n        }\n    };\n    Reorder.prototype.setScrollLeft = function (scrollElem, isLeft) {\n        var scrollLeft = scrollElem.scrollLeft;\n        scrollElem.scrollLeft = scrollElem.scrollLeft + (isLeft ? -5 : 5);\n        if (scrollLeft !== scrollElem.scrollLeft) {\n            this.setDisplay('none');\n        }\n    };\n    Reorder.prototype.stopTimer = function () {\n        window.clearInterval(this.timer);\n    };\n    Reorder.prototype.updateArrowPosition = function (target, isLeft) {\n        var cliRect = target.getBoundingClientRect();\n        var cliRectBase = this.parent.element.getBoundingClientRect();\n        if ((isLeft && cliRect.left < cliRectBase.left) || (!isLeft && cliRect.right > cliRectBase.right)) {\n            return;\n        }\n        this.upArrow.style.top = cliRect.top + cliRect.height - cliRectBase.top + 'px';\n        this.downArrow.style.top = cliRect.top - cliRectBase.top - 4 + 'px';\n        this.upArrow.style.left = this.downArrow.style.left = (isLeft ? cliRect.left : cliRect.right) - cliRectBase.left - 4 + 'px';\n        this.setDisplay('');\n    };\n    Reorder.prototype.dragStart = function (e) {\n        var gObj = this.parent;\n        var target = e.target;\n        this.element = target.classList.contains('e-headercell') ? target :\n            parentsUntil(target, 'e-headercell');\n        if (!e.column.allowReordering || e.column.lockColumn) {\n            return;\n        }\n        this.x = getPosition(e.event).x + gObj.getContent().firstElementChild.scrollLeft;\n        gObj.trigger(events.columnDragStart, {\n            target: target, draggableType: 'headercell', column: e.column\n        });\n    };\n    Reorder.prototype.dragStop = function (e) {\n        var gObj = this.parent;\n        this.setDisplay('none');\n        this.stopTimer();\n        if (!e.cancel) {\n            gObj.trigger(events.columnDrop, { target: e.target, draggableType: 'headercell', column: e.column });\n        }\n        removeClass(gObj.getHeaderTable().querySelectorAll('.e-reorderindicate'), ['e-reorderindicate']);\n    };\n    Reorder.prototype.setDisplay = function (display) {\n        this.upArrow.style.display = display;\n        this.downArrow.style.display = display;\n    };\n    /**\n     * For internal use only - Get the module name.\n     * @private\n     */\n    Reorder.prototype.getModuleName = function () {\n        return 'reorder';\n    };\n    return Reorder;\n}());\nexport { Reorder };\n","/**\n * PdfStandardFontMetricsFactory.ts class for EJ2-PDF\n */\nimport { PdfFontStyle, PdfFontFamily } from './enum';\nimport { PdfFontMetrics, StandardWidthTable } from './pdf-font-metrics';\n/**\n * @private\n * `Factory of the standard fonts metrics`.\n */\nvar PdfStandardFontMetricsFactory = /** @class */ (function () {\n    function PdfStandardFontMetricsFactory() {\n    }\n    /**\n     * Returns `metrics` of the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.getMetrics = function (fontFamily, fontStyle, size) {\n        var metrics = null;\n        switch (fontFamily) {\n            case PdfFontFamily.Helvetica:\n                metrics = this.getHelveticaMetrics(fontFamily, fontStyle, size);\n                break;\n            case PdfFontFamily.Courier:\n                metrics = this.getCourierMetrics(fontFamily, fontStyle, size);\n                break;\n            case PdfFontFamily.TimesRoman:\n                metrics = this.getTimesMetrics(fontFamily, fontStyle, size);\n                break;\n            case PdfFontFamily.Symbol:\n                metrics = this.getSymbolMetrics(fontFamily, fontStyle, size);\n                break;\n            case PdfFontFamily.ZapfDingbats:\n                metrics = this.getZapfDingbatsMetrics(fontFamily, fontStyle, size);\n                break;\n            default:\n                metrics = this.getHelveticaMetrics(PdfFontFamily.Helvetica, fontStyle, size);\n                break;\n        }\n        metrics.name = fontFamily.toString();\n        metrics.subScriptSizeFactor = this.subSuperScriptFactor;\n        metrics.superscriptSizeFactor = this.subSuperScriptFactor;\n        return metrics;\n    };\n    // Implementation\n    /**\n     * Creates `Helvetica font metrics`.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.getHelveticaMetrics = function (fontFamily, fontStyle, size) {\n        var metrics = new PdfFontMetrics();\n        if ((fontStyle & PdfFontStyle.Bold) > 0 && (fontStyle & PdfFontStyle.Italic) > 0) {\n            metrics.ascent = this.helveticaBoldItalicAscent;\n            metrics.descent = this.helveticaBoldItalicDescent;\n            metrics.postScriptName = this.helveticaBoldItalicName;\n            metrics.size = size;\n            metrics.widthTable = new StandardWidthTable(this.arialBoldWidth);\n            metrics.height = metrics.ascent - metrics.descent;\n        }\n        else if ((fontStyle & PdfFontStyle.Bold) > 0) {\n            metrics.ascent = this.helveticaBoldAscent;\n            metrics.descent = this.helveticaBoldDescent;\n            metrics.postScriptName = this.helveticaBoldName;\n            metrics.size = size;\n            metrics.widthTable = new StandardWidthTable(this.arialBoldWidth);\n            metrics.height = metrics.ascent - metrics.descent;\n        }\n        else if ((fontStyle & PdfFontStyle.Italic) > 0) {\n            metrics.ascent = this.helveticaItalicAscent;\n            metrics.descent = this.helveticaItalicDescent;\n            metrics.postScriptName = this.helveticaItalicName;\n            metrics.size = size;\n            metrics.widthTable = new StandardWidthTable(this.arialWidth);\n            metrics.height = metrics.ascent - metrics.descent;\n        }\n        else {\n            metrics.ascent = this.helveticaAscent;\n            metrics.descent = this.helveticaDescent;\n            metrics.postScriptName = this.helveticaName;\n            metrics.size = size;\n            metrics.widthTable = new StandardWidthTable(this.arialWidth);\n            metrics.height = metrics.ascent - metrics.descent;\n        }\n        return metrics;\n    };\n    /**\n     * Creates `Courier font metrics`.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.getCourierMetrics = function (fontFamily, fontStyle, size) {\n        var metrics = new PdfFontMetrics();\n        if ((fontStyle & PdfFontStyle.Bold) > 0 && (fontStyle & PdfFontStyle.Italic) > 0) {\n            metrics.ascent = this.courierBoldItalicAscent;\n            metrics.descent = this.courierBoldItalicDescent;\n            metrics.postScriptName = this.courierBoldItalicName;\n            metrics.size = size;\n            metrics.widthTable = new StandardWidthTable(this.fixedWidth);\n            metrics.height = metrics.ascent - metrics.descent;\n        }\n        else if ((fontStyle & PdfFontStyle.Bold) > 0) {\n            metrics.ascent = this.courierBoldAscent;\n            metrics.descent = this.courierBoldDescent;\n            metrics.postScriptName = this.courierBoldName;\n            metrics.size = size;\n            metrics.widthTable = new StandardWidthTable(this.fixedWidth);\n            metrics.height = metrics.ascent - metrics.descent;\n        }\n        else if ((fontStyle & PdfFontStyle.Italic) > 0) {\n            metrics.ascent = this.courierItalicAscent;\n            metrics.descent = this.courierItalicDescent;\n            metrics.postScriptName = this.courierItalicName;\n            metrics.size = size;\n            metrics.widthTable = new StandardWidthTable(this.fixedWidth);\n            metrics.height = metrics.ascent - metrics.descent;\n        }\n        else {\n            metrics.ascent = this.courierAscent;\n            metrics.descent = this.courierDescent;\n            metrics.postScriptName = this.courierName;\n            metrics.size = size;\n            metrics.widthTable = new StandardWidthTable(this.fixedWidth);\n            metrics.height = metrics.ascent - metrics.descent;\n        }\n        return metrics;\n    };\n    /**\n     * Creates `Times font metrics`.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.getTimesMetrics = function (fontFamily, fontStyle, size) {\n        var metrics = new PdfFontMetrics();\n        if ((fontStyle & PdfFontStyle.Bold) > 0 && (fontStyle & PdfFontStyle.Italic) > 0) {\n            metrics.ascent = this.timesBoldItalicAscent;\n            metrics.descent = this.timesBoldItalicDescent;\n            metrics.postScriptName = this.timesBoldItalicName;\n            metrics.size = size;\n            metrics.widthTable = new StandardWidthTable(this.timesRomanBoldItalicWidths);\n            metrics.height = metrics.ascent - metrics.descent;\n        }\n        else if ((fontStyle & PdfFontStyle.Bold) > 0) {\n            metrics.ascent = this.timesBoldAscent;\n            metrics.descent = this.timesBoldDescent;\n            metrics.postScriptName = this.timesBoldName;\n            metrics.size = size;\n            metrics.widthTable = new StandardWidthTable(this.timesRomanBoldWidth);\n            metrics.height = metrics.ascent - metrics.descent;\n        }\n        else if ((fontStyle & PdfFontStyle.Italic) > 0) {\n            metrics.ascent = this.timesItalicAscent;\n            metrics.descent = this.timesItalicDescent;\n            metrics.postScriptName = this.timesItalicName;\n            metrics.size = size;\n            metrics.widthTable = new StandardWidthTable(this.timesRomanItalicWidth);\n            metrics.height = metrics.ascent - metrics.descent;\n        }\n        else {\n            metrics.ascent = this.timesAscent;\n            metrics.descent = this.timesDescent;\n            metrics.postScriptName = this.timesName;\n            metrics.size = size;\n            metrics.widthTable = new StandardWidthTable(this.timesRomanWidth);\n            metrics.height = metrics.ascent - metrics.descent;\n        }\n        return metrics;\n    };\n    /**\n     * Creates `Symbol font metrics`.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.getSymbolMetrics = function (fontFamily, fontStyle, size) {\n        var metrics = new PdfFontMetrics();\n        metrics.ascent = this.symbolAscent;\n        metrics.descent = this.symbolDescent;\n        metrics.postScriptName = this.symbolName;\n        metrics.size = size;\n        metrics.widthTable = new StandardWidthTable(this.symbolWidth);\n        metrics.height = metrics.ascent - metrics.descent;\n        return metrics;\n    };\n    /**\n     * Creates `ZapfDingbats font metrics`.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.getZapfDingbatsMetrics = function (fontFamily, fontStyle, size) {\n        var metrics = new PdfFontMetrics();\n        metrics.ascent = this.zapfDingbatsAscent;\n        metrics.descent = this.zapfDingbatsDescent;\n        metrics.postScriptName = this.zapfDingbatsName;\n        metrics.size = size;\n        metrics.widthTable = new StandardWidthTable(this.zapfDingbatsWidth);\n        metrics.height = metrics.ascent - metrics.descent;\n        return metrics;\n    };\n    /**\n     * `Multiplier` os subscript superscript.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.subSuperScriptFactor = 1.52;\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.helveticaAscent = 931;\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.helveticaDescent = -225;\n    /**\n     * `Font type`.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.helveticaName = 'Helvetica';\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.helveticaBoldAscent = 962;\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.helveticaBoldDescent = -228;\n    /**\n     * `Font type`.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.helveticaBoldName = 'Helvetica-Bold';\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.helveticaItalicAscent = 931;\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.helveticaItalicDescent = -225;\n    /**\n     * `Font type`.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.helveticaItalicName = 'Helvetica-Oblique';\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.helveticaBoldItalicAscent = 962;\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.helveticaBoldItalicDescent = -228;\n    /**\n     * `Font type`.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.helveticaBoldItalicName = 'Helvetica-BoldOblique';\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.courierAscent = 805;\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.courierDescent = -250;\n    /**\n     * `Font type`.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.courierName = 'Courier';\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.courierBoldAscent = 801;\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.courierBoldDescent = -250;\n    /**\n     * `Font type`.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.courierBoldName = 'Courier-Bold';\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.courierItalicAscent = 805;\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.courierItalicDescent = -250;\n    /**\n     * `Font type`.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.courierItalicName = 'Courier-Oblique';\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.courierBoldItalicAscent = 801;\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.courierBoldItalicDescent = -250;\n    /**\n     * `Font type`.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.courierBoldItalicName = 'Courier-BoldOblique';\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.timesAscent = 898;\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.timesDescent = -218;\n    /**\n     * `Font type`.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.timesName = 'Times-Roman';\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.timesBoldAscent = 935;\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.timesBoldDescent = -218;\n    /**\n     * `Font type`.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.timesBoldName = 'Times-Bold';\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.timesItalicAscent = 883;\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.timesItalicDescent = -217;\n    /**\n     * `Font type`.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.timesItalicName = 'Times-Italic';\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.timesBoldItalicAscent = 921;\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.timesBoldItalicDescent = -218;\n    /**\n     * `Font type`.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.timesBoldItalicName = 'Times-BoldItalic';\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.symbolAscent = 1010;\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.symbolDescent = -293;\n    /**\n     * `Font type`.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.symbolName = 'Symbol';\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.zapfDingbatsAscent = 820;\n    /**\n     * `Ascender` value for the font.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.zapfDingbatsDescent = -143;\n    /**\n     * `Font type`.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.zapfDingbatsName = 'ZapfDingbats';\n    /**\n     * `Arial` widths table.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.arialWidth = [\n        278, 278, 355, 556, 556, 889, 667, 191, 333, 333, 389, 584, 278, 333,\n        278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 278, 278, 584, 584,\n        584, 556, 1015, 667, 667, 722, 722, 667, 611, 778, 722, 278, 500, 667, 556, 833,\n        722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 278, 278, 278,\n        469, 556, 333, 556, 556, 500, 556, 556, 278, 556, 556, 222, 222, 500, 222, 833,\n        556, 556, 556, 556, 333, 500, 278, 556, 500, 722, 500, 500, 500, 334, 260, 334,\n        584, 0, 556, 0, 222, 556, 333, 1000, 556, 556, 333, 1000, 667, 333, 1000, 0,\n        611, 0, 0, 222, 222, 333, 333, 350, 556, 1000, 333, 1000, 500, 333, 944, 0,\n        500, 667, 0, 333, 556, 556, 556, 556, 260, 556, 333, 737, 370, 556, 584, 0,\n        737, 333, 400, 584, 333, 333, 333, 556, 537, 278, 333, 333, 365, 556, 834, 834,\n        834, 611, 667, 667, 667, 667, 667, 667, 1000, 722, 667, 667, 667, 667, 278, 278,\n        278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667,\n        667, 611, 556, 556, 556, 556, 556, 556, 889, 500, 556, 556, 556, 556, 278, 278,\n        278, 278, 556, 556, 556, 556, 556, 556, 556, 584, 611, 556, 556, 556, 556, 500,\n        556, 500\n    ];\n    /**\n     * `Arial bold` widths table.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.arialBoldWidth = [\n        278, 333, 474, 556, 556, 889, 722, 238, 333, 333, 389, 584, 278, 333,\n        278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 333, 333, 584, 584,\n        584, 611, 975, 722, 722, 722, 722, 667, 611, 778, 722, 278, 556, 722, 611, 833,\n        722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 333, 278, 333,\n        584, 556, 333, 556, 611, 556, 611, 556, 333, 611, 611, 278, 278, 556, 278, 889,\n        611, 611, 611, 611, 389, 556, 333, 611, 556, 778, 556, 556, 500, 389, 280, 389,\n        584, 0, 556, 0, 278, 556, 500, 1000, 556, 556, 333, 1000, 667, 333, 1000, 0,\n        611, 0, 0, 278, 278, 500, 500, 350, 556, 1000, 333, 1000, 556, 333, 944, 0,\n        500, 667, 0, 333, 556, 556, 556, 556, 280, 556, 333, 737, 370, 556, 584, 0,\n        737, 333, 400, 584, 333, 333, 333, 611, 556, 278, 333, 333, 365, 556, 834, 834,\n        834, 611, 722, 722, 722, 722, 722, 722, 1000, 722, 667, 667, 667, 667, 278, 278,\n        278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667,\n        667, 611, 556, 556, 556, 556, 556, 556, 889, 556, 556, 556, 556, 556, 278, 278,\n        278, 278, 611, 611, 611, 611, 611, 611, 611, 584, 611, 611, 611, 611, 611, 556,\n        611, 556\n    ];\n    /**\n     * `Fixed` widths table.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.fixedWidth = [\n        600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n        600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n        600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n        600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n        600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n        600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n        600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n        600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n        600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n        600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n        600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n        600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n        600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600,\n        600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600\n    ];\n    /**\n     * `Times` widths table.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.timesRomanWidth = [\n        250, 333, 408, 500, 500, 833, 778, 180, 333, 333, 500, 564, 250, 333,\n        250, 278, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 278, 278, 564, 564,\n        564, 444, 921, 722, 667, 667, 722, 611, 556, 722, 722, 333, 389, 722, 611, 889,\n        722, 722, 556, 722, 667, 556, 611, 722, 722, 944, 722, 722, 611, 333, 278, 333,\n        469, 500, 333, 444, 500, 444, 500, 444, 333, 500, 500, 278, 278, 500, 278, 778,\n        500, 500, 500, 500, 333, 389, 278, 500, 500, 722, 500, 500, 444, 480, 200, 480,\n        541, 0, 500, 0, 333, 500, 444, 1000, 500, 500, 333, 1000, 556, 333, 889, 0,\n        611, 0, 0, 333, 333, 444, 444, 350, 500, 1000, 333, 980, 389, 333, 722, 0,\n        444, 722, 0, 333, 500, 500, 500, 500, 200, 500, 333, 760, 276, 500, 564, 0,\n        760, 333, 400, 564, 300, 300, 333, 500, 453, 250, 333, 300, 310, 500, 750, 750,\n        750, 444, 722, 722, 722, 722, 722, 722, 889, 667, 611, 611, 611, 611, 333, 333,\n        333, 333, 722, 722, 722, 722, 722, 722, 722, 564, 722, 722, 722, 722, 722, 722,\n        556, 500, 444, 444, 444, 444, 444, 444, 667, 444, 444, 444, 444, 444, 278, 278,\n        278, 278, 500, 500, 500, 500, 500, 500, 500, 564, 500, 500, 500, 500, 500, 500,\n        500, 500\n    ];\n    /**\n     * `Times bold` widths table.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.timesRomanBoldWidth = [\n        250, 333, 555, 500, 500, 1000, 833, 278, 333, 333, 500, 570, 250, 333,\n        250, 278, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 333, 333, 570, 570,\n        570, 500, 930, 722, 667, 722, 722, 667, 611, 778, 778, 389, 500, 778, 667, 944,\n        722, 778, 611, 778, 722, 556, 667, 722, 722, 1000, 722, 722, 667, 333, 278, 333,\n        581, 500, 333, 500, 556, 444, 556, 444, 333, 500, 556, 278, 333, 556, 278, 833,\n        556, 500, 556, 556, 444, 389, 333, 556, 500, 722, 500, 500, 444, 394, 220, 394,\n        520, 0, 500, 0, 333, 500, 500, 1000, 500, 500, 333, 1000, 556, 333, 1000, 0,\n        667, 0, 0, 333, 333, 500, 500, 350, 500, 1000, 333, 1000, 389, 333, 722, 0,\n        444, 722, 0, 333, 500, 500, 500, 500, 220, 500, 333, 747, 300, 500, 570, 0,\n        747, 333, 400, 570, 300, 300, 333, 556, 540, 250, 333, 300, 330, 500, 750, 750,\n        750, 500, 722, 722, 722, 722, 722, 722, 1000, 722, 667, 667, 667, 667, 389, 389,\n        389, 389, 722, 722, 778, 778, 778, 778, 778, 570, 778, 722, 722, 722, 722, 722,\n        611, 556, 500, 500, 500, 500, 500, 500, 722, 444, 444, 444, 444, 444, 278, 278,\n        278, 278, 500, 556, 500, 500, 500, 500, 500, 570, 500, 556, 556, 556, 556, 500,\n        556, 500\n    ];\n    /**\n     * `Times italic` widths table.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.timesRomanItalicWidth = [\n        250, 333, 420, 500, 500, 833, 778, 214, 333, 333, 500, 675, 250, 333,\n        250, 278, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 333, 333, 675, 675,\n        675, 500, 920, 611, 611, 667, 722, 611, 611, 722, 722, 333, 444, 667, 556, 833,\n        667, 722, 611, 722, 611, 500, 556, 722, 611, 833, 611, 556, 556, 389, 278, 389,\n        422, 500, 333, 500, 500, 444, 500, 444, 278, 500, 500, 278, 278, 444, 278, 722,\n        500, 500, 500, 500, 389, 389, 278, 500, 444, 667, 444, 444, 389, 400, 275, 400,\n        541, 0, 500, 0, 333, 500, 556, 889, 500, 500, 333, 1000, 500, 333, 944, 0,\n        556, 0, 0, 333, 333, 556, 556, 350, 500, 889, 333, 980, 389, 333, 667, 0,\n        389, 556, 0, 389, 500, 500, 500, 500, 275, 500, 333, 760, 276, 500, 675, 0,\n        760, 333, 400, 675, 300, 300, 333, 500, 523, 250, 333, 300, 310, 500, 750, 750,\n        750, 500, 611, 611, 611, 611, 611, 611, 889, 667, 611, 611, 611, 611, 333, 333,\n        333, 333, 722, 667, 722, 722, 722, 722, 722, 675, 722, 722, 722, 722, 722, 556,\n        611, 500, 500, 500, 500, 500, 500, 500, 667, 444, 444, 444, 444, 444, 278, 278,\n        278, 278, 500, 500, 500, 500, 500, 500, 500, 675, 500, 500, 500, 500, 500, 444,\n        500, 444\n    ];\n    /**\n     * `Times bold italic` widths table.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.timesRomanBoldItalicWidths = [\n        250, 389, 555, 500, 500, 833, 778, 278, 333, 333, 500, 570, 250, 333,\n        250, 278, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 333, 333, 570, 570,\n        570, 500, 832, 667, 667, 667, 722, 667, 667, 722, 778, 389, 500, 667, 611, 889,\n        722, 722, 611, 722, 667, 556, 611, 722, 667, 889, 667, 611, 611, 333, 278, 333,\n        570, 500, 333, 500, 500, 444, 500, 444, 333, 500, 556, 278, 278, 500, 278, 778,\n        556, 500, 500, 500, 389, 389, 278, 556, 444, 667, 500, 444, 389, 348, 220, 348,\n        570, 0, 500, 0, 333, 500, 500, 1000, 500, 500, 333, 1000, 556, 333, 944, 0,\n        611, 0, 0, 333, 333, 500, 500, 350, 500, 1000, 333, 1000, 389, 333, 722, 0,\n        389, 611, 0, 389, 500, 500, 500, 500, 220, 500, 333, 747, 266, 500, 606, 0,\n        747, 333, 400, 570, 300, 300, 333, 576, 500, 250, 333, 300, 300, 500, 750, 750,\n        750, 500, 667, 667, 667, 667, 667, 667, 944, 667, 667, 667, 667, 667, 389, 389,\n        389, 389, 722, 722, 722, 722, 722, 722, 722, 570, 722, 722, 722, 722, 722, 611,\n        611, 500, 500, 500, 500, 500, 500, 500, 722, 444, 444, 444, 444, 444, 278, 278,\n        278, 278, 500, 556, 500, 500, 500, 500, 500, 570, 500, 556, 556, 556, 556, 444,\n        500, 444\n    ];\n    /**\n     * `Symbol` widths table.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.symbolWidth = [\n        250, 333, 713, 500, 549, 833, 778, 439, 333, 333, 500, 549, 250, 549,\n        250, 278, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 278, 278,\n        549, 549, 549, 444, 549, 722, 667, 722, 612, 611, 763, 603, 722, 333,\n        631, 722, 686, 889, 722, 722, 768, 741, 556, 592, 611, 690, 439, 768,\n        645, 795, 611, 333, 863, 333, 658, 500, 500, 631, 549, 549, 494, 439,\n        521, 411, 603, 329, 603, 549, 549, 576, 521, 549, 549, 521, 549, 603,\n        439, 576, 713, 686, 493, 686, 494, 480, 200, 480, 549, 750, 620, 247,\n        549, 167, 713, 500, 753, 753, 753, 753, 1042, 987, 603, 987, 603, 400,\n        549, 411, 549, 549, 713, 494, 460, 549, 549, 549, 549, 1000, 603, 1000,\n        658, 823, 686, 795, 987, 768, 768, 823, 768, 768, 713, 713, 713, 713,\n        713, 713, 713, 768, 713, 790, 790, 890, 823, 549, 250, 713, 603, 603,\n        1042, 987, 603, 987, 603, 494, 329, 790, 790, 786, 713, 384, 384, 384,\n        384, 384, 384, 494, 494, 494, 494, 329, 274, 686, 686, 686, 384, 384,\n        384, 384, 384, 384, 494, 494, 494, -1\n    ];\n    /**\n     * `Zip dingbats` widths table.\n     * @private\n     */\n    PdfStandardFontMetricsFactory.zapfDingbatsWidth = [\n        278, 974, 961, 974, 980, 719, 789, 790, 791, 690, 960, 939, 549, 855,\n        911, 933, 911, 945, 974, 755, 846, 762, 761, 571, 677, 763, 760, 759,\n        754, 494, 552, 537, 577, 692, 786, 788, 788, 790, 793, 794, 816, 823,\n        789, 841, 823, 833, 816, 831, 923, 744, 723, 749, 790, 792, 695, 776,\n        768, 792, 759, 707, 708, 682, 701, 826, 815, 789, 789, 707, 687, 696,\n        689, 786, 787, 713, 791, 785, 791, 873, 761, 762, 762, 759, 759, 892,\n        892, 788, 784, 438, 138, 277, 415, 392, 392, 668, 668, 390, 390, 317,\n        317, 276, 276, 509, 509, 410, 410, 234, 234, 334, 334, 732, 544, 544,\n        910, 667, 760, 760, 776, 595, 694, 626, 788, 788, 788, 788, 788, 788,\n        788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788,\n        788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788,\n        788, 788, 788, 788, 788, 788, 894, 838, 1016, 458, 748, 924, 748, 918,\n        927, 928, 928, 834, 873, 828, 924, 924, 917, 930, 931, 463, 883, 836,\n        836, 867, 867, 696, 696, 874, 874, 760, 946, 771, 865, 771, 888, 967,\n        888, 831, 873, 927, 970, 918\n    ];\n    return PdfStandardFontMetricsFactory;\n}());\nexport { PdfStandardFontMetricsFactory };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { PdfFontFamily, PdfFontStyle, FontEncoding } from './enum';\nimport { PdfFont } from './pdf-font';\nimport { PdfDocument } from './../../document/pdf-document';\nimport { PdfStandardFontMetricsFactory } from './pdf-standard-font-metrics-factory';\nimport { PdfDictionary } from './../../primitives/pdf-dictionary';\nimport { DictionaryProperties } from './../../input-output/pdf-dictionary-properties';\nimport { PdfName } from './../../primitives/pdf-name';\n/**\n * Represents one of the 14 standard fonts.\n * It's used to create a standard PDF font to draw the text in to the PDF.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * //\n * // create new standard font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * //\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nvar PdfStandardFont = /** @class */ (function (_super) {\n    __extends(PdfStandardFont, _super);\n    function PdfStandardFont(fontFamilyPrototype, size, style) {\n        var _this = _super.call(this, size, style) || this;\n        /**\n         * Gets `ascent` of the font.\n         * @private\n         */\n        _this.dictionaryProperties = new DictionaryProperties();\n        /**\n         * Gets `encodings` for internal class use.\n         * @hidden\n         * @private\n         */\n        _this.encodings = ['Unknown', 'StandardEncoding', 'MacRomanEncoding', 'MacExpertEncoding',\n            'WinAnsiEncoding', 'PDFDocEncoding', 'IdentityH'];\n        if ((typeof fontFamilyPrototype === 'number') && (typeof style === 'undefined')) {\n            _this.constructor(fontFamilyPrototype, size, PdfFontStyle.Regular);\n        }\n        else if ((typeof fontFamilyPrototype === 'number') && (typeof style !== 'undefined')) {\n            _this = _super.call(this, size, style) || this;\n            _this.pdfFontFamily = fontFamilyPrototype;\n            _this.checkStyle();\n            _this.initializeInternals();\n        }\n        else if ((fontFamilyPrototype instanceof PdfStandardFont) && (typeof style === 'undefined')) {\n            _this.constructor(fontFamilyPrototype.fontFamily, size, fontFamilyPrototype.style);\n        }\n        else if ((fontFamilyPrototype instanceof PdfStandardFont) && (typeof style !== 'undefined')) {\n            _this.constructor(fontFamilyPrototype.fontFamily, size, style);\n        }\n        return _this;\n    }\n    Object.defineProperty(PdfStandardFont.prototype, \"fontFamily\", {\n        //Properties\n        /**\n         * Gets the `FontFamily`.\n         * @private\n         */\n        get: function () {\n            return this.pdfFontFamily;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //methods\n    /**\n     * Checks font `style` of the font.\n     * @private\n     */\n    PdfStandardFont.prototype.checkStyle = function () {\n        if (this.fontFamily === PdfFontFamily.Symbol || this.fontFamily === PdfFontFamily.ZapfDingbats) {\n            var style = this.style;\n            style &= ~(PdfFontStyle.Bold | PdfFontStyle.Italic);\n            this.setStyle(style);\n        }\n    };\n    /**\n     * Returns `width` of the line.\n     * @public\n     */\n    PdfStandardFont.prototype.getLineWidth = function (line, format) {\n        if (line == null) {\n            throw new Error('ArgumentNullException:line');\n        }\n        var width = 0;\n        var name = this.name;\n        line = PdfStandardFont.convert(line);\n        for (var i = 0, len = line.length; i < len; i++) {\n            var ch = line[i];\n            var charWidth = this.getCharWidthInternal(ch, format);\n            width += charWidth;\n        }\n        var size = this.metrics.getSize(format);\n        width *= (PdfFont.charSizeMultiplier * size);\n        width = this.applyFormatSettings(line, format, width);\n        return width;\n    };\n    /**\n     * Checks whether fonts are `equals`.\n     * @private\n     */\n    PdfStandardFont.prototype.equalsToFont = function (font) {\n        var equal = false;\n        var stFont = font;\n        if (stFont != null) {\n            var fontFamilyEqual = (this.fontFamily === stFont.fontFamily);\n            var lineReducer = (~(PdfFontStyle.Underline | PdfFontStyle.Strikeout));\n            var styleEqual = (this.style & lineReducer) === (stFont.style & lineReducer);\n            equal = (fontFamilyEqual && styleEqual);\n        }\n        return equal;\n    };\n    /**\n     * `Initializes` font internals..\n     * @private\n     */\n    PdfStandardFont.prototype.initializeInternals = function () {\n        var equalFont = null;\n        // if (PdfDocument.EnableCache) {\n        equalFont = PdfDocument.cache.search(this);\n        // }\n        var internals = null;\n        // if (equalFont == null) {\n        // Create font metrics.\n        var metrics = PdfStandardFontMetricsFactory.getMetrics(this.pdfFontFamily, this.style, this.size);\n        this.metrics = metrics;\n        internals = this.createInternals();\n        this.setInternals(internals);\n    };\n    /**\n     * `Creates` font`s dictionary.\n     * @private\n     */\n    PdfStandardFont.prototype.createInternals = function () {\n        var dictionary = new PdfDictionary();\n        dictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font));\n        dictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.type1));\n        dictionary.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.metrics.postScriptName));\n        if (this.fontFamily !== PdfFontFamily.Symbol && this.fontFamily !== PdfFontFamily.ZapfDingbats) {\n            var encoding = this.encodings[FontEncoding.WinAnsiEncoding];\n            dictionary.items.setValue(this.dictionaryProperties.encoding, new PdfName(encoding));\n        }\n        return dictionary;\n    };\n    /**\n     * Returns `width` of the char. This methods doesn`t takes into consideration font`s size.\n     * @private\n     */\n    PdfStandardFont.prototype.getCharWidthInternal = function (charCode, format) {\n        var width = 0;\n        var code = 0;\n        code = charCode.charCodeAt(0);\n        if (this.name === '0' || this.name === '1' || this.name === '2' ||\n            this.name === '3' || this.name === '4') {\n            code = code - PdfStandardFont.charOffset;\n        }\n        code = (code >= 0 && code !== 128) ? code : 0;\n        var metrics = this.metrics;\n        var widthTable = metrics.widthTable;\n        width = widthTable.items(code);\n        return width;\n    };\n    /**\n     * `Converts` the specified text.\n     * @private\n     */\n    PdfStandardFont.convert = function (text) {\n        return text;\n    };\n    //Constants\n    /**\n     * First character `position`.\n     * @private\n     */\n    PdfStandardFont.charOffset = 32;\n    return PdfStandardFont;\n}(PdfFont));\nexport { PdfStandardFont };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * PdfResources.ts class for EJ2-PDF\n */\nimport { PdfDictionary } from './../primitives/pdf-dictionary';\nimport { TemporaryDictionary } from './../collections/object-object-pair/dictionary';\nimport { PdfName } from './../primitives/pdf-name';\nimport { PdfArray } from './../primitives/pdf-array';\nimport { PdfReferenceHolder } from './../primitives/pdf-reference';\nimport { PdfCrossTable } from './../input-output/pdf-cross-table';\nimport { PdfFont } from './fonts/pdf-font';\nimport { PdfTemplate } from './figures/pdf-template';\nimport { PdfBrush } from './brushes/pdf-brush';\nimport { PdfTransparency } from './pdf-transparency';\nimport { PdfBitmap } from './../graphics/images/pdf-bitmap';\nimport { PdfImage } from './../graphics/images/pdf-image';\n/**\n * `PdfResources` class used to set resource contents like font, image.\n * @private\n */\nvar PdfResources = /** @class */ (function (_super) {\n    __extends(PdfResources, _super);\n    function PdfResources(baseDictionary) {\n        var _this = _super.call(this) || this;\n        /**\n         * Dictionary for the `properties names`.\n         * @private\n         */\n        _this.properties = new PdfDictionary();\n        if (baseDictionary instanceof PdfDictionary) {\n            _this = _super.call(this, baseDictionary) || this;\n        }\n        return _this;\n    }\n    Object.defineProperty(PdfResources.prototype, \"names\", {\n        //Properties\n        /**\n         * Gets the `font names`.\n         * @private\n         */\n        get: function () {\n            return this.getNames();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfResources.prototype, \"document\", {\n        /**\n         * Get or set the `page document`.\n         * @private\n         */\n        get: function () {\n            return this.pdfDocument;\n        },\n        set: function (value) {\n            this.pdfDocument = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Public Methods\n    /**\n     * `Generates name` for the object and adds to the resource if the object is new.\n     * @private\n     */\n    PdfResources.prototype.getName = function (obj) {\n        var primitive = obj.element;\n        var name = null;\n        if (this.names.containsKey(primitive)) {\n            name = this.names.getValue(primitive);\n        }\n        // Object is new.\n        if (name == null) {\n            var sName = this.generateName();\n            name = new PdfName(sName);\n            this.names.setValue(primitive, name);\n            if (obj instanceof PdfFont) {\n                this.add(obj, name);\n            }\n            else if (obj instanceof PdfTemplate) {\n                this.add(obj, name);\n            }\n            else if (obj instanceof PdfTransparency) {\n                this.add(obj, name);\n            }\n            else if (obj instanceof PdfImage || obj instanceof PdfBitmap) {\n                this.add(obj, name);\n            }\n        }\n        return name;\n    };\n    /**\n     * Gets `resource names` to font dictionaries.\n     * @private\n     */\n    PdfResources.prototype.getNames = function () {\n        if (this.pdfNames == null) {\n            this.pdfNames = new TemporaryDictionary();\n        }\n        var fonts = this.items.getValue(this.dictionaryProperties.font);\n        if (fonts != null) {\n            var reference = fonts;\n            var dictionary = fonts;\n            dictionary = PdfCrossTable.dereference(fonts);\n        }\n        return this.pdfNames;\n    };\n    /**\n     * Add `RequireProcedureSet` into procset array.\n     * @private\n     */\n    PdfResources.prototype.requireProcedureSet = function (procedureSetName) {\n        if (procedureSetName == null) {\n            throw new Error('ArgumentNullException:procedureSetName');\n        }\n        var procSets = this.items.getValue(this.dictionaryProperties.procset);\n        if (procSets == null) {\n            procSets = new PdfArray();\n            this.items.setValue(this.dictionaryProperties.procset, procSets);\n        }\n        var name = new PdfName(procedureSetName);\n        if (!procSets.contains(name)) {\n            procSets.add(name);\n        }\n    };\n    //Helper Methods\n    /**\n     * `Remove font` from array.\n     * @private\n     */\n    PdfResources.prototype.removeFont = function (name) {\n        var key = null;\n        var keys = this.pdfNames.keys();\n        for (var index = 0; index < this.pdfNames.size(); index++) {\n            if (this.pdfNames.getValue(keys[index]) === new PdfName(name)) {\n                key = keys[index];\n                break;\n            }\n        }\n        if (key != null) {\n            this.pdfNames.remove(key);\n        }\n    };\n    /**\n     * Generates `Unique string name`.\n     * @private\n     */\n    PdfResources.prototype.generateName = function () {\n        var name = Guid.getNewGuidString();\n        return name;\n    };\n    PdfResources.prototype.add = function (arg1, arg2) {\n        if (arg1 instanceof PdfFont) {\n            var dictionary = null;\n            var fonts = this.items.getValue(this.dictionaryProperties.font);\n            if (fonts != null) {\n                var reference = fonts;\n                dictionary = fonts;\n                dictionary = fonts;\n            }\n            else {\n                dictionary = new PdfDictionary();\n                this.items.setValue(this.dictionaryProperties.font, dictionary);\n            }\n            dictionary.items.setValue(arg2.value, new PdfReferenceHolder(arg1.element));\n        }\n        else if (arg1 instanceof PdfTemplate) {\n            var xobjects = void 0;\n            xobjects = this.items.getValue(this.dictionaryProperties.xObject);\n            // Create fonts dictionary.\n            if (xobjects == null) {\n                xobjects = new PdfDictionary();\n                this.items.setValue(this.dictionaryProperties.xObject, xobjects);\n            }\n            xobjects.items.setValue(arg2.value, new PdfReferenceHolder(arg1.element));\n        }\n        else if (arg1 instanceof PdfBrush) {\n            // let savable : IPdfPrimitive = (arg1 as IPdfWrapper).Element;\n            // if (savable != null)\n            // {\n            //     let pattern : PdfDictionary = this.Items.getValue(this.dictionaryProperties.pattern) as PdfDictionary;\n            //     // Create a new pattern dictionary.\n            //     if (pattern == null) {\n            //         pattern = new PdfDictionary();\n            //         this.Items.setValue(this.dictionaryProperties.pattern, pattern);\n            //     }\n            //     pattern.Items.setValue(name, new PdfReferenceHolder(savable));\n            // }\n        }\n        else if (arg1 instanceof PdfTransparency) {\n            var savable = arg1.element;\n            var transDic = null;\n            transDic = this.items.getValue(this.dictionaryProperties.extGState);\n            // Create a new pattern dictionary.\n            if (transDic == null) {\n                transDic = new PdfDictionary();\n                this.items.setValue(this.dictionaryProperties.extGState, transDic);\n            }\n            transDic.items.setValue(arg2.value, new PdfReferenceHolder(savable));\n        }\n        else {\n            /* tslint:disable */\n            var xobjects = this.Dictionary.items.getValue(this.dictionaryProperties.xObject);\n            var parentXObjects = void 0;\n            if (typeof this.pdfDocument !== 'undefined') {\n                parentXObjects = this.pdfDocument.sections.element.items.getValue(this.dictionaryProperties.resources).items.getValue(this.dictionaryProperties.xObject);\n            }\n            var values = this.Dictionary.items.values();\n            var hasSameImageStream = false;\n            var oldReference = void 0;\n            if (typeof this.pdfDocument !== 'undefined' && (typeof parentXObjects === undefined || parentXObjects == null)) {\n                parentXObjects = new PdfDictionary();\n                this.pdfDocument.sections.element.items.getValue(this.dictionaryProperties.resources).items.setValue(this.dictionaryProperties.xObject, parentXObjects);\n            }\n            else if (typeof this.pdfDocument !== 'undefined') {\n                var values_1 = parentXObjects.items.values();\n                for (var i = 0; i < values_1.length; i++) {\n                    if (typeof values_1[i] !== 'undefined' && typeof values_1[i].element !== 'undefined') {\n                        if (values_1[i].element.data[0] === arg1.element.data[0]) {\n                            oldReference = values_1[i];\n                            hasSameImageStream = true;\n                        }\n                    }\n                }\n            }\n            if (xobjects == null) {\n                xobjects = new PdfDictionary();\n                this.Dictionary.items.setValue(this.dictionaryProperties.xObject, xobjects);\n            }\n            if (hasSameImageStream && typeof oldReference !== 'undefined') {\n                xobjects.items.setValue(arg2.value, oldReference);\n            }\n            else {\n                var reference = new PdfReferenceHolder(arg1.element);\n                xobjects.items.setValue(arg2.value, reference);\n                if (typeof this.pdfDocument !== 'undefined') {\n                    parentXObjects.items.setValue(arg2.value, reference);\n                }\n            }\n            /* tslint:enable */\n        }\n    };\n    return PdfResources;\n}(PdfDictionary));\nexport { PdfResources };\n/**\n * Used to create new guid for resources.\n * @private\n */\nvar Guid = /** @class */ (function () {\n    /**\n     * Initialize an `instance of GUID` class.\n     * @private\n     */\n    function Guid(stringValue) {\n        this.stringValue = stringValue || Guid.getNewGuidString();\n    }\n    Object.defineProperty(Guid, \"randomNumber\", {\n        /**\n         * Generate `Random number` for GUID.\n         * @private\n         */\n        get: function () {\n            Guid.guid = Guid.guid + 1;\n            Guid.guid = Guid.guid > 999999999999 ? 0 : Guid.guid;\n            return Guid.guid;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Return the value of `GUID as string`.\n     * @private\n     */\n    Guid.prototype.toString = function () {\n        return this.stringValue;\n    };\n    /**\n     * Generate `new GUID`.\n     * @private\n     */\n    Guid.getNewGuidString = function () {\n        var guid = 'abc7def4-ghi9-jkl2-m6n3-';\n        var temproaryString = 'opqrstuvwxyz';\n        var randomString = Guid.randomNumber.toString();\n        randomString = guid + temproaryString.substr(0, (12 - randomString.length)) + randomString;\n        return randomString;\n    };\n    /**\n     * static field to store `endding value of current GUID`.\n     * @private\n     */\n    Guid.guid = 0;\n    return Guid;\n}());\nexport { Guid };\n","/**\n * `PdfName` class is used to perform name (element names) related primitive operations.\n * @private\n */\nvar PdfName = /** @class */ (function () {\n    function PdfName(value) {\n        /**\n         * `Start symbol` of the name object.\n         * @default /\n         * @private\n         */\n        this.stringStartMark = '/';\n        /**\n         * `Value` of the element.\n         * @private\n         */\n        this.internalValue = '';\n        /**\n         * Indicates if the object is currently in `saving state or not`.\n         * @default false\n         * @private\n         */\n        this.isSaving6 = false;\n        /**\n         * Internal variable to store the `position`.\n         * @default -1\n         * @private\n         */\n        this.position6 = -1;\n        this.internalValue = this.normalizeValue(value);\n    }\n    Object.defineProperty(PdfName.prototype, \"status\", {\n        //property\n        /**\n         * Gets or sets the `Status` of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.status6;\n        },\n        set: function (value) {\n            this.status6 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfName.prototype, \"isSaving\", {\n        /**\n         * Gets or sets a value indicating whether this document `is saving` or not.\n         * @private\n         */\n        get: function () {\n            return this.isSaving6;\n        },\n        set: function (value) {\n            this.isSaving6 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfName.prototype, \"objectCollectionIndex\", {\n        /**\n         * Gets or sets the `index` value of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.index6;\n        },\n        set: function (value) {\n            this.index6 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfName.prototype, \"position\", {\n        /**\n         * Gets or sets the `position` of the object.\n         * @private\n         */\n        get: function () {\n            return this.position6;\n        },\n        set: function (value) {\n            this.position6 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfName.prototype, \"clonedObject\", {\n        /**\n         * Returns `cloned object`.\n         * @private\n         */\n        get: function () {\n            return null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfName.prototype, \"value\", {\n        /**\n         * Gets or sets the `value` of the object.\n         * @private\n         */\n        get: function () {\n            return this.internalValue;\n        },\n        set: function (value) {\n            // if (value !== this.value) {\n            var val = value;\n            if (value !== null && value.length > 0) {\n                // val = (value.substring(0, 1) === this.stringStartMark) ? value.substring(1) : value;\n                val = value;\n                this.internalValue = this.normalizeValue(val);\n            }\n            else {\n                this.internalValue = val;\n            }\n            // }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //public methods\n    /**\n     * `Saves` the name using the specified writer.\n     * @private\n     */\n    PdfName.prototype.save = function (writer) {\n        // if (writer === null) {\n        //     throw new Error('ArgumentNullException : writer');\n        // }\n        writer.write(this.toString());\n    };\n    /**\n     * Gets `string` representation of the primitive.\n     * @private\n     */\n    PdfName.prototype.toString = function () {\n        return (this.stringStartMark + this.escapeString(this.value));\n    };\n    /**\n     * Creates a `copy of PdfName`.\n     * @private\n     */\n    PdfName.prototype.clone = function (crossTable) {\n        var newName = new PdfName();\n        newName.value = this.internalValue;\n        return newName;\n    };\n    /**\n     * Replace some characters with its `escape sequences`.\n     * @private\n     */\n    PdfName.prototype.escapeString = function (stringValue) {\n        // if (str === null) {\n        //     throw new Error('ArgumentNullException : str');\n        // }\n        // if (str === '') {\n        //     return str;\n        // }\n        var result = '';\n        var len = 0;\n        for (var i = 0, len_1 = stringValue.length; i < len_1; i++) {\n            var ch = stringValue[i];\n            var index = PdfName.delimiters.indexOf(ch);\n            // switch (ch) {\n            //     case '\\r' :\n            //         result = result + '\\\\r';\n            //         break;\n            //     case '\\n' :\n            //         result = result + '\\n';\n            //         break;\n            //     case '(' :\n            //     case ')' :\n            //     case '\\\\' :\n            //         //result.Append( '\\\\' ).Append( ch );\n            //         result = result + ch;\n            //         break;\n            //     default :\n            //         result = result + ch;\n            //         break;\n            // }\n            result = result + ch;\n        }\n        return result;\n    };\n    //methiods\n    /**\n     * Replace a symbol with its code with the precedence of the `sharp sign`.\n     * @private\n     */\n    PdfName.prototype.normalizeValue = function (value, c) {\n        // if (typeof c === undefined) {\n        //     let str : string = value;\n        //     for (let i : number = 0; i < PdfName.replacements.length; i++) {\n        //         str = this.normalizeValue(str, c);\n        //     }\n        //     return str;\n        // } else {\n        var strFormat = '#{0:X}';\n        //return value.replace(c.toString(),String.format(strFormat,c));\n        return value;\n        // }\n    };\n    /**\n     * PDF `special characters`.\n     * @private\n     */\n    PdfName.delimiters = '()<>[]{}/%}';\n    /**\n     * The symbols that are not allowed in PDF names and `should be replaced`.\n     * @private\n     */\n    PdfName.replacements = [' ', '\\t', '\\n', '\\r'];\n    return PdfName;\n}());\nexport { PdfName };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { PdfColor } from './../pdf-color';\nimport { PdfColorSpace } from './../enum';\nimport { PdfBrush } from './pdf-brush';\n/**\n * Represents a brush that fills any object with a solid color.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a pages to the document\n * let page1 : PdfPage = document.pages.add();\n * // set font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // set brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10));\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nvar PdfSolidBrush = /** @class */ (function (_super) {\n    __extends(PdfSolidBrush, _super);\n    //Constructors\n    /**\n     * Initializes a new instance of the `PdfSolidBrush` class.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // add a pages to the document\n     * let page1 : PdfPage = document.pages.add();\n     * // set font\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n     * // set brush\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n     * // draw the text\n     * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10));\n     * // save the document\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     * @param color color of the brush\n     */\n    function PdfSolidBrush(color) {\n        var _this = _super.call(this) || this;\n        _this.pdfColor = color;\n        return _this;\n    }\n    Object.defineProperty(PdfSolidBrush.prototype, \"color\", {\n        //Properties\n        /**\n         * Gets or sets the `color` of the brush.\n         * @private\n         */\n        get: function () {\n            return this.pdfColor;\n        },\n        set: function (value) {\n            this.pdfColor = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Implementation\n    /**\n     * `Monitors` the changes of the brush and modify PDF state respectively.\n     * @private\n     */\n    PdfSolidBrush.prototype.monitorChanges = function (brush, streamWriter, getResources, saveChanges, currentColorSpace) {\n        if (streamWriter == null) {\n            throw new Error('ArgumentNullException:streamWriter');\n        }\n        var diff = false;\n        if (brush == null) {\n            diff = true;\n            streamWriter.setColorAndSpace(this.pdfColor, currentColorSpace, false);\n            return diff;\n        }\n        else {\n            var sBrush = brush;\n            diff = true;\n            streamWriter.setColorAndSpace(this.pdfColor, currentColorSpace, false);\n            return diff;\n        }\n    };\n    /**\n     * `Resets` the changes, which were made by the brush.\n     * @private\n     */\n    PdfSolidBrush.prototype.resetChanges = function (streamWriter) {\n        streamWriter.setColorAndSpace(new PdfColor(0, 0, 0), PdfColorSpace.Rgb, false);\n    };\n    return PdfSolidBrush;\n}(PdfBrush));\nexport { PdfSolidBrush };\n","/**\n * Used to perform `convertion between pixels and points`.\n * @private\n */\nvar PdfUnitConverter = /** @class */ (function () {\n    //constructors\n    /**\n     * Initializes a new instance of the `UnitConvertor` class with DPI value.\n     * @private\n     */\n    function PdfUnitConverter(dpi) {\n        this.updateProportionsHelper(dpi);\n    }\n    /**\n     * `Converts` the value, from one graphics unit to another graphics unit.\n     * @private\n     */\n    PdfUnitConverter.prototype.convertUnits = function (value, from, to) {\n        return this.convertFromPixels(this.convertToPixels(value, from), to);\n    };\n    /**\n     * Converts the value `to pixel` from specified graphics unit.\n     * @private\n     */\n    PdfUnitConverter.prototype.convertToPixels = function (value, from) {\n        var index = from;\n        var result = (value * this.proportions[index]);\n        return result;\n    };\n    /**\n     * Converts value, to specified graphics unit `from Pixel`.\n     * @private\n     */\n    PdfUnitConverter.prototype.convertFromPixels = function (value, to) {\n        var index = to;\n        var result = (value / this.proportions[index]);\n        return result;\n    };\n    /**\n     * `Update proportions` matrix according to Graphics settings.\n     * @private\n     */\n    PdfUnitConverter.prototype.updateProportionsHelper = function (pixelPerInch) {\n        this.proportions = [\n            pixelPerInch / 2.54,\n            pixelPerInch / 6.0,\n            1,\n            pixelPerInch / 72.0,\n            pixelPerInch,\n            pixelPerInch / 300.0,\n            pixelPerInch / 25.4 // Millimeter\n        ];\n    };\n    //Fields\n    /**\n     * Indicates default `horizontal resolution`.\n     * @default 96\n     * @private\n     */\n    PdfUnitConverter.horizontalResolution = 96;\n    /**\n     * Indicates default `vertical resolution`.\n     * @default 96\n     * @private\n     */\n    PdfUnitConverter.verticalResolution = 96;\n    return PdfUnitConverter;\n}());\nexport { PdfUnitConverter };\n","import { SizeF } from './../../drawing/pdf-drawing';\nimport { PdfGraphicsUnit } from './../enum';\nimport { PdfUnitConverter } from './../unit-convertor';\n/**\n * `PdfImage` class represents the base class for images and provides functionality for the 'PdfBitmap' class.\n * @private\n */\nvar PdfImage = /** @class */ (function () {\n    function PdfImage() {\n    }\n    Object.defineProperty(PdfImage.prototype, \"width\", {\n        /**\n         * Gets and Sets the `width` of an image.\n         * @private\n         */\n        get: function () {\n            return this.imageWidth;\n        },\n        set: function (value) {\n            this.imageWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfImage.prototype, \"height\", {\n        /**\n         * Gets and Sets the `height` of an image.\n         * @private\n         */\n        get: function () {\n            return this.imageHeight;\n        },\n        set: function (value) {\n            this.imageHeight = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfImage.prototype, \"size\", {\n        /**\n         * Gets or sets the size of the image.\n         * @private\n         */\n        set: function (value) {\n            this.width = value.width;\n            this.height = value.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfImage.prototype, \"physicalDimension\", {\n        /**\n         * Gets the `physical dimension` of an image.\n         * @private\n         */\n        get: function () {\n            this.imagePhysicalDimension = this.getPointSize(this.width, this.height, this.horizontalResolution, this.verticalResolution);\n            return new SizeF(this.width, this.height);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfImage.prototype, \"element\", {\n        // /**\n        //  * Gets the `image stream as string`.\n        //  * @private\n        //  */\n        // public static fromString(string : string) : PdfImage {\n        //     let image : PdfImage = new PdfBitmap(string);\n        //     return image;\n        // }\n        /**\n         * Gets the `element` image stream.\n         * @private\n         */\n        get: function () {\n            return this.imageStream;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfImage.prototype.getPointSize = function (width, height, horizontalResolution, verticalResolution) {\n        if (typeof horizontalResolution === 'undefined') {\n            var dpiX = PdfUnitConverter.horizontalResolution;\n            var dpiY = PdfUnitConverter.verticalResolution;\n            var size = this.getPointSize(width, height, dpiX, dpiY);\n            return size;\n        }\n        else {\n            var ucX = new PdfUnitConverter(horizontalResolution);\n            var ucY = new PdfUnitConverter(verticalResolution);\n            var ptWidth = ucX.convertUnits(width, PdfGraphicsUnit.Pixel, PdfGraphicsUnit.Point);\n            var ptHeight = ucY.convertUnits(height, PdfGraphicsUnit.Pixel, PdfGraphicsUnit.Point);\n            var size = new SizeF(ptWidth, ptHeight);\n            return size;\n        }\n    };\n    return PdfImage;\n}());\nexport { PdfImage };\n","/**\n * Dictionary class\n * @private\n * @hidden\n */\nvar TemporaryDictionary = /** @class */ (function () {\n    function TemporaryDictionary() {\n        /**\n         * @hidden\n         * @private\n         */\n        this.mKeys = [];\n        /**\n         * @hidden\n         * @private\n         */\n        this.mValues = [];\n    }\n    /**\n     * @hidden\n     * @private\n     */\n    TemporaryDictionary.prototype.size = function () {\n        return this.mKeys.length;\n    };\n    /**\n     * @hidden\n     * @private\n     */\n    TemporaryDictionary.prototype.add = function (key, value) {\n        if (key === undefined || key === null || value === undefined || value === null) {\n            throw new ReferenceError('Provided key or value is not valid.');\n        }\n        var index = this.mKeys.indexOf(key);\n        if (index < 0) {\n            this.mKeys.push(key);\n            this.mValues.push(value);\n            return 1;\n        }\n        else {\n            throw new RangeError('An item with the same key has already been added.');\n        }\n    };\n    /**\n     * @hidden\n     * @private\n     */\n    TemporaryDictionary.prototype.keys = function () {\n        return this.mKeys;\n    };\n    /**\n     * @hidden\n     * @private\n     */\n    TemporaryDictionary.prototype.values = function () {\n        return this.mValues;\n    };\n    /**\n     * @hidden\n     * @private\n     */\n    TemporaryDictionary.prototype.getValue = function (key) {\n        if (key === undefined || key === null) {\n            throw new ReferenceError('Provided key is not valid.');\n        }\n        var index = this.mKeys.indexOf(key);\n        if (index < 0) {\n            throw new RangeError('No item with the specified key has been added.');\n        }\n        else {\n            return this.mValues[index];\n        }\n    };\n    /**\n     * @hidden\n     * @private\n     */\n    TemporaryDictionary.prototype.setValue = function (key, value) {\n        if (key === undefined || key === null) {\n            throw new ReferenceError('Provided key is not valid.');\n        }\n        var index = this.mKeys.indexOf(key);\n        if (index < 0) {\n            this.mKeys.push(key);\n            this.mValues.push(value);\n        }\n        else {\n            this.mValues[index] = value;\n        }\n    };\n    /**\n     * @hidden\n     * @private\n     */\n    TemporaryDictionary.prototype.remove = function (key) {\n        if (key === undefined || key === null) {\n            throw new ReferenceError('Provided key is not valid.');\n        }\n        var index = this.mKeys.indexOf(key);\n        if (index < 0) {\n            throw new RangeError('No item with the specified key has been added.');\n        }\n        else {\n            this.mKeys.splice(index, 1);\n            this.mValues.splice(index, 1);\n            return true;\n        }\n    };\n    /**\n     * @hidden\n     * @private\n     */\n    TemporaryDictionary.prototype.containsKey = function (key) {\n        if (key === undefined || key === null) {\n            throw new ReferenceError('Provided key is not valid.');\n        }\n        var index = this.mKeys.indexOf(key);\n        if (index < 0) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * @hidden\n     * @private\n     */\n    TemporaryDictionary.prototype.clear = function () {\n        this.mKeys = [];\n        this.mValues = [];\n    };\n    return TemporaryDictionary;\n}());\nexport { TemporaryDictionary };\n","import * as events from '../base/constant';\nimport { Workbook } from '@syncfusion/ej2-excel-export';\nimport { isNullOrUndefined, getEnumValue, compile, getValue, detach, extend } from '@syncfusion/ej2-base';\nimport { Data } from '../actions/data';\nimport { ExportHelper, ExportValueFormatter } from './export-helper';\nimport { SummaryModelGenerator, GroupSummaryModelGenerator, CaptionSummaryModelGenerator } from '../services/summary-model-generator';\nimport { CellType } from '../base/enum';\nimport { Query, DataManager } from '@syncfusion/ej2-data';\nimport { getPrintGridModel, getUid } from '../base/util';\n/**\n * @hidden\n * `ExcelExport` module is used to handle the Excel export action.\n */\nvar ExcelExport = /** @class */ (function () {\n    /**\n     * Constructor for the Grid Excel Export module.\n     * @hidden\n     */\n    function ExcelExport(parent) {\n        /* tslint:disable-next-line:no-any */\n        this.book = {};\n        this.workSheet = [];\n        this.rows = [];\n        this.columns = [];\n        this.styles = [];\n        this.rowLength = 1;\n        this.expType = 'AppendToSheet';\n        this.includeHiddenColumn = false;\n        this.isCsvExport = false;\n        this.isElementIdChanged = false;\n        this.foreignKeyData = {};\n        this.gridPool = {};\n        this.parent = parent;\n        this.helper = new ExportHelper(parent);\n    }\n    /**\n     * For internal use only - Get the module name.\n     */\n    ExcelExport.prototype.getModuleName = function () {\n        return 'ExcelExport';\n    };\n    ExcelExport.prototype.init = function (gObj) {\n        if (gObj.element !== null && gObj.element.id === '') {\n            gObj.element.id = new Date().toISOString();\n            this.isElementIdChanged = true;\n        }\n        this.parent = gObj;\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.isExporting = undefined;\n        this.book = {};\n        this.workSheet = [];\n        this.rows = [];\n        this.columns = [];\n        this.styles = [];\n        this.rowLength = 1;\n        this.footer = undefined;\n        this.expType = 'AppendToSheet';\n        this.includeHiddenColumn = false;\n        this.exportValueFormatter = new ExportValueFormatter(gObj.locale);\n        gObj.id = getUid('main-grid');\n        this.gridPool[gObj.id] = false;\n    };\n    /**\n     * Export Grid to Excel file.\n     * @param  {exportProperties} exportProperties - Defines the export properties of the Grid.\n     * @param  {isMultipleExport} isMultipleExport - Defines is multiple Grid's are exported.\n     * @param  {workbook} workbook - Defined the Workbook if multiple Grid is exported.\n     * @param  {isCsv} isCsv - true if export to CSV.\n     * @return {Promise<any>}\n     */\n    /* tslint:disable-next-line:max-line-length */\n    /* tslint:disable-next-line:no-any */\n    ExcelExport.prototype.Map = function (grid, exportProperties, isMultipleExport, workbook, isCsv, isBlob) {\n        var gObj = grid;\n        var cancel = 'cancel';\n        var isBlb = 'isBlob';\n        var csv = 'isCsv';\n        var workbk = 'workbook';\n        var isMultiEx = 'isMultipleExport';\n        this.gridPool = {};\n        if (grid.childGrid && !(!isNullOrUndefined(exportProperties) && exportProperties.hierarchyExportMode === 'None')) {\n            grid.expandedRows = getPrintGridModel(grid).expandedRows;\n        }\n        var args = {\n            requestType: 'beforeExcelExport', gridObject: gObj, cancel: false,\n            isMultipleExport: isMultipleExport, workbook: workbook, isCsv: isCsv, isBlob: isBlob\n        };\n        gObj.trigger(events.beforeExcelExport, args);\n        if (args[cancel]) {\n            return new Promise(function (resolve, reject) {\n                return resolve();\n            });\n        }\n        this.data = new Data(gObj);\n        this.isExporting = true;\n        this.isBlob = args[isBlb];\n        if (args[csv]) {\n            this.isCsvExport = args[csv];\n        }\n        else {\n            this.isCsvExport = false;\n        }\n        return this.processRecords(gObj, exportProperties, args[isMultiEx], args[workbk]);\n    };\n    /* tslint:disable-next-line:no-any */\n    ExcelExport.prototype.processRecords = function (gObj, exportProperties, isMultipleExport, workbook) {\n        var _this = this;\n        if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource) &&\n            exportProperties.dataSource instanceof DataManager) {\n            return new Promise(function (resolve, reject) {\n                var dataManager = exportProperties.dataSource.executeQuery(new Query());\n                dataManager.then(function (r) {\n                    _this.init(gObj);\n                    _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, r).then(function () {\n                        resolve(_this.book);\n                    });\n                });\n            });\n        }\n        else {\n            var allPromise_1 = [];\n            allPromise_1.push(this.data.getData({}, ExportHelper.getQuery(gObj, this.data)));\n            allPromise_1.push(this.helper.getColumnData(gObj));\n            return new Promise(function (resolve, reject) {\n                Promise.all(allPromise_1).then(function (e) {\n                    _this.init(gObj);\n                    _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, e[0]).then(function () {\n                        _this.isExporting = false;\n                        gObj.trigger(events.excelExportComplete, _this.isBlob ? { promise: _this.blobPromise } : {});\n                        resolve(_this.book);\n                    });\n                }).catch(function (e) {\n                    reject(_this.book);\n                    _this.parent.trigger(events.actionFailure, e);\n                });\n            });\n        }\n    };\n    /* tslint:disable-next-line:max-func-body-length */\n    ExcelExport.prototype.processInnerRecords = function (gObj, exportProperties, \n    /* tslint:disable-next-line:no-any */\n    isMultipleExport, workbook, r) {\n        var _this = this;\n        this.groupedColLength = gObj.groupSettings.columns.length;\n        var blankRows = 5;\n        var rows = [];\n        if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.multipleExport)) {\n            /* tslint:disable-next-line:max-line-length */\n            this.expType = (!isNullOrUndefined(exportProperties.multipleExport.type) ? exportProperties.multipleExport.type : 'AppendToSheet');\n            if (!isNullOrUndefined(exportProperties.multipleExport.blankRows)) {\n                blankRows = exportProperties.multipleExport.blankRows;\n            }\n        }\n        if (isNullOrUndefined(workbook)) {\n            this.workSheet = [];\n            this.rows = [];\n            this.columns = [];\n            this.styles = [];\n        }\n        else if (this.expType === 'NewSheet') {\n            this.workSheet = workbook.worksheets;\n            this.rows = [];\n            this.columns = [];\n            this.styles = workbook.styles;\n        }\n        else {\n            this.workSheet = [];\n            this.rows = workbook.worksheets[0].rows;\n            this.columns = workbook.worksheets[0].columns;\n            this.styles = workbook.styles;\n            this.rowLength = (this.rows[this.rows.length - 1].index + blankRows);\n            this.rowLength++;\n        }\n        if (!isNullOrUndefined(exportProperties)) {\n            if (!isNullOrUndefined(isMultipleExport)) {\n                if (!isNullOrUndefined(exportProperties.header) && (isMultipleExport || this.expType === 'NewSheet')) {\n                    this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n                }\n                if (!isNullOrUndefined(exportProperties.footer)) {\n                    if (this.expType === 'AppendToSheet') {\n                        if (!isMultipleExport) {\n                            this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n                        }\n                    }\n                    else {\n                        this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n                    }\n                }\n            }\n            else {\n                if (!isNullOrUndefined(exportProperties.header)) {\n                    this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n                }\n                if (!isNullOrUndefined(exportProperties.footer)) {\n                    this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n                }\n            }\n        }\n        this.includeHiddenColumn = (!isNullOrUndefined(exportProperties) ? exportProperties.includeHiddenColumn : false);\n        return new Promise(function (resolve, reject) {\n            gObj.childGridLevel = 0;\n            rows = _this.processGridExport(gObj, exportProperties, r);\n            _this.globalResolve = resolve;\n            _this.gridPool[gObj.id] = true;\n            _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n        }).then(function () {\n            var organisedRows = [];\n            _this.organiseRows(rows, rows[0].index, organisedRows);\n            _this.rows = _this.rows.concat(organisedRows);\n            //footer template add\n            if (!isNullOrUndefined(_this.footer)) {\n                if ((_this.expType === 'AppendToSheet' && !isMultipleExport) || (_this.expType === 'NewSheet')) {\n                    _this.processExcelFooter(_this.footer);\n                }\n            }\n            var sheet = {};\n            if (_this.columns.length > 0) {\n                sheet.columns = _this.columns;\n            }\n            /* tslint:disable-next-line:no-any */\n            sheet.rows = _this.rows;\n            _this.workSheet.push(sheet);\n            _this.book.worksheets = _this.workSheet;\n            _this.book.styles = _this.styles;\n            if (!isMultipleExport) {\n                if (_this.isCsvExport) {\n                    var book = new Workbook(_this.book, 'csv', gObj.locale);\n                    if (!_this.isBlob) {\n                        if (!isNullOrUndefined(exportProperties) && exportProperties.fileName) {\n                            book.save(exportProperties.fileName);\n                        }\n                        else {\n                            book.save('Export.csv');\n                        }\n                    }\n                    else {\n                        _this.blobPromise = book.saveAsBlob('text/csv');\n                    }\n                }\n                else {\n                    var book = new Workbook(_this.book, 'xlsx', gObj.locale);\n                    if (!_this.isBlob) {\n                        if (!isNullOrUndefined(exportProperties) && exportProperties.fileName) {\n                            book.save(exportProperties.fileName);\n                        }\n                        else {\n                            book.save('Export.xlsx');\n                        }\n                    }\n                    else {\n                        _this.blobPromise = book.saveAsBlob('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n                    }\n                }\n                if (_this.isElementIdChanged) {\n                    gObj.element.id = '';\n                }\n                delete gObj.expandedRows;\n            }\n            return workbook;\n        });\n    };\n    ExcelExport.prototype.organiseRows = function (rows, initialIndex, organisedRows) {\n        if (!rows.length) {\n            return initialIndex;\n        }\n        for (var i = 0; i < rows.length; i++) {\n            var row = rows[i];\n            var childRows = row.childRows;\n            if (childRows) {\n                row.index = initialIndex++;\n                delete row.childRows;\n                organisedRows.push(row);\n                initialIndex = this.organiseRows(childRows, initialIndex, organisedRows);\n            }\n            else {\n                row.index = initialIndex++;\n                organisedRows.push(row);\n            }\n        }\n        return initialIndex;\n    };\n    ExcelExport.prototype.processGridExport = function (gObj, exportProperties, r) {\n        var excelRows = [];\n        if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.theme)) {\n            this.theme = exportProperties.theme;\n        }\n        if (gObj.childGrid && !isNullOrUndefined(exportProperties)) {\n            gObj.hierarchyPrintMode = exportProperties.hierarchyExportMode || 'Expanded';\n        }\n        var helper = new ExportHelper(gObj);\n        var headerRow = helper.getHeaders(gObj.columns, this.includeHiddenColumn);\n        var groupIndent = gObj.groupSettings.columns.length;\n        excelRows = this.processHeaderContent(gObj, headerRow, groupIndent, excelRows);\n        /* tslint:disable-next-line:max-line-length */\n        if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource) && !(exportProperties.dataSource instanceof DataManager)) {\n            excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, exportProperties.dataSource, excelRows, helper);\n        }\n        else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {\n            excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, gObj.currentViewData, excelRows, helper);\n        }\n        else {\n            excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, undefined, excelRows, helper);\n        }\n        return excelRows;\n    };\n    ExcelExport.prototype.processRecordContent = function (gObj, returnType, headerRow, exportProperties, currentViewRecords, excelRow, helper) {\n        var record;\n        if (!isNullOrUndefined(currentViewRecords)) {\n            record = currentViewRecords;\n        }\n        else {\n            record = returnType.result;\n        }\n        if (!isNullOrUndefined(record.level)) {\n            this.processGroupedRows(gObj, record, headerRow, record.level, 0, exportProperties, excelRow, helper);\n        }\n        else {\n            this.processRecordRows(gObj, record, headerRow, 0, 0, exportProperties, excelRow, helper);\n        }\n        if (!isNullOrUndefined(returnType.aggregates)) {\n            if (!isNullOrUndefined(currentViewRecords)) {\n                this.processAggregates(gObj, returnType.result, excelRow, currentViewRecords);\n            }\n            else {\n                this.processAggregates(gObj, returnType.result, excelRow);\n            }\n        }\n        return excelRow;\n    };\n    /* tslint:disable-next-line:no-any */\n    ExcelExport.prototype.processGroupedRows = function (gObj, dataSource, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n        for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {\n            var item = dataSource_1[_i];\n            var cells = [];\n            var index = 1;\n            /* tslint:disable-next-line:no-any */\n            var cell = {};\n            cell.index = index + level;\n            var col = gObj.getColumnByField(item.field);\n            /* tslint:disable-next-line:no-any */\n            var args = {\n                value: item.key,\n                column: col,\n                style: undefined,\n                isForeignKey: col.isForeignColumn(),\n            };\n            cell.value = gObj.getColumnByField(item.field).headerText +\n                ': ' + this.exportValueFormatter.formatCellValue(args) + ' - ';\n            if (item.count > 1) {\n                cell.value += item.count + ' items';\n            }\n            else {\n                cell.value += item.count + ' item';\n            }\n            cell.style = this.getCaptionThemeStyle(this.theme);\n            var captionModelGen = new CaptionSummaryModelGenerator(gObj);\n            var groupCaptionSummaryRows = captionModelGen.generateRows(item);\n            this.fillAggregates(gObj, groupCaptionSummaryRows, dataSource.level + dataSource.childLevels, excelRows, this.rowLength);\n            cells.push(cell);\n            if (excelRows[excelRows.length - 1].cells.length > 0) {\n                var lIndex = dataSource.level + dataSource.childLevels + groupCaptionSummaryRows[0].cells.length;\n                var hIndex = 0;\n                for (var _a = 0, _b = excelRows[excelRows.length - 1].cells; _a < _b.length; _a++) {\n                    var tCell = _b[_a];\n                    if (tCell.index < lIndex) {\n                        lIndex = tCell.index;\n                    }\n                    if (tCell.index > hIndex) {\n                        hIndex = tCell.index;\n                    }\n                    /* tslint:disable-next-line:no-any */\n                    tCell.style = this.getCaptionThemeStyle(this.theme);\n                    if (cells[cells.length - 1].index !== tCell.index) {\n                        cells.push(tCell);\n                    }\n                }\n                if ((lIndex - cell.index) > 1) {\n                    cell.colSpan = lIndex - cell.index;\n                }\n                while (hIndex < (headerRow.columns.length + level + dataSource.childLevels)) {\n                    /* tslint:disable-next-line:no-any */\n                    var sCell = {};\n                    sCell.index = (hIndex + 1);\n                    sCell.style = this.getCaptionThemeStyle(this.theme);\n                    cells.push(sCell);\n                    hIndex++;\n                }\n            }\n            else {\n                var span = 0;\n                //Calculation for column span when group caption dont have aggregates\n                for (var _c = 0, _d = headerRow.columns; _c < _d.length; _c++) {\n                    var col_1 = _d[_c];\n                    if (col_1.visible) {\n                        span++;\n                    }\n                }\n                cell.colSpan = (dataSource.childLevels + span);\n            }\n            excelRows[excelRows.length - 1].cells = cells;\n            this.rowLength++;\n            if (this.groupedColLength < 8 && level > 1) {\n                var grouping = { outlineLevel: level - 1, isCollapsed: true };\n                excelRows[excelRows.length - 1].grouping = grouping;\n            }\n            if (!isNullOrUndefined(dataSource.childLevels) && dataSource.childLevels > 0) {\n                this.processGroupedRows(gObj, item.items, headerRow, item.items.level, startIndex, excelExportProperties, excelRows, helper);\n            }\n            else {\n                startIndex = this.processRecordRows(gObj, item.items, headerRow, (level), startIndex, excelExportProperties, excelRows, helper);\n                this.processAggregates(gObj, item, excelRows, undefined, (level), true);\n            }\n        }\n    };\n    ExcelExport.prototype.processRecordRows = function (gObj, record, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n        var index = 1;\n        var cells = [];\n        var columns = headerRow.columns;\n        var rows = helper.getGridRowModel(columns, record, gObj, startIndex);\n        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n            var row = rows_1[_i];\n            cells = [];\n            startIndex++;\n            index = 1;\n            for (var c = 0, len = row.cells.length; c < len; c++) {\n                var gCell = row.cells[c];\n                if (gCell.cellType !== CellType.Data) {\n                    continue;\n                }\n                var column = gCell.column;\n                var field = column.field;\n                var cellValue = !isNullOrUndefined(field) ? getValue(field, row.data) : '';\n                var value = !isNullOrUndefined(cellValue) ? cellValue : '';\n                var fkData = void 0;\n                if (column.isForeignColumn && column.isForeignColumn()) {\n                    fkData = helper.getFData(value, column);\n                    value = getValue(column.foreignKeyValue, fkData);\n                }\n                if (!isNullOrUndefined(value)) {\n                    var cell = {};\n                    /* tslint:disable-next-line:no-any */\n                    var excelCellArgs = {\n                        data: row.data, column: column, foreignKeyData: fkData,\n                        value: value, style: undefined, colSpan: 1, cell: cell\n                    };\n                    gObj.trigger(events.excelQueryCellInfo, excelCellArgs);\n                    cell = excelCellArgs.cell;\n                    cell.index = index + level + gObj.childGridLevel;\n                    cell.value = excelCellArgs.value;\n                    if (excelCellArgs.colSpan > 1) {\n                        cell.colSpan = excelCellArgs.colSpan;\n                    }\n                    if (!isNullOrUndefined(excelCellArgs.style)) {\n                        var styleIndex = this.getColumnStyle(gObj, index + level);\n                        cell.style = this.mergeOptions(this.styles[styleIndex], excelCellArgs.style);\n                    }\n                    else {\n                        cell.style = { name: gObj.element.id + 'column' + (index + level) };\n                    }\n                    cells.push(cell);\n                }\n                index++;\n            }\n            var excelRow = { index: this.rowLength++, cells: cells };\n            if (this.groupedColLength < 8 && level > 0) {\n                excelRow.grouping = { outlineLevel: level, isCollapsed: true };\n                excelRows.push(excelRow);\n            }\n            else {\n                excelRows.push(excelRow);\n            }\n            if (!isNullOrUndefined(gObj.childGrid)) {\n                gObj.isPrinting = true;\n                var exportType = (!isNullOrUndefined(excelExportProperties) && excelExportProperties.exportType) ?\n                    excelExportProperties.exportType : 'AllPages';\n                var returnVal = this.helper.createChildGrid(gObj, row, exportType, this.gridPool);\n                var childGridObj = returnVal.childGrid;\n                var element = returnVal.element;\n                childGridObj.actionFailure =\n                    helper.failureHandler(this.gridPool, childGridObj, this.globalResolve);\n                childGridObj.childGridLevel = gObj.childGridLevel + 1;\n                var args = { childGrid: childGridObj, row: row, exportProperties: excelExportProperties };\n                this.parent.trigger(events.exportDetailDataBound, args);\n                childGridObj.beforeDataBound = this.childGridCell(excelRow, childGridObj, excelExportProperties, row);\n                childGridObj.appendTo(element);\n            }\n            gObj.notify(events.exportRowDataBound, { rowObj: row, type: 'excel' });\n        }\n        return startIndex;\n    };\n    ExcelExport.prototype.childGridCell = function (excelRow, childGridObj, excelExportProps, gRow) {\n        var _this = this;\n        return function (result) {\n            childGridObj.beforeDataBound = null;\n            result.cancel = true;\n            excelRow.childRows = _this.processGridExport(childGridObj, excelExportProps, result);\n            var intent = _this.parent.groupSettings.columns.length;\n            excelRow.childRows.forEach(function (row) {\n                row.grouping = { outlineLevel: intent + childGridObj.childGridLevel,\n                    isCollapsed: !gRow.isExpand, isHidden: !gRow.isExpand };\n            });\n            childGridObj.destroy();\n            detach(childGridObj.element);\n            _this.gridPool[childGridObj.id] = true;\n            _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n            return excelRow;\n        };\n    };\n    // tslint:disable-next-line:max-line-length\n    ExcelExport.prototype.processAggregates = function (gObj, rec, excelRows, currentViewRecords, indent, byGroup) {\n        var summaryModel = new SummaryModelGenerator(gObj);\n        var data = undefined;\n        if (!isNullOrUndefined(currentViewRecords)) {\n            data = currentViewRecords;\n        }\n        else {\n            data = rec;\n        }\n        if (indent === undefined) {\n            indent = 0;\n        }\n        if (gObj.groupSettings.columns.length > 0 && byGroup) {\n            var groupSummaryModel = new GroupSummaryModelGenerator(gObj);\n            var groupSummaryRows = groupSummaryModel.generateRows(data, { level: data.level });\n            if (groupSummaryRows.length > 0) {\n                excelRows = this.fillAggregates(gObj, groupSummaryRows, indent, excelRows);\n            }\n        }\n        else {\n            indent = gObj.groupSettings.columns.length > 0 && !byGroup ? gObj.groupSettings.columns.length : indent;\n            var sRows = summaryModel.generateRows(data, rec.aggregates);\n            if (sRows.length > 0 && !byGroup) {\n                excelRows = this.fillAggregates(gObj, sRows, indent, excelRows);\n            }\n        }\n        return excelRows;\n    };\n    // tslint:disable-next-line:max-line-length\n    ExcelExport.prototype.fillAggregates = function (gObj, rows, indent, excelRows, customIndex) {\n        for (var _i = 0, rows_2 = rows; _i < rows_2.length; _i++) {\n            var row = rows_2[_i];\n            var cells = [];\n            var index = 0;\n            for (var _a = 0, _b = row.cells; _a < _b.length; _a++) {\n                var cell = _b[_a];\n                /* tslint:disable-next-line:no-any */\n                var eCell = {};\n                if (cell.cellType === CellType.DetailFooterIntent) {\n                    continue;\n                }\n                if ((cell.visible || this.includeHiddenColumn)) {\n                    index++;\n                    if (cell.isDataCell) {\n                        eCell.index = index + indent + gObj.childGridLevel;\n                        if (!isNullOrUndefined(cell.column.footerTemplate)) {\n                            eCell.value = this.getAggreateValue(CellType.Summary, cell.column.footerTemplate, cell, row);\n                        }\n                        else if (!isNullOrUndefined(cell.column.groupFooterTemplate)) {\n                            eCell.value = this.getAggreateValue(CellType.GroupSummary, cell.column.groupFooterTemplate, cell, row);\n                        }\n                        else if (!isNullOrUndefined(cell.column.groupCaptionTemplate)) {\n                            eCell.value = this.getAggreateValue(CellType.CaptionSummary, cell.column.groupCaptionTemplate, cell, row);\n                        }\n                        else {\n                            for (var _c = 0, _d = Object.keys(row.data[cell.column.field]); _c < _d.length; _c++) {\n                                var key = _d[_c];\n                                if (key === cell.column.type) {\n                                    if (!isNullOrUndefined(row.data[cell.column.field].Sum)) {\n                                        eCell.value = row.data[cell.column.field].Sum;\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Average)) {\n                                        eCell.value = row.data[cell.column.field].Average;\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Max)) {\n                                        eCell.value = row.data[cell.column.field].Max;\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Min)) {\n                                        eCell.value = row.data[cell.column.field].Min;\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Count)) {\n                                        eCell.value = row.data[cell.column.field].Count;\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].TrueCount)) {\n                                        eCell.value = row.data[cell.column.field].TrueCount;\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].FalseCount)) {\n                                        eCell.value = row.data[cell.column.field].FalseCount;\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Custom)) {\n                                        eCell.value = row.data[cell.column.field].Custom;\n                                    }\n                                }\n                            }\n                        }\n                        eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n                        var gridCellStyle = cell.attributes.style;\n                        if (gridCellStyle.textAlign) {\n                            eCell.style.hAlign = gridCellStyle.textAlign.toLowerCase();\n                        }\n                        cells.push(eCell);\n                    }\n                    else {\n                        if (customIndex === undefined) {\n                            eCell.index = index + indent + gObj.childGridLevel;\n                            eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n                            cells.push(eCell);\n                        }\n                    }\n                }\n            }\n            if (!isNullOrUndefined(customIndex)) {\n                excelRows.push({ index: customIndex, cells: cells });\n            }\n            else {\n                var row_1 = {};\n                if (this.groupedColLength < 8 && this.groupedColLength > 0) {\n                    var dummyOutlineLevel = 'outlineLevel';\n                    var dummyGrouping = 'grouping';\n                    var level = excelRows[excelRows.length - 1][dummyGrouping][dummyOutlineLevel];\n                    var grouping = { outlineLevel: level, isCollapsed: true };\n                    row_1 = { index: this.rowLength++, cells: cells, grouping: grouping };\n                }\n                else {\n                    row_1 = { index: this.rowLength++, cells: cells };\n                }\n                excelRows.push(row_1);\n            }\n        }\n        return excelRows;\n    };\n    ExcelExport.prototype.getAggreateValue = function (cellType, template, cell, row) {\n        var templateFn = {};\n        templateFn[getEnumValue(CellType, cell.cellType)] = compile(template);\n        /* tslint:disable-next-line:max-line-length */\n        var txt = (templateFn[getEnumValue(CellType, cell.cellType)](row.data[cell.column.field ? cell.column.field : cell.column.columnName]));\n        return txt[0].textContent;\n    };\n    ExcelExport.prototype.mergeOptions = function (JSON1, JSON2) {\n        var result = {};\n        var attrname = Object.keys(JSON1);\n        for (var index = 0; index < attrname.length; index++) {\n            if (attrname[index] !== 'name') {\n                result[attrname[index]] = JSON1[attrname[index]];\n            }\n        }\n        attrname = Object.keys(JSON2);\n        for (var index = 0; index < attrname.length; index++) {\n            if (attrname[index] !== 'name') {\n                result[attrname[index]] = JSON2[attrname[index]];\n            }\n        }\n        return result;\n    };\n    ExcelExport.prototype.getColumnStyle = function (gObj, columnIndex) {\n        var index = 0;\n        for (var _i = 0, _a = this.styles; _i < _a.length; _i++) {\n            var style = _a[_i];\n            if (style.name === gObj.element.id + 'column' + columnIndex) {\n                return index;\n            }\n            index++;\n        }\n        return undefined;\n    };\n    ExcelExport.prototype.processHeaderContent = function (gObj, headerRow, indent, excelRows) {\n        var rowIndex = 1;\n        var gridRows = headerRow.rows;\n        // Column collection with respect to the records in the grid\n        var gridColumns = headerRow.columns;\n        var spannedCells = [];\n        if (indent > 0) {\n            var index = 0;\n            while (index !== indent) {\n                this.columns.push({ index: index + 1, width: 30 });\n                index++;\n            }\n        }\n        for (var row = 0; row < gridRows.length; row++) {\n            var currentCellIndex = 1 + indent;\n            var cells = [];\n            for (var column = 0; column < gridRows[row].cells.length; column++) {\n                /* tslint:disable-next-line:no-any */\n                var style = {};\n                var cell = {};\n                var gridCell = gridRows[row].cells[column];\n                if (gridCell.cellType === CellType.HeaderIndent || gridCell.cellType === CellType.DetailHeader) {\n                    continue;\n                }\n                var result = { contains: true, index: 1 };\n                while (result.contains) {\n                    result = this.getIndex(spannedCells, rowIndex, currentCellIndex);\n                    currentCellIndex = result.index;\n                    if (!result.contains) {\n                        cell.index = result.index + gObj.childGridLevel;\n                        break;\n                    }\n                }\n                if (!isNullOrUndefined(gridCell.rowSpan) && gridCell.rowSpan !== 1) {\n                    cell.rowSpan = gridCell.rowSpan;\n                    for (var i = rowIndex; i < gridCell.rowSpan + rowIndex; i++) {\n                        var spannedCell = { rowIndex: 0, columnIndex: 0 };\n                        spannedCell.rowIndex = i;\n                        spannedCell.columnIndex = currentCellIndex;\n                        spannedCells.push(spannedCell);\n                    }\n                }\n                if (!isNullOrUndefined(gridCell.colSpan) && gridCell.colSpan !== 1) {\n                    cell.colSpan = gridCell.colSpan;\n                    currentCellIndex = currentCellIndex + cell.colSpan - 1;\n                }\n                cell.value = gridCell.column.headerText;\n                style = this.getHeaderThemeStyle(this.theme);\n                if (!isNullOrUndefined(gridCell.column.textAlign)) {\n                    style.hAlign = gridCell.column.textAlign.toLowerCase();\n                }\n                if (!isNullOrUndefined(gridCell.column.headerTextAlign)) {\n                    style.hAlign = gridCell.column.headerTextAlign.toLowerCase();\n                }\n                var excelHeaderCellArgs = { cell: cell, gridCell: gridCell, style: style };\n                gObj.trigger(events.excelHeaderQueryCellInfo, excelHeaderCellArgs);\n                cell.style = excelHeaderCellArgs.style;\n                cells.push(cell);\n                currentCellIndex++;\n            }\n            excelRows.push({ index: this.rowLength++, cells: cells });\n        }\n        for (var col = 0; col < gridColumns.length; col++) {\n            this.parseStyles(gObj, gridColumns[col], this.getRecordThemeStyle(this.theme), indent + col + 1);\n        }\n        return excelRows;\n    };\n    ExcelExport.prototype.getHeaderThemeStyle = function (theme) {\n        var style = {};\n        style.fontSize = 12;\n        style.borders = { color: '#E0E0E0' };\n        style.bold = true;\n        if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.header)) {\n            style = this.updateThemeStyle(theme.header, style);\n        }\n        return style;\n    };\n    ExcelExport.prototype.updateThemeStyle = function (themestyle, style) {\n        return extend(style, themestyle);\n    };\n    ExcelExport.prototype.getCaptionThemeStyle = function (theme) {\n        var style = {};\n        style.fontSize = 13;\n        style.backColor = '#F6F6F6';\n        if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.caption)) {\n            style = this.updateThemeStyle(theme.caption, style);\n        }\n        return style;\n    };\n    ExcelExport.prototype.getRecordThemeStyle = function (theme) {\n        var style = {};\n        style.fontSize = 13;\n        style.borders = { color: '#E0E0E0' };\n        if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.record)) {\n            style = this.updateThemeStyle(theme.record, style);\n        }\n        return style;\n    };\n    ExcelExport.prototype.processExcelHeader = function (header) {\n        if (!isNullOrUndefined(header.rows) && (this.expType === 'NewSheet' || this.rowLength === 1)) {\n            var noRows = void 0;\n            if (header.headerRows === undefined) {\n                this.rowLength = header.rows.length;\n            }\n            else {\n                this.rowLength = header.headerRows;\n            }\n            if (this.rowLength < header.rows.length) {\n                noRows = this.rowLength;\n            }\n            else {\n                noRows = header.rows.length;\n            }\n            this.rowLength++;\n            for (var row = 0; row < noRows; row++) {\n                var json = header.rows[row];\n                //Row index\n                if (!(json.index !== null && !isNullOrUndefined(json.index))) {\n                    json.index = (row + 1);\n                }\n                this.updatedCellIndex(json);\n            }\n        }\n    };\n    ExcelExport.prototype.updatedCellIndex = function (json) {\n        var cellsLength = json.cells.length;\n        for (var cellId = 0; cellId < cellsLength; cellId++) {\n            var jsonCell = json.cells[cellId];\n            //cell index\n            if (!(jsonCell.index !== null && !isNullOrUndefined(jsonCell.index))) {\n                jsonCell.index = (cellId + 1);\n            }\n        }\n        this.rows.push(json);\n    };\n    ExcelExport.prototype.processExcelFooter = function (footer) {\n        if (!isNullOrUndefined(footer.rows)) {\n            var noRows = void 0;\n            if (footer.footerRows === undefined) {\n                this.rowLength += footer.rows.length;\n            }\n            else {\n                if (footer.footerRows > footer.rows.length) {\n                    this.rowLength += (footer.footerRows - footer.rows.length);\n                    noRows = footer.rows.length;\n                }\n                else {\n                    noRows = footer.footerRows;\n                }\n            }\n            for (var row = 0; row < noRows; row++) {\n                var json = footer.rows[row];\n                //Row index\n                if (json.index === null || json.index === undefined) {\n                    json.index = this.rowLength++;\n                }\n                else {\n                    json.index += this.rowLength;\n                }\n                this.updatedCellIndex(json);\n            }\n        }\n    };\n    ExcelExport.prototype.getIndex = function (spannedCells, rowIndex, columnIndex) {\n        for (var _i = 0, spannedCells_1 = spannedCells; _i < spannedCells_1.length; _i++) {\n            var spannedCell = spannedCells_1[_i];\n            if ((spannedCell.rowIndex === rowIndex) && (spannedCell.columnIndex === columnIndex)) {\n                columnIndex = columnIndex + 1;\n                return { contains: true, index: columnIndex };\n            }\n        }\n        return { contains: false, index: columnIndex };\n    };\n    ExcelExport.prototype.parseStyles = function (gObj, col, style, index) {\n        if (!isNullOrUndefined(col.format)) {\n            if (typeof col.format === 'object') {\n                var format = col.format;\n                style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;\n                if (!isNullOrUndefined(format.type)) {\n                    style.type = format.type;\n                }\n            }\n            else {\n                style.numberFormat = col.format;\n                style.type = col.type;\n            }\n        }\n        if (!isNullOrUndefined(col.textAlign)) {\n            style.hAlign = col.textAlign.toLowerCase();\n        }\n        if (Object.keys(style).length > 0) {\n            style.name = gObj.element.id + 'column' + index;\n            this.styles.push(style);\n        }\n        if (!isNullOrUndefined(col.width)) {\n            this.columns.push({ index: index + gObj.childGridLevel, width: typeof col.width === 'number' ?\n                    col.width : this.helper.getConvertedWidth(col.width) });\n        }\n    };\n    /**\n     * To destroy the excel export\n     * @return {void}\n     * @hidden\n     */\n    ExcelExport.prototype.destroy = function () {\n        //destroy for exporting\n    };\n    return ExcelExport;\n}());\nexport { ExcelExport };\n","/**\n * `PdfBrush` class provides objects used to fill the interiors of graphical shapes such as rectangles,\n * ellipses, pies, polygons, and paths.\n * @private\n */\nvar PdfBrush = /** @class */ (function () {\n    /**\n     * Creates instanceof `PdfBrush` class.\n     * @hidden\n     * @private\n     */\n    function PdfBrush() {\n        //\n    }\n    return PdfBrush;\n}());\nexport { PdfBrush };\n","/**\n * public Enum for `CompositeFontType`.\n * @private\n */\nexport var ObjectStatus;\n(function (ObjectStatus) {\n    /**\n     * Specifies the type of `None`.\n     * @private\n     */\n    ObjectStatus[ObjectStatus[\"None\"] = 0] = \"None\";\n    /**\n     * Specifies the type of `Registered`.\n     * @private\n     */\n    ObjectStatus[ObjectStatus[\"Registered\"] = 1] = \"Registered\";\n})(ObjectStatus || (ObjectStatus = {}));\n","/**\n * public Enum for `ObjectType`.\n * @private\n */\nexport var ObjectType;\n(function (ObjectType) {\n    /**\n     * Specifies the type of `Free`.\n     * @private\n     */\n    ObjectType[ObjectType[\"Free\"] = 0] = \"Free\";\n    /**\n     * Specifies the type of `Normal`.\n     * @private\n     */\n    ObjectType[ObjectType[\"Normal\"] = 1] = \"Normal\";\n    /**\n     * Specifies the type of `Packed`.\n     * @private\n     */\n    ObjectType[ObjectType[\"Packed\"] = 2] = \"Packed\";\n})(ObjectType || (ObjectType = {}));\n","import { ObjectStatus } from './../input-output/enum';\nimport { PdfDictionary } from './../primitives/pdf-dictionary';\nimport { DictionaryProperties } from './pdf-dictionary-properties';\nimport { Operators } from './pdf-operators';\nimport { Dictionary } from './../collections/dictionary';\nimport { PdfReference } from './../primitives/pdf-reference';\nimport { ObjectType } from './cross-table';\nimport { PdfStream } from './../primitives/pdf-stream';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PdfCatalog } from './../document/pdf-catalog';\n/**\n * `PdfCrossTable` is responsible for intermediate level parsing\n * and savingof a PDF document.\n * @private\n */\nvar PdfCrossTable = /** @class */ (function () {\n    function PdfCrossTable() {\n        /**\n         * The modified `objects` that should be saved.\n         * @private\n         */\n        this.objects = new Dictionary();\n        /**\n         * Holds `maximal generation number` or offset to object.\n         * @default 0\n         * @private\n         */\n        this.maxGenNumIndex = 0;\n        /**\n         * The `number of the objects`.\n         * @default 0\n         * @private\n         */\n        this.objectCount = 0;\n        /**\n         * Internal variable for accessing fields from `DictionryProperties` class.\n         * @default new PdfDictionaryProperties()\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n    }\n    Object.defineProperty(PdfCrossTable.prototype, \"isMerging\", {\n        //Properties\n        /**\n         * Gets or sets if the document `is merged`.\n         * @private\n         */\n        get: function () {\n            return this.merging;\n        },\n        set: function (value) {\n            this.merging = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfCrossTable.prototype, \"trailer\", {\n        /**\n         * Gets the `trailer`.\n         * @private\n         */\n        get: function () {\n            if (this.internalTrailer == null) {\n                this.internalTrailer = new PdfStream();\n            }\n            return this.internalTrailer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfCrossTable.prototype, \"document\", {\n        /**\n         * Gets or sets the main `PdfDocument` class instance.\n         * @private\n         */\n        get: function () {\n            return this.pdfDocument;\n        },\n        set: function (value) {\n            this.pdfDocument = value;\n            this.items = this.pdfDocument.pdfObjects;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfCrossTable.prototype, \"pdfObjects\", {\n        /**\n         * Gets the catched `PDF object` main collection.\n         * @private\n         */\n        get: function () {\n            return this.items;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfCrossTable.prototype, \"objectCollection\", {\n        /**\n         * Gets the `object collection`.\n         * @private\n         */\n        get: function () {\n            return this.pdfDocument.pdfObjects;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfCrossTable.prototype, \"count\", {\n        /**\n         * Gets or sets the `number of the objects` within the document.\n         * @private\n         */\n        get: function () {\n            return this.objectCount;\n        },\n        set: function (value) {\n            this.objectCount = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfCrossTable.prototype, \"nextObjNumber\", {\n        /**\n         * Returns `next available object number`.\n         * @private\n         */\n        get: function () {\n            this.count = this.count + 1;\n            return this.count;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfCrossTable.prototype.save = function (writer, filename) {\n        this.saveHead(writer);\n        var state = false;\n        this.mappedReferences = null;\n        this.objects.clear();\n        this.markTrailerReferences();\n        this.saveObjects(writer);\n        var saveCount = this.count;\n        var xrefPos = writer.position;\n        this.registerObject(0, new PdfReference(0, -1), true);\n        var prevXRef = 0;\n        writer.write(Operators.xref);\n        writer.write(Operators.newLine);\n        this.saveSections(writer);\n        this.saveTrailer(writer, this.count, prevXRef);\n        this.saveTheEndess(writer, xrefPos);\n        this.count = saveCount;\n        for (var i = 0; i < this.objectCollection.count; ++i) {\n            var oi = this.objectCollection.items(i);\n            oi.object.isSaving = false;\n        }\n        if (typeof filename === 'undefined') {\n            return writer.stream.buffer;\n        }\n        else {\n            writer.stream.save(filename);\n        }\n    };\n    /**\n     * `Saves the endess` of the file.\n     * @private\n     */\n    PdfCrossTable.prototype.saveTheEndess = function (writer, xrefPos) {\n        writer.write(Operators.newLine + Operators.startxref + Operators.newLine);\n        writer.write(xrefPos.toString() + Operators.newLine);\n        writer.write(Operators.eof + Operators.newLine);\n    };\n    /**\n     * `Saves the new trailer` dictionary.\n     * @private\n     */\n    PdfCrossTable.prototype.saveTrailer = function (writer, count, prevXRef) {\n        writer.write(Operators.trailer + Operators.newLine);\n        // Save the dictionary.\n        var trailer = this.trailer;\n        trailer.items.setValue(this.dictionaryProperties.size, new PdfNumber(this.objectCount + 1));\n        trailer = new PdfDictionary(trailer); // Make it real dictionary.\n        trailer.setEncrypt(false);\n        trailer.save(writer);\n    };\n    /**\n     * `Saves the xref section`.\n     * @private\n     */\n    PdfCrossTable.prototype.saveSections = function (writer) {\n        var objectNum = 0;\n        var count = 0;\n        do {\n            count = this.prepareSubsection(objectNum);\n            this.saveSubsection(writer, objectNum, count);\n            objectNum += count;\n        } while (count !== 0);\n    };\n    /**\n     * `Saves a subsection`.\n     * @private\n     */\n    PdfCrossTable.prototype.saveSubsection = function (writer, objectNum, count) {\n        if (count <= 0 || objectNum >= this.count) {\n            return;\n        }\n        var subsectionHead = '{0} {1}{2}';\n        writer.write(objectNum + ' ' + (count + 1) + Operators.newLine);\n        for (var i = objectNum; i <= objectNum + count; ++i) {\n            var obj = this.objects.getValue(i);\n            var str = '';\n            if (obj.type === ObjectType.Free) {\n                str = this.getItem(obj.offset, 65535, true);\n            }\n            else {\n                str = this.getItem(obj.offset, obj.generation, false);\n            }\n            writer.write(str);\n        }\n    };\n    /**\n     * Generates string for `xref table item`.\n     * @private\n     */\n    PdfCrossTable.prototype.getItem = function (offset, genNumber, isFree) {\n        var returnString = '';\n        var addOffsetLength = 10 - offset.toString().length;\n        if (genNumber <= 0) {\n            genNumber = 0;\n        }\n        var addGenNumberLength = (5 - genNumber.toString().length) <= 0 ? 0 : (5 - genNumber.toString().length);\n        for (var index = 0; index < addOffsetLength; index++) {\n            returnString = returnString + '0';\n        }\n        returnString = returnString + offset.toString() + ' ';\n        for (var index = 0; index < addGenNumberLength; index++) {\n            returnString = returnString + '0';\n        }\n        returnString = returnString + genNumber.toString() + ' ';\n        returnString = returnString + ((isFree) ? Operators.f : Operators.n) + Operators.newLine;\n        return returnString;\n    };\n    /**\n     * `Prepares a subsection` of the current section within the cross-reference table.\n     * @private\n     */\n    PdfCrossTable.prototype.prepareSubsection = function (objectNum) {\n        var count = 0;\n        var i;\n        var total = this.count;\n        for (var k = 0; k < this.document.pdfObjects.count; k++) {\n            var reference = this.document.pdfObjects.items(k).reference;\n            var refString = reference.toString();\n            var refArray = refString.split(' ');\n        }\n        if (objectNum >= total) {\n            return count;\n        }\n        // search for first changed indirect object.\n        for (i = objectNum; i < total; ++i) {\n            break;\n        }\n        objectNum = i;\n        // look up for all indirect objects in one subsection.\n        for (; i < total; ++i) {\n            ++count;\n        }\n        return count;\n    };\n    /**\n     * `Marks the trailer references` being saved.\n     * @private\n     */\n    PdfCrossTable.prototype.markTrailerReferences = function () {\n        var tempArray;\n        var keys = this.trailer.items.keys();\n        var values = this.trailer.items.values();\n    };\n    /**\n     * `Saves the head`.\n     * @private\n     */\n    PdfCrossTable.prototype.saveHead = function (writer) {\n        var version = this.generateFileVersion(writer.document);\n        writer.write('%PDF-' + version);\n        writer.write(Operators.newLine);\n    };\n    /**\n     * Generates the `version` of the file.\n     * @private\n     */\n    PdfCrossTable.prototype.generateFileVersion = function (document) {\n        var iVersion = 4;\n        var version = '1.' + iVersion.toString();\n        return version;\n    };\n    PdfCrossTable.prototype.getReference = function (obj, bNew) {\n        if (typeof bNew === 'undefined') {\n            var wasNew = false;\n            return this.getReference(obj, wasNew);\n        }\n        else {\n            //code splitted for reducing lines of code exceeds 100.\n            return this.getSubReference(obj, bNew);\n        }\n    };\n    /**\n     * Retrieves the `reference` of the object given.\n     * @private\n     */\n    PdfCrossTable.prototype.getSubReference = function (obj, bNew) {\n        var isNew = false;\n        var wasNew;\n        var reference = null;\n        // if (obj.IsSaving) {\n        if (this.items.count > 0 && obj.objectCollectionIndex > 0 && this.items.count > obj.objectCollectionIndex - 1) {\n            var tempObj = this.document.pdfObjects.getReference(obj, wasNew);\n            reference = tempObj.reference;\n            wasNew = tempObj.wasNew;\n        }\n        if (reference == null) {\n            if (obj.status === ObjectStatus.Registered) {\n                wasNew = false;\n            }\n            else {\n                wasNew = true;\n            }\n        }\n        else {\n            wasNew = false;\n        }\n        // need to add mapped reference code\n        if (reference == null) {\n            var objnumber = this.nextObjNumber;\n            reference = new PdfReference(objnumber, 0);\n            var found = void 0;\n            if (wasNew) {\n                this.document.pdfObjects.add(obj);\n                this.document.pdfObjects.trySetReference(obj, reference, found);\n                var tempIndex = this.document.pdfObjects.count - 1;\n                var tempkey = this.document.pdfObjects.objectCollections[tempIndex].reference.objNumber;\n                var tempvalue = this.document.pdfObjects.objectCollections[this.document.pdfObjects.count - 1];\n                this.document.pdfObjects.mainObjectCollection.setValue(tempkey, tempvalue);\n                obj.position = -1;\n            }\n            else {\n                this.document.pdfObjects.trySetReference(obj, reference, found);\n            }\n            obj.objectCollectionIndex = reference.objNumber;\n            obj.status = ObjectStatus.None;\n            isNew = true;\n        }\n        bNew = isNew || this.bForceNew;\n        return reference;\n    };\n    /**\n     * `Saves all objects` in the collection.\n     * @private\n     */\n    PdfCrossTable.prototype.saveObjects = function (writer) {\n        var objectCollection = this.objectCollection;\n        for (var i = 0; i < objectCollection.count; ++i) {\n            var oi = objectCollection.items(i);\n            var obj = oi.object;\n            obj.isSaving = true;\n            this.saveIndirectObject(obj, writer);\n        }\n    };\n    /**\n     * `Saves indirect object`.\n     * @private\n     */\n    PdfCrossTable.prototype.saveIndirectObject = function (obj, writer) {\n        var reference = this.getReference(obj);\n        if (obj instanceof PdfCatalog) {\n            this.trailer.items.setValue(this.dictionaryProperties.root, reference);\n        }\n        // NOTE :  This is needed for correct string objects encryption.\n        this.pdfDocument.currentSavingObj = reference;\n        var tempArchive = false;\n        tempArchive = obj.getArchive();\n        var allowedType = !((obj instanceof PdfStream) || !tempArchive || (obj instanceof PdfCatalog));\n        var sigFlag = false;\n        this.registerObject(writer.position, reference);\n        this.doSaveObject(obj, reference, writer);\n    };\n    /**\n     * Performs `real saving` of the save object.\n     * @private\n     */\n    PdfCrossTable.prototype.doSaveObject = function (obj, reference, writer) {\n        var correctPosition = writer.length;\n        writer.write(reference.objNumber.toString());\n        writer.write(Operators.whiteSpace);\n        writer.write(reference.genNumber.toString());\n        writer.write(Operators.whiteSpace);\n        writer.write(Operators.obj);\n        writer.write(Operators.newLine);\n        obj.save(writer);\n        var stream = writer.stream;\n        writer.write(Operators.endObj);\n        writer.write(Operators.newLine);\n    };\n    PdfCrossTable.prototype.registerObject = function (offset, reference, free) {\n        if (typeof free === 'boolean') {\n            // Register the object by its number.\n            this.objects.setValue(reference.objNumber, new RegisteredObject(offset, reference, free));\n            this.maxGenNumIndex = Math.max(this.maxGenNumIndex, reference.genNumber);\n        }\n        else if (typeof free === 'undefined') {\n            // Register the object by its number.\n            this.objects.setValue(reference.objNumber, new RegisteredObject(offset, reference));\n            this.maxGenNumIndex = Math.max(this.maxGenNumIndex, reference.genNumber);\n        }\n    };\n    /**\n     * `Dereferences` the specified primitive object.\n     * @private\n     */\n    PdfCrossTable.dereference = function (obj) {\n        var rh = obj;\n        if (rh != null) {\n            obj = rh.object;\n        }\n        return obj;\n    };\n    return PdfCrossTable;\n}());\nexport { PdfCrossTable };\nvar RegisteredObject = /** @class */ (function () {\n    function RegisteredObject(offset, reference, free) {\n        if (typeof free === 'undefined') {\n            var tempOffset = offset;\n            this.offsetNumber = tempOffset;\n            var tempReference = reference;\n            this.generation = tempReference.genNumber;\n            this.object = tempReference.objNumber;\n            this.type = ObjectType.Normal;\n        }\n        else {\n            var tempOffset = offset;\n            var tempReference = reference;\n            this.constructor(tempOffset, tempReference);\n            var tempFree = free;\n            this.type = ObjectType.Free;\n        }\n    }\n    Object.defineProperty(RegisteredObject.prototype, \"objectNumber\", {\n        //Properties\n        /**\n         * Gets the `object number`.\n         * @private\n         */\n        get: function () {\n            return this.object;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RegisteredObject.prototype, \"offset\", {\n        /**\n         * Gets the `offset`.\n         * @private\n         */\n        get: function () {\n            var result;\n            result = this.offsetNumber;\n            return result;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return RegisteredObject;\n}());\nexport { RegisteredObject };\n","import { Dictionary } from './../collections/dictionary';\nimport { PdfName } from './pdf-name';\nimport { Operators } from './../input-output/pdf-operators';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\n/**\n * `PdfDictionary` class is used to perform primitive operations.\n * @private\n */\nvar PdfDictionary = /** @class */ (function () {\n    function PdfDictionary(dictionary) {\n        /**\n         * Internal variable to store the `position`.\n         * @default -1\n         * @private\n         */\n        this.position7 = -1;\n        /**\n         * The `IPdfSavable` with the specified key.\n         * @private\n         */\n        this.primitiveItems = new Dictionary();\n        /**\n         * `Start marker` for dictionary.\n         * @private\n         */\n        this.prefix = '<<';\n        /**\n         * `End marker` for dictionary.\n         * @private\n         */\n        this.suffix = '>>';\n        /**\n         * @hidden\n         * @private\n         */\n        this.resources = [];\n        /**\n         * Internal variable to hold `cloned object`.\n         * @default null\n         * @private\n         */\n        this.object = null;\n        /**\n         * Flag for PDF file formar 1.5 is dictionary `archiving` needed.\n         * @default true\n         * @private\n         */\n        this.archive = true;\n        /**\n         * Represents the Font dictionary.\n         * @hidden\n         * @private\n         */\n        this.isFont = false;\n        if (typeof dictionary === 'undefined') {\n            this.primitiveItems = new Dictionary();\n            this.encrypt = true;\n            this.dictionaryProperties = new DictionaryProperties();\n        }\n        else {\n            this.primitiveItems = new Dictionary();\n            var keys = dictionary.items.keys();\n            var values = dictionary.items.values();\n            for (var index = 0; index < dictionary.items.size(); index++) {\n                this.primitiveItems.setValue(keys[index], values[index]);\n            }\n            this.status = dictionary.status;\n            this.freezeChanges(this);\n            this.encrypt = true;\n            this.dictionaryProperties = new DictionaryProperties();\n        }\n    }\n    Object.defineProperty(PdfDictionary.prototype, \"items\", {\n        //Properties\n        /**\n         * Gets or sets the `IPdfSavable` with the specified key.\n         * @private\n         */\n        get: function () {\n            return this.primitiveItems;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDictionary.prototype, \"status\", {\n        /**\n         * Gets or sets the `Status` of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.status7;\n        },\n        set: function (value) {\n            this.status7 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDictionary.prototype, \"isSaving\", {\n        /**\n         * Gets or sets a value indicating whether this document `is saving` or not.\n         * @private\n         */\n        get: function () {\n            return this.isSaving7;\n        },\n        set: function (value) {\n            this.isSaving7 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDictionary.prototype, \"objectCollectionIndex\", {\n        /**\n         * Gets or sets the `index` value of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.index7;\n        },\n        set: function (value) {\n            this.index7 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDictionary.prototype, \"clonedObject\", {\n        /**\n         * Returns `cloned object`.\n         * @private\n         */\n        get: function () {\n            return this.object;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDictionary.prototype, \"position\", {\n        /**\n         * Gets or sets the `position` of the object.\n         * @private\n         */\n        get: function () {\n            return this.position7;\n        },\n        set: function (value) {\n            this.position7 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDictionary.prototype, \"Count\", {\n        /**\n         * Gets the `count`.\n         * @private\n         */\n        get: function () {\n            return this.primitiveItems.size();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfDictionary.prototype, \"Dictionary\", {\n        /**\n         * Collection of `items` in the object.\n         * @private\n         */\n        get: function () {\n            return this;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Get flag if need to `archive` dictionary.\n     * @private\n     */\n    PdfDictionary.prototype.getArchive = function () {\n        return this.archive;\n    };\n    /**\n     * Set flag if need to `archive` dictionary.\n     * @private\n     */\n    PdfDictionary.prototype.setArchive = function (value) {\n        this.archive = value;\n    };\n    /**\n     * Sets flag if `encryption` is needed.\n     * @private\n     */\n    PdfDictionary.prototype.setEncrypt = function (value) {\n        this.encrypt = value;\n        this.modify();\n    };\n    /**\n     * Gets flag if `encryption` is needed.\n     * @private\n     */\n    PdfDictionary.prototype.getEncrypt = function () {\n        return this.encrypt;\n    };\n    /**\n     * `Freezes` the changes.\n     * @private\n     */\n    PdfDictionary.prototype.freezeChanges = function (freezer) {\n        this.bChanged = false;\n    };\n    /**\n     * Creates a `copy of PdfDictionary`.\n     * @private\n     */\n    PdfDictionary.prototype.clone = function (crossTable) {\n        //Need to add more codings\n        var newDict = new PdfDictionary();\n        return newDict;\n    };\n    /**\n     * `Mark` this instance modified.\n     * @private\n     */\n    PdfDictionary.prototype.modify = function () {\n        this.bChanged = true;\n    };\n    /**\n     * `Removes` the specified key.\n     * @private\n     */\n    PdfDictionary.prototype.remove = function (key) {\n        if (typeof key !== 'string') {\n            this.primitiveItems.remove(key.value);\n            this.modify();\n        }\n        else {\n            this.remove(new PdfName(key));\n        }\n    };\n    /**\n     * `Determines` whether the dictionary contains the key.\n     * @private\n     */\n    PdfDictionary.prototype.containsKey = function (key) {\n        var returnValue = false;\n        returnValue = this.primitiveItems.containsKey(key.toString());\n        return returnValue;\n    };\n    /**\n     * Raises event `BeginSave`.\n     * @private\n     */\n    PdfDictionary.prototype.onBeginSave = function () {\n        this.beginSave.sender.beginSave();\n    };\n    /**\n     * Raises event `Font Dictionary BeginSave`.\n     * @private\n     */\n    PdfDictionary.prototype.onFontDictionaryBeginSave = function () {\n        this.fontDictionaryBeginSave.sender.fontDictionaryBeginSave();\n    };\n    /**\n     * Raises event `Descendant Font BeginSave`.\n     * @private\n     */\n    PdfDictionary.prototype.onDescendantFontBeginSave = function () {\n        this.descendantFontBeginSave.sender.descendantFontBeginSave();\n    };\n    /**\n     * Raises event 'BeginSave'.\n     * @private\n     */\n    PdfDictionary.prototype.onTemplateBeginSave = function () {\n        this.pageBeginDrawTemplate.sender.pageBeginSave();\n    };\n    /**\n     * Raises event `BeginSave`.\n     * @private\n     */\n    PdfDictionary.prototype.onBeginAnnotationSave = function () {\n        this.annotationBeginSave.sender.beginSave();\n    };\n    /**\n     * Raises event `BeginSave`.\n     * @private\n     */\n    PdfDictionary.prototype.onSectionBeginSave = function (writer) {\n        var saveEvent = this.sectionBeginSave;\n        saveEvent.sender.beginSave(saveEvent.state, writer);\n    };\n    PdfDictionary.prototype.save = function (writer, bRaiseEvent) {\n        if (typeof bRaiseEvent === 'undefined') {\n            this.save(writer, true);\n        }\n        else {\n            writer.write(this.prefix);\n            if (typeof this.beginSave !== 'undefined') {\n                this.onBeginSave();\n            }\n            if (typeof this.descendantFontBeginSave !== 'undefined') {\n                this.onDescendantFontBeginSave();\n            }\n            if (typeof this.fontDictionaryBeginSave !== 'undefined') {\n                this.onFontDictionaryBeginSave();\n            }\n            if (typeof this.annotationBeginSave !== 'undefined') {\n                this.onBeginAnnotationSave();\n            }\n            if (typeof this.sectionBeginSave !== 'undefined') {\n                this.onSectionBeginSave(writer);\n            }\n            if (typeof this.pageBeginDrawTemplate !== 'undefined') {\n                this.onTemplateBeginSave();\n            }\n            // }\n            if (this.Count > 0) {\n                this.saveItems(writer);\n            }\n            writer.write(this.suffix);\n            writer.write(Operators.newLine);\n        }\n    };\n    /**\n     * `Save dictionary items`.\n     * @private\n     */\n    PdfDictionary.prototype.saveItems = function (writer) {\n        writer.write(Operators.newLine);\n        var keys = this.primitiveItems.keys();\n        var values = this.primitiveItems.values();\n        for (var index = 0; index < keys.length; index++) {\n            var key = keys[index];\n            var name_1 = new PdfName(key);\n            name_1.save(writer);\n            writer.write(Operators.whiteSpace);\n            var resources = values[index];\n            resources.save(writer);\n            writer.write(Operators.newLine);\n        }\n    };\n    return PdfDictionary;\n}());\nexport { PdfDictionary };\nvar SaveSectionCollectionEventHandler = /** @class */ (function () {\n    /**\n     * New instance for `save section collection event handler` class.\n     * @private\n     */\n    function SaveSectionCollectionEventHandler(sender) {\n        this.sender = sender;\n    }\n    return SaveSectionCollectionEventHandler;\n}());\nexport { SaveSectionCollectionEventHandler };\nvar SaveDescendantFontEventHandler = /** @class */ (function () {\n    /**\n     * New instance for `save section collection event handler` class.\n     * @private\n     */\n    function SaveDescendantFontEventHandler(sender) {\n        this.sender = sender;\n    }\n    return SaveDescendantFontEventHandler;\n}());\nexport { SaveDescendantFontEventHandler };\nvar SaveFontDictionaryEventHandler = /** @class */ (function () {\n    /**\n     * New instance for `save section collection event handler` class.\n     * @private\n     */\n    function SaveFontDictionaryEventHandler(sender) {\n        this.sender = sender;\n    }\n    return SaveFontDictionaryEventHandler;\n}());\nexport { SaveFontDictionaryEventHandler };\nvar SaveAnnotationEventHandler = /** @class */ (function () {\n    /**\n     * New instance for `save annotation event handler` class.\n     * @private\n     */\n    function SaveAnnotationEventHandler(sender) {\n        this.sender = sender;\n    }\n    return SaveAnnotationEventHandler;\n}());\nexport { SaveAnnotationEventHandler };\nvar SaveSectionEventHandler = /** @class */ (function () {\n    // constructors\n    /**\n     * New instance for `save section event handler` class.\n     * @private\n     */\n    function SaveSectionEventHandler(sender, state) {\n        this.sender = sender;\n        this.state = state;\n    }\n    return SaveSectionEventHandler;\n}());\nexport { SaveSectionEventHandler };\n/**\n * SaveTemplateEventHandler class used to store information about template elements.\n * @private\n * @hidden\n */\nvar SaveTemplateEventHandler = /** @class */ (function () {\n    /**\n     * New instance for save section collection event handler class.\n     * @public\n     */\n    function SaveTemplateEventHandler(sender) {\n        this.sender = sender;\n    }\n    return SaveTemplateEventHandler;\n}());\nexport { SaveTemplateEventHandler };\n","/**\n * PdfPageTemplateElement.ts class for EJ2-Pdf\n */\nimport { PdfDockStyle, PdfAlignmentStyle, TemplateType } from './enum';\nimport { PointF, SizeF } from './../drawing/pdf-drawing';\nimport { PdfTemplate } from './../graphics/figures/pdf-template';\nimport { PdfPage } from './pdf-page';\nimport { RectangleF } from './../drawing/pdf-drawing';\n/**\n * Describes a `page template` object that can be used as header/footer, watermark or stamp.\n */\nvar PdfPageTemplateElement = /** @class */ (function () {\n    /* tslint:disable */\n    function PdfPageTemplateElement(arg1, arg2, arg3, arg4, arg5) {\n        if (arg1 instanceof RectangleF && typeof arg2 === 'undefined') {\n            this.constructor(arg1.x, arg1.y, arg1.width, arg1.height);\n        }\n        else if (arg1 instanceof RectangleF && arg2 instanceof PdfPage && typeof arg3 === 'undefined') {\n            this.constructor(arg1.x, arg1.y, arg1.width, arg1.height, arg2);\n        }\n        else if (arg1 instanceof PointF && arg2 instanceof SizeF && typeof arg3 === 'undefined') {\n            this.constructor(arg1.x, arg1.y, arg2.width, arg2.height);\n        }\n        else if (arg1 instanceof PointF && arg2 instanceof SizeF && arg3 instanceof PdfPage && typeof arg4 === 'undefined') {\n            this.constructor(arg1.x, arg1.y, arg2.width, arg2.height, arg3);\n        }\n        else if (arg1 instanceof SizeF && typeof arg2 === 'undefined') {\n            this.constructor(arg1.width, arg1.height);\n        }\n        else if (typeof arg1 === 'number' && typeof arg2 === 'number' && typeof arg3 === 'undefined') {\n            this.constructor(0, 0, arg1, arg2);\n        }\n        else if (typeof arg1 === 'number' && typeof arg2 === 'number' && arg3 instanceof PdfPage && typeof arg4 === 'undefined') {\n            this.constructor(0, 0, arg1, arg2, arg3);\n        }\n        else if (typeof arg1 === 'number' && typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'number' && typeof arg5 === 'undefined') {\n            this.x = arg1;\n            this.y = arg2;\n            this.pdfTemplate = new PdfTemplate(arg3, arg4);\n        }\n        else {\n            this.x = arg1;\n            this.y = arg2;\n            this.pdfTemplate = new PdfTemplate(arg3, arg4);\n            // this.graphics.colorSpace = this.page.document.colorSpace;\n        }\n        /* tslint:enable */\n    }\n    Object.defineProperty(PdfPageTemplateElement.prototype, \"dock\", {\n        // Properties\n        /**\n         * Gets or sets the `dock style` of the page template element.\n         * @private\n         */\n        get: function () {\n            return this.dockStyle;\n        },\n        set: function (value) {\n            // if (this.dockStyle !== value && this.Type === TemplateType.None) {\n            this.dockStyle = value;\n            // Reset alignment.\n            this.resetAlignment();\n            // }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageTemplateElement.prototype, \"alignment\", {\n        /**\n         * Gets or sets `alignment` of the page template element.\n         * @private\n         */\n        get: function () {\n            return this.alignmentStyle;\n        },\n        set: function (value) {\n            // if (this.alignmentStyle !== value) {\n            this.setAlignment(value);\n            // }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageTemplateElement.prototype, \"foreground\", {\n        /**\n         * Indicates whether the page template is located `in front of the page layers or behind of it`.\n         * @private\n         */\n        get: function () {\n            return this.isForeground;\n        },\n        set: function (value) {\n            // if (this.foreground !== value) {\n            this.isForeground = value;\n            // }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageTemplateElement.prototype, \"background\", {\n        /**\n         * Indicates whether the page template is located `behind of the page layers or in front of it`.\n         * @private\n         */\n        get: function () {\n            return !this.isForeground;\n        },\n        set: function (value) {\n            this.isForeground = !value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageTemplateElement.prototype, \"location\", {\n        /**\n         * Gets or sets `location` of the page template element.\n         * @private\n         */\n        get: function () {\n            return this.currentLocation;\n        },\n        set: function (value) {\n            if (this.type === TemplateType.None) {\n                this.currentLocation = value;\n            }\n            else {\n                //\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageTemplateElement.prototype, \"x\", {\n        /**\n         * Gets or sets `X` co-ordinate of the template element on the page.\n         * @private\n         */\n        get: function () {\n            var value = (typeof this.currentLocation !== 'undefined') ? this.currentLocation.x : 0;\n            return value;\n        },\n        set: function (value) {\n            if (this.type === TemplateType.None) {\n                this.currentLocation.x = value;\n            }\n            else {\n                //\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageTemplateElement.prototype, \"y\", {\n        /**\n         * Gets or sets `Y` co-ordinate of the template element on the page.\n         * @private\n         */\n        get: function () {\n            var value = (typeof this.currentLocation !== 'undefined') ? this.currentLocation.y : 0;\n            return value;\n        },\n        set: function (value) {\n            if (this.type === TemplateType.None) {\n                this.currentLocation.y = value;\n            }\n            else {\n                //\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageTemplateElement.prototype, \"size\", {\n        /**\n         * Gets or sets `size` of the page template element.\n         * @private\n         */\n        get: function () {\n            return this.template.size;\n        },\n        set: function (value) {\n            if (this.type === TemplateType.None) {\n                this.template.reset(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageTemplateElement.prototype, \"width\", {\n        /**\n         * Gets or sets `width` of the page template element.\n         * @private\n         */\n        get: function () {\n            return this.template.width;\n        },\n        set: function (value) {\n            if (this.template.width !== value && this.type === TemplateType.None) {\n                var size = this.template.size;\n                size.width = value;\n                this.template.reset(size);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageTemplateElement.prototype, \"height\", {\n        /**\n         * Gets or sets `height` of the page template element.\n         * @private\n         */\n        get: function () {\n            return this.template.height;\n        },\n        set: function (value) {\n            if (this.template.height !== value && this.type === TemplateType.None) {\n                var size = this.template.size;\n                size.height = value;\n                this.template.reset(size);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageTemplateElement.prototype, \"graphics\", {\n        /**\n         * Gets `graphics` context of the page template element.\n         * @private\n         */\n        get: function () {\n            return this.template.graphics;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageTemplateElement.prototype, \"template\", {\n        /**\n         * Gets Pdf `template` object.\n         * @private\n         */\n        get: function () {\n            // if (typeof this.pdfTemplate === 'undefined' || this.pdfTemplate == null) {\n            //     this.pdfTemplate = new PdfTemplate(this.size);\n            // }\n            return this.pdfTemplate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageTemplateElement.prototype, \"type\", {\n        /**\n         * Gets or sets `type` of the usage of this page template.\n         * @private\n         */\n        get: function () {\n            return this.templateType;\n        },\n        set: function (value) {\n            this.updateDocking(value);\n            this.templateType = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageTemplateElement.prototype, \"bounds\", {\n        /**\n         * Gets or sets `bounds` of the page template.\n         * @public\n         */\n        get: function () {\n            return new RectangleF(new PointF(this.x, this.y), this.size);\n        },\n        set: function (value) {\n            if (this.type === TemplateType.None) {\n                this.location = new PointF(value.x, value.y);\n                this.size = new SizeF(value.width, value.height);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * `Updates Dock` property if template is used as header/footer.\n     * @private\n     */\n    PdfPageTemplateElement.prototype.updateDocking = function (type) {\n        if (type !== TemplateType.None) {\n            switch (type) {\n                case TemplateType.Top:\n                    this.dock = PdfDockStyle.Top;\n                    break;\n                case TemplateType.Bottom:\n                    this.dock = PdfDockStyle.Bottom;\n                    break;\n                case TemplateType.Left:\n                    this.dock = PdfDockStyle.Left;\n                    break;\n                case TemplateType.Right:\n                    this.dock = PdfDockStyle.Right;\n                    break;\n            }\n            this.resetAlignment();\n        }\n    };\n    /**\n     * `Resets alignment` of the template.\n     * @private\n     */\n    PdfPageTemplateElement.prototype.resetAlignment = function () {\n        this.alignment = PdfAlignmentStyle.None;\n    };\n    /**\n     * `Sets alignment` of the template.\n     * @private\n     */\n    PdfPageTemplateElement.prototype.setAlignment = function (alignment) {\n        if (this.dock === PdfDockStyle.None) {\n            this.alignmentStyle = alignment;\n        }\n        else {\n            // Template is docked and alignment has been changed.\n            var canBeSet = false;\n            switch (this.dock) {\n                case PdfDockStyle.Left:\n                    canBeSet = (alignment === PdfAlignmentStyle.TopLeft || alignment === PdfAlignmentStyle.MiddleLeft ||\n                        alignment === PdfAlignmentStyle.BottomLeft || alignment === PdfAlignmentStyle.None);\n                    break;\n                case PdfDockStyle.Top:\n                    canBeSet = (alignment === PdfAlignmentStyle.TopLeft || alignment === PdfAlignmentStyle.TopCenter ||\n                        alignment === PdfAlignmentStyle.TopRight || alignment === PdfAlignmentStyle.None);\n                    break;\n                case PdfDockStyle.Right:\n                    canBeSet = (alignment === PdfAlignmentStyle.TopRight || alignment === PdfAlignmentStyle.MiddleRight ||\n                        alignment === PdfAlignmentStyle.BottomRight || alignment === PdfAlignmentStyle.None);\n                    break;\n                case PdfDockStyle.Bottom:\n                    canBeSet = (alignment === PdfAlignmentStyle.BottomLeft || alignment === PdfAlignmentStyle.BottomCenter\n                        || alignment === PdfAlignmentStyle.BottomRight || alignment === PdfAlignmentStyle.None);\n                    break;\n                case PdfDockStyle.Fill:\n                    canBeSet = (alignment === PdfAlignmentStyle.MiddleCenter || alignment === PdfAlignmentStyle.None);\n                    break;\n            }\n            if (canBeSet) {\n                this.alignmentStyle = alignment;\n            }\n        }\n    };\n    /**\n     * Draws the template.\n     * @private\n     */\n    PdfPageTemplateElement.prototype.draw = function (layer, document) {\n        var page = layer.page;\n        var bounds = this.calculateBounds(page, document);\n        if (bounds.x === -0) {\n            bounds.x = 0;\n        }\n        layer.graphics.drawPdfTemplate(this.template, new PointF(bounds.x, bounds.y), new SizeF(bounds.width, bounds.height));\n    };\n    /**\n     * Calculates bounds of the page template.\n     * @private\n     */\n    PdfPageTemplateElement.prototype.calculateBounds = function (page, document) {\n        var result = this.bounds;\n        if (this.alignmentStyle !== PdfAlignmentStyle.None) {\n            result = this.getAlignmentBounds(page, document);\n        }\n        else if (this.dockStyle !== PdfDockStyle.None) {\n            result = this.getDockBounds(page, document);\n        }\n        return result;\n    };\n    /**\n     * Calculates bounds according to the alignment.\n     * @private\n     */\n    PdfPageTemplateElement.prototype.getAlignmentBounds = function (page, document) {\n        var result = this.bounds;\n        if (this.type === TemplateType.None) {\n            result = this.getSimpleAlignmentBounds(page, document);\n        }\n        else {\n            result = this.getTemplateAlignmentBounds(page, document);\n        }\n        return result;\n    };\n    /**\n     * Calculates bounds according to the alignment.\n     * @private\n     */\n    PdfPageTemplateElement.prototype.getSimpleAlignmentBounds = function (page, document) {\n        var bounds = this.bounds;\n        var pdfSection = page.section;\n        var actualBounds = pdfSection.getActualBounds(document, page, false);\n        var x = this.x;\n        var y = this.y;\n        switch (this.alignmentStyle) {\n            case PdfAlignmentStyle.TopLeft:\n                x = 0;\n                y = 0;\n                break;\n            case PdfAlignmentStyle.TopCenter:\n                x = (actualBounds.width - this.width) / 2;\n                y = 0;\n                break;\n            case PdfAlignmentStyle.TopRight:\n                x = actualBounds.width - this.width;\n                y = 0;\n                break;\n            case PdfAlignmentStyle.MiddleLeft:\n                x = 0;\n                y = (actualBounds.height - this.height) / 2;\n                break;\n            case PdfAlignmentStyle.MiddleCenter:\n                x = (actualBounds.width - this.width) / 2;\n                y = (actualBounds.height - this.height) / 2;\n                break;\n            case PdfAlignmentStyle.MiddleRight:\n                x = actualBounds.width - this.width;\n                y = (actualBounds.height - this.height) / 2;\n                break;\n            case PdfAlignmentStyle.BottomLeft:\n                x = 0;\n                y = actualBounds.height - this.height;\n                break;\n            case PdfAlignmentStyle.BottomCenter:\n                x = (actualBounds.width - this.width) / 2;\n                y = actualBounds.height - this.height;\n                break;\n            case PdfAlignmentStyle.BottomRight:\n                x = actualBounds.width - this.width;\n                y = actualBounds.height - this.height;\n                break;\n        }\n        bounds.x = x;\n        bounds.y = y;\n        return bounds;\n    };\n    /**\n     * Calculates bounds according to the alignment.\n     * @private\n     */\n    PdfPageTemplateElement.prototype.getTemplateAlignmentBounds = function (page, document) {\n        var result = this.bounds;\n        var section = page.section;\n        var actualBounds = section.getActualBounds(document, page, false);\n        var x = this.x;\n        var y = this.y;\n        switch (this.alignmentStyle) {\n            case PdfAlignmentStyle.TopLeft:\n                if (this.type === TemplateType.Left) {\n                    x = -actualBounds.x;\n                    y = 0;\n                }\n                else if (this.type === TemplateType.Top) {\n                    x = -actualBounds.x;\n                    y = -actualBounds.y;\n                }\n                break;\n            case PdfAlignmentStyle.TopCenter:\n                x = (actualBounds.width - this.width) / 2;\n                y = -actualBounds.y;\n                break;\n            case PdfAlignmentStyle.TopRight:\n                if (this.type === TemplateType.Right) {\n                    x = actualBounds.width + section.getRightIndentWidth(document, page, false) - this.width;\n                    y = 0;\n                }\n                else if (this.type === TemplateType.Top) {\n                    x = actualBounds.width + section.getRightIndentWidth(document, page, false) - this.width;\n                    y = -actualBounds.y;\n                }\n                break;\n            case PdfAlignmentStyle.MiddleLeft:\n                x = -actualBounds.x;\n                y = (actualBounds.height - this.height) / 2;\n                break;\n            case PdfAlignmentStyle.MiddleCenter:\n                x = (actualBounds.width - this.width) / 2;\n                y = (actualBounds.height - this.height) / 2;\n                break;\n            case PdfAlignmentStyle.MiddleRight:\n                x = actualBounds.width + section.getRightIndentWidth(document, page, false) - this.width;\n                y = (actualBounds.height - this.height) / 2;\n                break;\n            case PdfAlignmentStyle.BottomLeft:\n                if (this.type === TemplateType.Left) {\n                    x = -actualBounds.x;\n                    y = actualBounds.height - this.height;\n                }\n                else if (this.type === TemplateType.Bottom) {\n                    x = -actualBounds.x;\n                    y = actualBounds.height + section.getBottomIndentHeight(document, page, false) - this.height;\n                }\n                break;\n            case PdfAlignmentStyle.BottomCenter:\n                x = (actualBounds.width - this.width) / 2;\n                y = actualBounds.height + section.getBottomIndentHeight(document, page, false) - this.height;\n                break;\n            case PdfAlignmentStyle.BottomRight:\n                if (this.type === TemplateType.Right) {\n                    x = actualBounds.width + section.getRightIndentWidth(document, page, false) - this.width;\n                    y = actualBounds.height - this.height;\n                }\n                else if (this.type === TemplateType.Bottom) {\n                    x = actualBounds.width + section.getRightIndentWidth(document, page, false) - this.width;\n                    y = actualBounds.height + section.getBottomIndentHeight(document, page, false) - this.height;\n                }\n                break;\n        }\n        result.x = x;\n        result.y = y;\n        return result;\n    };\n    /**\n     * Calculates bounds according to the docking.\n     * @private\n     */\n    PdfPageTemplateElement.prototype.getDockBounds = function (page, document) {\n        var result = this.bounds;\n        if (this.type === TemplateType.None) {\n            result = this.getSimpleDockBounds(page, document);\n        }\n        else {\n            result = this.getTemplateDockBounds(page, document);\n        }\n        return result;\n    };\n    /**\n     * Calculates bounds according to the docking.\n     * @private\n     */\n    PdfPageTemplateElement.prototype.getSimpleDockBounds = function (page, document) {\n        var result = this.bounds;\n        var section = page.section;\n        var actualBounds = section.getActualBounds(document, page, false);\n        var x = this.x;\n        var y = this.y;\n        var width = this.width;\n        var height = this.height;\n        switch (this.dockStyle) {\n            case PdfDockStyle.Left:\n                x = 0;\n                y = 0;\n                width = this.width;\n                height = actualBounds.height;\n                break;\n            case PdfDockStyle.Top:\n                x = 0;\n                y = 0;\n                width = actualBounds.width;\n                height = this.height;\n                break;\n            case PdfDockStyle.Right:\n                x = actualBounds.width - this.width;\n                y = 0;\n                width = this.width;\n                height = actualBounds.height;\n                break;\n            case PdfDockStyle.Bottom:\n                x = 0;\n                y = actualBounds.height - this.height;\n                width = actualBounds.width;\n                height = this.height;\n                break;\n            case PdfDockStyle.Fill:\n                x = 0;\n                x = 0;\n                width = actualBounds.width;\n                height = actualBounds.height;\n                break;\n        }\n        result = new RectangleF(x, y, width, height);\n        return result;\n    };\n    /**\n     * Calculates template bounds basing on docking if template is a page template.\n     * @private\n     */\n    PdfPageTemplateElement.prototype.getTemplateDockBounds = function (page, document) {\n        var result = this.bounds;\n        var section = page.section;\n        var actualBounds = section.getActualBounds(document, page, false);\n        var actualSize = section.pageSettings.getActualSize();\n        var x = this.x;\n        var y = this.y;\n        var width = this.width;\n        var height = this.height;\n        switch (this.dockStyle) {\n            case PdfDockStyle.Left:\n                x = -actualBounds.x;\n                y = 0;\n                width = this.width;\n                height = actualBounds.height;\n                break;\n            case PdfDockStyle.Top:\n                x = -actualBounds.x;\n                y = -actualBounds.y;\n                width = actualSize.width;\n                height = this.height;\n                if (actualBounds.height < 0) {\n                    y = -actualBounds.y + actualSize.height;\n                }\n                break;\n            case PdfDockStyle.Right:\n                x = actualBounds.width + section.getRightIndentWidth(document, page, false) - this.width;\n                y = 0;\n                width = this.width;\n                height = actualBounds.height;\n                break;\n            case PdfDockStyle.Bottom:\n                x = -actualBounds.x;\n                y = actualBounds.height + section.getBottomIndentHeight(document, page, false) - this.height;\n                width = actualSize.width;\n                height = this.height;\n                if (actualBounds.height < 0) {\n                    y -= actualSize.height;\n                }\n                break;\n            case PdfDockStyle.Fill:\n                x = 0;\n                x = 0;\n                width = actualBounds.width;\n                height = actualBounds.height;\n                break;\n        }\n        result = new RectangleF(x, y, width, height);\n        return result;\n    };\n    return PdfPageTemplateElement;\n}());\nexport { PdfPageTemplateElement };\n","/**\n * `PdfString` class is used to perform string related primitive operations.\n * @private\n */\nexport var InternalEnum;\n(function (InternalEnum) {\n    //Internals\n    /**\n     * public Enum for `ForceEncoding`.\n     * @private\n     */\n    var ForceEncoding;\n    (function (ForceEncoding) {\n        /**\n         * Specifies the type of `None`.\n         * @private\n         */\n        ForceEncoding[ForceEncoding[\"None\"] = 0] = \"None\";\n        /**\n         * Specifies the type of `Ascii`.\n         * @private\n         */\n        ForceEncoding[ForceEncoding[\"Ascii\"] = 1] = \"Ascii\";\n        /**\n         * Specifies the type of `Unicode`.\n         * @private\n         */\n        ForceEncoding[ForceEncoding[\"Unicode\"] = 2] = \"Unicode\";\n    })(ForceEncoding = InternalEnum.ForceEncoding || (InternalEnum.ForceEncoding = {}));\n    /**\n     * public Enum for `SourceType`.\n     * @private\n     */\n    var SourceType;\n    (function (SourceType) {\n        /**\n         * Specifies the type of `StringValue`.\n         * @private\n         */\n        SourceType[SourceType[\"StringValue\"] = 0] = \"StringValue\";\n        /**\n         * Specifies the type of `ByteBuffer`.\n         * @private\n         */\n        SourceType[SourceType[\"ByteBuffer\"] = 1] = \"ByteBuffer\";\n    })(SourceType || (SourceType = {}));\n})(InternalEnum || (InternalEnum = {}));\nvar PdfString = /** @class */ (function () {\n    function PdfString(value) {\n        /**\n         * Value indicating whether the string was converted to hex.\n         * @default false\n         * @private\n         */\n        this.bHex = false;\n        /**\n         * Internal variable to store the `position`.\n         * @default -1\n         * @private\n         */\n        this.position1 = -1;\n        /**\n         * Internal variable to hold `cloned object`.\n         * @default null\n         * @private\n         */\n        this.clonedObject1 = null;\n        /**\n         * `Shows` if the data of the stream was decrypted.\n         * @default false\n         * @private\n         */\n        this.bDecrypted = false;\n        /**\n         * Shows if the data of the stream `was decrypted`.\n         * @default false\n         * @private\n         */\n        this.isParentDecrypted = false;\n        /**\n         * Gets a value indicating whether the object is `packed or not`.\n         * @default false\n         * @private\n         */\n        this.isPacked = false;\n        /**\n         * @hidden\n         * @private\n         */\n        this.isFormField = false;\n        /**\n         * @hidden\n         * @private\n         */\n        this.isColorSpace = false;\n        /**\n         * @hidden\n         * @private\n         */\n        this.isHexString = true;\n        if (typeof value === 'undefined') {\n            this.bHex = false;\n        }\n        else {\n            if (!(value.length > 0 && value[0] === '0xfeff')) {\n                this.stringValue = value;\n                this.data = [];\n                for (var i = 0; i < value.length; ++i) {\n                    this.data.push(value.charCodeAt(i));\n                }\n            }\n        }\n    }\n    Object.defineProperty(PdfString.prototype, \"hex\", {\n        //Property\n        /**\n         * Gets a value indicating whether string is in `hex`.\n         * @private\n         */\n        get: function () {\n            return this.bHex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"value\", {\n        /**\n         * Gets or sets string `value` of the object.\n         * @private\n         */\n        get: function () {\n            return this.stringValue;\n        },\n        set: function (value) {\n            this.stringValue = value;\n            this.data = null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"status\", {\n        /**\n         * Gets or sets the `Status` of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.status1;\n        },\n        set: function (value) {\n            this.status1 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"isSaving\", {\n        /**\n         * Gets or sets a value indicating whether this document `is saving` or not.\n         * @private\n         */\n        get: function () {\n            return this.isSaving1;\n        },\n        set: function (value) {\n            this.isSaving1 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"objectCollectionIndex\", {\n        /**\n         * Gets or sets the `index` value of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.index1;\n        },\n        set: function (value) {\n            this.index1 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"clonedObject\", {\n        /**\n         * Returns `cloned object`.\n         * @private\n         */\n        get: function () {\n            return this.clonedObject1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"position\", {\n        /**\n         * Gets or sets the `position` of the object.\n         * @private\n         */\n        get: function () {\n            return this.position1;\n        },\n        set: function (value) {\n            this.position1 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"CrossTable\", {\n        /**\n         * Returns `PdfCrossTable` associated with the object.\n         * @private\n         */\n        get: function () {\n            return this.crossTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"converted\", {\n        /**\n         * Gets a value indicating whether to check if the value has unicode characters.\n         * @private\n         */\n        get: function () {\n            return this.bConverted;\n        },\n        /**\n         * sets a value indicating whether to check if the value has unicode characters.\n         * @private\n         */\n        set: function (value) {\n            this.bConverted = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfString.prototype, \"encode\", {\n        /**\n         * Gets value indicating whether we should convert data to Unicode.\n         */\n        get: function () {\n            return this.bForceEncoding;\n        },\n        set: function (value) {\n            this.bForceEncoding = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Methods\n    /**\n     * Converts `bytes to string using hex format` for representing string.\n     * @private\n     */\n    PdfString.bytesToHex = function (bytes) {\n        if (bytes == null) {\n            return '';\n        }\n        var builder = '';\n        return builder;\n    };\n    /**\n     * `Saves` the object using the specified writer.\n     * @private\n     */\n    PdfString.prototype.save = function (writer) {\n        if (writer === null) {\n            throw new Error('ArgumentNullException : writer');\n        }\n        if (this.encode !== undefined && this.encode === InternalEnum.ForceEncoding.Ascii) {\n            writer.write(this.pdfEncode());\n        }\n        else {\n            writer.write(PdfString.stringMark[0] + this.value + PdfString.stringMark[1]);\n        }\n    };\n    PdfString.prototype.pdfEncode = function () {\n        var result = '';\n        if (this.encode !== undefined && this.encode === InternalEnum.ForceEncoding.Ascii) {\n            var data = this.escapeSymbols(this.value);\n            for (var i = 0; i < data.length; i++) {\n                result += String.fromCharCode(data[i]);\n            }\n            result = PdfString.stringMark[0] + result + PdfString.stringMark[1];\n        }\n        else {\n            result = this.value;\n        }\n        return result;\n    };\n    PdfString.prototype.escapeSymbols = function (value) {\n        var data = [];\n        for (var i = 0; i < value.length; i++) {\n            var currentData = value.charCodeAt(i);\n            switch (currentData) {\n                case 40:\n                case 41:\n                    data.push(92);\n                    data.push(currentData);\n                    break;\n                case 13:\n                    data.push(92);\n                    data.push(114);\n                    break;\n                case 92:\n                    data.push(92);\n                    data.push(currentData);\n                    break;\n                default:\n                    data.push(currentData);\n                    break;\n            }\n        }\n        return data;\n    };\n    /**\n     * Creates a `copy of PdfString`.\n     * @private\n     */\n    PdfString.prototype.clone = function (crossTable) {\n        if (this.clonedObject1 !== null && this.clonedObject1.CrossTable === crossTable) {\n            return this.clonedObject1;\n        }\n        else {\n            this.clonedObject1 = null;\n        }\n        var newString = new PdfString(this.stringValue);\n        newString.bHex = this.bHex;\n        newString.crossTable = crossTable;\n        newString.isColorSpace = this.isColorSpace;\n        this.clonedObject1 = newString;\n        return newString;\n    };\n    /**\n     * Converts string to array of unicode symbols.\n     */\n    PdfString.toUnicodeArray = function (value, bAddPrefix) {\n        if (value == null) {\n            throw new Error('Argument Null Exception : value');\n        }\n        var startIndex = 0;\n        var output = [];\n        for (var i = 0; i < value.length; i++) {\n            var code = value.charCodeAt(i);\n            output.push(code / 256 >>> 0);\n            output.push(code & 0xff);\n        }\n        return output;\n    };\n    /**\n     * Converts byte data to string.\n     */\n    PdfString.byteToString = function (data) {\n        if (data == null) {\n            throw new Error('Argument Null Exception : stream');\n        }\n        var result = '';\n        for (var i = 0; i < data.length; ++i) {\n            result += String.fromCharCode(data[i]);\n        }\n        return result;\n    };\n    //constants = ;\n    /**\n     * `General markers` for string.\n     * @private\n     */\n    PdfString.stringMark = '()';\n    /**\n     * `Hex markers` for string.\n     * @private\n     */\n    PdfString.hexStringMark = '<>';\n    /**\n     * Format of password data.\n     * @private\n     */\n    PdfString.hexFormatPattern = '{0:X2}';\n    return PdfString;\n}());\nexport { PdfString };\n","/**\n * PdfTemplate.ts class for EJ2-PDF\n */\nimport { PdfStream } from './../../primitives/pdf-stream';\nimport { DictionaryProperties } from './../../input-output/pdf-dictionary-properties';\nimport { PdfArray } from './../../primitives/pdf-array';\nimport { PdfGraphics } from './../pdf-graphics';\nimport { PdfResources } from './../pdf-resources';\nimport { PdfName } from './../../primitives/pdf-name';\nimport { PointF, SizeF, RectangleF } from './../../drawing/pdf-drawing';\nimport { GetResourceEventHandler } from './../pdf-graphics';\n/**\n * Represents `Pdf Template` object.\n * @private\n */\nvar PdfTemplate = /** @class */ (function () {\n    function PdfTemplate(arg1, arg2) {\n        /**\n         * Initialize an instance for `DictionaryProperties` class.\n         * @private\n         * @hidden\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        /**\n         * Checks whether the transformation 'is performed'.\n         * @default true\n         * @private\n         */\n        this.writeTransformation = true;\n        if (typeof arg1 === 'undefined') {\n            //\n        }\n        else if (arg1 instanceof SizeF && typeof arg2 === 'undefined') {\n            this.content = new PdfStream();\n            var tempSize = new SizeF(arg1.width, arg1.height);\n            this.setSize(tempSize);\n            this.initialize();\n        }\n        else {\n            this.content = new PdfStream();\n            this.setSize(new SizeF(arg1, arg2));\n            this.initialize();\n        }\n    }\n    Object.defineProperty(PdfTemplate.prototype, \"size\", {\n        //Properties\n        /**\n         * Gets the size of the 'PdfTemplate'.\n         */\n        get: function () {\n            return this.templateSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTemplate.prototype, \"width\", {\n        /**\n         * Gets the width of the 'PdfTemplate'.\n         */\n        get: function () {\n            return this.size.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTemplate.prototype, \"height\", {\n        /**\n         * Gets the height of the 'PdfTemplate'.\n         */\n        get: function () {\n            return this.size.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTemplate.prototype, \"graphics\", {\n        /**\n         * Gets the `graphics` of the 'PdfTemplate'.\n         */\n        get: function () {\n            if (this.pdfGraphics == null || typeof this.pdfGraphics === 'undefined') {\n                var gr = new GetResourceEventHandler(this);\n                var g = new PdfGraphics(this.size, gr, this.content);\n                this.pdfGraphics = g;\n                // if(this.writeTransformation) {\n                // Transform co-ordinates to Top/Left.\n                this.pdfGraphics.initializeCoordinates();\n                // }\n            }\n            return this.pdfGraphics;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets the resources and modifies the template dictionary.\n     * @private\n     */\n    PdfTemplate.prototype.getResources = function () {\n        if (this.resources == null) {\n            this.resources = new PdfResources();\n            this.content.items.setValue(this.dictionaryProperties.resources, this.resources);\n        }\n        return this.resources;\n    };\n    // Public methods\n    /**\n     * `Initialize` the type and subtype of the template.\n     * @private\n     */\n    PdfTemplate.prototype.initialize = function () {\n        this.addType();\n        this.addSubType();\n    };\n    /**\n     * `Adds type key`.\n     * @private\n     */\n    PdfTemplate.prototype.addType = function () {\n        var value = new PdfName(this.dictionaryProperties.xObject);\n        this.content.items.setValue(this.dictionaryProperties.type, value);\n    };\n    /**\n     * `Adds SubType key`.\n     * @private\n     */\n    PdfTemplate.prototype.addSubType = function () {\n        var value = new PdfName(this.dictionaryProperties.form);\n        this.content.items.setValue(this.dictionaryProperties.subtype, value);\n    };\n    PdfTemplate.prototype.reset = function (size) {\n        if (typeof size === 'undefined') {\n            if (this.resources != null) {\n                this.resources = null;\n                this.content.remove(this.dictionaryProperties.resources);\n            }\n            if (this.graphics != null) {\n                this.graphics.reset(this.size);\n            }\n        }\n        else {\n            this.setSize(size);\n            this.reset();\n        }\n    };\n    /**\n     * `Set the size` of the 'PdfTemplate'.\n     * @private\n     */\n    PdfTemplate.prototype.setSize = function (size) {\n        var rect = new RectangleF(new PointF(0, 0), size);\n        var val = PdfArray.fromRectangle(rect);\n        this.content.items.setValue(this.dictionaryProperties.bBox, val);\n        this.templateSize = size;\n    };\n    Object.defineProperty(PdfTemplate.prototype, \"element\", {\n        // /**\n        //  * Returns the value of current graphics.\n        //  * @private\n        //  */\n        // public GetGraphics(g : PdfGraphics) : PdfGraphics {\n        //     if (this.graphics == null || typeof this.graphics === 'undefined') {\n        //         this.graphics = g;\n        //         this.graphics.Size = this.Size;\n        //         this.graphics.StreamWriter = new PdfStreamWriter(this.content)\n        //         this.graphics.Initialize();\n        //         if(this.writeTransformation) {\n        //             this.graphics.InitializeCoordinates();\n        //         }\n        //     }\n        //     return this.graphics;\n        // }\n        // IPdfWrapper Members\n        /**\n         * Gets the `content stream` of 'PdfTemplate' class.\n         * @private\n         */\n        get: function () {\n            return this.content;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfTemplate;\n}());\nexport { PdfTemplate };\n","/**\n * public Enum for `PdfPageOrientation`.\n * @private\n */\nexport var PdfPageOrientation;\n(function (PdfPageOrientation) {\n    /**\n     * Specifies the type of `Portrait`.\n     * @private\n     */\n    PdfPageOrientation[PdfPageOrientation[\"Portrait\"] = 0] = \"Portrait\";\n    /**\n     * Specifies the type of `Landscape`.\n     * @private\n     */\n    PdfPageOrientation[PdfPageOrientation[\"Landscape\"] = 1] = \"Landscape\";\n})(PdfPageOrientation || (PdfPageOrientation = {}));\n/**\n * public Enum for `PdfPageRotateAngle`.\n * @private\n */\nexport var PdfPageRotateAngle;\n(function (PdfPageRotateAngle) {\n    /**\n     * Specifies the type of `RotateAngle0`.\n     * @private\n     */\n    PdfPageRotateAngle[PdfPageRotateAngle[\"RotateAngle0\"] = 0] = \"RotateAngle0\";\n    /**\n     * Specifies the type of `RotateAngle90`.\n     * @private\n     */\n    PdfPageRotateAngle[PdfPageRotateAngle[\"RotateAngle90\"] = 1] = \"RotateAngle90\";\n    /**\n     * Specifies the type of `RotateAngle180`.\n     * @private\n     */\n    PdfPageRotateAngle[PdfPageRotateAngle[\"RotateAngle180\"] = 2] = \"RotateAngle180\";\n    /**\n     * Specifies the type of `RotateAngle270`.\n     * @private\n     */\n    PdfPageRotateAngle[PdfPageRotateAngle[\"RotateAngle270\"] = 3] = \"RotateAngle270\";\n})(PdfPageRotateAngle || (PdfPageRotateAngle = {}));\n/**\n * public Enum for `PdfNumberStyle`.\n * @private\n */\nexport var PdfNumberStyle;\n(function (PdfNumberStyle) {\n    /**\n     * Specifies the type of `None`.\n     * @private\n     */\n    PdfNumberStyle[PdfNumberStyle[\"None\"] = 0] = \"None\";\n    /**\n     * Specifies the type of `Numeric`.\n     * @private\n     */\n    PdfNumberStyle[PdfNumberStyle[\"Numeric\"] = 1] = \"Numeric\";\n    /**\n     * Specifies the type of `LowerLatin`.\n     * @private\n     */\n    PdfNumberStyle[PdfNumberStyle[\"LowerLatin\"] = 2] = \"LowerLatin\";\n    /**\n     * Specifies the type of `LowerRoman`.\n     * @private\n     */\n    PdfNumberStyle[PdfNumberStyle[\"LowerRoman\"] = 3] = \"LowerRoman\";\n    /**\n     * Specifies the type of `UpperLatin`.\n     * @private\n     */\n    PdfNumberStyle[PdfNumberStyle[\"UpperLatin\"] = 4] = \"UpperLatin\";\n    /**\n     * Specifies the type of `UpperRoman`.\n     * @private\n     */\n    PdfNumberStyle[PdfNumberStyle[\"UpperRoman\"] = 5] = \"UpperRoman\";\n})(PdfNumberStyle || (PdfNumberStyle = {}));\n/**\n * public Enum for `PdfDockStyle`.\n * @private\n */\nexport var PdfDockStyle;\n(function (PdfDockStyle) {\n    /**\n     * Specifies the type of `None`.\n     * @private\n     */\n    PdfDockStyle[PdfDockStyle[\"None\"] = 0] = \"None\";\n    /**\n     * Specifies the type of `Bottom`.\n     * @private\n     */\n    PdfDockStyle[PdfDockStyle[\"Bottom\"] = 1] = \"Bottom\";\n    /**\n     * Specifies the type of `Top`.\n     * @private\n     */\n    PdfDockStyle[PdfDockStyle[\"Top\"] = 2] = \"Top\";\n    /**\n     * Specifies the type of `Left`.\n     * @private\n     */\n    PdfDockStyle[PdfDockStyle[\"Left\"] = 3] = \"Left\";\n    /**\n     * Specifies the type of `Right`.\n     * @private\n     */\n    PdfDockStyle[PdfDockStyle[\"Right\"] = 4] = \"Right\";\n    /**\n     * Specifies the type of `Fill`.\n     * @private\n     */\n    PdfDockStyle[PdfDockStyle[\"Fill\"] = 5] = \"Fill\";\n})(PdfDockStyle || (PdfDockStyle = {}));\n/**\n * public Enum for `PdfAlignmentStyle`.\n * @private\n */\nexport var PdfAlignmentStyle;\n(function (PdfAlignmentStyle) {\n    /**\n     * Specifies the type of `None`.\n     * @private\n     */\n    PdfAlignmentStyle[PdfAlignmentStyle[\"None\"] = 0] = \"None\";\n    /**\n     * Specifies the type of `TopLeft`.\n     * @private\n     */\n    PdfAlignmentStyle[PdfAlignmentStyle[\"TopLeft\"] = 1] = \"TopLeft\";\n    /**\n     * Specifies the type of `TopCenter`.\n     * @private\n     */\n    PdfAlignmentStyle[PdfAlignmentStyle[\"TopCenter\"] = 2] = \"TopCenter\";\n    /**\n     * Specifies the type of `TopRight`.\n     * @private\n     */\n    PdfAlignmentStyle[PdfAlignmentStyle[\"TopRight\"] = 3] = \"TopRight\";\n    /**\n     * Specifies the type of `MiddleLeft`.\n     * @private\n     */\n    PdfAlignmentStyle[PdfAlignmentStyle[\"MiddleLeft\"] = 4] = \"MiddleLeft\";\n    /**\n     * Specifies the type of `MiddleCenter`.\n     * @private\n     */\n    PdfAlignmentStyle[PdfAlignmentStyle[\"MiddleCenter\"] = 5] = \"MiddleCenter\";\n    /**\n     * Specifies the type of `MiddleRight`.\n     * @private\n     */\n    PdfAlignmentStyle[PdfAlignmentStyle[\"MiddleRight\"] = 6] = \"MiddleRight\";\n    /**\n     * Specifies the type of `BottomLeft`.\n     * @private\n     */\n    PdfAlignmentStyle[PdfAlignmentStyle[\"BottomLeft\"] = 7] = \"BottomLeft\";\n    /**\n     * Specifies the type of `BottomCenter`.\n     * @private\n     */\n    PdfAlignmentStyle[PdfAlignmentStyle[\"BottomCenter\"] = 8] = \"BottomCenter\";\n    /**\n     * Specifies the type of `BottomRight`.\n     * @private\n     */\n    PdfAlignmentStyle[PdfAlignmentStyle[\"BottomRight\"] = 9] = \"BottomRight\";\n})(PdfAlignmentStyle || (PdfAlignmentStyle = {}));\n/**\n * public Enum for `TemplateType`.\n * @private\n */\nexport var TemplateType;\n(function (TemplateType) {\n    /**\n     * Specifies the type of `None`.\n     * @private\n     */\n    TemplateType[TemplateType[\"None\"] = 0] = \"None\";\n    /**\n     * Specifies the type of `Top`.\n     * @private\n     */\n    TemplateType[TemplateType[\"Top\"] = 1] = \"Top\";\n    /**\n     * Specifies the type of `Bottom`.\n     * @private\n     */\n    TemplateType[TemplateType[\"Bottom\"] = 2] = \"Bottom\";\n    /**\n     * Specifies the type of `Left`.\n     * @private\n     */\n    TemplateType[TemplateType[\"Left\"] = 3] = \"Left\";\n    /**\n     * Specifies the type of `Right`.\n     * @private\n     */\n    TemplateType[TemplateType[\"Right\"] = 4] = \"Right\";\n})(TemplateType || (TemplateType = {}));\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { PdfFont } from './pdf-font';\nimport { PdfSubSuperScript } from './enum';\nimport { PdfArray } from './../../primitives/pdf-array';\n/**\n * `Metrics` of the font.\n * @private\n */\nvar PdfFontMetrics = /** @class */ (function () {\n    function PdfFontMetrics() {\n        /**\n         * `Line gap`.\n         * @private\n         */\n        this.lineGap = 0;\n    }\n    //  Public methods\n    /**\n     * Returns `ascent` taking into consideration font`s size.\n     * @private\n     */\n    PdfFontMetrics.prototype.getAscent = function (format) {\n        var returnValue = this.ascent * PdfFont.charSizeMultiplier * this.getSize(format);\n        return returnValue;\n    };\n    /**\n     * Returns `descent` taking into consideration font`s size.\n     * @private\n     */\n    PdfFontMetrics.prototype.getDescent = function (format) {\n        var returnValue = this.descent * PdfFont.charSizeMultiplier * this.getSize(format);\n        return returnValue;\n    };\n    /**\n     * Returns `Line gap` taking into consideration font`s size.\n     * @private\n     */\n    PdfFontMetrics.prototype.getLineGap = function (format) {\n        var returnValue = this.lineGap * PdfFont.charSizeMultiplier * this.getSize(format);\n        return returnValue;\n    };\n    /**\n     * Returns `height` taking into consideration font`s size.\n     * @private\n     */\n    PdfFontMetrics.prototype.getHeight = function (format) {\n        var height;\n        var clearTypeFonts = ['cambria', 'candara', 'constantia', 'corbel', 'cariadings'];\n        var clearTypeFontCollection = [];\n        for (var index = 0; index < clearTypeFonts.length; index++) {\n            var font = clearTypeFonts[index];\n            clearTypeFontCollection.push(font);\n        }\n        if (this.getDescent(format) < 0) {\n            // if ((clearTypeFontCollection.indexOf(this.name.toLowerCase()) !== -1) && !this.isUnicodeFont) {\n            //     height = (this.GetAscent(format) - this.GetDescent(format) - this.GetLineGap(format));\n            // } else {\n            height = (this.getAscent(format) - this.getDescent(format) + this.getLineGap(format));\n            // }\n        }\n        else {\n            height = (this.getAscent(format) + this.getDescent(format) + this.getLineGap(format));\n        }\n        return height;\n    };\n    /**\n     * Calculates `size` of the font depending on the subscript/superscript value.\n     * @private\n     */\n    PdfFontMetrics.prototype.getSize = function (format) {\n        var size = this.size;\n        if (format != null) {\n            switch (format.subSuperScript) {\n                case PdfSubSuperScript.SubScript:\n                    size /= this.subScriptSizeFactor;\n                    break;\n                case PdfSubSuperScript.SuperScript:\n                    size /= this.superscriptSizeFactor;\n                    break;\n            }\n        }\n        return size;\n    };\n    /**\n     * `Clones` the metrics.\n     * @private\n     */\n    PdfFontMetrics.prototype.clone = function () {\n        var metrics = this;\n        metrics.widthTable = WidthTable.clone();\n        return metrics;\n    };\n    Object.defineProperty(PdfFontMetrics.prototype, \"widthTable\", {\n        //  Properies\n        /**\n         * Gets or sets the `width table`.\n         * @private\n         */\n        get: function () {\n            return this.internalWidthTable;\n        },\n        set: function (value) {\n            this.internalWidthTable = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfFontMetrics;\n}());\nexport { PdfFontMetrics };\nvar WidthTable = /** @class */ (function () {\n    function WidthTable() {\n    }\n    /**\n     * Static `clones` this instance of the WidthTable class.\n     * @private\n     */\n    WidthTable.clone = function () {\n        return null;\n    };\n    return WidthTable;\n}());\nexport { WidthTable };\nvar StandardWidthTable = /** @class */ (function (_super) {\n    __extends(StandardWidthTable, _super);\n    // Constructors\n    /**\n     * Initializes a new instance of the `StandardWidthTable` class.\n     * @private\n     */\n    function StandardWidthTable(widths) {\n        var _this = _super.call(this) || this;\n        if (widths == null) {\n            throw new Error('ArgumentNullException:widths');\n        }\n        _this.widths = widths;\n        return _this;\n    }\n    //Properties\n    /**\n     * Gets the `32 bit number` at the specified index.\n     * @private\n     */\n    StandardWidthTable.prototype.items = function (index) {\n        if (index < 0 || index >= this.widths.length) {\n            throw new Error('ArgumentOutOfRangeException:index, The character is not supported by the font.');\n        }\n        var result = this.widths[index];\n        return result;\n    };\n    Object.defineProperty(StandardWidthTable.prototype, \"length\", {\n        /**\n         * Gets the `length` of the internal array.\n         * @private\n         */\n        get: function () {\n            return this.widths.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Overrides\n    /**\n     * `Clones` this instance of the WidthTable class.\n     * @private\n     */\n    StandardWidthTable.prototype.clone = function () {\n        var swt = this;\n        swt.widths = this.widths;\n        return swt;\n    };\n    /**\n     * Converts width table to a `PDF array`.\n     * @private\n     */\n    StandardWidthTable.prototype.toArray = function () {\n        var arr = new PdfArray(this.widths);\n        return arr;\n    };\n    return StandardWidthTable;\n}(WidthTable));\nexport { StandardWidthTable };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * PdfCatalog.ts class for EJ2-PDF\n */\nimport { PdfDictionary } from './../primitives/pdf-dictionary';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\nimport { PdfName } from './../primitives/pdf-name';\nimport { PdfReferenceHolder } from './../primitives/pdf-reference';\n/**\n * `PdfCatalog` class represents internal catalog of the Pdf document.\n * @private\n */\nvar PdfCatalog = /** @class */ (function (_super) {\n    __extends(PdfCatalog, _super);\n    //constructor\n    /**\n     * Initializes a new instance of the `PdfCatalog` class.\n     * @private\n     */\n    function PdfCatalog() {\n        var _this = _super.call(this) || this;\n        //fields\n        /**\n         * Internal variable to store collection of `sections`.\n         * @default null\n         * @private\n         */\n        _this.sections = null;\n        /**\n         * Internal variable for accessing fields from `DictionryProperties` class.\n         * @private\n         */\n        _this.tempDictionaryProperties = new DictionaryProperties();\n        _this.items.setValue(new DictionaryProperties().type, new PdfName('Catalog'));\n        return _this;\n    }\n    Object.defineProperty(PdfCatalog.prototype, \"pages\", {\n        //Properties\n        /**\n         * Gets or sets the sections, which contain `pages`.\n         * @private\n         */\n        get: function () {\n            return this.sections;\n        },\n        set: function (value) {\n            var dictionary = value.element;\n            // if (this.sections !== value) {\n            //     this.sections = value;\n            //     this.Items.setValue(this.tempDictionaryProperties.pages, new PdfReferenceHolder(value));\n            // }\n            this.sections = value;\n            this.items.setValue(this.tempDictionaryProperties.pages, new PdfReferenceHolder(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfCatalog;\n}(PdfDictionary));\nexport { PdfCatalog };\n","/**\n * PdfStringFormat.ts class for EJ2-PDF\n */\nimport { PdfVerticalAlignment } from './../../graphics/enum';\nimport { PdfSubSuperScript, PdfWordWrapType } from './../../graphics/fonts/enum';\n/**\n * `PdfStringFormat` class represents the text layout information on PDF.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a pages to the document\n * let page1 : PdfPage = document.pages.add();\n * // set font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // set brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * //\n * // set the format for string\n * let stringFormat : PdfStringFormat = new PdfStringFormat();\n * // set the text alignment\n * stringFormat.alignment = PdfTextAlignment.Center;\n * // set the vertical alignment\n * stringFormat.lineAlignment = PdfVerticalAlignment.Middle;\n * //\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nvar PdfStringFormat = /** @class */ (function () {\n    function PdfStringFormat(arg1, arg2) {\n        /**\n         * The `scaling factor` of the text being drawn.\n         * @private\n         */\n        this.scalingFactor = 100.0;\n        /**\n         * Indicates text `wrapping` type.\n         * @private\n         */\n        this.wordWrapType = PdfWordWrapType.Word;\n        if (typeof arg1 === 'undefined') {\n            this.internalLineLimit = true;\n            this.wordWrapType = PdfWordWrapType.Word;\n        }\n        else if (typeof arg1 === 'string') {\n            this.constructor();\n        }\n        else {\n            if (typeof arg2 === 'undefined') {\n                this.constructor();\n                this.textAlignment = arg1;\n            }\n            else {\n                this.constructor(arg1);\n                this.verticalAlignment = arg2;\n            }\n        }\n    }\n    Object.defineProperty(PdfStringFormat.prototype, \"alignment\", {\n        //Properties\n        /**\n         * Gets or sets the `horizontal` text alignment\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // add a pages to the document\n         * let page1 : PdfPage = document.pages.add();\n         * // set font\n         * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n         * // set brush\n         * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n         * //\n         * // set the format for string\n         * let stringFormat : PdfStringFormat = new PdfStringFormat();\n         * // set the text alignment\n         * stringFormat.alignment = PdfTextAlignment.Center;\n         * //\n         * // draw the text\n         * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n         * // save the document\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this.textAlignment;\n        },\n        set: function (value) {\n            this.textAlignment = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"textDirection\", {\n        get: function () {\n            return this.direction;\n        },\n        set: function (value) {\n            this.direction = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"lineAlignment\", {\n        /**\n         * Gets or sets the `vertical` text alignment.\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // add a pages to the document\n         * let page1 : PdfPage = document.pages.add();\n         * // set font\n         * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n         * // set brush\n         * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n         * //\n         * // set the format for string\n         * let stringFormat : PdfStringFormat = new PdfStringFormat();\n         * // set the vertical alignment\n         * stringFormat.lineAlignment = PdfVerticalAlignment.Middle;\n         * //\n         * // draw the text\n         * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n         * // save the document\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this.verticalAlignment === 'undefined' || this.verticalAlignment == null) {\n                return PdfVerticalAlignment.Top;\n            }\n            else {\n                return this.verticalAlignment;\n            }\n        },\n        set: function (value) {\n            this.verticalAlignment = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"rightToLeft\", {\n        /**\n         * Gets or sets the value that indicates text `direction` mode.\n         * @private\n         */\n        get: function () {\n            if (typeof this.isRightToLeft === 'undefined' || this.isRightToLeft == null) {\n                return false;\n            }\n            else {\n                return this.isRightToLeft;\n            }\n        },\n        set: function (value) {\n            this.isRightToLeft = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"characterSpacing\", {\n        /**\n         * Gets or sets value that indicates a `size` among the characters in the text.\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // add a pages to the document\n         * let page1 : PdfPage = document.pages.add();\n         * // set font\n         * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n         * // set brush\n         * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n         * //\n         * // set the format for string\n         * let stringFormat : PdfStringFormat = new PdfStringFormat();\n         * // set character spacing\n         * stringFormat.characterSpacing = 10;\n         * //\n         * // draw the text\n         * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n         * // save the document\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this.internalCharacterSpacing === 'undefined' || this.internalCharacterSpacing == null) {\n                return 0;\n            }\n            else {\n                return this.internalCharacterSpacing;\n            }\n        },\n        set: function (value) {\n            this.internalCharacterSpacing = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"wordSpacing\", {\n        /**\n         * Gets or sets value that indicates a `size` among the words in the text.\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // add a pages to the document\n         * let page1 : PdfPage = document.pages.add();\n         * // set font\n         * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n         * // set brush\n         * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n         * //\n         * // set the format for string\n         * let stringFormat : PdfStringFormat = new PdfStringFormat();\n         * // set word spacing\n         * stringFormat.wordSpacing = 10;\n         * //\n         * // draw the text\n         * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10), stringFormat);\n         * // save the document\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this.internalWordSpacing === 'undefined' || this.internalWordSpacing == null) {\n                return 0;\n            }\n            else {\n                return this.internalWordSpacing;\n            }\n        },\n        set: function (value) {\n            this.internalWordSpacing = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"lineSpacing\", {\n        /**\n         * Gets or sets value that indicates the `vertical distance` between the baselines of adjacent lines of text.\n         * ```typescript\n         * // create a new PDF document\n         * let document : PdfDocument = new PdfDocument();\n         * // add a pages to the document\n         * let page1 : PdfPage = document.pages.add();\n         * // set font\n         * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n         * // set brush\n         * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n         * // set string\n         * let text : string = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n         * incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitati';\n         * // set rectangle bounds\n         * let rectangle : RectangleF = new RectangleF({x : 0, y : 0}, {width : 300, height : 100})\n         * //\n         * // set the format for string\n         * let stringFormat : PdfStringFormat = new PdfStringFormat();\n         * // set line spacing\n         * stringFormat.lineSpacing = 10;\n         * //\n         * // draw the text\n         * page1.graphics.drawString(text, font, blackBrush, rectangle, stringFormat);\n         * // save the document\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            if (typeof this.leading === 'undefined' || this.leading == null) {\n                return 0;\n            }\n            else {\n                return this.leading;\n            }\n        },\n        set: function (value) {\n            this.leading = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"clipPath\", {\n        /**\n         * Gets or sets a value indicating whether the text is `clipped` or not.\n         * @private\n         */\n        get: function () {\n            if (typeof this.clip === 'undefined' || this.clip == null) {\n                return false;\n            }\n            else {\n                return this.clip;\n            }\n        },\n        set: function (value) {\n            this.clip = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"subSuperScript\", {\n        /**\n         * Gets or sets value indicating whether the text is in `subscript or superscript` mode.\n         * @private\n         */\n        get: function () {\n            if (typeof this.pdfSubSuperScript === 'undefined' || this.pdfSubSuperScript == null) {\n                return PdfSubSuperScript.None;\n            }\n            else {\n                return this.pdfSubSuperScript;\n            }\n        },\n        set: function (value) {\n            this.pdfSubSuperScript = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"paragraphIndent\", {\n        /**\n         * Gets or sets the `indent` of the first line in the paragraph.\n         * @private\n         */\n        get: function () {\n            if (typeof this.internalParagraphIndent === 'undefined' || this.internalParagraphIndent == null) {\n                return 0;\n            }\n            else {\n                return this.internalParagraphIndent;\n            }\n        },\n        set: function (value) {\n            this.internalParagraphIndent = value;\n            this.firstLineIndent = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"lineLimit\", {\n        /**\n         * Gets or sets a value indicating whether [`line limit`].\n         * @private\n         */\n        get: function () {\n            return this.internalLineLimit;\n        },\n        set: function (value) {\n            this.internalLineLimit = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"measureTrailingSpaces\", {\n        /**\n         * Gets or sets a value indicating whether [`measure trailing spaces`].\n         * @private\n         */\n        get: function () {\n            if (typeof this.trailingSpaces === 'undefined' || this.trailingSpaces == null) {\n                return false;\n            }\n            else {\n                return this.trailingSpaces;\n            }\n        },\n        set: function (value) {\n            this.trailingSpaces = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"noClip\", {\n        /**\n         * Gets or sets a value indicating whether [`no clip`].\n         * @private\n         */\n        get: function () {\n            if (typeof this.isNoClip === 'undefined' || this.isNoClip == null) {\n                return false;\n            }\n            else {\n                return this.isNoClip;\n            }\n        },\n        set: function (value) {\n            this.isNoClip = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"wordWrap\", {\n        /**\n         * Gets or sets value indicating type of the text `wrapping`.\n         * @private\n         */\n        get: function () {\n            // if (typeof this.wrapType === 'undefined' || this.wrapType == null) {\n            //     return PdfWordWrapType.Word;\n            // } else {\n            return this.wordWrapType;\n            // }\n        },\n        set: function (value) {\n            this.wordWrapType = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"horizontalScalingFactor\", {\n        /**\n         * Gets or sets the `scaling factor`.\n         * @private\n         */\n        get: function () {\n            // if (typeof this.scalingFactor === 'undefined' || this.scalingFactor == null) {\n            //     return 100;\n            // } else {\n            return this.scalingFactor;\n            // }\n        },\n        set: function (value) {\n            if (value <= 0) {\n                throw new Error('ArgumentOutOfRangeException:The scaling factor cant be less of equal to zero, ScalingFactor');\n            }\n            this.scalingFactor = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStringFormat.prototype, \"firstLineIndent\", {\n        /**\n         * Gets or sets the `indent` of the first line in the text.\n         * @private\n         */\n        get: function () {\n            if (typeof this.initialLineIndent === 'undefined' || this.initialLineIndent == null) {\n                return 0;\n            }\n            else {\n                return this.initialLineIndent;\n            }\n        },\n        set: function (value) {\n            this.initialLineIndent = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * `Clones` the object.\n     * @private\n     */\n    //IClonable implementation\n    PdfStringFormat.prototype.clone = function () {\n        var format = this;\n        return format;\n    };\n    return PdfStringFormat;\n}());\nexport { PdfStringFormat };\n","/**\n * public Enum for `PdfFontStyle`.\n * @private\n */\nexport var PdfFontStyle;\n(function (PdfFontStyle) {\n    /**\n     * Specifies the type of `Regular`.\n     * @private\n     */\n    PdfFontStyle[PdfFontStyle[\"Regular\"] = 0] = \"Regular\";\n    /**\n     * Specifies the type of `Bold`.\n     * @private\n     */\n    PdfFontStyle[PdfFontStyle[\"Bold\"] = 1] = \"Bold\";\n    /**\n     * Specifies the type of `Italic`.\n     * @private\n     */\n    PdfFontStyle[PdfFontStyle[\"Italic\"] = 2] = \"Italic\";\n    /**\n     * Specifies the type of `Underline`.\n     * @private\n     */\n    PdfFontStyle[PdfFontStyle[\"Underline\"] = 4] = \"Underline\";\n    /**\n     * Specifies the type of `Strikeout`.\n     * @private\n     */\n    PdfFontStyle[PdfFontStyle[\"Strikeout\"] = 8] = \"Strikeout\";\n})(PdfFontStyle || (PdfFontStyle = {}));\n/**\n * Specifies the font family from the standard font.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * // create new standard font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * // save the document\n * document.save('output.pdf');\n * ```\n */\nexport var PdfFontFamily;\n(function (PdfFontFamily) {\n    /**\n     * Specifies the `Helvetica` font.\n     */\n    PdfFontFamily[PdfFontFamily[\"Helvetica\"] = 0] = \"Helvetica\";\n    /**\n     * Specifies the `Courier` font.\n     */\n    PdfFontFamily[PdfFontFamily[\"Courier\"] = 1] = \"Courier\";\n    /**\n     * Specifies the `TimesRoman` font.\n     */\n    PdfFontFamily[PdfFontFamily[\"TimesRoman\"] = 2] = \"TimesRoman\";\n    /**\n     * Specifies the `Symbol` font.\n     */\n    PdfFontFamily[PdfFontFamily[\"Symbol\"] = 3] = \"Symbol\";\n    /**\n     * Specifies the `ZapfDingbats` font.\n     */\n    PdfFontFamily[PdfFontFamily[\"ZapfDingbats\"] = 4] = \"ZapfDingbats\";\n})(PdfFontFamily || (PdfFontFamily = {}));\n/**\n * public Enum for `PdfFontType`.\n * @private\n */\nexport var PdfFontType;\n(function (PdfFontType) {\n    /**\n     * Specifies the type of `Standard`.\n     * @private\n     */\n    PdfFontType[PdfFontType[\"Standard\"] = 0] = \"Standard\";\n    /**\n     * Specifies the type of `TrueType`.\n     * @private\n     */\n    PdfFontType[PdfFontType[\"TrueType\"] = 1] = \"TrueType\";\n    /**\n     * Specifies the type of `TrueTypeEmbedded`.\n     * @private\n     */\n    PdfFontType[PdfFontType[\"TrueTypeEmbedded\"] = 2] = \"TrueTypeEmbedded\";\n})(PdfFontType || (PdfFontType = {}));\n/**\n * public Enum for `PdfWordWrapType`.\n * @private\n */\nexport var PdfWordWrapType;\n(function (PdfWordWrapType) {\n    /**\n     * Specifies the type of `None`.\n     * @private\n     */\n    PdfWordWrapType[PdfWordWrapType[\"None\"] = 0] = \"None\";\n    /**\n     * Specifies the type of `Word`.\n     * @private\n     */\n    PdfWordWrapType[PdfWordWrapType[\"Word\"] = 1] = \"Word\";\n    /**\n     * Specifies the type of `WordOnly`.\n     * @private\n     */\n    PdfWordWrapType[PdfWordWrapType[\"WordOnly\"] = 2] = \"WordOnly\";\n    /**\n     * Specifies the type of `Character`.\n     * @private\n     */\n    PdfWordWrapType[PdfWordWrapType[\"Character\"] = 3] = \"Character\";\n})(PdfWordWrapType || (PdfWordWrapType = {}));\n/**\n * public Enum for `PdfSubSuperScript`.\n * @private\n */\nexport var PdfSubSuperScript;\n(function (PdfSubSuperScript) {\n    /**\n     * Specifies the type of `None`.\n     * @private\n     */\n    PdfSubSuperScript[PdfSubSuperScript[\"None\"] = 0] = \"None\";\n    /**\n     * Specifies the type of `SuperScript`.\n     * @private\n     */\n    PdfSubSuperScript[PdfSubSuperScript[\"SuperScript\"] = 1] = \"SuperScript\";\n    /**\n     * Specifies the type of `SubScript`.\n     * @private\n     */\n    PdfSubSuperScript[PdfSubSuperScript[\"SubScript\"] = 2] = \"SubScript\";\n})(PdfSubSuperScript || (PdfSubSuperScript = {}));\n/**\n * public Enum for `FontEncoding`.\n * @private\n */\nexport var FontEncoding;\n(function (FontEncoding) {\n    /**\n     * Specifies the type of `Unknown`.\n     * @private\n     */\n    FontEncoding[FontEncoding[\"Unknown\"] = 0] = \"Unknown\";\n    /**\n     * Specifies the type of `StandardEncoding`.\n     * @private\n     */\n    FontEncoding[FontEncoding[\"StandardEncoding\"] = 1] = \"StandardEncoding\";\n    /**\n     * Specifies the type of `MacRomanEncoding`.\n     * @private\n     */\n    FontEncoding[FontEncoding[\"MacRomanEncoding\"] = 2] = \"MacRomanEncoding\";\n    /**\n     * Specifies the type of `MacExpertEncoding`.\n     * @private\n     */\n    FontEncoding[FontEncoding[\"MacExpertEncoding\"] = 3] = \"MacExpertEncoding\";\n    /**\n     * Specifies the type of `WinAnsiEncoding`.\n     * @private\n     */\n    FontEncoding[FontEncoding[\"WinAnsiEncoding\"] = 4] = \"WinAnsiEncoding\";\n    /**\n     * Specifies the type of `PdfDocEncoding`.\n     * @private\n     */\n    FontEncoding[FontEncoding[\"PdfDocEncoding\"] = 5] = \"PdfDocEncoding\";\n    /**\n     * Specifies the type of `IdentityH`.\n     * @private\n     */\n    FontEncoding[FontEncoding[\"IdentityH\"] = 6] = \"IdentityH\";\n})(FontEncoding || (FontEncoding = {}));\n/**\n * public Enum for `TtfCmapFormat`.\n * @private\n */\nexport var TtfCmapFormat;\n(function (TtfCmapFormat) {\n    /**\n     * This is the Apple standard character to glyph index mapping table.\n     * @private\n     */\n    TtfCmapFormat[TtfCmapFormat[\"Apple\"] = 0] = \"Apple\";\n    /**\n     * This is the Microsoft standard character to glyph index mapping table.\n     * @private\n     */\n    TtfCmapFormat[TtfCmapFormat[\"Microsoft\"] = 4] = \"Microsoft\";\n    /**\n     * Format 6: Trimmed table mapping.\n     * @private\n     */\n    TtfCmapFormat[TtfCmapFormat[\"Trimmed\"] = 6] = \"Trimmed\";\n})(TtfCmapFormat || (TtfCmapFormat = {}));\n/**\n * Enumerator that implements CMAP encodings.\n * @private\n */\nexport var TtfCmapEncoding;\n(function (TtfCmapEncoding) {\n    /**\n     * Unknown encoding.\n     * @private\n     */\n    TtfCmapEncoding[TtfCmapEncoding[\"Unknown\"] = 0] = \"Unknown\";\n    /**\n     * When building a symbol font for Windows.\n     * @private\n     */\n    TtfCmapEncoding[TtfCmapEncoding[\"Symbol\"] = 1] = \"Symbol\";\n    /**\n     * When building a Unicode font for Windows.\n     * @private\n     */\n    TtfCmapEncoding[TtfCmapEncoding[\"Unicode\"] = 2] = \"Unicode\";\n    /**\n     * For font that will be used on a Macintosh.\n     * @private\n     */\n    TtfCmapEncoding[TtfCmapEncoding[\"Macintosh\"] = 3] = \"Macintosh\";\n})(TtfCmapEncoding || (TtfCmapEncoding = {}));\n/**\n * Ttf platform ID.\n * @private\n */\nexport var TtfPlatformID;\n(function (TtfPlatformID) {\n    /**\n     * Apple platform.\n     * @private\n     */\n    TtfPlatformID[TtfPlatformID[\"AppleUnicode\"] = 0] = \"AppleUnicode\";\n    /**\n     * Macintosh platform.\n     * @private\n     */\n    TtfPlatformID[TtfPlatformID[\"Macintosh\"] = 1] = \"Macintosh\";\n    /**\n     * Iso platform.\n     * @private\n     */\n    TtfPlatformID[TtfPlatformID[\"Iso\"] = 2] = \"Iso\";\n    /**\n     * Microsoft platform.\n     * @private\n     */\n    TtfPlatformID[TtfPlatformID[\"Microsoft\"] = 3] = \"Microsoft\";\n})(TtfPlatformID || (TtfPlatformID = {}));\n/**\n * Microsoft encoding ID.\n * @private\n */\nexport var TtfMicrosoftEncodingID;\n(function (TtfMicrosoftEncodingID) {\n    /**\n     * Undefined encoding.\n     * @private\n     */\n    TtfMicrosoftEncodingID[TtfMicrosoftEncodingID[\"Undefined\"] = 0] = \"Undefined\";\n    /**\n     * Unicode encoding.\n     * @private\n     */\n    TtfMicrosoftEncodingID[TtfMicrosoftEncodingID[\"Unicode\"] = 1] = \"Unicode\";\n})(TtfMicrosoftEncodingID || (TtfMicrosoftEncodingID = {}));\n/**\n * Macintosh encoding ID.\n * @private\n */\nexport var TtfMacintoshEncodingID;\n(function (TtfMacintoshEncodingID) {\n    /**\n     * Roman encoding.\n     * @private\n     */\n    TtfMacintoshEncodingID[TtfMacintoshEncodingID[\"Roman\"] = 0] = \"Roman\";\n    /**\n     * Japanese encoding.\n     * @private\n     */\n    TtfMacintoshEncodingID[TtfMacintoshEncodingID[\"Japanese\"] = 1] = \"Japanese\";\n    /**\n     * Chinese encoding.\n     * @private\n     */\n    TtfMacintoshEncodingID[TtfMacintoshEncodingID[\"Chinese\"] = 2] = \"Chinese\";\n})(TtfMacintoshEncodingID || (TtfMacintoshEncodingID = {}));\n/**\n * Enumerator that implements font descriptor flags.\n * @private\n */\nexport var FontDescriptorFlags;\n(function (FontDescriptorFlags) {\n    /**\n     * All glyphs have the same width (as opposed to proportional or variable-pitch fonts, which have different widths).\n     * @private\n     */\n    FontDescriptorFlags[FontDescriptorFlags[\"FixedPitch\"] = 1] = \"FixedPitch\";\n    /**\n     * Glyphs have serifs, which are short strokes drawn at an angle on the top and\n     * bottom of glyph stems (as opposed to sans serif fonts, which do not).\n     * @private\n     */\n    FontDescriptorFlags[FontDescriptorFlags[\"Serif\"] = 2] = \"Serif\";\n    /**\n     * Font contains glyphs outside the Adobe standard Latin character set. The\n     * flag and the nonsymbolic flag cannot both be set or both be clear.\n     * @private\n     */\n    FontDescriptorFlags[FontDescriptorFlags[\"Symbolic\"] = 4] = \"Symbolic\";\n    /**\n     * Glyphs resemble cursive handwriting.\n     * @private\n     */\n    FontDescriptorFlags[FontDescriptorFlags[\"Script\"] = 8] = \"Script\";\n    /**\n     * Font uses the Adobe standard Latin character set or a subset of it.\n     * @private\n     */\n    FontDescriptorFlags[FontDescriptorFlags[\"Nonsymbolic\"] = 32] = \"Nonsymbolic\";\n    /**\n     * Glyphs have dominant vertical strokes that are slanted.\n     * @private\n     */\n    FontDescriptorFlags[FontDescriptorFlags[\"Italic\"] = 64] = \"Italic\";\n    /**\n     * Bold font.\n     * @private\n     */\n    FontDescriptorFlags[FontDescriptorFlags[\"ForceBold\"] = 262144] = \"ForceBold\";\n})(FontDescriptorFlags || (FontDescriptorFlags = {}));\n/**\n * true type font composite glyph flags.\n * @private\n */\nexport var TtfCompositeGlyphFlags;\n(function (TtfCompositeGlyphFlags) {\n    /**\n     * The Arg1And2AreWords.\n     * @private\n     */\n    TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"Arg1And2AreWords\"] = 1] = \"Arg1And2AreWords\";\n    /**\n     * The ArgsAreXyValues.\n     * @private\n     */\n    TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"ArgsAreXyValues\"] = 2] = \"ArgsAreXyValues\";\n    /**\n     * The RoundXyToGrid.\n     * @private\n     */\n    TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"RoundXyToGrid\"] = 4] = \"RoundXyToGrid\";\n    /**\n     * The WeHaveScale.\n     * @private\n     */\n    TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"WeHaveScale\"] = 8] = \"WeHaveScale\";\n    /**\n     * The Reserved.\n     * @private\n     */\n    TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"Reserved\"] = 16] = \"Reserved\";\n    /**\n     * The MoreComponents.\n     * @private\n     */\n    TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"MoreComponents\"] = 32] = \"MoreComponents\";\n    /**\n     * The WeHaveAnXyScale.\n     * @private\n     */\n    TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"WeHaveAnXyScale\"] = 64] = \"WeHaveAnXyScale\";\n    /**\n     * The WeHaveTwoByTwo\n     */\n    TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"WeHaveTwoByTwo\"] = 128] = \"WeHaveTwoByTwo\";\n    /**\n     * The WeHaveInstructions.\n     */\n    TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"WeHaveInstructions\"] = 256] = \"WeHaveInstructions\";\n    /**\n     * The UseMyMetrics.\n     */\n    TtfCompositeGlyphFlags[TtfCompositeGlyphFlags[\"UseMyMetrics\"] = 512] = \"UseMyMetrics\";\n})(TtfCompositeGlyphFlags || (TtfCompositeGlyphFlags = {}));\n","/**\n * ElementLayouter.ts class for EJ2-PDF\n */\nimport { RectangleF } from './../../../drawing/pdf-drawing';\n/**\n * Base class for `elements lay outing`.\n * @private\n */\nvar ElementLayouter = /** @class */ (function () {\n    // Constructor\n    /**\n     * Initializes a new instance of the `ElementLayouter` class.\n     * @private\n     */\n    function ElementLayouter(element) {\n        this.layoutElement = element;\n    }\n    Object.defineProperty(ElementLayouter.prototype, \"elements\", {\n        // Properties\n        /**\n         * Gets the `element`.\n         * @private\n         */\n        get: function () {\n            return this.layoutElement;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets the `element`.\n     * @private\n     */\n    ElementLayouter.prototype.getElement = function () {\n        return this.layoutElement;\n    };\n    // Implementation\n    /**\n     * `Layouts` the element.\n     * @private\n     */\n    ElementLayouter.prototype.layout = function (param) {\n        return this.layoutInternal(param);\n    };\n    ElementLayouter.prototype.Layouter = function (param) {\n        return this.layoutInternal(param);\n    };\n    /**\n     * Returns the `next page`.\n     * @private\n     */\n    ElementLayouter.prototype.getNextPage = function (currentPage) {\n        var section = currentPage.section;\n        var nextPage = section.add();\n        return nextPage;\n    };\n    return ElementLayouter;\n}());\nexport { ElementLayouter };\nvar PdfLayoutFormat = /** @class */ (function () {\n    function PdfLayoutFormat(baseFormat) {\n        if (typeof baseFormat === 'undefined') {\n            //\n        }\n        else {\n            this.break = baseFormat.break;\n            this.layout = baseFormat.layout;\n            this.paginateBounds = baseFormat.paginateBounds;\n            this.boundsSet = baseFormat.usePaginateBounds;\n        }\n    }\n    Object.defineProperty(PdfLayoutFormat.prototype, \"layout\", {\n        // Properties\n        /**\n         * Gets or sets `layout` type of the element.\n         * @private\n         */\n        get: function () {\n            // if (typeof this.layoutType === 'undefined' || this.layoutType == null) {\n            //      this.layoutType = PdfLayoutType.Paginate;\n            // }\n            return this.layoutType;\n        },\n        set: function (value) {\n            this.layoutType = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfLayoutFormat.prototype, \"break\", {\n        /**\n         * Gets or sets `break` type of the element.\n         * @private\n         */\n        get: function () {\n            // if (typeof this.breakType === 'undefined' || this.boundsSet == null) {\n            //      this.breakType = PdfLayoutBreakType.FitPage;\n            // }\n            return this.breakType;\n        },\n        set: function (value) {\n            this.breakType = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfLayoutFormat.prototype, \"paginateBounds\", {\n        /**\n         * Gets or sets the `bounds` on the next page.\n         * @private\n         */\n        get: function () {\n            if (typeof this.layoutPaginateBounds === 'undefined' && this.layoutPaginateBounds == null) {\n                this.layoutPaginateBounds = new RectangleF(0, 0, 0, 0);\n            }\n            return this.layoutPaginateBounds;\n        },\n        set: function (value) {\n            this.layoutPaginateBounds = value;\n            this.boundsSet = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfLayoutFormat.prototype, \"usePaginateBounds\", {\n        /**\n         * Gets a value indicating whether [`use paginate bounds`].\n         * @private\n         */\n        get: function () {\n            // if (typeof this.boundsSet === 'undefined' || this.boundsSet == null) {\n            //      this.boundsSet = false;\n            // }\n            return this.boundsSet;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfLayoutFormat;\n}());\nexport { PdfLayoutFormat };\nvar PdfLayoutParams = /** @class */ (function () {\n    function PdfLayoutParams() {\n    }\n    Object.defineProperty(PdfLayoutParams.prototype, \"page\", {\n        // Properties\n        /**\n         * Gets or sets the layout `page` for the element.\n         * @private\n         */\n        get: function () {\n            return this.pdfPage;\n        },\n        set: function (value) {\n            this.pdfPage = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfLayoutParams.prototype, \"bounds\", {\n        /**\n         * Gets or sets layout `bounds` for the element.\n         * @private\n         */\n        get: function () {\n            return new RectangleF(this.layoutBounds.x, this.layoutBounds.y, this.layoutBounds.width, this.layoutBounds.height);\n        },\n        set: function (value) {\n            this.layoutBounds = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfLayoutParams.prototype, \"format\", {\n        /**\n         * Gets or sets `layout settings` for the element.\n         * @private\n         */\n        get: function () {\n            return this.layoutFormat;\n        },\n        set: function (value) {\n            this.layoutFormat = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfLayoutParams;\n}());\nexport { PdfLayoutParams };\nvar PdfLayoutResult = /** @class */ (function () {\n    // Constructors\n    /**\n     * Initializes the new instance of `PdfLayoutResult` class.\n     * @private\n     */\n    function PdfLayoutResult(page, bounds) {\n        this.pdfPage = page;\n        this.layoutBounds = bounds;\n    }\n    Object.defineProperty(PdfLayoutResult.prototype, \"page\", {\n        // Properties\n        /**\n         * Gets the last `page` where the element was drawn.\n         * @private\n         */\n        get: function () {\n            return this.pdfPage;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfLayoutResult.prototype, \"bounds\", {\n        /**\n         * Gets the `bounds` of the element on the last page where it was drawn.\n         * @private\n         */\n        get: function () {\n            return this.layoutBounds;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfLayoutResult;\n}());\nexport { PdfLayoutResult };\n","import { PdfColorSpace } from './enum';\nimport { Operators } from './../input-output/pdf-operators';\nimport { Dictionary } from './../collections/dictionary';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PdfArray } from './../primitives/pdf-array';\n/**\n * Implements structures and routines working with `color`.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * // set the font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * //\n * // set color\n * let brushColor : PdfColor = new PdfColor(0, 0, 0);\n * //\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(brushColor);\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n * @default black color\n */\nvar PdfColor = /** @class */ (function () {\n    function PdfColor(color1, color2, color3, color4) {\n        if (color1 instanceof PdfColor) {\n            this.redColor = color1.r;\n            this.greenColor = color1.g;\n            this.blueColor = color1.b;\n            this.grayColor = color1.gray;\n            this.alpha = color1.alpha;\n            this.filled = (this.alpha !== 0);\n        }\n        else if (typeof color1 === 'number' && typeof color2 === 'number' && typeof color3 === 'number' &&\n            typeof color4 === 'undefined') {\n            this.constructor(PdfColor.maxColourChannelValue, color1, color2, color3); //doubt-byte/float\n        }\n        else if (typeof color1 === 'number' && typeof color2 === 'number' && typeof color3 === 'number' && typeof color4 === 'number') {\n            this.redColor = color2;\n            this.cyanColor = 0;\n            this.greenColor = color3;\n            this.magentaColor = 0;\n            this.blueColor = color4;\n            this.yellowColor = 0;\n            this.blackColor = 0;\n            this.grayColor = 0;\n            this.alpha = color1;\n            this.filled = true;\n            this.assignCMYK(color2, color3, color4);\n        }\n    }\n    /**\n     * `Calculate and assign` cyan, megenta, yellow colors from rgb values..\n     * @private\n     */\n    PdfColor.prototype.assignCMYK = function (r, g, b) {\n        var red = r / PdfColor.maxColourChannelValue;\n        var green = g / PdfColor.maxColourChannelValue;\n        var blue = b / PdfColor.maxColourChannelValue;\n        var black = PdfNumber.min(1 - red, 1 - green, 1 - blue);\n        var cyan = (black === 1.0) ? 0 : (1 - red - black) / (1 - black);\n        var magenta = (black === 1.0) ? 0 : (1 - green - black) / (1 - black);\n        var yellow = (black === 1.0) ? 0 : (1 - blue - black) / (1 - black);\n        this.blackColor = black;\n        this.cyanColor = cyan;\n        this.magentaColor = magenta;\n        this.yellowColor = yellow;\n    };\n    Object.defineProperty(PdfColor.prototype, \"r\", {\n        //Properties\n        // public static get Empty():PdfColor\n        // {\n        //     return this.s_emptyColor\n        // }\n        /**\n         * Gets or sets `Red` channel value.\n         * @private\n         */\n        get: function () {\n            return this.redColor;\n        },\n        set: function (value) {\n            this.redColor = value;\n            this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n            this.filled = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"red\", {\n        /**\n         * Gets the `Red` color\n         * @private\n         */\n        get: function () {\n            return (this.r / PdfColor.maxColourChannelValue);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"b\", {\n        /**\n         * Gets or sets `Blue` channel value.\n         * @private\n         */\n        get: function () {\n            return this.blueColor;\n        },\n        set: function (value) {\n            this.blueColor = value;\n            this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n            this.filled = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"blue\", {\n        /**\n         * Gets the `blue` color.\n         * @private\n         */\n        get: function () {\n            return (this.b / PdfColor.maxColourChannelValue);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"g\", {\n        /**\n         *  Gets or sets `Green` channel value.\n         * @private\n         */\n        get: function () {\n            return this.greenColor;\n        },\n        set: function (value) {\n            this.greenColor = value;\n            this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n            this.filled = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"green\", {\n        /**\n         * Gets the `Green` color.\n         * @private\n         */\n        get: function () {\n            return (this.g / PdfColor.maxColourChannelValue);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"gray\", {\n        /**\n         * Gets or sets `Gray` channel value.\n         * @private\n         */\n        get: function () {\n            return ((((this.redColor + this.greenColor) + this.blueColor)) / (PdfColor.maxColourChannelValue * 3));\n        },\n        set: function (value) {\n            if (value < 0) {\n                this.grayColor = 0;\n            }\n            else if (value > 1) {\n                this.grayColor = 1;\n            }\n            else {\n                this.grayColor = value;\n            }\n            this.r = (this.grayColor * PdfColor.maxColourChannelValue);\n            this.g = (this.grayColor * PdfColor.maxColourChannelValue);\n            this.b = (this.grayColor * PdfColor.maxColourChannelValue);\n            this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n            this.filled = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"isEmpty\", {\n        /**\n         * Gets whether the PDFColor `is Empty` or not.\n         * @private\n         */\n        get: function () {\n            return !this.filled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfColor.prototype, \"a\", {\n        /**\n         * Gets or sets `Alpha` channel value.\n         * @private\n         */\n        get: function () {\n            return this.alpha;\n        },\n        set: function (value) {\n            if (value < 0) {\n                this.alpha = 0;\n            }\n            else {\n                // if (this.alpha !== value) {\n                this.alpha = value;\n                // }\n            }\n            this.filled = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Public methods\n    /**\n     * Converts `PDFColor to PDF string` representation.\n     * @private\n     */\n    PdfColor.prototype.toString = function (colorSpace, stroke) {\n        if (this.isEmpty) {\n            return '';\n        }\n        return this.rgbToString(stroke);\n    };\n    /**\n     * Sets `RGB` color.\n     * @private\n     */\n    PdfColor.prototype.rgbToString = function (ifStroking) {\n        var r = this.r;\n        var g = this.g;\n        var b = this.b;\n        var key = (r << 16) + (g << 8) + b;\n        if (ifStroking) {\n            key += 1 << 24;\n        }\n        var colour = '';\n        var obj = null;\n        if (PdfColor.rgbStrings.containsKey(key)) {\n            obj = PdfColor.rgbStrings.getValue(key);\n        }\n        if (obj == null) {\n            var red = r / PdfColor.maxColourChannelValue;\n            var green = g / PdfColor.maxColourChannelValue;\n            var blue = b / PdfColor.maxColourChannelValue;\n            if (ifStroking) {\n                colour = red.toString() + ' ' + green.toString() + ' ' + blue.toString() + ' RG';\n            }\n            else {\n                colour = red.toString() + ' ' + green.toString() + ' ' + blue.toString() + ' rg';\n            }\n            PdfColor.rgbStrings.setValue(key, colour);\n        }\n        else {\n            colour = obj.toString();\n        }\n        return colour + Operators.newLine;\n    };\n    /**\n     * Converts `colour to a PDF array`.\n     * @private\n     */\n    PdfColor.prototype.toArray = function (colorSpace) {\n        var array = new PdfArray();\n        switch (colorSpace) {\n            case PdfColorSpace.Rgb:\n                array.add(new PdfNumber(this.red));\n                array.add(new PdfNumber(this.green));\n                array.add(new PdfNumber(this.blue));\n                break;\n            default:\n                throw new Error('NotSupportedException : Unsupported colour space.');\n        }\n        return array;\n    };\n    //Fields\n    /**\n     * Holds `RGB colors` converted into strings.\n     * @private\n     */\n    PdfColor.rgbStrings = new Dictionary();\n    /**\n     * Holds Gray scale colors converted into strings for `stroking`.\n     * @private\n     */\n    PdfColor.grayStringsSroke = new Dictionary();\n    /**\n     * Holds Gray scale colors converted into strings for `filling`.\n     * @private\n     */\n    PdfColor.grayStringsFill = new Dictionary();\n    /**\n     * `Max value` of color channel.\n     * @private\n     */\n    PdfColor.maxColourChannelValue = 255.0;\n    return PdfColor;\n}());\nexport { PdfColor };\n","/**\n * PdfBorders.ts class for EJ2-PDF\n */\nimport { PdfPen } from './../../../graphics/pdf-pen';\nimport { PdfDashStyle } from './../../../graphics/enum';\nimport { PdfColor } from './../../../graphics/pdf-color';\n/**\n * `PdfBorders` class used represents the cell border of the PDF grid.\n */\nvar PdfBorders = /** @class */ (function () {\n    // Constructor\n    /**\n     * Create a new instance for `PdfBorders` class.\n     * @private\n     */\n    function PdfBorders() {\n        var defaultBorderPenLeft = new PdfPen(new PdfColor(0, 0, 0));\n        defaultBorderPenLeft.dashStyle = PdfDashStyle.Solid;\n        var defaultBorderPenRight = new PdfPen(new PdfColor(0, 0, 0));\n        defaultBorderPenRight.dashStyle = PdfDashStyle.Solid;\n        var defaultBorderPenTop = new PdfPen(new PdfColor(0, 0, 0));\n        defaultBorderPenTop.dashStyle = PdfDashStyle.Solid;\n        var defaultBorderPenBottom = new PdfPen(new PdfColor(0, 0, 0));\n        defaultBorderPenBottom.dashStyle = PdfDashStyle.Solid;\n        this.leftPen = defaultBorderPenLeft;\n        this.rightPen = defaultBorderPenRight;\n        this.topPen = defaultBorderPenTop;\n        this.bottomPen = defaultBorderPenBottom;\n    }\n    Object.defineProperty(PdfBorders.prototype, \"left\", {\n        // Properties\n        /**\n         * Gets or sets the `Left`.\n         * @private\n         */\n        get: function () {\n            return this.leftPen;\n        },\n        set: function (value) {\n            this.leftPen = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfBorders.prototype, \"right\", {\n        /**\n         * Gets or sets the `Right`.\n         * @private\n         */\n        get: function () {\n            return this.rightPen;\n        },\n        set: function (value) {\n            this.rightPen = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfBorders.prototype, \"top\", {\n        /**\n         * Gets or sets the `Top`.\n         * @private\n         */\n        get: function () {\n            return this.topPen;\n        },\n        set: function (value) {\n            this.topPen = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfBorders.prototype, \"bottom\", {\n        /**\n         * Gets or sets the `Bottom`.\n         * @private\n         */\n        get: function () {\n            return this.bottomPen;\n        },\n        set: function (value) {\n            this.bottomPen = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfBorders.prototype, \"all\", {\n        /**\n         * sets the `All`.\n         * @private\n         */\n        set: function (value) {\n            this.leftPen = this.rightPen = this.topPen = this.bottomPen = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfBorders.prototype, \"isAll\", {\n        /**\n         * Gets a value indicating whether this instance `is all`.\n         * @private\n         */\n        get: function () {\n            return ((this.leftPen === this.rightPen) && (this.leftPen === this.topPen) && (this.leftPen === this.bottomPen));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfBorders, \"default\", {\n        /**\n         * Gets the `default`.\n         * @private\n         */\n        get: function () {\n            return new PdfBorders();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfBorders;\n}());\nexport { PdfBorders };\nvar PdfPaddings = /** @class */ (function () {\n    function PdfPaddings(left, right, top, bottom) {\n        /**\n         * The 'left' border padding set.\n         * @private\n         */\n        this.hasLeftPad = false;\n        /**\n         * The 'right' border padding set.\n         * @private\n         */\n        this.hasRightPad = false;\n        /**\n         * The 'top' border padding set.\n         * @private\n         */\n        this.hasTopPad = false;\n        /**\n         * The 'bottom' border padding set.\n         * @private\n         */\n        this.hasBottomPad = false;\n        if (typeof left === 'undefined') {\n            //5.76 and 0 are taken from ms-word default table margins.\n            this.leftPad = this.rightPad = 5.76;\n            //0.5 is set for top and bottom by default.\n            this.bottomPad = this.topPad = 0.5;\n        }\n        else {\n            this.leftPad = left;\n            this.rightPad = right;\n            this.topPad = top;\n            this.bottomPad = bottom;\n            this.hasLeftPad = true;\n            this.hasRightPad = true;\n            this.hasTopPad = true;\n            this.hasBottomPad = true;\n        }\n    }\n    Object.defineProperty(PdfPaddings.prototype, \"left\", {\n        // Properties\n        /**\n         * Gets or sets the `left` value of the edge\n         * @private\n         */\n        get: function () {\n            return this.leftPad;\n        },\n        set: function (value) {\n            this.leftPad = value;\n            this.hasLeftPad = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPaddings.prototype, \"right\", {\n        /**\n         * Gets or sets the `right` value of the edge.\n         * @private\n         */\n        get: function () {\n            return this.rightPad;\n        },\n        set: function (value) {\n            this.rightPad = value;\n            this.hasRightPad = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPaddings.prototype, \"top\", {\n        /**\n         * Gets or sets the `top` value of the edge\n         * @private\n         */\n        get: function () {\n            return this.topPad;\n        },\n        set: function (value) {\n            this.topPad = value;\n            this.hasTopPad = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPaddings.prototype, \"bottom\", {\n        /**\n         * Gets or sets the `bottom` value of the edge.\n         * @private\n         */\n        get: function () {\n            return this.bottomPad;\n        },\n        set: function (value) {\n            this.bottomPad = value;\n            this.hasBottomPad = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPaddings.prototype, \"all\", {\n        /**\n         * Sets value to all sides `left,right,top and bottom`.s\n         * @private\n         */\n        set: function (value) {\n            this.leftPad = this.rightPad = this.topPad = this.bottomPad = value;\n            this.hasLeftPad = true;\n            this.hasRightPad = true;\n            this.hasTopPad = true;\n            this.hasBottomPad = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfPaddings;\n}());\nexport { PdfPaddings };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { selectAll, select, createElement, Base } from '@syncfusion/ej2-base';\nimport { extend, isNullOrUndefined, EventHandler } from '@syncfusion/ej2-base';\nimport { Property, NotifyPropertyChanges, Event, onIntlChange } from '@syncfusion/ej2-base';\nimport { L10n } from '@syncfusion/ej2-base';\n/**\n * global declarations\n */\n// tslint:disable-next-line:no-any\nexport var regex = {\n    EMAIL: new RegExp('^[A-Za-z0-9._%+-]{1,}@[A-Za-z0-9._%+-]{1,}([.]{1}[a-zA-Z0-9]{2,5}' +\n        '|[.]{1}[a-zA-Z0-9]{2,4}[.]{1}[a-zA-Z0-9]{2,4})$'),\n    URL: /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/m,\n    DATE_ISO: new RegExp('^([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$'),\n    DIGITS: new RegExp('^[0-9]*$'),\n    PHONE: new RegExp('^[+]?[0-9]{9,13}$'),\n    CREDITCARD: new RegExp('^\\\\d{13,16}$')\n};\n/**\n * ErrorOption values\n * @private\n */\nexport var ErrorOption;\n(function (ErrorOption) {\n    ErrorOption[ErrorOption[\"Message\"] = 0] = \"Message\";\n    ErrorOption[ErrorOption[\"Label\"] = 1] = \"Label\";\n})(ErrorOption || (ErrorOption = {}));\n/**\n * FormValidator class enables you to validate the form fields based on your defined rules\n * ```html\n * <form id='formId'>\n *  <input type='text' name='Name' />\n *  <input type='text' name='Age' />\n * </form>\n * <script>\n *   let formObject = new FormValidator('#formId', {\n *      rules: { Name: { required: true }, Age: { range: [18, 30] } };\n *   });\n *   formObject.validate();\n * </script>\n * ```\n */\nvar FormValidator = /** @class */ (function (_super) {\n    __extends(FormValidator, _super);\n    // Initializes the FormValidator \n    function FormValidator(element, options) {\n        var _this = _super.call(this, options, element) || this;\n        _this.validated = [];\n        _this.errorRules = [];\n        _this.allowSubmit = false;\n        _this.required = 'required';\n        _this.infoElement = null;\n        _this.inputElement = null;\n        _this.selectQuery = 'input:not([type=reset]):not([type=button]), select, textarea';\n        // tslint:disable-next-line:no-any\n        _this.localyMessage = {};\n        /**\n         * Specifies the default messages for validation rules.\n         * @default : { List of validation message };\n         */\n        _this.defaultMessages = {\n            required: 'This field is required.',\n            email: 'Please enter a valid email address.',\n            url: 'Please enter a valid URL.',\n            date: 'Please enter a valid date.',\n            dateIso: 'Please enter a valid date ( ISO ).',\n            creditcard: 'Please enter valid card number',\n            number: 'Please enter a valid number.',\n            digits: 'Please enter only digits.',\n            maxLength: 'Please enter no more than {0} characters.',\n            minLength: 'Please enter at least {0} characters.',\n            rangeLength: 'Please enter a value between {0} and {1} characters long.',\n            range: 'Please enter a value between {0} and {1}.',\n            max: 'Please enter a value less than or equal to {0}.',\n            min: 'Please enter a value greater than or equal to {0}.',\n            regex: 'Please enter a correct value.',\n            tel: 'Please enter a valid phone number.',\n            pattern: 'Please enter a correct pattern value.',\n            equalTo: 'Please enter the valid match text',\n        };\n        if (typeof _this.rules === 'undefined') {\n            _this.rules = {};\n        }\n        _this.l10n = new L10n('formValidator', _this.defaultMessages, _this.locale);\n        if (_this.locale) {\n            _this.localeFunc();\n        }\n        onIntlChange.on('notifyExternalChange', _this.afterLocalization, _this);\n        element = typeof element === 'string' ? select(element, document) : element;\n        // Set novalidate to prevent default HTML5 form validation\n        if (_this.element != null) {\n            _this.element.setAttribute('novalidate', '');\n            _this.inputElements = selectAll(_this.selectQuery, _this.element);\n            _this.createHTML5Rules();\n            _this.wireEvents();\n        }\n        else {\n            return undefined;\n        }\n        return _this;\n    }\n    FormValidator_1 = FormValidator;\n    // tslint:enable\n    /**\n     * Add validation rules to the corresponding input element based on `name` attribute.\n     * @param {string} name `name` of form field.\n     * @param {Object} rules Validation rules for the corresponding element.\n     * @return {void}\n     */\n    FormValidator.prototype.addRules = function (name, rules) {\n        if (name) {\n            if (this.rules.hasOwnProperty(name)) {\n                extend(this.rules[name], rules, {});\n            }\n            else {\n                this.rules[name] = rules;\n            }\n        }\n    };\n    /**\n     * Remove validation to the corresponding field based on name attribute.\n     * When no parameter is passed, remove all the validations in the form.\n     * @param {string} name Input name attribute value.\n     * @param {string[]} rules List of validation rules need to be remove from the corresponding element.\n     * @return {void}\n     */\n    FormValidator.prototype.removeRules = function (name, rules) {\n        if (!name && !rules) {\n            this.rules = {};\n        }\n        else if (this.rules[name] && !rules) {\n            delete this.rules[name];\n        }\n        else if (!isNullOrUndefined(this.rules[name] && rules)) {\n            for (var i = 0; i < rules.length; i++) {\n                delete this.rules[name][rules[i]];\n            }\n        }\n        else {\n            return;\n        }\n    };\n    /**\n     * Validate the current form values using defined rules.\n     * Returns `true` when the form is valid otherwise `false`\n     * @param {string} selected - Optional parameter to validate specified element.\n     * @return {boolean}\n     */\n    FormValidator.prototype.validate = function (selected) {\n        var rules = Object.keys(this.rules);\n        if (selected && rules.length) {\n            this.validateRules(selected);\n            //filter the selected element it don't have any valid input element\n            return rules.indexOf(selected) !== -1 && this.errorRules.filter(function (data) {\n                return data.name === selected;\n            }).length === 0;\n        }\n        else {\n            this.errorRules = [];\n            for (var _i = 0, rules_1 = rules; _i < rules_1.length; _i++) {\n                var name_1 = rules_1[_i];\n                this.validateRules(name_1);\n            }\n            return this.errorRules.length === 0;\n        }\n    };\n    /**\n     * Reset the value of all the fields in form.\n     * @return {void}\n     */\n    FormValidator.prototype.reset = function () {\n        this.element.reset();\n        this.clearForm();\n    };\n    /**\n     * Get input element by name.\n     * @param {string} name - Input element name attribute value.\n     * @return {HTMLInputElement}\n     */\n    FormValidator.prototype.getInputElement = function (name) {\n        this.inputElement = (select('[name=\"' + name + '\"]', this.element));\n        return this.inputElement;\n    };\n    /**\n     * Destroy the form validator object and error elements.\n     * @return {void}\n     */\n    FormValidator.prototype.destroy = function () {\n        this.reset();\n        this.unwireEvents();\n        this.rules = {};\n        var elements = selectAll('.' + this.errorClass + ', .' + this.validClass, this.element);\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var element = elements_1[_i];\n            element.remove();\n        }\n        _super.prototype.destroy.call(this);\n        onIntlChange.off('notifyExternalChange', this.afterLocalization);\n    };\n    /**\n     * @private\n     */\n    FormValidator.prototype.onPropertyChanged = function (newProp, oldProp) {\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'locale':\n                    this.localeFunc();\n                    break;\n            }\n        }\n    };\n    ;\n    /**\n     * @private\n     */\n    FormValidator.prototype.localeFunc = function () {\n        for (var _i = 0, _a = Object.keys(this.defaultMessages); _i < _a.length; _i++) {\n            var key = _a[_i];\n            this.l10n.setLocale(this.locale);\n            var value = this.l10n.getConstant(key);\n            this.localyMessage[key] = value;\n        }\n    };\n    /**\n     * @private\n     */\n    FormValidator.prototype.getModuleName = function () {\n        return 'formValidator';\n    };\n    /**\n     * @private\n     */\n    // tslint:disable-next-line:no-any\n    FormValidator.prototype.afterLocalization = function (args) {\n        this.locale = args.locale;\n        this.localeFunc();\n    };\n    FormValidator.prototype.clearForm = function () {\n        this.errorRules = [];\n        this.validated = [];\n        var elements = selectAll(this.selectQuery, this.element);\n        for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {\n            var element = elements_2[_i];\n            var input = element;\n            input.removeAttribute('aria-invalid');\n            input.classList.remove(this.errorClass);\n            if (input.name.length > 0) {\n                this.getInputElement(input.name);\n                this.getErrorElement(input.name);\n                this.hideMessage(input.name);\n            }\n            input.classList.remove(this.validClass);\n        }\n    };\n    FormValidator.prototype.createHTML5Rules = function () {\n        var defRules = ['required', 'validateHidden', 'regex', 'rangeLength', 'maxLength', 'minLength', 'dateIso', 'digits',\n            'pattern', 'data-val-required', 'type', 'data-validation', 'min', 'max', 'range', 'equalTo', 'data-val-minlength-min',\n            'data-val-equalto-other', 'data-val-maxlength-max', 'data-val-range-min', 'data-val-regex-pattern', 'data-val-length-max',\n            'data-val-creditcard', 'data-val-phone'];\n        var acceptedTypes = ['hidden', 'email', 'url', 'date', 'number', 'tel'];\n        for (var _i = 0, _a = (this.inputElements); _i < _a.length; _i++) {\n            var input = _a[_i];\n            // Default attribute rules \n            var allRule = {};\n            for (var _b = 0, defRules_1 = defRules; _b < defRules_1.length; _b++) {\n                var rule = defRules_1[_b];\n                if (input.getAttribute(rule) !== null) {\n                    switch (rule) {\n                        case 'required':\n                            this.defRule(input, allRule, rule, input.required);\n                            break;\n                        case 'data-validation':\n                            rule = input.getAttribute(rule);\n                            this.defRule(input, allRule, rule, true);\n                            break;\n                        case 'type':\n                            if (acceptedTypes.indexOf(input.type) !== -1) {\n                                this.defRule(input, allRule, input.type, true);\n                            }\n                            break;\n                        case 'rangeLength':\n                        case 'range':\n                            this.defRule(input, allRule, rule, JSON.parse(input.getAttribute(rule)));\n                            break;\n                        case 'equalTo':\n                            var id = input.getAttribute(rule);\n                            this.defRule(input, allRule, rule, id);\n                            break;\n                        default:\n                            if (input.getAttribute('data-val') === 'true') {\n                                this.annotationRule(input, allRule, rule, input.getAttribute(rule));\n                            }\n                            else {\n                                this.defRule(input, allRule, rule, input.getAttribute(rule));\n                            }\n                    }\n                }\n            }\n            //adding pattern type validation\n            if (Object.keys(allRule).length !== 0) {\n                this.addRules(input.name, allRule);\n            }\n        }\n    };\n    FormValidator.prototype.annotationRule = function (input, ruleCon, ruleName, value) {\n        var annotationRule = ruleName.split('-');\n        var rulesList = ['required', 'creditcard', 'phone', 'maxlength', 'minlength', 'range', 'regex', 'equalto'];\n        var ruleFirstName = annotationRule[annotationRule.length - 1];\n        var ruleSecondName = annotationRule[annotationRule.length - 2];\n        if (rulesList.indexOf(ruleFirstName) !== -1) {\n            switch (ruleFirstName) {\n                case 'required':\n                    this.defRule(input, ruleCon, 'required', value);\n                    break;\n                case 'creditcard':\n                    this.defRule(input, ruleCon, 'creditcard', value);\n                    break;\n                case 'phone':\n                    this.defRule(input, ruleCon, 'tel', value);\n                    break;\n            }\n        }\n        else if (rulesList.indexOf(ruleSecondName) !== -1) {\n            switch (ruleSecondName) {\n                case 'maxlength':\n                    this.defRule(input, ruleCon, 'maxLength', value);\n                    break;\n                case 'minlength':\n                    this.defRule(input, ruleCon, 'minLength', value);\n                    break;\n                case 'range':\n                    var minvalue = input.getAttribute('data-val-range-min');\n                    var maxvalue = input.getAttribute('data-val-range-max');\n                    this.defRule(input, ruleCon, 'range', [minvalue, maxvalue]);\n                    break;\n                case 'equalto':\n                    var id = input.getAttribute(ruleName).split('.');\n                    this.defRule(input, ruleCon, 'equalTo', id[id.length - 1]);\n                    break;\n                case 'regex':\n                    this.defRule(input, ruleCon, 'regex', value);\n                    break;\n            }\n        }\n    };\n    FormValidator.prototype.defRule = function (input, ruleCon, ruleName, value) {\n        var message = input.getAttribute('data-' + ruleName + '-message');\n        var annotationMessage = input.getAttribute('data-val-' + ruleName);\n        var customMessage;\n        if (this.rules[input.name] && ruleName !== 'validateHidden' && ruleName !== 'hidden') {\n            customMessage = this.getErrorMessage(this.rules[input.name][ruleName], ruleName);\n        }\n        if (message) {\n            value = [value, message];\n        }\n        else if (annotationMessage) {\n            value = [value, annotationMessage];\n        }\n        else if (customMessage) {\n            value = [value, customMessage];\n        }\n        ruleCon[ruleName] = value;\n    };\n    // Wire events to the form elements\n    FormValidator.prototype.wireEvents = function () {\n        for (var _i = 0, _a = (this.inputElements); _i < _a.length; _i++) {\n            var input = _a[_i];\n            if (FormValidator_1.isCheckable(input)) {\n                EventHandler.add(input, 'click', this.clickHandler, this);\n            }\n            else if (input.tagName === 'SELECT') {\n                EventHandler.add(input, 'change', this.changeHandler, this);\n            }\n            else {\n                EventHandler.add(input, 'focusout', this.focusOutHandler, this);\n                EventHandler.add(input, 'keyup', this.keyUpHandler, this);\n            }\n        }\n        EventHandler.add(this.element, 'submit', this.submitHandler, this);\n        EventHandler.add(this.element, 'reset', this.resetHandler, this);\n    };\n    // UnWire events to the form elements\n    FormValidator.prototype.unwireEvents = function () {\n        for (var _i = 0, _a = (this.inputElements); _i < _a.length; _i++) {\n            var input = _a[_i];\n            EventHandler.clearEvents(input);\n        }\n        EventHandler.remove(this.element, 'submit', this.submitHandler);\n        EventHandler.remove(this.element, 'reset', this.resetHandler);\n    };\n    // Handle input element focusout event\n    FormValidator.prototype.focusOutHandler = function (e) {\n        this.trigger('focusout', e);\n        //FormValidator.triggerCallback(this.focusout, e);\n        var element = e.target;\n        if (this.rules[element.name]) {\n            if (this.rules[element.name][this.required] || element.value.length > 0) {\n                this.validate(element.name);\n            }\n            else if (this.validated.indexOf(element.name) === -1) {\n                this.validated.push(element.name);\n            }\n        }\n    };\n    // Handle input element keyup event\n    FormValidator.prototype.keyUpHandler = function (e) {\n        this.trigger('keyup', e);\n        var element = e.target;\n        // List of keys need to prevent while validation\n        var excludeKeys = [16, 17, 18, 20, 35, 36, 37, 38, 39, 40, 45, 144, 225];\n        if (e.which === 9 && (!this.rules[element.name] || (this.rules[element.name] && !this.rules[element.name][this.required]))) {\n            return;\n        }\n        if (this.validated.indexOf(element.name) !== -1 && this.rules[element.name] && excludeKeys.indexOf(e.which) === -1) {\n            this.validate(element.name);\n        }\n    };\n    // Handle input click event\n    FormValidator.prototype.clickHandler = function (e) {\n        this.trigger('click', e);\n        var element = e.target;\n        // If element type is not submit allow validation\n        if (element.type !== 'submit') {\n            this.validate(element.name);\n        }\n        else if (element.getAttribute('formnovalidate') !== null) {\n            // Prevent form validation, if submit button has formnovalidate attribute\n            this.allowSubmit = true;\n        }\n    };\n    // Handle input change event\n    FormValidator.prototype.changeHandler = function (e) {\n        this.trigger('change', e);\n        var element = e.target;\n        this.validate(element.name);\n    };\n    // Handle form submit event\n    FormValidator.prototype.submitHandler = function (e) {\n        this.trigger('submit', e);\n        //FormValidator.triggerCallback(this.submit, e);\n        // Prevent form submit if validation failed\n        if (!this.allowSubmit && !this.validate()) {\n            e.preventDefault();\n        }\n        else {\n            this.allowSubmit = false;\n        }\n    };\n    // Handle form reset\n    FormValidator.prototype.resetHandler = function () {\n        this.clearForm();\n    };\n    // Validate each rule based on input element name\n    FormValidator.prototype.validateRules = function (name) {\n        if (!this.rules[name]) {\n            return;\n        }\n        var rules = Object.keys(this.rules[name]);\n        var hiddenType = false;\n        var validateHiddenType = false;\n        var vhPos = rules.indexOf('validateHidden');\n        var hPos = rules.indexOf('hidden');\n        this.getInputElement(name);\n        if (hPos !== -1) {\n            hiddenType = true;\n        }\n        if (vhPos !== -1) {\n            validateHiddenType = true;\n        }\n        if (!hiddenType || (hiddenType && validateHiddenType)) {\n            if (vhPos !== -1) {\n                rules.splice(vhPos, 1);\n            }\n            if (hPos !== -1) {\n                rules.splice((hPos - 1), 1);\n            }\n            this.getErrorElement(name);\n            for (var _i = 0, rules_2 = rules; _i < rules_2.length; _i++) {\n                var rule = rules_2[_i];\n                var errorMessage = this.getErrorMessage(this.rules[name][rule], rule);\n                var errorRule = { name: name, message: errorMessage };\n                var eventArgs = {\n                    inputName: name,\n                    element: this.inputElement,\n                    message: errorMessage\n                };\n                if (!this.isValid(name, rule) && !this.inputElement.classList.contains(this.ignore)) {\n                    this.removeErrorRules(name);\n                    this.errorRules.push(errorRule);\n                    // Set aria attributes to invalid elements\n                    this.inputElement.setAttribute('aria-invalid', 'true');\n                    this.inputElement.setAttribute('aria-describedby', this.inputElement.id + '-info');\n                    this.inputElement.classList.add(this.errorClass);\n                    this.inputElement.classList.remove(this.validClass);\n                    if (!this.infoElement) {\n                        this.createErrorElement(name, errorRule.message, this.inputElement);\n                    }\n                    else {\n                        this.showMessage(errorRule);\n                    }\n                    eventArgs.errorElement = this.infoElement;\n                    eventArgs.status = 'failure';\n                    this.inputElement.classList.add(this.errorClass);\n                    this.inputElement.classList.remove(this.validClass);\n                    this.optionalValidationStatus(name, eventArgs);\n                    this.trigger('validationComplete', eventArgs);\n                    // Set aria-required to required rule elements\n                    if (rule === 'required') {\n                        this.inputElement.setAttribute('aria-required', 'true');\n                    }\n                    break;\n                }\n                else {\n                    this.hideMessage(name);\n                    eventArgs.status = 'success';\n                    this.trigger('validationComplete', eventArgs);\n                }\n            }\n        }\n        else {\n            return;\n        }\n    };\n    // Update the optional validation status\n    FormValidator.prototype.optionalValidationStatus = function (name, refer) {\n        if (!this.rules[name][this.required] && !this.inputElement.value.length) {\n            this.infoElement.innerHTML = this.inputElement.value;\n            this.infoElement.setAttribute('aria-invalid', 'false');\n            refer.status = '';\n            this.hideMessage(name);\n        }\n    };\n    // Check the input element whether it's value satisfy the validation rule or not\n    FormValidator.prototype.isValid = function (name, rule) {\n        var params = this.rules[name][rule];\n        var param = (params instanceof Array && typeof params[1] === 'string') ? params[0] : params;\n        var currentRule = this.rules[name][rule];\n        var args = { value: this.inputElement.value, param: param, element: this.inputElement, formElement: this.element };\n        this.trigger('validationBegin', args);\n        if (currentRule && typeof currentRule[0] === 'function') {\n            var fn = currentRule[0];\n            return fn.call(this, { element: this.inputElement, value: this.inputElement.value });\n        }\n        else if (FormValidator_1.isCheckable(this.inputElement)) {\n            if (rule !== 'required') {\n                return true;\n            }\n            return selectAll('input[name=' + name + ']:checked', this.element).length > 0;\n        }\n        else {\n            return FormValidator_1.checkValidator[rule](args);\n        }\n    };\n    // Return default error message or custom error message \n    FormValidator.prototype.getErrorMessage = function (ruleValue, rule) {\n        var message = this.element[0].getAttribute('data-' + rule + '-message') ?\n            this.element[0].getAttribute('data-' + rule + '-message') :\n            (ruleValue instanceof Array && typeof ruleValue[1] === 'string') ? ruleValue[1] :\n                (Object.keys(this.localyMessage).length !== 0) ? this.localyMessage[rule] : this.defaultMessages[rule];\n        var formats = message.match(/{(\\d)}/g);\n        if (!isNullOrUndefined(formats)) {\n            for (var i = 0; i < formats.length; i++) {\n                var value = ruleValue instanceof Array ? ruleValue[i] : ruleValue;\n                message = message.replace(formats[i], value);\n            }\n        }\n        return message;\n    };\n    // Create error element based on name and error message\n    FormValidator.prototype.createErrorElement = function (name, message, input) {\n        var errorElement = createElement(this.errorElement, {\n            className: this.errorClass,\n            innerHTML: message,\n            attrs: { for: name }\n        });\n        // Create message design if errorOption is message\n        if (this.errorOption === ErrorOption.Message) {\n            errorElement.classList.remove(this.errorClass);\n            errorElement.classList.add('e-message');\n            errorElement = createElement(this.errorContainer, { className: this.errorClass, innerHTML: errorElement.outerHTML });\n        }\n        errorElement.id = this.inputElement.name + '-info';\n        // Append error message into MVC error message element\n        if (this.element.querySelector('[data-valmsg-for=\"' + input.id + '\"]')) {\n            this.element.querySelector('[data-valmsg-for=\"' + input.id + '\"]').appendChild(errorElement);\n        }\n        else if (input.hasAttribute('data-msg-containerid') === true) {\n            // Append error message into custom div element\n            var containerId = input.getAttribute('data-msg-containerid');\n            var divElement = this.element.querySelector('#' + containerId);\n            divElement.appendChild(errorElement);\n        }\n        else if (this.customPlacement != null) {\n            // Call custom placement function if customPlacement is not null\n            this.customPlacement.call(this, this.inputElement, errorElement);\n        }\n        else {\n            this.inputElement.parentNode.insertBefore(errorElement, this.inputElement.nextSibling);\n        }\n        errorElement.style.display = 'block';\n        this.getErrorElement(name);\n        this.validated.push(name);\n        this.checkRequired(name);\n    };\n    // Get error element by name\n    FormValidator.prototype.getErrorElement = function (name) {\n        this.infoElement = select(this.errorElement + '.' + this.errorClass, this.inputElement.parentElement);\n        if (!this.infoElement) {\n            this.infoElement = (select(this.errorElement + '.' + this.errorClass + '[for=\"' + name + '\"]', this.element) ||\n                select(this.errorElement + '.' + this.errorClass + '[for=\"' + name + '\"]'));\n        }\n        return this.infoElement;\n    };\n    // Remove existing rule from errorRules object\n    FormValidator.prototype.removeErrorRules = function (name) {\n        for (var i = 0; i < this.errorRules.length; i++) {\n            var rule = this.errorRules[i];\n            if (rule.name === name) {\n                this.errorRules.splice(i, 1);\n            }\n        }\n    };\n    // Show error message to the input element\n    FormValidator.prototype.showMessage = function (errorRule) {\n        this.infoElement.style.display = 'block';\n        this.infoElement.innerHTML = errorRule.message;\n        this.checkRequired(errorRule.name);\n    };\n    // Hide error message based on input name\n    FormValidator.prototype.hideMessage = function (name) {\n        if (this.infoElement) {\n            this.infoElement.style.display = 'none';\n            this.removeErrorRules(name);\n            this.inputElement.classList.add(this.validClass);\n            this.inputElement.classList.remove(this.errorClass);\n            this.inputElement.setAttribute('aria-invalid', 'false');\n        }\n    };\n    // Check whether the input element have required rule and its value is not empty\n    FormValidator.prototype.checkRequired = function (name) {\n        if (!this.rules[name][this.required] && !this.inputElement.value.length) {\n            this.infoElement.innerHTML = this.inputElement.value;\n            this.infoElement.setAttribute('aria-invalid', 'false');\n            this.hideMessage(name);\n        }\n    };\n    // Return boolean result if the input have chekcable or submit types\n    FormValidator.isCheckable = function (input) {\n        var inputType = input.getAttribute('type');\n        return inputType && (inputType === 'checkbox' || inputType === 'radio' || inputType === 'submit');\n    };\n    var FormValidator_1;\n    // List of function to validate the rules\n    FormValidator.checkValidator = {\n        required: function (option) {\n            return option.value.length > 0;\n        },\n        email: function (option) {\n            return regex.EMAIL.test(option.value);\n        },\n        url: function (option) {\n            return regex.URL.test(option.value);\n        },\n        dateIso: function (option) {\n            return regex.DATE_ISO.test(option.value);\n        },\n        tel: function (option) {\n            return regex.PHONE.test(option.value);\n        },\n        creditcard: function (option) {\n            return regex.CREDITCARD.test(option.value);\n        },\n        number: function (option) {\n            return !isNaN(Number(option.value)) && option.value.indexOf(' ') === -1;\n        },\n        digits: function (option) {\n            return regex.DIGITS.test(option.value);\n        },\n        maxLength: function (option) {\n            return option.value.length <= option.param;\n        },\n        minLength: function (option) {\n            return option.value.length >= option.param;\n        },\n        rangeLength: function (option) {\n            var param = option.param;\n            return option.value.length >= param[0] && option.value.length <= param[1];\n        },\n        range: function (option) {\n            var param = option.param;\n            return !isNaN(Number(option.value)) && Number(option.value) >= param[0] && Number(option.value) <= param[1];\n        },\n        date: function (option) {\n            return !isNaN(new Date(option.value).getTime());\n        },\n        max: function (option) {\n            if (!isNaN(Number(option.value))) {\n                // Maximum rule validation for number\n                return +option.value <= option.param;\n            }\n            // Maximum rule validation for date\n            return new Date(option.value).getTime() <= new Date(JSON.parse(JSON.stringify(option.param))).getTime();\n        },\n        min: function (option) {\n            if (!isNaN(Number(option.value))) {\n                // Minimum rule validation for number\n                return +option.value >= option.param;\n            }\n            else if ((option.value).indexOf(',') !== -1) {\n                var uNum = (option.value).replace(/,/g, '');\n                return parseFloat(uNum) >= option.param;\n            }\n            else {\n                // Minimum rule validation for date\n                return new Date(option.value).getTime() >= new Date(JSON.parse(JSON.stringify(option.param))).getTime();\n            }\n        },\n        regex: function (option) {\n            return new RegExp(option.param).test(option.value);\n        },\n        equalTo: function (option) {\n            var compareTo = option.formElement.querySelector('#' + option.param);\n            option.param = compareTo.value;\n            return option.param === option.value;\n        },\n    };\n    __decorate([\n        Property('')\n    ], FormValidator.prototype, \"locale\", void 0);\n    __decorate([\n        Property('e-hidden')\n    ], FormValidator.prototype, \"ignore\", void 0);\n    __decorate([\n        Property()\n    ], FormValidator.prototype, \"rules\", void 0);\n    __decorate([\n        Property('e-error')\n    ], FormValidator.prototype, \"errorClass\", void 0);\n    __decorate([\n        Property('e-valid')\n    ], FormValidator.prototype, \"validClass\", void 0);\n    __decorate([\n        Property('label')\n    ], FormValidator.prototype, \"errorElement\", void 0);\n    __decorate([\n        Property('div')\n    ], FormValidator.prototype, \"errorContainer\", void 0);\n    __decorate([\n        Property(ErrorOption.Label)\n    ], FormValidator.prototype, \"errorOption\", void 0);\n    __decorate([\n        Event()\n    ], FormValidator.prototype, \"focusout\", void 0);\n    __decorate([\n        Event()\n    ], FormValidator.prototype, \"keyup\", void 0);\n    __decorate([\n        Event()\n    ], FormValidator.prototype, \"click\", void 0);\n    __decorate([\n        Event()\n    ], FormValidator.prototype, \"change\", void 0);\n    __decorate([\n        Event()\n    ], FormValidator.prototype, \"submit\", void 0);\n    __decorate([\n        Event()\n    ], FormValidator.prototype, \"validationBegin\", void 0);\n    __decorate([\n        Event()\n    ], FormValidator.prototype, \"validationComplete\", void 0);\n    __decorate([\n        Event()\n    ], FormValidator.prototype, \"customPlacement\", void 0);\n    FormValidator = FormValidator_1 = __decorate([\n        NotifyPropertyChanges\n    ], FormValidator);\n    return FormValidator;\n}(Base));\nexport { FormValidator };\n","import { isNullOrUndefined, addClass, extend, closest } from '@syncfusion/ej2-base';\nimport * as events from '../base/constant';\nimport { appendChildren } from '../base/util';\n/**\n * Edit render module is used to render grid edit row.\n * @hidden\n */\nvar InlineEditRender = /** @class */ (function () {\n    /**\n     * Constructor for render module\n     */\n    function InlineEditRender(parent) {\n        this.parent = parent;\n    }\n    InlineEditRender.prototype.addNew = function (elements, args) {\n        this.isEdit = false;\n        var mTbody;\n        var tbody;\n        if (this.parent.frozenRows) {\n            tbody = this.parent.getHeaderContent().querySelector('tbody');\n        }\n        else {\n            tbody = this.parent.getContentTable().querySelector('tbody');\n        }\n        args.row = this.parent.createElement('tr', { className: 'e-row e-addedrow' });\n        if (tbody.querySelector('.e-emptyrow')) {\n            tbody.querySelector('.e-emptyrow').classList.add('e-hide');\n        }\n        this.parent.editSettings.newRowPosition === 'Top' ? tbody.insertBefore(args.row, tbody.firstChild) : tbody.appendChild(args.row);\n        args.row.appendChild(this.getEditElement(elements, false, undefined, args, true));\n        if (this.parent.getFrozenColumns()) {\n            var mEle = this.renderMovableform(args.row, args);\n            if (this.parent.frozenRows) {\n                mTbody = this.parent.getHeaderContent().querySelector('.e-movableheader').querySelector('tbody');\n            }\n            else {\n                mTbody = this.parent.getContent().querySelector('.e-movablecontent').querySelector('tbody');\n            }\n            this.parent.editSettings.newRowPosition === 'Top' ? mTbody.insertBefore(mEle, mTbody.firstChild) : mTbody.appendChild(mEle);\n            args.row.querySelector('.e-normaledit').setAttribute('colspan', this.parent.getVisibleFrozenColumns() + '');\n            mEle.setAttribute('colspan', '' + (this.parent.getVisibleColumns().length - this.parent.getVisibleFrozenColumns()));\n            if (this.parent.height === 'auto') {\n                this.parent.notify(events.frozenHeight, {});\n            }\n        }\n    };\n    InlineEditRender.prototype.renderMovableform = function (ele, args) {\n        var mEle = ele.cloneNode(true);\n        var form = args.movableForm = mEle.querySelector('form');\n        if (this.parent.editSettings.template) {\n            form.innerHTML = '';\n            this.appendChildren(form, args.rowData, false);\n            return mEle;\n        }\n        this.renderMovable(ele, mEle);\n        mEle.querySelector('colgroup').innerHTML = this.parent.getHeaderContent()\n            .querySelector('.e-movableheader').querySelector('colgroup').innerHTML;\n        return mEle;\n    };\n    InlineEditRender.prototype.updateFreezeEdit = function (row, td) {\n        td = td.concat([].slice.call(this.getFreezeRow(row).querySelectorAll('td.e-rowcell')));\n        return td;\n    };\n    InlineEditRender.prototype.getFreezeRow = function (row) {\n        if (this.parent.getFrozenColumns()) {\n            var idx = parseInt(row.getAttribute('aria-rowindex'), 10);\n            var fCont = this.parent.getContent().querySelector('.e-frozencontent').querySelector('tbody');\n            var mCont = this.parent.getContent().querySelector('.e-movablecontent').querySelector('tbody');\n            var fHdr = this.parent.getHeaderContent().querySelector('.e-frozenheader').querySelector('tbody');\n            var mHdr = this.parent.getHeaderContent().querySelector('.e-movableheader').querySelector('tbody');\n            if (this.parent.frozenRows && idx >= this.parent.frozenRows) {\n                idx -= this.parent.frozenRows;\n            }\n            if (fCont.contains(row)) {\n                return mCont.children[idx];\n            }\n            else if (mCont.contains(row)) {\n                return fCont.children[idx];\n            }\n            else if (fHdr.contains(row)) {\n                return mHdr.children[idx];\n            }\n            else if (mHdr.contains(row)) {\n                return fHdr.children[idx];\n            }\n        }\n        return row;\n    };\n    InlineEditRender.prototype.update = function (elements, args) {\n        this.isEdit = true;\n        if (closest(args.row, '.e-movablecontent')) {\n            args.row = this.getFreezeRow(args.row);\n        }\n        var tdElement = [].slice.call(args.row.querySelectorAll('td.e-rowcell'));\n        args.row.innerHTML = '';\n        tdElement = this.updateFreezeEdit(args.row, tdElement);\n        args.row.appendChild(this.getEditElement(elements, true, tdElement, args, true));\n        args.row.classList.add('e-editedrow');\n        this.refreshFreezeEdit(args.row, args);\n    };\n    InlineEditRender.prototype.refreshFreezeEdit = function (row, args) {\n        var td = row.firstChild;\n        var fCls;\n        var cont;\n        var idx = parseInt(row.getAttribute('aria-rowindex'), 10);\n        if (this.parent.getFrozenColumns()) {\n            if (idx < this.parent.frozenRows) {\n                cont = this.parent.getHeaderContent();\n                fCls = '.e-frozenheader';\n            }\n            else {\n                cont = this.parent.getContent();\n                fCls = '.e-frozencontent';\n            }\n            var mTd = td.cloneNode(true);\n            var form = args.movableForm = mTd.querySelector('form');\n            if (this.parent.editSettings.template) {\n                form.innerHTML = '';\n                this.appendChildren(form, args.rowData, false);\n            }\n            var fRows = void 0;\n            if (cont.querySelector(fCls).contains(row)) {\n                fRows = this.parent.getMovableRowByIndex(idx);\n                this.updateFrozenCont(fRows, td, mTd);\n            }\n            else {\n                fRows = this.parent.getRowByIndex(idx);\n                this.updateFrozenCont(fRows, mTd, td);\n            }\n            fRows.appendChild(mTd);\n            fRows.classList.add('e-editedrow');\n        }\n    };\n    InlineEditRender.prototype.updateFrozenCont = function (row, ele, mEle) {\n        row.innerHTML = '';\n        if (!this.parent.editSettings.template) {\n            this.renderMovable(ele, mEle);\n            mEle.querySelector('colgroup').innerHTML = this.parent.getHeaderContent()\n                .querySelector('.e-movableheader').querySelector('colgroup').innerHTML;\n        }\n        ele.setAttribute('colspan', this.parent.getVisibleFrozenColumns() + '');\n        mEle.setAttribute('colspan', this.parent.getVisibleColumns().length - this.parent.getVisibleFrozenColumns() + '');\n    };\n    InlineEditRender.prototype.renderMovable = function (ele, mEle) {\n        var frzCols = this.parent.getFrozenColumns();\n        for (var i = 0; i < frzCols; i++) {\n            mEle.querySelector('tr').removeChild(mEle.querySelector('tr').children[0]);\n        }\n        for (var i = frzCols, len = ele.querySelector('tr').childElementCount; i < len; i++) {\n            ele.querySelector('tr').removeChild(ele.querySelector('tr').children[ele.querySelector('tr').childElementCount - 1]);\n        }\n    };\n    InlineEditRender.prototype.getEditElement = function (elements, isEdit, tdElement, args, isFrozen) {\n        var gObj = this.parent;\n        var gLen = 0;\n        var isDetail = !isNullOrUndefined(gObj.detailTemplate) || !isNullOrUndefined(gObj.childGrid) ? 1 : 0;\n        if (gObj.allowGrouping) {\n            gLen = gObj.groupSettings.columns.length;\n        }\n        var td = this.parent.createElement('td', {\n            className: 'e-editcell e-normaledit',\n            attrs: { colspan: (gObj.getVisibleColumns().length - gObj.getVisibleFrozenColumns() + gLen + isDetail).toString() }\n        });\n        var form = args.form =\n            this.parent.createElement('form', { id: gObj.element.id + 'EditForm', className: 'e-gridform' });\n        if (this.parent.editSettings.template) {\n            this.appendChildren(form, args.rowData, isFrozen);\n            td.appendChild(form);\n            return td;\n        }\n        var table = this.parent.createElement('table', { className: 'e-table e-inline-edit', attrs: { cellspacing: '0.25' } });\n        table.appendChild(gObj.getContentTable().querySelector('colgroup').cloneNode(true));\n        var tbody = this.parent.createElement('tbody');\n        var tr = this.parent.createElement('tr');\n        var i = 0;\n        if (isDetail) {\n            tr.insertBefore(this.parent.createElement('td', { className: 'e-detailrowcollapse' }), tr.firstChild);\n        }\n        if (gObj.isRowDragable()) {\n            tr.appendChild(this.parent.createElement('td', { className: 'e-dragindentcell' }));\n        }\n        while (i < gLen) {\n            tr.appendChild(this.parent.createElement('td', { className: 'e-indentcell' }));\n            i++;\n        }\n        var m = 0;\n        i = 0;\n        while ((isEdit && m < tdElement.length && i < gObj.getColumns().length) || i < gObj.getColumns().length) {\n            var span = isEdit ? tdElement[m].getAttribute('colspan') : null;\n            var col = gObj.getColumns()[i];\n            var td_1 = this.parent.createElement('td', {\n                className: 'e-rowcell', attrs: { style: 'text-align:' + (col.textAlign ? col.textAlign : ''), 'colspan': span ? span : '' }\n            });\n            if (col.visible) {\n                td_1.appendChild(elements[col.uid]);\n                if (col.editType === 'booleanedit') {\n                    td_1.classList.add('e-boolcell');\n                }\n                else if (col.commands || col.commandsTemplate) {\n                    addClass([td_1], 'e-unboundcell');\n                }\n            }\n            else {\n                td_1.classList.add('e-hide');\n            }\n            tr.appendChild(td_1);\n            i = span ? i + parseInt(span, 10) : i + 1;\n            m++;\n        }\n        tbody.appendChild(tr);\n        table.appendChild(tbody);\n        form.appendChild(table);\n        td.appendChild(form);\n        return td;\n    };\n    InlineEditRender.prototype.removeEventListener = function () {\n        //To destroy the renderer\n    };\n    InlineEditRender.prototype.appendChildren = function (form, data, isFrozen) {\n        var dummyData = extend({}, data, { isAdd: !this.isEdit, isFrozen: isFrozen }, true);\n        appendChildren(form, this.parent.getEditTemplate()(dummyData, this.parent, 'editSettingsTemplate'));\n    };\n    return InlineEditRender;\n}());\nexport { InlineEditRender };\n","import { classList } from '@syncfusion/ej2-base';\n/**\n * Edit render module is used to render grid edit row.\n * @hidden\n */\nvar BatchEditRender = /** @class */ (function () {\n    /**\n     * Constructor for render module\n     */\n    function BatchEditRender(parent) {\n        this.parent = parent;\n    }\n    BatchEditRender.prototype.update = function (elements, args) {\n        args.cell.innerHTML = '';\n        args.cell.appendChild(this.getEditElement(elements, args));\n        args.cell.classList.add('e-editedbatchcell');\n        classList(args.row, ['e-editedrow', 'e-batchrow'], []);\n    };\n    BatchEditRender.prototype.getEditElement = function (elements, args) {\n        var gObj = this.parent;\n        var form = this.parent\n            .createElement('form', { id: gObj.element.id + 'EditForm', className: 'e-gridform' });\n        form.appendChild(elements[args.columnObject.uid]);\n        if (args.columnObject.editType === 'booleanedit') {\n            args.cell.classList.add('e-boolcell');\n        }\n        if (!args.columnObject.editType) {\n            args.cell.classList.add('e-inputbox');\n        }\n        return form;\n    };\n    BatchEditRender.prototype.removeEventListener = function () {\n        //To destroy the renderer\n    };\n    return BatchEditRender;\n}());\nexport { BatchEditRender };\n","import { Dialog } from '@syncfusion/ej2-popups';\nimport { remove, extend } from '@syncfusion/ej2-base';\nimport * as events from '../base/constant';\nimport { appendChildren } from '../base/util';\n/**\n * Edit render module is used to render grid edit row.\n * @hidden\n */\nvar DialogEditRender = /** @class */ (function () {\n    /**\n     * Constructor for render module\n     */\n    function DialogEditRender(parent, serviceLocator) {\n        this.parent = parent;\n        this.serviceLocator = serviceLocator;\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.on(events.dialogDestroy, this.destroy, this);\n        this.parent.on(events.destroy, this.destroy, this);\n    }\n    DialogEditRender.prototype.setLocaleObj = function () {\n        this.l10n = this.serviceLocator.getService('localization');\n    };\n    DialogEditRender.prototype.addNew = function (elements, args) {\n        this.isEdit = false;\n        this.createDialog(elements, args);\n    };\n    DialogEditRender.prototype.update = function (elements, args) {\n        this.isEdit = true;\n        this.createDialog(elements, args);\n    };\n    DialogEditRender.prototype.createDialog = function (elements, args) {\n        var gObj = this.parent;\n        this.dialog = this.parent.createElement('div', { id: gObj.element.id + '_dialogEdit_wrapper', styles: 'width: auto' });\n        gObj.element.appendChild(this.dialog);\n        this.setLocaleObj();\n        // let position: PositionDataModel = this.parent.element.getBoundingClientRect().height < 400 ?\n        //     { X: 'center', Y: 'top' } : { X: 'center', Y: 'center' };\n        this.dialogObj = args.dialog = new Dialog(extend({\n            header: this.isEdit ? this.l10n.getConstant('EditFormTitle') + args.primaryKeyValue[0] :\n                this.l10n.getConstant('AddFormTitle'), isModal: true, visible: true, cssClass: 'e-edit-dialog',\n            content: this.getEditElement(elements, args),\n            showCloseIcon: true,\n            allowDragging: true,\n            // position: position,\n            close: this.dialogClose.bind(this),\n            closeOnEscape: true, width: gObj.editSettings.template ? 'auto' : '330px',\n            target: args.target ? args.target : document.body, animationSettings: { effect: 'None' },\n            buttons: [{\n                    click: this.btnClick.bind(this),\n                    buttonModel: { content: this.l10n.getConstant('SaveButton'), cssClass: 'e-primary', isPrimary: true }\n                },\n                { click: this.btnClick.bind(this), buttonModel: { cssClass: 'e-flat', content: this.l10n.getConstant('CancelButton') } }]\n        }, gObj.editSettings.dialog.params));\n        this.dialogObj.appendTo(this.dialog);\n    };\n    DialogEditRender.prototype.btnClick = function (e) {\n        if (this.l10n.getConstant('CancelButton').toLowerCase() === e.target.innerText.trim().toLowerCase()) {\n            this.dialogClose();\n        }\n        else {\n            this.parent.endEdit();\n        }\n    };\n    DialogEditRender.prototype.dialogClose = function () {\n        this.parent.closeEdit();\n        this.destroy();\n    };\n    DialogEditRender.prototype.destroy = function (args) {\n        this.parent.notify(events.destroyForm, {});\n        this.parent.isEdit = false;\n        this.parent.notify(events.toolbarRefresh, {});\n        if (this.dialog && !this.dialogObj.isDestroyed) {\n            this.dialogObj.destroy();\n            remove(this.dialog);\n        }\n    };\n    DialogEditRender.prototype.getEditElement = function (elements, args) {\n        var gObj = this.parent;\n        var div = this.parent.createElement('div', { className: this.isEdit ? 'e-editedrow' : 'e-insertedrow' });\n        var form = args.form =\n            this.parent.createElement('form', { id: gObj.element.id + 'EditForm', className: 'e-gridform' });\n        if (this.parent.editSettings.template) {\n            var dummyData = extend({}, args.rowData, { isAdd: !this.isEdit }, true);\n            appendChildren(form, this.parent.getEditTemplate()(dummyData, this.parent, 'editSettingsTemplate'));\n            div.appendChild(form);\n            return div;\n        }\n        var table = this.parent.createElement('table', { className: 'e-table', attrs: { cellspacing: '6px' } });\n        var tbody = this.parent.createElement('tbody');\n        var cols = gObj.getColumns();\n        for (var i = 0; i < cols.length; i++) {\n            if (this.parent.editModule.checkColumnIsGrouped(cols[i]) || cols[i].commands || cols[i].commandsTemplate) {\n                continue;\n            }\n            var tr = this.parent.createElement('tr');\n            var dataCell = this.parent.createElement('td', {\n                className: 'e-rowcell', attrs: {\n                    style: 'text-align:' + (this.parent.enableRtl ? 'right' : 'left') + ';width:190px'\n                }\n            });\n            var label = this.parent.createElement('label', { innerHTML: cols[i].field });\n            elements[cols[i].uid].classList.remove('e-input');\n            dataCell.appendChild(elements[cols[i].uid]);\n            tr.appendChild(dataCell);\n            tbody.appendChild(tr);\n        }\n        table.appendChild(tbody);\n        form.appendChild(table);\n        div.appendChild(form);\n        return div;\n    };\n    DialogEditRender.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(events.dialogDestroy, this.destroy);\n        this.parent.off(events.destroy, this.destroy);\n    };\n    return DialogEditRender;\n}());\nexport { DialogEditRender };\n","import { isNullOrUndefined, closest, extend } from '@syncfusion/ej2-base';\nimport { InlineEditRender } from './inline-edit-renderer';\nimport { BatchEditRender } from './batch-edit-renderer';\nimport { DialogEditRender } from './dialog-edit-renderer';\nimport { attributes, classList } from '@syncfusion/ej2-base';\nimport { CellType } from '../base/enum';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { getComplexFieldID, getObject, appendChildren } from '../base/util';\n/**\n * Edit render module is used to render grid edit row.\n * @hidden\n */\nvar EditRender = /** @class */ (function () {\n    /**\n     * Constructor for render module\n     */\n    function EditRender(parent, serviceLocator) {\n        //Internal variables               \n        this.editType = {\n            'Inline': InlineEditRender,\n            'Normal': InlineEditRender, 'Batch': BatchEditRender, 'Dialog': DialogEditRender\n        };\n        this.parent = parent;\n        this.serviceLocator = serviceLocator;\n        this.renderer = new this.editType[this.parent.editSettings.mode](parent, serviceLocator);\n        this.focus = serviceLocator.getService('focus');\n    }\n    EditRender.prototype.addNew = function (args) {\n        this.renderer.addNew(this.getEditElements(args), args);\n        this.convertWidget(args);\n    };\n    EditRender.prototype.update = function (args) {\n        this.renderer.update(this.getEditElements(args), args);\n        this.convertWidget(args);\n    };\n    EditRender.prototype.convertWidget = function (args) {\n        var gObj = this.parent;\n        var isFocused;\n        var cell;\n        var value;\n        var fForm;\n        var frzCols = gObj.getFrozenColumns();\n        var form = gObj.editSettings.mode === 'Dialog' ?\n            document.querySelector('#' + gObj.element.id + '_dialogEdit_wrapper').querySelector('.e-gridform') :\n            gObj.element.querySelector('.e-gridform');\n        if (frzCols && gObj.editSettings.mode === 'Normal') {\n            var rowIndex = parseInt(args.row.getAttribute('aria-rowindex'), 10);\n            if (gObj.frozenRows && (args.requestType === 'add' || rowIndex < gObj.frozenRows)) {\n                fForm = gObj.element.querySelector('.e-movableheader').querySelector('.e-gridform');\n            }\n            else {\n                fForm = gObj.element.querySelector('.e-movablecontent').querySelector('.e-gridform');\n            }\n        }\n        var cols = gObj.editSettings.mode !== 'Batch' ? gObj.getColumns() : [gObj.getColumnByField(args.columnName)];\n        for (var _i = 0, cols_1 = cols; _i < cols_1.length; _i++) {\n            var col = cols_1[_i];\n            if (this.parent.editSettings.template && !isNullOrUndefined(col.field)) {\n                var cellArgs = extend({}, args);\n                cellArgs.element = form.querySelector('[name=' + getComplexFieldID(col.field) + ']');\n                if (isNullOrUndefined(cellArgs.element) && frzCols) {\n                    cellArgs.element = fForm.querySelector('[name=' + getComplexFieldID(col.field) + ']');\n                }\n                if (typeof col.edit.write === 'string') {\n                    getObject(col.edit.write, window)(cellArgs);\n                }\n                else {\n                    col.edit.write(cellArgs);\n                }\n                continue;\n            }\n            if (this.parent.editModule.checkColumnIsGrouped(col) || col.commands) {\n                continue;\n            }\n            value = (col.valueAccessor(col.field, args.rowData, col));\n            if (frzCols && cols.indexOf(col) >= frzCols && gObj.editSettings.mode === 'Normal') {\n                cell = fForm.querySelector('[e-mappinguid=' + col.uid + ']');\n            }\n            else {\n                cell = form.querySelector('[e-mappinguid=' + col.uid + ']');\n            }\n            var temp = col.edit.write;\n            if (!isNullOrUndefined(cell)) {\n                if (typeof temp === 'string') {\n                    temp = getObject(temp, window);\n                    temp({\n                        rowData: args.rowData, element: cell, column: col, requestType: args.requestType, row: args.row,\n                        foreignKeyData: col.isForeignColumn() && getObject(col.field, args.foreignKeyData)\n                    });\n                }\n                else {\n                    col.edit.write({\n                        rowData: args.rowData, element: cell, column: col, requestType: args.requestType, row: args.row,\n                        foreignKeyData: col.isForeignColumn() && getObject(col.field, args.foreignKeyData)\n                    });\n                }\n                if (!isFocused && !cell.getAttribute('disabled')) {\n                    this.focusElement(cell, args.type);\n                    isFocused = true;\n                }\n            }\n        }\n    };\n    EditRender.prototype.focusElement = function (elem, type) {\n        var chkBox = this.parent.element.querySelector('.e-edit-checkselect');\n        if (!isNullOrUndefined(chkBox)) {\n            chkBox.nextElementSibling.classList.add('e-focus');\n        }\n        if (this.parent.editSettings.mode === 'Batch') {\n            this.focus.onClick({ target: closest(elem, 'td') }, true);\n        }\n        else {\n            elem.focus();\n        }\n        if (elem.classList.contains('e-defaultcell')) {\n            elem.setSelectionRange(elem.value.length, elem.value.length);\n        }\n    };\n    EditRender.prototype.getEditElements = function (args) {\n        var gObj = this.parent;\n        var elements = {};\n        var cols = gObj.editSettings.mode !== 'Batch' ? gObj.getColumns() : [gObj.getColumnByField(args.columnName)];\n        if (this.parent.editSettings.template) {\n            return {};\n        }\n        for (var i = 0, len = cols.length; i < len; i++) {\n            var col = cols[i];\n            if (this.parent.editModule.checkColumnIsGrouped(col)) {\n                continue;\n            }\n            if (col.commands || col.commandsTemplate) {\n                var cellRendererFact = this.serviceLocator.getService('cellRendererFactory');\n                var model = new RowModelGenerator(this.parent);\n                var cellRenderer = cellRendererFact.getCellRenderer(CellType.CommandColumn);\n                var cells = model.generateRows(args.rowData)[0].cells;\n                var cell = cells.filter(function (cell) { return cell.rowID; });\n                var td = cellRenderer.render(cell[i], args.rowData, { 'index': args.row ? args.row.getAttribute('aria-rowindex') : 0 });\n                var div = td.firstElementChild;\n                div.setAttribute('textAlign', td.getAttribute('textAlign'));\n                elements[col.uid] = div;\n                continue;\n            }\n            var value = (col.valueAccessor(col.field, args.rowData, col));\n            var tArgs = { column: col, value: value, type: args.requestType, data: args.rowData };\n            var temp = col.edit.create;\n            var input = void 0;\n            if (col.editTemplate) {\n                input = this.parent.createElement('span', { attrs: { 'e-mappinguid': col.uid } });\n                appendChildren(input, col.getEditTemplate()(args.rowData, this.parent, 'editTemplate'));\n            }\n            else {\n                if (typeof temp === 'string') {\n                    temp = getObject(temp, window);\n                    input = temp(tArgs);\n                }\n                else {\n                    input = col.edit.create(tArgs);\n                }\n                if (typeof input === 'string') {\n                    var div = this.parent.createElement('div');\n                    div.innerHTML = input;\n                    input = div.firstChild;\n                }\n                var isInput = input.tagName !== 'input' && input.querySelectorAll('input').length;\n                var complexFieldName = getComplexFieldID(col.field);\n                attributes(isInput ? input.querySelector('input') : input, {\n                    name: complexFieldName, 'e-mappinguid': col.uid,\n                    id: gObj.element.id + complexFieldName\n                });\n                classList(input, ['e-input', 'e-field'], []);\n                if (col.textAlign === 'Right') {\n                    input.classList.add('e-ralign');\n                }\n                if ((col.isPrimaryKey || col.isIdentity) && args.requestType === 'beginEdit' ||\n                    (col.isIdentity && args.requestType === 'add')) { // already disabled in cell plugins\n                    input.setAttribute('disabled', '');\n                }\n            }\n            elements[col.uid] = input;\n        }\n        return elements;\n    };\n    EditRender.prototype.destroy = function () {\n        this.renderer.removeEventListener();\n    };\n    return EditRender;\n}());\nexport { EditRender };\n","import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { CheckBox } from '@syncfusion/ej2-buttons';\nimport { extend } from '@syncfusion/ej2-base';\nimport { isEditable, addRemoveActiveClasses, getComplexFieldID, getObject } from '../base/util';\n/**\n * `BooleanEditCell` is used to handle boolean cell type editing.\n * @hidden\n */\nvar BooleanEditCell = /** @class */ (function () {\n    function BooleanEditCell(parent) {\n        this.activeClasses = ['e-selectionbackground', 'e-active'];\n        this.parent = parent;\n    }\n    BooleanEditCell.prototype.create = function (args) {\n        var col = args.column;\n        var classNames = 'e-field e-boolcell';\n        if (col.type === 'checkbox') {\n            classNames = 'e-field e-boolcell e-edit-checkselect';\n        }\n        var complexFieldName = getComplexFieldID(args.column.field);\n        return this.parent.createElement('input', {\n            className: classNames, attrs: {\n                type: 'checkbox', value: args.value, 'e-mappinguid': col.uid,\n                id: this.parent.element.id + complexFieldName,\n                name: complexFieldName\n            }\n        });\n    };\n    BooleanEditCell.prototype.read = function (element) {\n        return element.checked;\n    };\n    BooleanEditCell.prototype.write = function (args) {\n        var selectChkBox;\n        var chkState;\n        var isAddRow = args.requestType === 'add' || args.row.classList.contains('e-addedrow');\n        if (!isNullOrUndefined(args.row)) {\n            selectChkBox = args.row.querySelector('.e-edit-checkselect');\n        }\n        if (getObject(args.column.field, args.rowData)) {\n            chkState = JSON.parse(getObject(args.column.field, args.rowData).toString().toLowerCase());\n        }\n        if (!isNullOrUndefined(selectChkBox)) {\n            this.editType = this.parent.editSettings.mode;\n            this.editRow = args.row;\n            if (args.requestType !== 'add') {\n                var row = this.parent.getRowObjectFromUID(args.row.getAttribute('data-uid'));\n                chkState = row ? row.isSelected : false;\n            }\n            addRemoveActiveClasses.apply(void 0, [[].slice.call(args.row.querySelectorAll('.e-rowcell')), chkState].concat(this.activeClasses));\n        }\n        this.obj = new CheckBox(extend({\n            label: this.parent.editSettings.mode !== 'Dialog' ? ' ' : args.column.headerText,\n            checked: chkState,\n            disabled: !isEditable(args.column, args.requestType, args.element), enableRtl: this.parent.enableRtl,\n            change: this.checkBoxChange.bind(this)\n        }, args.column.edit.params));\n        this.obj.appendTo(args.element);\n    };\n    BooleanEditCell.prototype.checkBoxChange = function (args) {\n        if (this.editRow && this.editType !== 'Dialog') {\n            var add = false;\n            if (!args.checked) {\n                this.editRow.removeAttribute('aria-selected');\n            }\n            else {\n                add = true;\n                this.editRow.setAttribute('aria-selected', add.toString());\n            }\n            addRemoveActiveClasses.apply(void 0, [[].slice.call(this.editRow.querySelectorAll('.e-rowcell')), add].concat(this.activeClasses));\n        }\n    };\n    BooleanEditCell.prototype.destroy = function () {\n        if (this.obj) {\n            this.obj.destroy();\n        }\n    };\n    return BooleanEditCell;\n}());\nexport { BooleanEditCell };\n","import { extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\nimport { Query, DataManager, DataUtil } from '@syncfusion/ej2-data';\nimport { isEditable, getComplexFieldID, getObject } from '../base/util';\nimport { parentsUntil } from '../base/util';\n/**\n * `DropDownEditCell` is used to handle dropdown cell type editing.\n * @hidden\n */\nvar DropDownEditCell = /** @class */ (function () {\n    function DropDownEditCell(parent) {\n        //constructor\n        this.parent = parent;\n    }\n    DropDownEditCell.prototype.create = function (args) {\n        //create\n        var complexFieldName = getComplexFieldID(args.column.field);\n        return this.parent.createElement('input', {\n            className: 'e-field', attrs: {\n                id: this.parent.element.id + complexFieldName,\n                name: complexFieldName, type: 'text', 'e-mappinguid': args.column.uid,\n            }\n        });\n    };\n    DropDownEditCell.prototype.write = function (args) {\n        this.column = args.column;\n        var isInline = this.parent.editSettings.mode !== 'Dialog';\n        this.obj = new DropDownList(extend({\n            dataSource: this.parent.dataSource instanceof DataManager ?\n                this.parent.dataSource : new DataManager(this.parent.dataSource),\n            query: new Query().select(args.column.field), enabled: isEditable(args.column, args.requestType, args.element),\n            fields: { value: args.column.field },\n            value: getObject(args.column.field, args.rowData),\n            enableRtl: this.parent.enableRtl, actionComplete: this.ddActionComplete.bind(this),\n            placeholder: isInline ? '' : args.column.headerText, popupHeight: '200px',\n            floatLabelType: isInline ? 'Never' : 'Always', open: this.dropDownOpen.bind(this),\n            sortOrder: 'Ascending'\n        }, args.column.edit.params));\n        this.obj.appendTo(args.element);\n        /* tslint:disable-next-line:no-any */\n        args.element.setAttribute('name', getComplexFieldID(args.column.field));\n    };\n    DropDownEditCell.prototype.read = function (element) {\n        return element.ej2_instances[0].value;\n    };\n    DropDownEditCell.prototype.ddActionComplete = function (e) {\n        e.result = DataUtil.distinct(e.result, this.obj.fields.value, true);\n        if (this.column.dataSource) {\n            this.column.dataSource.dataSource.json = e.result;\n        }\n    };\n    DropDownEditCell.prototype.dropDownOpen = function (args) {\n        var dlgElement = parentsUntil(this.obj.element, 'e-dialog');\n        if (this.parent.editSettings.mode === 'Dialog' && !isNullOrUndefined(dlgElement)) {\n            var dlgObj = document.querySelector('#' + dlgElement.id).ej2_instances[0];\n            args.popup.element.style.zIndex = (dlgObj.zIndex + 1).toString();\n        }\n    };\n    DropDownEditCell.prototype.destroy = function () {\n        if (this.obj) {\n            this.obj.destroy();\n        }\n    };\n    return DropDownEditCell;\n}());\nexport { DropDownEditCell };\n","import { extend, Internationalization } from '@syncfusion/ej2-base';\nimport { NumericTextBox } from '@syncfusion/ej2-inputs';\nimport { isEditable, getComplexFieldID, getObject } from '../base/util';\n/**\n * `NumericEditCell` is used to handle numeric cell type editing.\n * @hidden\n */\nvar NumericEditCell = /** @class */ (function () {\n    function NumericEditCell(parent) {\n        this.parent = parent;\n    }\n    NumericEditCell.prototype.create = function (args) {\n        var complexFieldName = getComplexFieldID(args.column.field);\n        this.instances = new Internationalization(this.parent.locale);\n        return this.parent.createElement('input', {\n            className: 'e-field', attrs: {\n                id: this.parent.element.id + complexFieldName,\n                name: complexFieldName, 'e-mappinguid': args.column.uid\n            }\n        });\n    };\n    NumericEditCell.prototype.read = function (element) {\n        var value = this.instances.getNumberParser({ format: 'n' })(element.value);\n        return value;\n    };\n    NumericEditCell.prototype.write = function (args) {\n        var col = args.column;\n        var isInline = this.parent.editSettings.mode !== 'Dialog';\n        this.obj = new NumericTextBox(extend({\n            value: parseFloat(getObject(args.column.field, args.rowData)),\n            enableRtl: this.parent.enableRtl,\n            placeholder: isInline ? '' : args.column.headerText,\n            enabled: isEditable(args.column, args.requestType, args.element),\n            floatLabelType: this.parent.editSettings.mode !== 'Dialog' ? 'Never' : 'Always',\n        }, col.edit.params));\n        this.obj.appendTo(args.element);\n        args.element.setAttribute('name', getComplexFieldID(args.column.field));\n    };\n    NumericEditCell.prototype.destroy = function () {\n        if (this.obj && !this.obj.isDestroyed) {\n            this.obj.destroy();\n        }\n    };\n    return NumericEditCell;\n}());\nexport { NumericEditCell };\n","import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { isEditable, getComplexFieldID } from '../base/util';\n/**\n * `DefaultEditCell` is used to handle default cell type editing.\n * @hidden\n */\nvar DefaultEditCell = /** @class */ (function () {\n    function DefaultEditCell(parent) {\n        this.parent = parent;\n    }\n    DefaultEditCell.prototype.create = function (args) {\n        var col = args.column;\n        var input = this.parent.createElement('input', {\n            className: 'e-field e-input e-defaultcell', attrs: {\n                type: 'text', value: !isNullOrUndefined(args.value) ? args.value : '', 'e-mappinguid': col.uid,\n                id: this.parent.element.id + getComplexFieldID(col.field), name: getComplexFieldID(col.field),\n                style: 'text-align:' + col.textAlign,\n            }\n        });\n        return input;\n    };\n    DefaultEditCell.prototype.read = function (element) {\n        return element.value;\n    };\n    DefaultEditCell.prototype.write = function (args) {\n        var col = args.column;\n        var isInline = this.parent.editSettings.mode !== 'Dialog';\n        var inputargs = {\n            element: args.element, floatLabelType: this.parent.editSettings.mode !== 'Dialog' ? 'Never' : 'Always',\n            properties: {\n                enableRtl: this.parent.enableRtl, enabled: isEditable(args.column, args.requestType, args.element),\n                placeholder: isInline ? '' : args.column.headerText\n            }\n        };\n        Input.createInput(inputargs, this.parent.createElement);\n    };\n    return DefaultEditCell;\n}());\nexport { DefaultEditCell };\n","import { extend } from '@syncfusion/ej2-base';\nimport { remove, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { parentsUntil, refreshForeignData, getObject } from '../base/util';\nimport * as events from '../base/constant';\nimport { RowRenderer } from '../renderer/row-renderer';\nimport { DataUtil } from '@syncfusion/ej2-data';\n/**\n * `NormalEdit` module is used to handle normal('inline, dialog, external') editing actions.\n * @hidden\n */\nvar NormalEdit = /** @class */ (function () {\n    function NormalEdit(parent, serviceLocator, renderer) {\n        this.args = {};\n        this.parent = parent;\n        this.renderer = renderer;\n        this.serviceLocator = serviceLocator;\n        this.addEventListener();\n    }\n    NormalEdit.prototype.clickHandler = function (e) {\n        var target = e.target;\n        var gObj = this.parent;\n        if ((((parentsUntil(target, 'e-gridcontent') &&\n            parentsUntil(parentsUntil(target, 'e-gridcontent'), 'e-grid').id === gObj.element.id)) || (gObj.frozenRows\n            && parentsUntil(target, 'e-headercontent'))) && !parentsUntil(target, 'e-unboundcelldiv')) {\n            this.rowIndex = parentsUntil(target, 'e-rowcell') ? parseInt(target.parentElement.getAttribute('aria-rowindex'), 10) : -1;\n            if (gObj.isEdit) {\n                gObj.editModule.endEdit();\n            }\n        }\n    };\n    NormalEdit.prototype.dblClickHandler = function (e) {\n        if (parentsUntil(e.target, 'e-rowcell') && this.parent.editSettings.allowEditOnDblClick) {\n            this.parent.editModule.startEdit(parentsUntil(e.target, 'e-row'));\n        }\n    };\n    /**\n     * The function used to trigger editComplete\n     * @return {void}\n     * @hidden\n     */\n    NormalEdit.prototype.editComplete = function (e) {\n        this.parent.isEdit = false;\n        switch (e.requestType) {\n            case 'save':\n                if (!(this.parent.isCheckBoxSelection || this.parent.selectionSettings.type === 'Multiple')\n                    || (!this.parent.isPersistSelection)) {\n                    this.parent.selectRow(0);\n                }\n                this.parent.trigger(events.actionComplete, extend(e, {\n                    requestType: 'save',\n                    type: events.actionComplete\n                }));\n                break;\n            case 'delete':\n                this.parent.trigger(events.actionComplete, extend(e, {\n                    requestType: 'delete',\n                    type: events.actionComplete\n                }));\n                this.parent.selectRow(this.editRowIndex);\n                break;\n        }\n    };\n    NormalEdit.prototype.startEdit = function (tr) {\n        var gObj = this.parent;\n        var primaryKeys = gObj.getPrimaryKeyFieldNames();\n        var primaryKeyValues = [];\n        this.rowIndex = this.editRowIndex = parseInt(tr.getAttribute('aria-rowindex'), 10);\n        this.previousData = gObj.getCurrentViewRecords()[this.rowIndex];\n        for (var i = 0; i < primaryKeys.length; i++) {\n            primaryKeyValues.push(this.previousData[primaryKeys[i]]);\n        }\n        this.uid = tr.getAttribute('data-uid');\n        var rowObj = gObj.getRowObjectFromUID(this.uid);\n        var args = {\n            row: tr, primaryKey: primaryKeys, primaryKeyValue: primaryKeyValues, requestType: 'beginEdit',\n            rowData: this.previousData, rowIndex: this.rowIndex, type: 'edit', cancel: false,\n            foreignKeyData: rowObj && rowObj.foreignKeyData, target: undefined\n        };\n        gObj.trigger(events.beginEdit, args);\n        args.type = 'actionBegin';\n        gObj.trigger(events.actionBegin, args);\n        if (args.cancel) {\n            return;\n        }\n        gObj.isEdit = true;\n        if (gObj.editSettings.mode !== 'Dialog') {\n            gObj.clearSelection();\n        }\n        if (gObj.editSettings.mode === 'Dialog' && gObj.selectionModule) {\n            gObj.selectionModule.preventFocus = true;\n            args.row.classList.add('e-dlgeditrow');\n        }\n        this.renderer.update(args);\n        this.uid = tr.getAttribute('data-uid');\n        gObj.editModule.applyFormValidation();\n        args.type = 'actionComplete';\n        gObj.trigger(events.actionComplete, args);\n        this.args = args;\n        if (this.parent.allowTextWrap) {\n            this.parent.notify(events.freezeRender, { case: 'textwrap' });\n        }\n    };\n    NormalEdit.prototype.updateRow = function (index, data) {\n        var _this = this;\n        var gObj = this.parent;\n        var args = {\n            requestType: 'save', type: events.actionBegin, data: data, cancel: false,\n            previousData: gObj.getCurrentViewRecords()[index]\n        };\n        gObj.showSpinner();\n        gObj.notify(events.updateData, args);\n        if (args.promise) {\n            args.promise.then(function () { return gObj.refresh(); }).catch(function (e) { return _this.edFail(e); });\n        }\n        else {\n            gObj.refresh();\n        }\n    };\n    NormalEdit.prototype.editFormValidate = function () {\n        var gObj = this.parent;\n        var form1 = gObj.editModule.formObj.validate();\n        var form2 = gObj.editModule.mFormObj ? gObj.editModule.mFormObj.validate() : true;\n        return (form1 && form2);\n    };\n    NormalEdit.prototype.endEdit = function () {\n        var gObj = this.parent;\n        if (!this.parent.isEdit || !this.editFormValidate()) {\n            return;\n        }\n        var editedData = extend({}, {}, this.previousData, true);\n        var args = extend(this.args, {\n            requestType: 'save', type: events.actionBegin, data: editedData, cancel: false,\n            previousData: this.previousData, selectedRow: gObj.selectedRowIndex, foreignKeyData: {}\n        });\n        var isDlg = gObj.editSettings.mode === 'Dialog';\n        var dlgWrapper = document.querySelector('#' + gObj.element.id + '_dialogEdit_wrapper');\n        var dlgForm = isDlg ? dlgWrapper.querySelector('.e-gridform') : gObj.element.querySelector('.e-gridform');\n        editedData = gObj.editModule.getCurrentEditedData(dlgForm, editedData);\n        if (gObj.getFrozenColumns() && gObj.editSettings.mode === 'Normal') {\n            var mForm = gObj.element.querySelector('.e-movableheader').querySelector('.e-gridform');\n            if (gObj.frozenRows && mForm) {\n                editedData = gObj.editModule.getCurrentEditedData(mForm, editedData);\n            }\n            else {\n                editedData = gObj.editModule.getCurrentEditedData(gObj.element.querySelector('.e-movablecontent').querySelector('.e-gridform'), editedData);\n            }\n        }\n        if (isDlg ? dlgWrapper.querySelectorAll('.e-editedrow').length : gObj.element.querySelectorAll('.e-editedrow').length) {\n            args.action = 'edit';\n            gObj.trigger(events.actionBegin, args);\n            if (args.cancel) {\n                return;\n            }\n            gObj.showSpinner();\n            gObj.notify(events.updateData, args);\n        }\n        else {\n            args.action = 'add';\n            args.selectedRow = 0;\n            args.index = this.addedRowIndex;\n            gObj.notify(events.modelChanged, args);\n            this.addedRowIndex = null;\n            if (args.cancel) {\n                return;\n            }\n        }\n    };\n    NormalEdit.prototype.destroyElements = function () {\n        var gObj = this.parent;\n        gObj.editModule.destroyWidgets();\n        gObj.editModule.destroyForm();\n        this.parent.notify(events.dialogDestroy, {});\n    };\n    NormalEdit.prototype.editHandler = function (args) {\n        var _this = this;\n        if (args.promise) {\n            args.promise.then(function (e) { return _this.edSucc(e, args); }).catch(function (e) { return _this.edFail(e); });\n        }\n        else {\n            this.editSuccess(args.data, args);\n        }\n    };\n    NormalEdit.prototype.edSucc = function (e, args) {\n        this.editSuccess(e, args);\n    };\n    NormalEdit.prototype.edFail = function (e) {\n        this.editFailure(e);\n    };\n    NormalEdit.prototype.updateCurrentViewData = function (data) {\n        this.parent.getCurrentViewRecords()[this.editRowIndex] = data;\n    };\n    NormalEdit.prototype.requestSuccess = function (args) {\n        if (this.parent.editModule.formObj && !this.parent.editModule.formObj.isDestroyed) {\n            this.destroyElements();\n            this.stopEditStatus();\n            if (this.parent.editSettings.mode === 'Dialog' && args.action !== 'add') {\n                this.parent.element.querySelector('.e-dlgeditrow').classList.remove('e-dlgeditrow');\n            }\n        }\n    };\n    NormalEdit.prototype.editSuccess = function (e, args) {\n        if (!isNullOrUndefined(e)) {\n            var adaptor = 'adaptor';\n            var rowData = 'rowData';\n            var isAdaptor = this.parent.dataSource[adaptor];\n            args.data = (isAdaptor && isAdaptor.getModuleName && (isAdaptor.getModuleName() === 'ODataAdaptor' ||\n                isAdaptor.getModuleName() === 'ODataV4Adaptor' || isAdaptor.getModuleName() === 'WebApiAdaptor')) ?\n                extend({}, args[rowData], e) : e;\n        }\n        this.requestSuccess(args);\n        this.parent.trigger(events.beforeDataBound, args);\n        args.type = events.actionComplete;\n        this.parent.isEdit = false;\n        this.refreshRow(args.data);\n        this.updateCurrentViewData(args.data);\n        this.parent.trigger(events.actionComplete, args);\n        if (!(this.parent.isCheckBoxSelection || this.parent.selectionSettings.type === 'Multiple')\n            || (!this.parent.isPersistSelection)) {\n            if (this.parent.editSettings.mode !== 'Dialog') {\n                this.parent.selectRow(this.rowIndex > -1 ? this.rowIndex : this.editRowIndex);\n            }\n        }\n        this.parent.hideSpinner();\n    };\n    NormalEdit.prototype.editFailure = function (e) {\n        this.parent.trigger(events.actionFailure, e);\n        this.parent.hideSpinner();\n    };\n    NormalEdit.prototype.refreshRow = function (data) {\n        var frzCols = this.parent.getFrozenColumns();\n        var row = new RowRenderer(this.serviceLocator, null, this.parent);\n        var rowObj = this.parent.getRowObjectFromUID(this.uid);\n        if (rowObj) {\n            rowObj.changes = data;\n            refreshForeignData(rowObj, this.parent.getForeignKeyColumns(), rowObj.changes);\n            row.refresh(rowObj, this.parent.getColumns(), true);\n            if (frzCols) {\n                var uid = void 0;\n                var tr = this.parent.element.querySelector('[data-uid=' + rowObj.uid + ']');\n                if ((parentsUntil(tr, 'e-frozencontent')) || (parentsUntil(tr, 'e-frozenheader'))) {\n                    uid = this.parent.getMovableRows()[rowObj.index].getAttribute('data-uid');\n                }\n                else {\n                    uid = this.parent.getRows()[rowObj.index].getAttribute('data-uid');\n                }\n                rowObj = this.parent.getRowObjectFromUID(uid);\n                rowObj.changes = data;\n                row.refresh(rowObj, this.parent.columns, true);\n            }\n        }\n    };\n    NormalEdit.prototype.closeEdit = function () {\n        if (!this.parent.isEdit) {\n            return;\n        }\n        var gObj = this.parent;\n        var args = extend(this.args, {\n            requestType: 'cancel', type: events.actionBegin, data: this.previousData, selectedRow: gObj.selectedRowIndex\n        });\n        gObj.trigger(events.actionBegin, args);\n        if (this.parent.editSettings.mode === 'Dialog') {\n            this.parent.notify(events.dialogDestroy, {});\n        }\n        gObj.isEdit = false;\n        this.stopEditStatus();\n        args.type = events.actionComplete;\n        if (gObj.editSettings.mode !== 'Dialog') {\n            this.refreshRow(args.data);\n        }\n        if (gObj.getContentTable().querySelector('tr.e-emptyrow') &&\n            !gObj.getContentTable().querySelector('tr.e-row')) {\n            gObj.getContentTable().querySelector('tr.e-emptyrow').classList.remove('e-hide');\n        }\n        if (gObj.editSettings.mode !== 'Dialog') {\n            gObj.selectRow(this.rowIndex);\n        }\n        gObj.trigger(events.actionComplete, args);\n    };\n    NormalEdit.prototype.addRecord = function (data, index) {\n        var _this = this;\n        var gObj = this.parent;\n        this.addedRowIndex = index = !isNullOrUndefined(index) ? index : 0;\n        if (data) {\n            gObj.notify(events.modelChanged, {\n                requestType: 'save', type: events.actionBegin, data: data, selectedRow: 0, action: 'add', index: index\n            });\n            return;\n        }\n        if (gObj.isEdit) {\n            return;\n        }\n        this.previousData = {};\n        this.uid = '';\n        gObj.columns.forEach(function (col) {\n            if (col.field) {\n                DataUtil.setValue(col.field, col.defaultValue, _this.previousData);\n            }\n        });\n        var args = {\n            cancel: false, foreignKeyData: {},\n            requestType: 'add', data: this.previousData, type: events.actionBegin, index: index,\n            rowData: this.previousData, target: undefined\n        };\n        gObj.trigger(events.actionBegin, args);\n        if (args.cancel) {\n            return;\n        }\n        gObj.isEdit = true;\n        if (gObj.editSettings.mode !== 'Dialog') {\n            gObj.clearSelection();\n        }\n        this.renderer.addNew(args);\n        gObj.editModule.applyFormValidation();\n        args.type = events.actionComplete;\n        args.row = gObj.element.querySelector('.e-addedrow');\n        gObj.trigger(events.actionComplete, args);\n        this.args = args;\n    };\n    NormalEdit.prototype.deleteRecord = function (fieldname, data) {\n        this.editRowIndex = this.parent.selectedRowIndex;\n        if (data) {\n            data = (data instanceof Array) ? data : [data];\n            var gObj = this.parent;\n            var index = 0;\n            var dataLen = Object.keys(data).length;\n            fieldname = fieldname || this.parent.getPrimaryKeyFieldNames()[0];\n            var _loop_1 = function (i) {\n                var _a;\n                var tmpRecord;\n                var contained = gObj.currentViewData.some(function (record) {\n                    tmpRecord = record;\n                    return data[i] === getObject(fieldname, record) || data[i] === record;\n                });\n                data[i] = contained ? tmpRecord : (_a = {}, _a[fieldname] = data[i], _a);\n            };\n            for (var i = 0; i < dataLen; i++) {\n                _loop_1(i);\n            }\n        }\n        this.parent.notify(events.modelChanged, {\n            requestType: 'delete', type: events.actionBegin, foreignKeyData: {},\n            data: data ? data : this.parent.getSelectedRecords(), tr: this.parent.getSelectedRows(), cancel: false\n        });\n    };\n    NormalEdit.prototype.stopEditStatus = function () {\n        var gObj = this.parent;\n        var elem = gObj.element.querySelector('.e-addedrow');\n        var mElem;\n        var editMElem;\n        if (gObj.getFrozenColumns()) {\n            mElem = gObj.element.querySelectorAll('.e-addedrow')[1];\n            editMElem = gObj.element.querySelectorAll('.e-editedrow')[1];\n            if (mElem) {\n                remove(mElem);\n            }\n            if (editMElem) {\n                editMElem.classList.remove('e-editedrow');\n            }\n        }\n        if (elem) {\n            remove(elem);\n        }\n        elem = gObj.element.querySelector('.e-editedrow');\n        if (elem) {\n            elem.classList.remove('e-editedrow');\n        }\n    };\n    /**\n     * @hidden\n     */\n    NormalEdit.prototype.addEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.on(events.crudAction, this.editHandler, this);\n        this.parent.on(events.doubleTap, this.dblClickHandler, this);\n        this.parent.on(events.click, this.clickHandler, this);\n        this.parent.on(events.recordAdded, this.requestSuccess, this);\n        this.parent.on(events.dblclick, this.dblClickHandler, this);\n        this.parent.on(events.deleteComplete, this.editComplete, this);\n        this.parent.on(events.saveComplete, this.editComplete, this);\n    };\n    /**\n     * @hidden\n     */\n    NormalEdit.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(events.crudAction, this.editHandler);\n        this.parent.off(events.doubleTap, this.dblClickHandler);\n        this.parent.off(events.click, this.clickHandler);\n        this.parent.off(events.recordAdded, this.requestSuccess);\n        this.parent.off(events.dblclick, this.dblClickHandler);\n        this.parent.off(events.deleteComplete, this.editComplete);\n        this.parent.off(events.saveComplete, this.editComplete);\n    };\n    /**\n     * @hidden\n     */\n    NormalEdit.prototype.destroy = function () {\n        this.removeEventListener();\n        this.renderer.destroy();\n    };\n    return NormalEdit;\n}());\nexport { NormalEdit };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { NormalEdit } from './normal-edit';\n/**\n * `InlineEdit` module is used to handle inline editing actions.\n * @hidden\n */\nvar InlineEdit = /** @class */ (function (_super) {\n    __extends(InlineEdit, _super);\n    function InlineEdit(parent, serviceLocator, renderer) {\n        var _this = _super.call(this, parent, serviceLocator) || this;\n        _this.parent = parent;\n        _this.serviceLocator = serviceLocator;\n        _this.renderer = renderer;\n        return _this;\n    }\n    InlineEdit.prototype.closeEdit = function () {\n        _super.prototype.closeEdit.call(this);\n    };\n    InlineEdit.prototype.addRecord = function (data, index) {\n        _super.prototype.addRecord.call(this, data, index);\n    };\n    InlineEdit.prototype.endEdit = function () {\n        _super.prototype.endEdit.call(this);\n    };\n    InlineEdit.prototype.updateRow = function (index, data) {\n        _super.prototype.updateRow.call(this, index, data);\n    };\n    InlineEdit.prototype.deleteRecord = function (fieldname, data) {\n        _super.prototype.deleteRecord.call(this, fieldname, data);\n    };\n    InlineEdit.prototype.startEdit = function (tr) {\n        _super.prototype.startEdit.call(this, tr);\n    };\n    return InlineEdit;\n}(NormalEdit));\nexport { InlineEdit };\n","import { extend, addClass, removeClass, setValue } from '@syncfusion/ej2-base';\nimport { remove, classList } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { CellType } from '../base/enum';\nimport { parentsUntil, inArray, refreshForeignData, getObject } from '../base/util';\nimport * as events from '../base/constant';\nimport { RowRenderer } from '../renderer/row-renderer';\nimport { CellRenderer } from '../renderer/cell-renderer';\nimport { Row } from '../models/row';\nimport { Cell } from '../models/cell';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { DataUtil } from '@syncfusion/ej2-data';\n/**\n * `BatchEdit` module is used to handle batch editing actions.\n * @hidden\n */\nvar BatchEdit = /** @class */ (function () {\n    function BatchEdit(parent, serviceLocator, renderer) {\n        this.cellDetails = {};\n        this.parent = parent;\n        this.serviceLocator = serviceLocator;\n        this.renderer = renderer;\n        this.focus = serviceLocator.getService('focus');\n        this.addEventListener();\n    }\n    /**\n     * @hidden\n     */\n    BatchEdit.prototype.addEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.on(events.click, this.clickHandler, this);\n        this.parent.on(events.dblclick, this.dblClickHandler, this);\n        this.parent.on(events.beforeCellFocused, this.onBeforeCellFocused, this);\n        this.parent.on(events.cellFocused, this.onCellFocused, this);\n        this.dataBoundFunction = this.dataBound.bind(this);\n        this.parent.addEventListener(events.dataBound, this.dataBoundFunction);\n        this.parent.on(events.doubleTap, this.dblClickHandler, this);\n        this.parent.on(events.keyPressed, this.keyDownHandler, this);\n        this.parent.on(events.editNextValCell, this.editNextValCell, this);\n    };\n    /**\n     * @hidden\n     */\n    BatchEdit.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(events.click, this.clickHandler);\n        this.parent.off(events.dblclick, this.dblClickHandler);\n        this.parent.off(events.beforeCellFocused, this.onBeforeCellFocused);\n        this.parent.off(events.cellFocused, this.onCellFocused);\n        this.parent.removeEventListener(events.dataBound, this.dataBoundFunction);\n        this.parent.off(events.doubleTap, this.dblClickHandler);\n        this.parent.off(events.keyPressed, this.keyDownHandler);\n        this.parent.off(events.editNextValCell, this.editNextValCell);\n    };\n    BatchEdit.prototype.dataBound = function () {\n        this.parent.notify(events.toolbarRefresh, {});\n    };\n    /**\n     * @hidden\n     */\n    BatchEdit.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    BatchEdit.prototype.clickHandler = function (e) {\n        if (!parentsUntil(e.target, this.parent.element.id + '_add', true)) {\n            if (this.parent.isEdit) {\n                this.saveCell();\n                this.editNextValCell();\n            }\n            if (parentsUntil(e.target, 'e-rowcell') && !this.parent.isEdit) {\n                this.setCellIdx(e.target);\n            }\n        }\n    };\n    BatchEdit.prototype.dblClickHandler = function (e) {\n        var target = parentsUntil(e.target, 'e-rowcell');\n        var tr = parentsUntil(e.target, 'e-row');\n        if (target && tr && !isNaN(parseInt(target.getAttribute('aria-colindex'), 10))\n            && !target.parentElement.classList.contains('e-editedrow')) {\n            this.editCell(parseInt(tr.getAttribute('aria-rowindex'), 10), this.parent.getColumns()[parseInt(target.getAttribute('aria-colindex'), 10)].field, this.isAddRow(parseInt(tr.getAttribute('aria-rowindex'), 10)));\n        }\n    };\n    BatchEdit.prototype.onBeforeCellFocused = function (e) {\n        if (this.parent.isEdit && this.validateFormObj() &&\n            (e.byClick || (['tab', 'shiftTab', 'enter', 'shiftEnter'].indexOf(e.keyArgs.action) > -1))) {\n            e.cancel = true;\n            if (e.byClick) {\n                e.clickArgs.preventDefault();\n            }\n            else {\n                e.keyArgs.preventDefault();\n            }\n        }\n    };\n    BatchEdit.prototype.onCellFocused = function (e) {\n        var frzCols = this.parent.getFrozenColumns();\n        var mCont = this.parent.getContent().querySelector('.e-movablecontent');\n        var mHdr = this.parent.getHeaderContent().querySelector('.e-movableheader');\n        var clear = (!e.container.isContent || !e.container.isDataCell) && !(this.parent.frozenRows && e.container.isHeader);\n        if (!e.byKey || clear) {\n            return;\n        }\n        var _a = e.container.indexes, rowIndex = _a[0], cellIndex = _a[1];\n        if (frzCols && (mCont.contains(e.element) || (this.parent.frozenRows && mHdr.contains(e.element)))) {\n            cellIndex += frzCols;\n        }\n        if (this.parent.frozenRows && e.container.isContent) {\n            rowIndex += this.parent.frozenRows;\n        }\n        var isEdit = this.parent.isEdit;\n        if (!this.parent.element.querySelectorAll('.e-popup-open').length) {\n            isEdit = isEdit && !this.validateFormObj();\n            switch (e.keyArgs.action) {\n                case 'tab':\n                case 'shiftTab':\n                    if (isEdit || this.parent.isLastCellPrimaryKey) {\n                        this.editCellFromIndex(rowIndex, cellIndex);\n                    }\n                    break;\n                case 'enter':\n                case 'shiftEnter':\n                    e.keyArgs.preventDefault();\n                    if (isEdit) {\n                        this.editCell(rowIndex, this.cellDetails.column.field);\n                    }\n                    break;\n                case 'f2':\n                    this.editCellFromIndex(rowIndex, cellIndex);\n                    this.focus.focus();\n                    break;\n            }\n        }\n    };\n    BatchEdit.prototype.isAddRow = function (index) {\n        return this.parent.getDataRows()[index].classList.contains('e-insertedrow');\n    };\n    BatchEdit.prototype.editCellFromIndex = function (rowIdx, cellIdx) {\n        this.cellDetails.rowIndex = rowIdx;\n        this.cellDetails.cellIndex = cellIdx;\n        this.editCell(rowIdx, this.parent.getColumns()[cellIdx].field, this.isAddRow(rowIdx));\n    };\n    BatchEdit.prototype.closeEdit = function () {\n        var gObj = this.parent;\n        var rows = this.parent.getRowsObject();\n        if (gObj.frozenColumns && rows.length < this.parent.currentViewData.length * 2) {\n            rows.push.apply(rows, this.parent.getMovableRowsObject());\n        }\n        var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);\n        var tr;\n        var mTr;\n        var movObj;\n        if (gObj.isEdit) {\n            this.saveCell(true);\n        }\n        this.isAdded = false;\n        gObj.clearSelection();\n        for (var i = 0; i < rows.length; i++) {\n            if (rows[i].isDirty) {\n                if (gObj.frozenColumns) {\n                    movObj = gObj.getMovableRowsObject()[rows[i].index];\n                    movObj.isDirty = true;\n                }\n                tr = gObj.getContentTable().querySelector('[data-uid=' + rows[i].uid + ']');\n                if (gObj.frozenRows && !tr) {\n                    tr = gObj.getHeaderContent().querySelector('[data-uid=' + rows[i].uid + ']');\n                }\n                if (gObj.frozenColumns) {\n                    if (gObj.frozenRows) {\n                        mTr = gObj.getHeaderContent().querySelector('.e-movableheader')\n                            .querySelector('[data-uid=' + rows[i].uid + ']');\n                        if (!mTr) {\n                            mTr = gObj.getContent().querySelector('.e-movablecontent')\n                                .querySelector('[data-uid=' + rows[i].uid + ']');\n                        }\n                    }\n                    else {\n                        mTr = gObj.getContent().querySelector('.e-movablecontent')\n                            .querySelector('[data-uid=' + rows[i].uid + ']');\n                    }\n                }\n                if (tr || mTr) {\n                    if (tr && tr.classList.contains('e-insertedrow') || mTr && mTr.classList.contains('e-insertedrow')) {\n                        if (tr) {\n                            remove(tr);\n                        }\n                        if (mTr && (gObj.frozenColumns || gObj.frozenRows)) {\n                            remove(mTr);\n                        }\n                        this.removeRowObjectFromUID(rows[i].uid);\n                        i--;\n                    }\n                    else {\n                        refreshForeignData(rows[i], this.parent.getForeignKeyColumns(), rows[i].data);\n                        delete rows[i].changes;\n                        rows[i].isDirty = false;\n                        var ftr = mTr ? mTr : tr;\n                        classList(ftr, [], ['e-hiddenrow', 'e-updatedtd']);\n                        rowRenderer.refresh(rows[i], gObj.getColumns(), false);\n                        if (this.parent.aggregates.length > 0) {\n                            var type = 'type';\n                            var editType = [];\n                            editType[type] = 'cancel';\n                            this.parent.notify(events.refreshFooterRenderer, editType);\n                            if (this.parent.groupSettings.columns.length > 0) {\n                                this.parent.notify(events.groupAggregates, editType);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (!gObj.getContentTable().querySelector('tr.e-row')) {\n            gObj.renderModule.renderEmptyRow();\n        }\n        var args = {\n            requestType: 'batchCancel', rows: this.parent.getRowsObject()\n        };\n        gObj.notify(events.batchCancel, {\n            rows: this.parent.getRowsObject().length ? this.parent.getRowsObject() :\n                [new Row({ isDataRow: true, cells: [new Cell({ isDataCell: true, visible: true })] })]\n        });\n        gObj.selectRow(this.cellDetails.rowIndex);\n        this.refreshRowIdx();\n        gObj.notify(events.toolbarRefresh, {});\n        this.parent.notify(events.tooltipDestroy, {});\n        args = { requestType: 'batchCancel', rows: this.parent.getRowsObject() };\n        gObj.trigger(events.batchCancel, args);\n        if (gObj.frozenColumns) {\n            rows.splice(this.parent.getMovableRowsObject().length, rows.length);\n        }\n    };\n    BatchEdit.prototype.deleteRecord = function (fieldname, data) {\n        this.saveCell();\n        if (this.validateFormObj()) {\n            this.saveCell(true);\n        }\n        this.isAdded = false;\n        this.bulkDelete(fieldname, data);\n        if (this.parent.aggregates.length > 0) {\n            this.parent.notify(events.refreshFooterRenderer, {});\n            if (this.parent.groupSettings.columns.length > 0) {\n                this.parent.notify(events.groupAggregates, {});\n            }\n        }\n    };\n    BatchEdit.prototype.addRecord = function (data) {\n        this.bulkAddRow(data);\n    };\n    BatchEdit.prototype.endEdit = function (data) {\n        if (this.parent.isEdit && this.validateFormObj()) {\n            return;\n        }\n        this.batchSave();\n    };\n    BatchEdit.prototype.validateFormObj = function () {\n        return this.parent.editModule.formObj && !this.parent.editModule.formObj.validate();\n    };\n    BatchEdit.prototype.batchSave = function () {\n        var gObj = this.parent;\n        var deletedRecords = 'deletedRecords';\n        if (gObj.isCheckBoxSelection) {\n            var checkAllBox = gObj.element.querySelector('.e-checkselectall').parentElement;\n            if (checkAllBox.classList.contains('e-checkbox-disabled') &&\n                gObj.pageSettings.totalRecordsCount > gObj.currentViewData.length) {\n                removeClass([checkAllBox], ['e-checkbox-disabled']);\n            }\n        }\n        this.saveCell();\n        if (gObj.isEdit || this.editNextValCell() || gObj.isEdit) {\n            return;\n        }\n        var changes = this.getBatchChanges();\n        if (this.parent.selectionSettings.type === 'Multiple' && changes[deletedRecords].length) {\n            changes[deletedRecords] = changes[deletedRecords].concat(this.removeSelectedData);\n            this.removeSelectedData = [];\n        }\n        var original = {\n            changedRecords: this.parent.getRowsObject()\n                .filter(function (row) { return row.isDirty && ['add', 'delete'].indexOf(row.edit) === -1; })\n                .map(function (row) { return row.data; })\n        };\n        var args = { batchChanges: changes, cancel: false };\n        gObj.trigger(events.beforeBatchSave, args);\n        if (args.cancel) {\n            return;\n        }\n        gObj.showSpinner();\n        gObj.notify(events.bulkSave, { changes: changes, original: original });\n    };\n    BatchEdit.prototype.getBatchChanges = function () {\n        var changes = {\n            addedRecords: [],\n            deletedRecords: [],\n            changedRecords: []\n        };\n        var rows = this.parent.getRowsObject();\n        var mRows = this.parent.getMovableRowsObject();\n        var frzCols = this.parent.getFrozenColumns();\n        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n            var row = rows_1[_i];\n            if (frzCols) {\n                this.mergeBatchChanges(row, mRows[row.index], frzCols);\n            }\n            if (row.isDirty) {\n                switch (row.edit) {\n                    case 'add':\n                        changes.addedRecords.push(row.changes);\n                        break;\n                    case 'delete':\n                        changes.deletedRecords.push(row.data);\n                        break;\n                    default:\n                        changes.changedRecords.push(row.changes);\n                }\n            }\n        }\n        return changes;\n    };\n    BatchEdit.prototype.mergeBatchChanges = function (row, mRow, frzCols) {\n        if (row.isDirty) {\n            if (mRow.isDirty) {\n                var i_1 = 0;\n                Object.keys(row.changes).forEach(function (key) {\n                    if (i_1 >= frzCols) {\n                        row.changes[key] = mRow.changes[key];\n                    }\n                    i_1++;\n                });\n            }\n        }\n        else if (mRow.isDirty) {\n            row.changes = mRow.changes;\n            row.isDirty = mRow.isDirty;\n        }\n    };\n    /**\n     * @hidden\n     */\n    BatchEdit.prototype.removeRowObjectFromUID = function (uid) {\n        var rows = this.parent.getRowsObject();\n        var i = 0;\n        for (var len = rows.length; i < len; i++) {\n            if (rows[i].uid === uid) {\n                break;\n            }\n        }\n        rows.splice(i, 1);\n    };\n    /**\n     * @hidden\n     */\n    BatchEdit.prototype.addRowObject = function (row) {\n        this.parent.editSettings.newRowPosition === 'Top' ? this.parent.getRowsObject().unshift(row) :\n            this.parent.getRowsObject().push(row);\n    };\n    BatchEdit.prototype.bulkDelete = function (fieldname, data) {\n        this.removeSelectedData = [];\n        var gObj = this.parent;\n        if (data) {\n            gObj.selectRow(this.getIndexFromData(data));\n        }\n        var index = gObj.selectedRowIndex;\n        var selectedRows = gObj.getSelectedRows();\n        var args = {\n            primaryKey: this.parent.getPrimaryKeyFieldNames(),\n            rowIndex: index,\n            rowData: data ? data : gObj.getSelectedRecords()[0],\n            row: data ? gObj.getRows()[index] : selectedRows[0], cancel: false\n        };\n        if (!args.row) {\n            return;\n        }\n        gObj.trigger(events.beforeBatchDelete, args);\n        if (args.cancel) {\n            return;\n        }\n        if (this.parent.frozenColumns || selectedRows.length === 1) {\n            var uid = args.row.getAttribute('data-uid');\n            if (args.row.classList.contains('e-insertedrow')) {\n                this.removeRowObjectFromUID(uid);\n                remove(args.row);\n            }\n            else {\n                var rowObj = gObj.getRowObjectFromUID(uid);\n                rowObj.isDirty = true;\n                rowObj.edit = 'delete';\n                classList(args.row, ['e-hiddenrow', 'e-updatedtd'], []);\n                if (gObj.getFrozenColumns()) {\n                    classList(data ? gObj.getMovableRows()[index] : selectedRows[1], ['e-hiddenrow', 'e-updatedtd'], []);\n                    if (gObj.frozenRows && index < gObj.frozenRows && gObj.getMovableDataRows().length >= gObj.frozenRows) {\n                        gObj.getHeaderContent().querySelector('.e-movableheader').querySelector('tbody')\n                            .appendChild(gObj.getMovableRowByIndex(gObj.frozenRows - 1));\n                        gObj.getHeaderContent().querySelector('.e-frozenheader').querySelector('tbody')\n                            .appendChild(gObj.getRowByIndex(gObj.frozenRows - 1));\n                    }\n                }\n                else if (gObj.frozenRows && index < gObj.frozenRows && gObj.getDataRows().length >= gObj.frozenRows) {\n                    gObj.getHeaderContent().querySelector('tbody').appendChild(gObj.getRowByIndex(gObj.frozenRows - 1));\n                }\n            }\n            delete args.row;\n        }\n        else {\n            for (var i = 0; i < selectedRows.length; i++) {\n                var uniqueid = selectedRows[i].getAttribute('data-uid');\n                if (selectedRows[i].classList.contains('e-insertedrow')) {\n                    this.removeRowObjectFromUID(uniqueid);\n                    remove(selectedRows[i]);\n                }\n                else {\n                    classList(selectedRows[i], ['e-hiddenrow', 'e-updatedtd'], []);\n                    var selectedRow = gObj.getRowObjectFromUID(uniqueid);\n                    selectedRow.isDirty = true;\n                    selectedRow.edit = 'delete';\n                    delete selectedRows[i];\n                }\n            }\n        }\n        this.refreshRowIdx();\n        this.removeSelectedData = gObj.getSelectedRecords();\n        gObj.clearSelection();\n        gObj.selectRow(index);\n        gObj.trigger(events.batchDelete, args);\n        gObj.notify(events.batchDelete, { rows: this.parent.getRowsObject() });\n        gObj.notify(events.toolbarRefresh, {});\n    };\n    BatchEdit.prototype.refreshRowIdx = function () {\n        var rows = [];\n        var mRows = [];\n        var nonMovableRows = [];\n        var frzCols = this.parent.getFrozenColumns();\n        if (this.parent.frozenRows) {\n            rows = [].slice.call(this.parent.getHeaderTable().querySelector('tbody').children);\n            if (frzCols) {\n                mRows = [].slice.call(this.parent.getHeaderContent().querySelector('.e-movableheader').querySelector('tbody').children);\n                for (var i = 0; i < mRows.length; i++) {\n                    nonMovableRows[i] = this.parent.createElement('tr', { className: 'emptynonmv' });\n                }\n            }\n        }\n        if (frzCols) {\n            mRows = mRows.concat([].slice.call(this.parent.getContentTable().querySelector('tbody').children));\n            nonMovableRows = nonMovableRows.concat([].slice.call(this.parent.element.querySelector('.e-movablecontent').querySelector('tbody').children));\n        }\n        rows = rows.concat([].slice.call(this.parent.getContentTable().querySelector('tbody').children));\n        for (var i = 0, j = 0, len = rows.length; i < len; i++) {\n            if (rows[i].classList.contains('e-row') && !rows[i].classList.contains('e-hiddenrow')) {\n                rows[i].setAttribute('aria-rowindex', j.toString());\n                if (frzCols) {\n                    mRows[i].setAttribute('aria-rowindex', j.toString());\n                    if (nonMovableRows[i].classList.contains('e-row')) {\n                        nonMovableRows[i].setAttribute('aria-rowindex', j.toString());\n                    }\n                }\n                j++;\n            }\n            else {\n                rows[i].removeAttribute('aria-rowindex');\n                if (frzCols) {\n                    mRows[i].removeAttribute('aria-rowindex');\n                }\n            }\n        }\n    };\n    BatchEdit.prototype.getIndexFromData = function (data) {\n        return inArray(data, this.parent.getCurrentViewRecords());\n    };\n    BatchEdit.prototype.bulkAddRow = function (data) {\n        var gObj = this.parent;\n        if (!gObj.editSettings.allowAdding) {\n            return;\n        }\n        if (gObj.isEdit) {\n            this.saveCell();\n            this.parent.notify(events.editNextValCell, {});\n        }\n        if (gObj.isEdit) {\n            return;\n        }\n        var defaultData = data ? data : this.getDefaultData();\n        var args = {\n            defaultData: defaultData,\n            primaryKey: gObj.getPrimaryKeyFieldNames(),\n            cancel: false\n        };\n        gObj.trigger(events.beforeBatchAdd, args);\n        if (args.cancel) {\n            return;\n        }\n        this.isAdded = true;\n        gObj.clearSelection();\n        var mTr;\n        var mTbody;\n        var row = new RowRenderer(this.serviceLocator, null, this.parent);\n        var model = new RowModelGenerator(this.parent);\n        var modelData = model.generateRows([args.defaultData]);\n        var tr = row.render(modelData[0], gObj.getColumns());\n        var col;\n        var index;\n        for (var i = 0; i < this.parent.groupSettings.columns.length; i++) {\n            tr.insertBefore(this.parent.createElement('td', { className: 'e-indentcell' }), tr.firstChild);\n            modelData[0].cells.unshift(new Cell({ cellType: CellType.Indent }));\n        }\n        var tbody = gObj.getContentTable().querySelector('tbody');\n        tr.classList.add('e-insertedrow');\n        if (tbody.querySelector('.e-emptyrow')) {\n            tbody.querySelector('.e-emptyrow').remove();\n        }\n        if (gObj.getFrozenColumns()) {\n            mTr = this.renderMovable(tr);\n            if (gObj.frozenRows) {\n                mTbody = gObj.getHeaderContent().querySelector('.e-movableheader').querySelector('tbody');\n            }\n            else {\n                mTbody = gObj.getContent().querySelector('.e-movablecontent').querySelector('tbody');\n            }\n            this.parent.editSettings.newRowPosition === 'Top' ? mTbody.insertBefore(mTr, mTbody.firstChild) : mTbody.appendChild(mTr);\n            addClass(mTr.querySelectorAll('.e-rowcell'), ['e-updatedtd']);\n            if (this.parent.height === 'auto') {\n                this.parent.notify(events.frozenHeight, {});\n            }\n        }\n        if (gObj.frozenRows) {\n            tbody = gObj.getHeaderContent().querySelector('tbody');\n        }\n        this.parent.editSettings.newRowPosition === 'Top' ? tbody.insertBefore(tr, tbody.firstChild) : tbody.appendChild(tr);\n        addClass(tr.querySelectorAll('.e-rowcell'), ['e-updatedtd']);\n        modelData[0].isDirty = true;\n        modelData[0].changes = extend({}, {}, modelData[0].data, true);\n        modelData[0].edit = 'add';\n        this.addRowObject(modelData[0]);\n        this.refreshRowIdx();\n        this.focus.forgetPrevious();\n        gObj.notify(events.batchAdd, { rows: this.parent.getRowsObject() });\n        var changes = this.getBatchChanges();\n        var addedRecords = 'addedRecords';\n        this.parent.editSettings.newRowPosition === 'Top' ? gObj.selectRow(0) :\n            gObj.selectRow(this.parent.getCurrentViewRecords().length + changes[addedRecords].length - 1);\n        if (!data) {\n            index = this.findNextEditableCell(0, true);\n            col = gObj.getColumns()[index];\n            this.parent.editSettings.newRowPosition === 'Top' ? this.editCell(0, col.field, true) :\n                this.editCell(this.parent.getCurrentViewRecords().length + changes[addedRecords].length - 1, col.field, true);\n        }\n        if (this.parent.aggregates.length > 0 && data) {\n            this.parent.notify(events.refreshFooterRenderer, {});\n        }\n        var args1 = {\n            defaultData: args.defaultData, row: tr,\n            columnObject: col, columnIndex: index, primaryKey: args.primaryKey, cell: tr.cells[index]\n        };\n        gObj.trigger(events.batchAdd, args1);\n    };\n    BatchEdit.prototype.renderMovable = function (ele) {\n        var mEle = ele.cloneNode(true);\n        for (var i = 0; i < this.parent.frozenColumns; i++) {\n            mEle.removeChild(mEle.children[0]);\n        }\n        for (var i = this.parent.frozenColumns, len = ele.childElementCount; i < len; i++) {\n            ele.removeChild(ele.children[ele.childElementCount - 1]);\n        }\n        return mEle;\n    };\n    BatchEdit.prototype.findNextEditableCell = function (columnIndex, isAdd, isValOnly) {\n        var cols = this.parent.getColumns();\n        var endIndex = cols.length;\n        var validation;\n        for (var i = columnIndex; i < endIndex; i++) {\n            validation = isValOnly ? isNullOrUndefined(cols[i].validationRules) : false;\n            if (!isAdd && this.checkNPCell(cols[i])) {\n                return i;\n            }\n            else if (isAdd && !cols[i].template && cols[i].visible && cols[i].allowEditing &&\n                !(cols[i].isIdentity && cols[i].isPrimaryKey) && !validation) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    BatchEdit.prototype.checkNPCell = function (col) {\n        return !col.template && col.visible && !col.isPrimaryKey && !col.isIdentity && col.allowEditing;\n    };\n    BatchEdit.prototype.getDefaultData = function () {\n        var gObj = this.parent;\n        var data = {};\n        var dValues = { 'number': 0, 'string': null, 'boolean': false, 'date': null, 'datetime': null };\n        for (var _i = 0, _a = gObj.columns; _i < _a.length; _i++) {\n            var col = _a[_i];\n            if (col.field) {\n                setValue(col.field, col.defaultValue ? col.defaultValue : dValues[col.type], data);\n            }\n        }\n        return data;\n    };\n    BatchEdit.prototype.setCellIdx = function (target) {\n        var gLen = 0;\n        if (this.parent.allowGrouping) {\n            gLen = this.parent.groupSettings.columns.length;\n        }\n        this.cellDetails.cellIndex = target.cellIndex - gLen;\n        this.cellDetails.rowIndex = parseInt(target.parentElement.getAttribute('aria-rowindex'), 10);\n    };\n    BatchEdit.prototype.editCell = function (index, field, isAdd) {\n        var gObj = this.parent;\n        var col = gObj.getColumnByField(field);\n        var keys = gObj.getPrimaryKeyFieldNames();\n        if (gObj.editSettings.allowEditing && col.allowEditing) {\n            if (gObj.isEdit && !(this.cellDetails.column.field === field\n                && (this.cellDetails.rowIndex === index && this.parent.getDataRows().length - 1 !== index))) {\n                this.saveCell();\n                if (this.cellDetails.rowIndex === index && this.cellDetails.column.field === field) {\n                    return;\n                }\n            }\n            if (gObj.isEdit) {\n                return;\n            }\n            var row = void 0;\n            var rowData = void 0;\n            var mRowData = void 0;\n            var colIdx = gObj.getColumnIndexByField(field);\n            var frzCols = gObj.getFrozenColumns();\n            if (frzCols && colIdx >= frzCols) {\n                row = gObj.getMovableDataRows()[index];\n                mRowData = this.parent.getRowObjectFromUID(this.parent.getMovableDataRows()[index].getAttribute('data-uid'));\n                rowData = mRowData.changes ? extend({}, {}, mRowData.changes, true) : extend({}, {}, this.getDataByIndex(index), true);\n            }\n            else {\n                row = gObj.getDataRows()[index];\n                rowData = extend({}, {}, this.getDataByIndex(index), true);\n            }\n            if ((keys[0] === col.field && !row.classList.contains('e-insertedrow')) || col.columns ||\n                (col.isPrimaryKey && col.isIdentity)) {\n                this.parent.isLastCellPrimaryKey = true;\n                return;\n            }\n            this.parent.isLastCellPrimaryKey = false;\n            var rowObj = gObj.getRowObjectFromUID(row.getAttribute('data-uid'));\n            var cells = [].slice.apply(row.cells);\n            var args = {\n                cell: cells[this.getColIndex(cells, this.getCellIdx(col.uid))], row: row,\n                columnName: col.field, columnObject: col, isForeignKey: !isNullOrUndefined(col.foreignKeyValue),\n                primaryKey: keys, rowData: rowData,\n                validationRules: extend({}, col.validationRules ? col.validationRules : {}),\n                value: getObject(col.field, rowData),\n                type: !isAdd ? 'edit' : 'add', cancel: false,\n                foreignKeyData: rowObj && rowObj.foreignKeyData\n            };\n            if (!args.cell) {\n                return;\n            }\n            gObj.trigger(events.cellEdit, args);\n            if (args.cancel) {\n                return;\n            }\n            this.cellDetails = {\n                rowData: rowData, column: col, value: args.value, isForeignKey: args.isForeignKey, rowIndex: index,\n                cellIndex: parseInt(args.cell.getAttribute('aria-colindex'), 10),\n                foreignKeyData: args.foreignKeyData\n            };\n            if (args.cell.classList.contains('e-updatedtd')) {\n                this.isColored = true;\n                args.cell.classList.remove('e-updatedtd');\n            }\n            gObj.isEdit = true;\n            gObj.clearSelection();\n            if (!gObj.isCheckBoxSelection || !gObj.isPersistSelection) {\n                gObj.selectRow(this.cellDetails.rowIndex, true);\n            }\n            this.renderer.update(args);\n            this.form = gObj.element.querySelector('#' + gObj.element.id + 'EditForm');\n            gObj.editModule.applyFormValidation([col]);\n            this.parent.element.querySelector('.e-gridpopup').style.display = 'none';\n        }\n    };\n    BatchEdit.prototype.updateCell = function (rowIndex, field, value) {\n        var col = this.parent.getColumnByField(field);\n        var index = this.parent.getColumnIndexByField(field);\n        if (col && !col.isPrimaryKey) {\n            var td = this.parent.getDataRows()[rowIndex].querySelectorAll('.e-rowcell')[index];\n            if (this.parent.getFrozenColumns()) {\n                var cells = [].slice.call(this.parent.getDataRows()[rowIndex].querySelectorAll('.e-rowcell')).concat([].slice.call(this.parent.getMovableDataRows()[rowIndex].querySelectorAll('.e-rowcell')));\n                td = cells[index];\n            }\n            var rowObj = this.parent.getRowObjectFromUID(td.parentElement.getAttribute('data-uid'));\n            this.refreshTD(td, col, rowObj, value);\n            this.parent.trigger(events.queryCellInfo, {\n                cell: td, column: col, data: rowObj.changes\n            });\n        }\n    };\n    BatchEdit.prototype.setChanges = function (rowObj, field, value) {\n        if (!rowObj.changes) {\n            rowObj.changes = extend({}, {}, rowObj.data, true);\n        }\n        if (!isNullOrUndefined(field)) {\n            DataUtil.setValue(field, value, rowObj.changes);\n        }\n        if (rowObj.data[field] !== value) {\n            rowObj.isDirty = true;\n        }\n    };\n    BatchEdit.prototype.updateRow = function (index, data) {\n        var keys = Object.keys(data);\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var col = keys_1[_i];\n            this.updateCell(index, col, data[col]);\n        }\n    };\n    BatchEdit.prototype.getCellIdx = function (uid) {\n        var cIdx = this.parent.getColumnIndexByUid(uid) + this.parent.groupSettings.columns.length;\n        if (!isNullOrUndefined(this.parent.detailTemplate) || !isNullOrUndefined(this.parent.childGrid)) {\n            cIdx++;\n        }\n        return cIdx;\n    };\n    BatchEdit.prototype.refreshTD = function (td, column, rowObj, value) {\n        var cell = new CellRenderer(this.parent, this.serviceLocator);\n        var rowcell;\n        this.setChanges(rowObj, column.field, value);\n        var frzCols = this.parent.getFrozenColumns();\n        refreshForeignData(rowObj, this.parent.getForeignKeyColumns(), rowObj.changes);\n        if (frzCols && this.getCellIdx(column.uid) >= frzCols && this.parent.getColumns().length === rowObj.cells.length) {\n            rowcell = rowObj.cells.slice(frzCols, rowObj.cells.length);\n        }\n        else {\n            rowcell = rowObj.cells;\n        }\n        cell.refreshTD(td, rowcell[this.getCellIdx(column.uid) - (this.getCellIdx(column.uid) >= frzCols ? frzCols : 0)], rowObj.changes, { 'index': this.getCellIdx(column.uid) });\n        td.classList.add('e-updatedtd');\n        this.parent.notify(events.toolbarRefresh, {});\n    };\n    BatchEdit.prototype.getColIndex = function (cells, index) {\n        var cIdx = 0;\n        if (this.parent.allowGrouping && this.parent.groupSettings.columns) {\n            cIdx = this.parent.groupSettings.columns.length;\n        }\n        if (!isNullOrUndefined(this.parent.detailTemplate) || !isNullOrUndefined(this.parent.childGrid)) {\n            cIdx++;\n        }\n        for (var m = 0; m < cells.length; m++) {\n            var colIndex = parseInt(cells[m].getAttribute('aria-colindex'), 10);\n            if (colIndex === index - cIdx) {\n                return m;\n            }\n        }\n        return -1;\n    };\n    BatchEdit.prototype.editNextValCell = function () {\n        var gObj = this.parent;\n        if (this.isAdded && !gObj.isEdit) {\n            for (var i = this.cellDetails.cellIndex; i < gObj.getColumns().length; i++) {\n                if (gObj.isEdit) {\n                    return;\n                }\n                var index = this.findNextEditableCell(this.cellDetails.cellIndex + 1, true, true);\n                var col = gObj.getColumns()[index];\n                if (col) {\n                    this.editCell(0, col.field, true);\n                    this.saveCell();\n                }\n            }\n            if (!gObj.isEdit) {\n                this.isAdded = false;\n            }\n        }\n    };\n    BatchEdit.prototype.saveCell = function (isForceSave) {\n        var gObj = this.parent;\n        if (!isForceSave && (!gObj.isEdit || this.validateFormObj())) {\n            return;\n        }\n        var tr = parentsUntil(this.form, 'e-row');\n        var column = this.cellDetails.column;\n        var obj = {};\n        obj[column.field] = this.cellDetails.rowData[column.field];\n        var editedData = gObj.editModule.getCurrentEditedData(this.form, obj);\n        var cloneEditedData = extend({}, editedData);\n        editedData = extend({}, editedData, this.cellDetails.rowData);\n        var value = getObject(column.field, cloneEditedData);\n        if (!isNullOrUndefined(column.field)) {\n            setValue(column.field, value, editedData);\n        }\n        var args = {\n            columnName: column.field,\n            value: getObject(column.field, editedData),\n            rowData: this.cellDetails.rowData,\n            previousValue: this.cellDetails.value,\n            columnObject: column,\n            cell: this.form.parentElement,\n            isForeignKey: this.cellDetails.isForeignKey, cancel: false\n        };\n        if (!isForceSave) {\n            gObj.trigger(events.cellSave, args);\n            gObj.notify(events.batchForm, { formObj: this.form });\n        }\n        if (args.cancel) {\n            return;\n        }\n        gObj.editModule.destroyForm();\n        gObj.isEdit = false;\n        gObj.editModule.destroyWidgets([column]);\n        this.parent.notify(events.tooltipDestroy, {});\n        this.refreshTD(args.cell, column, gObj.getRowObjectFromUID(tr.getAttribute('data-uid')), args.value);\n        removeClass([tr], ['e-editedrow', 'e-batchrow']);\n        removeClass([args.cell], ['e-editedbatchcell', 'e-boolcell']);\n        if (!isNullOrUndefined(args.value) && args.value.toString() ===\n            (!isNullOrUndefined(this.cellDetails.value) ? this.cellDetails.value : '').toString() && !this.isColored\n            || (isNullOrUndefined(args.value) && isNullOrUndefined(this.cellDetails.value) &&\n                !args.cell.parentElement.classList.contains('e-insertedrow'))) {\n            args.cell.classList.remove('e-updatedtd');\n        }\n        gObj.trigger(events.cellSaved, args);\n        gObj.notify(events.toolbarRefresh, {});\n        this.isColored = false;\n        if (this.parent.aggregates.length > 0) {\n            this.parent.notify(events.refreshFooterRenderer, {});\n            if (this.parent.groupSettings.columns.length > 0 && !this.isAddRow(this.cellDetails.rowIndex)) {\n                this.parent.notify(events.groupAggregates, {});\n            }\n        }\n    };\n    BatchEdit.prototype.getDataByIndex = function (index) {\n        var row = this.parent.getRowObjectFromUID(this.parent.getDataRows()[index].getAttribute('data-uid'));\n        return row.changes ? row.changes : row.data;\n    };\n    BatchEdit.prototype.keyDownHandler = function (e) {\n        if (e.action === 'tab' && this.parent.isEdit) {\n            var rowcell = parentsUntil(e.target, 'e-rowcell');\n            if (rowcell) {\n                var cell = rowcell.querySelector('.e-field');\n                if (cell) {\n                    var visibleColumns = this.parent.getVisibleColumns();\n                    if (visibleColumns[visibleColumns.length - 1].field === cell.getAttribute('name')) {\n                        this.saveCell();\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @hidden\n     */\n    BatchEdit.prototype.addCancelWhilePaging = function () {\n        if (this.validateFormObj()) {\n            this.parent.notify(events.destroyForm, {});\n            this.parent.isEdit = false;\n            this.isColored = false;\n        }\n    };\n    return BatchEdit;\n}());\nexport { BatchEdit };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { NormalEdit } from './normal-edit';\n/**\n * `DialogEdit` module is used to handle dialog editing actions.\n * @hidden\n */\nvar DialogEdit = /** @class */ (function (_super) {\n    __extends(DialogEdit, _super);\n    function DialogEdit(parent, serviceLocator, renderer) {\n        var _this = \n        //constructor\n        _super.call(this, parent, serviceLocator) || this;\n        _this.parent = parent;\n        _this.serviceLocator = serviceLocator;\n        _this.renderer = renderer;\n        return _this;\n    }\n    DialogEdit.prototype.closeEdit = function () {\n        //closeEdit\n        _super.prototype.closeEdit.call(this);\n    };\n    DialogEdit.prototype.addRecord = function (data, index) {\n        //addRecord\n        _super.prototype.addRecord.call(this, data, index);\n    };\n    DialogEdit.prototype.endEdit = function () {\n        //endEdit\n        _super.prototype.endEdit.call(this);\n    };\n    DialogEdit.prototype.updateRow = function (index, data) {\n        _super.prototype.updateRow.call(this, index, data);\n    };\n    DialogEdit.prototype.deleteRecord = function (fieldname, data) {\n        //deleteRecord\n        _super.prototype.deleteRecord.call(this, fieldname, data);\n    };\n    DialogEdit.prototype.startEdit = function (tr) {\n        _super.prototype.startEdit.call(this, tr);\n    };\n    return DialogEdit;\n}(NormalEdit));\nexport { DialogEdit };\n","import { extend } from '@syncfusion/ej2-base';\nimport { DatePicker, DateTimePicker } from '@syncfusion/ej2-calendars';\nimport { isEditable, getComplexFieldID, getObject, getCustomDateFormat } from '../base/util';\n/**\n * `DatePickerEditCell` is used to handle datepicker cell type editing.\n * @hidden\n */\nvar DatePickerEditCell = /** @class */ (function () {\n    function DatePickerEditCell(parent) {\n        this.parent = parent;\n    }\n    DatePickerEditCell.prototype.create = function (args) {\n        /* tslint:disable-next-line:no-any */\n        var complexFieldName = getComplexFieldID(args.column.field);\n        return this.parent.createElement('input', {\n            className: 'e-field', attrs: {\n                id: this.parent.element.id + complexFieldName,\n                name: complexFieldName, type: 'text', 'e-mappinguid': args.column.uid\n            }\n        });\n    };\n    DatePickerEditCell.prototype.read = function (element) {\n        return element.ej2_instances[0].value;\n    };\n    DatePickerEditCell.prototype.write = function (args) {\n        if (args.column.editType === 'datepickeredit') {\n            this.obj = new DatePicker(extend(dateanddatetimerender(args, this.parent.editSettings.mode, this.parent.enableRtl), args.column.edit.params));\n        }\n        else if (args.column.editType === 'datetimepickeredit') {\n            this.obj = new DateTimePicker(extend(dateanddatetimerender(args, this.parent.editSettings.mode, this.parent.enableRtl), args.column.edit.params));\n        }\n        this.obj.appendTo(args.element);\n    };\n    DatePickerEditCell.prototype.destroy = function () {\n        if (this.obj) {\n            this.obj.destroy();\n        }\n    };\n    return DatePickerEditCell;\n}());\nexport { DatePickerEditCell };\nfunction dateanddatetimerender(args, mode, rtl) {\n    var isInline = mode !== 'Dialog';\n    var format = getCustomDateFormat(args.column.format, args.column.type);\n    var value = getObject(args.column.field, args.rowData);\n    value = value ? new Date(value) : null;\n    return {\n        floatLabelType: isInline ? 'Never' : 'Always',\n        value: value,\n        format: format,\n        placeholder: isInline ?\n            '' : args.column.headerText, enableRtl: rtl,\n        enabled: isEditable(args.column, args.requestType, args.element),\n    };\n}\n","/**\n * `TemplateEditCell` is used to handle template cell.\n * @hidden\n */\nvar TemplateEditCell = /** @class */ (function () {\n    function TemplateEditCell(parent) {\n        this.parent = parent;\n    }\n    TemplateEditCell.prototype.read = function (element, value) {\n        return value;\n    };\n    TemplateEditCell.prototype.write = function () {\n        //\n    };\n    TemplateEditCell.prototype.destroy = function () {\n        //\n    };\n    return TemplateEditCell;\n}());\nexport { TemplateEditCell };\n","import { EventHandler, closest } from '@syncfusion/ej2-base';\nimport { extend, getValue } from '@syncfusion/ej2-base';\nimport { remove } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport * as events from '../base/constant';\nimport { EditRender } from '../renderer/edit-renderer';\nimport { BooleanEditCell } from '../renderer/boolean-edit-cell';\nimport { DropDownEditCell } from '../renderer/dropdown-edit-cell';\nimport { NumericEditCell } from '../renderer/numeric-edit-cell';\nimport { DefaultEditCell } from '../renderer/default-edit-cell';\nimport { InlineEdit } from './inline-edit';\nimport { BatchEdit } from './batch-edit';\nimport { DialogEdit } from './dialog-edit';\nimport { Dialog } from '@syncfusion/ej2-popups';\nimport { parentsUntil, getComplexFieldID, setComplexFieldID } from '../base/util';\nimport { FormValidator } from '@syncfusion/ej2-inputs';\nimport { DatePickerEditCell } from '../renderer/datepicker-edit-cell';\nimport { calculateRelativeBasedPosition } from '@syncfusion/ej2-popups';\nimport { TemplateEditCell } from '../renderer/template-edit-cell';\nimport { DataUtil } from '@syncfusion/ej2-data';\n/**\n * The `Edit` module is used to handle editing actions.\n */\nvar Edit = /** @class */ (function () {\n    /**\n     * Constructor for the Grid editing module\n     * @hidden\n     */\n    function Edit(parent, serviceLocator) {\n        this.editCellType = {\n            'dropdownedit': DropDownEditCell, 'numericedit': NumericEditCell,\n            'datepickeredit': DatePickerEditCell, 'datetimepickeredit': DatePickerEditCell,\n            'booleanedit': BooleanEditCell, 'defaultedit': DefaultEditCell,\n            'templateedit': TemplateEditCell\n        };\n        this.editType = { 'Inline': InlineEdit, 'Normal': InlineEdit, 'Batch': BatchEdit, 'Dialog': DialogEdit };\n        this.parent = parent;\n        this.serviceLocator = serviceLocator;\n        this.l10n = this.serviceLocator.getService('localization');\n        this.addEventListener();\n        this.updateEditObj();\n        this.createAlertDlg();\n        this.createConfirmDlg();\n    }\n    Edit.prototype.updateColTypeObj = function () {\n        var _this = this;\n        this.parent.columnModel.forEach(function (col) {\n            if (_this.parent.editSettings.template || col.editTemplate) {\n                var templteCell = 'templateedit';\n                col.edit = extend(new _this.editCellType[templteCell](_this.parent), col.edit || {});\n            }\n            else {\n                col.edit = extend(new _this.editCellType[col.editType && _this.editCellType[col.editType] ?\n                    col.editType : 'defaultedit'](_this.parent, _this.serviceLocator), col.edit || {});\n            }\n        });\n    };\n    /**\n     * For internal use only - Get the module name.\n     * @private\n     */\n    Edit.prototype.getModuleName = function () {\n        return 'edit';\n    };\n    /**\n     * @hidden\n     */\n    Edit.prototype.onPropertyChanged = function (e) {\n        if (e.module !== this.getModuleName()) {\n            return;\n        }\n        var gObj = this.parent;\n        var newProp = e.properties;\n        for (var _i = 0, _a = Object.keys(e.properties); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'allowAdding':\n                case 'allowDeleting':\n                case 'allowEditing':\n                    if (gObj.editSettings.allowAdding || gObj.editSettings.allowEditing || gObj.editSettings.allowDeleting) {\n                        this.initialEnd();\n                    }\n                    break;\n                case 'mode':\n                    this.updateEditObj();\n                    gObj.isEdit = false;\n                    gObj.refresh();\n                    break;\n            }\n        }\n    };\n    Edit.prototype.updateEditObj = function () {\n        if (this.editModule) {\n            this.editModule.destroy();\n        }\n        this.renderer = new EditRender(this.parent, this.serviceLocator);\n        this.editModule = new this.editType[this.parent.editSettings.mode](this.parent, this.serviceLocator, this.renderer);\n    };\n    Edit.prototype.initialEnd = function () {\n        this.updateColTypeObj();\n    };\n    Edit.prototype.wireEvents = function () {\n        EventHandler.add(this.parent.getContent(), 'touchstart', this.tapEvent, this);\n    };\n    Edit.prototype.unwireEvents = function () {\n        EventHandler.remove(this.parent.getContent(), 'touchstart', this.tapEvent);\n    };\n    Edit.prototype.tapEvent = function (e) {\n        if (this.getUserAgent()) {\n            if (!Global.timer) {\n                Global.timer = setTimeout(function () {\n                    Global.timer = null;\n                }, 300);\n            }\n            else {\n                clearTimeout(Global.timer);\n                Global.timer = null;\n                this.parent.notify(events.doubleTap, e);\n            }\n        }\n    };\n    Edit.prototype.getUserAgent = function () {\n        var userAgent = window.navigator.userAgent.toLowerCase();\n        return /iphone|ipod|ipad/.test(userAgent);\n    };\n    /**\n     * Edits any bound record in the Grid by TR element.\n     * @param {HTMLTableRowElement} tr - Defines the table row to be edited.\n     */\n    Edit.prototype.startEdit = function (tr) {\n        var gObj = this.parent;\n        if (!gObj.editSettings.allowEditing || gObj.isEdit || gObj.editSettings.mode === 'Batch') {\n            return;\n        }\n        if (!gObj.getSelectedRows().length) {\n            if (!tr) {\n                this.showDialog('EditOperationAlert', this.alertDObj);\n                return;\n            }\n        }\n        else if (!tr) {\n            tr = gObj.getSelectedRows()[0];\n        }\n        if (tr.style.display === 'none') {\n            return;\n        }\n        this.editModule.startEdit(tr);\n        this.refreshToolbar();\n        gObj.element.querySelector('.e-gridpopup').style.display = 'none';\n        this.parent.notify('start-edit', {});\n    };\n    /**\n     * Cancels edited state.\n     */\n    Edit.prototype.closeEdit = function () {\n        if (this.parent.editSettings.mode === 'Batch' && this.parent.editSettings.showConfirmDialog\n            && this.parent.element.querySelectorAll('.e-updatedtd').length) {\n            this.showDialog('CancelEdit', this.dialogObj);\n            return;\n        }\n        this.editModule.closeEdit();\n        this.refreshToolbar();\n        this.parent.notify('close-edit', {});\n    };\n    Edit.prototype.refreshToolbar = function () {\n        this.parent.notify(events.toolbarRefresh, {});\n    };\n    /**\n     * To adds a new row at the top with the given data. When data is not passed, it will add empty rows.\n     * > `editSettings.allowEditing` should be true.\n     * @param {Object} data - Defines the new add record data.\n     * @param {number} index - Defines the row index to be added\n     */\n    Edit.prototype.addRecord = function (data, index) {\n        if (!this.parent.editSettings.allowAdding) {\n            return;\n        }\n        this.editModule.addRecord(data, index);\n        this.refreshToolbar();\n        this.parent.notify('start-add', {});\n    };\n    /**\n     * Deletes a record with the given options. If fieldname and data are not given, the Grid will delete the selected record.\n     * > `editSettings.allowDeleting` should be true.\n     * @param {string} fieldname - Defines the primary key field name of the column.\n     * @param {Object} data - Defines the JSON data record to be deleted.\n     */\n    Edit.prototype.deleteRecord = function (fieldname, data) {\n        var gObj = this.parent;\n        if (!gObj.editSettings.allowDeleting) {\n            return;\n        }\n        if (!data) {\n            if (!gObj.getSelectedRecords().length) {\n                this.showDialog('DeleteOperationAlert', this.alertDObj);\n                return;\n            }\n        }\n        if (gObj.editSettings.showDeleteConfirmDialog) {\n            this.showDialog('ConfirmDelete', this.dialogObj);\n            return;\n        }\n        this.editModule.deleteRecord(fieldname, data);\n    };\n    /**\n     * Deletes a visible row by TR element.\n     * @param {HTMLTableRowElement} tr - Defines the table row element.\n     */\n    Edit.prototype.deleteRow = function (tr) {\n        this.deleteRecord(null, this.parent.getCurrentViewRecords()[parseInt(tr.getAttribute('aria-rowindex'), 10)]);\n    };\n    /**\n     * If Grid is in editable state, you can save a record by invoking endEdit.\n     */\n    Edit.prototype.endEdit = function () {\n        if (this.parent.editSettings.mode === 'Batch' && this.parent.editSettings.showConfirmDialog &&\n            (isNullOrUndefined(this.formObj) || this.formObj.validate())) {\n            this.parent.editModule.saveCell();\n            this.parent.notify(events.editNextValCell, {});\n            if (isNullOrUndefined(this.formObj) || this.formObj.validate()) {\n                this.showDialog('BatchSaveConfirm', this.dialogObj);\n                return;\n            }\n        }\n        this.endEditing();\n    };\n    /**\n     * To update the specified cell by given value without changing into edited state.\n     * @param {number} rowIndex Defines the row index.\n     * @param {string} field Defines the column field.\n     * @param {string | number | boolean | Date} value - Defines the value to be changed.\n     */\n    Edit.prototype.updateCell = function (rowIndex, field, value) {\n        this.editModule.updateCell(rowIndex, field, value);\n    };\n    /**\n     * To update the specified row by given values without changing into edited state.\n     * @param {number} index Defines the row index.\n     * @param {Object} data Defines the data object to be updated.\n     */\n    Edit.prototype.updateRow = function (index, data) {\n        this.editModule.updateRow(index, data);\n    };\n    /**\n     * Resets added, edited, and deleted records in the batch mode.\n     */\n    Edit.prototype.batchCancel = function () {\n        this.closeEdit();\n    };\n    /**\n     * Bulk saves added, edited, and deleted records in the batch mode.\n     */\n    Edit.prototype.batchSave = function () {\n        this.endEdit();\n    };\n    /**\n     * Changes a particular cell into edited state based on the row index and field name provided in the `batch` mode.\n     * @param {number} index - Defines row index to edit a particular cell.\n     * @param {string} field - Defines the field name of the column to perform batch edit.\n     */\n    Edit.prototype.editCell = function (index, field) {\n        this.editModule.editCell(index, field);\n    };\n    /**\n     * Checks the status of validation at the time of editing. If validation is passed, it returns true.\n     * @return {boolean}\n     */\n    Edit.prototype.editFormValidate = function () {\n        if (this.formObj) {\n            return this.formObj.validate();\n        }\n        return false;\n    };\n    /**\n     * Gets the added, edited,and deleted data before bulk save to the DataSource in batch mode.\n     * @return {Object}\n     */\n    Edit.prototype.getBatchChanges = function () {\n        return this.editModule.getBatchChanges ? this.editModule.getBatchChanges() : {};\n    };\n    /**\n     * Gets the current value of the edited component.\n     */\n    Edit.prototype.getCurrentEditCellData = function () {\n        var obj = this.getCurrentEditedData(this.formObj.element, {});\n        return obj[Object.keys(obj)[0]];\n    };\n    /**\n     * Saves the cell that is currently edited. It does not save the value to the DataSource.\n     */\n    Edit.prototype.saveCell = function () {\n        this.editModule.saveCell();\n    };\n    Edit.prototype.endEditing = function () {\n        this.editModule.endEdit();\n        this.refreshToolbar();\n    };\n    Edit.prototype.showDialog = function (content, obj) {\n        obj.content = '<div>' + this.l10n.getConstant(content) + '</div>';\n        obj.dataBind();\n        obj.show();\n    };\n    Edit.prototype.getValueFromType = function (col, value) {\n        var val = value;\n        switch (col.type) {\n            case 'number':\n                val = !isNaN(parseFloat(value)) ? parseFloat(value) : null;\n                break;\n            case 'boolean':\n                if (col.editType !== 'booleanedit') {\n                    val = value === this.l10n.getConstant('True') || value === true ? true : false;\n                }\n                break;\n            case 'date':\n            case 'datetime':\n                if (col.editType !== 'datepickeredit' && col.editType !== 'datetimepickeredit' && value && value.length) {\n                    val = new Date(value);\n                }\n                else if (value === '') {\n                    val = null;\n                }\n                break;\n        }\n        return val;\n    };\n    Edit.prototype.destroyToolTip = function () {\n        var elements = [].slice.call(this.parent.element.querySelectorAll('.e-griderror'));\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var elem = elements_1[_i];\n            remove(elem);\n        }\n        this.parent.getContent().firstElementChild.style.position = 'relative';\n    };\n    Edit.prototype.createConfirmDlg = function () {\n        this.dialogObj = this.dlgWidget([\n            {\n                click: this.dlgOk.bind(this),\n                buttonModel: { content: this.l10n.getConstant('OKButton'), cssClass: 'e-primary', isPrimary: true }\n            },\n            {\n                click: this.dlgCancel.bind(this),\n                buttonModel: { cssClass: 'e-flat', content: this.l10n.getConstant('CancelButton') }\n            }\n        ], 'EditConfirm');\n    };\n    Edit.prototype.createAlertDlg = function () {\n        this.alertDObj = this.dlgWidget([\n            {\n                click: this.alertClick.bind(this), buttonModel: { content: this.l10n.getConstant('OKButton'), cssClass: 'e-flat', isPrimary: true }\n            }\n        ], 'EditAlert');\n    };\n    Edit.prototype.alertClick = function () {\n        this.alertDObj.hide();\n    };\n    Edit.prototype.dlgWidget = function (btnOptions, name) {\n        var div = this.parent.createElement('div', { id: this.parent.element.id + name });\n        this.parent.element.appendChild(div);\n        var options = {\n            showCloseIcon: false,\n            isModal: true,\n            visible: false,\n            closeOnEscape: true,\n            target: this.parent.element,\n            width: '320px',\n            animationSettings: { effect: 'None' }\n        };\n        options.buttons = btnOptions;\n        var obj = new Dialog(options);\n        obj.appendTo(div);\n        return obj;\n    };\n    Edit.prototype.dlgCancel = function () {\n        this.dialogObj.hide();\n    };\n    Edit.prototype.dlgOk = function (e) {\n        switch (this.dialogObj.element.querySelector('.e-dlg-content').firstElementChild.innerText) {\n            case this.l10n.getConstant('ConfirmDelete'):\n                this.editModule.deleteRecord();\n                break;\n            case this.l10n.getConstant('CancelEdit'):\n                this.editModule.closeEdit();\n                break;\n            case this.l10n.getConstant('BatchSaveConfirm'):\n                this.endEditing();\n                break;\n            case this.l10n.getConstant('BatchSaveLostChanges'):\n                if (this.parent.editSettings.mode === 'Batch') {\n                    this.editModule.addCancelWhilePaging();\n                }\n                this.executeAction();\n                break;\n        }\n        this.dlgCancel();\n    };\n    /**\n     * @hidden\n     */\n    Edit.prototype.addEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.on(events.inBoundModelChanged, this.onPropertyChanged, this);\n        this.parent.on(events.initialEnd, this.initialEnd, this);\n        this.parent.on(events.keyPressed, this.keyPressHandler, this);\n        this.parent.on(events.autoCol, this.updateColTypeObj, this);\n        this.parent.on(events.tooltipDestroy, this.destroyToolTip, this);\n        this.parent.on(events.preventBatch, this.preventBatch, this);\n        this.parent.on(events.destroyForm, this.destroyForm, this);\n        this.actionBeginFunction = this.onActionBegin.bind(this);\n        this.actionCompleteFunction = this.actionComplete.bind(this);\n        this.parent.addEventListener(events.actionBegin, this.actionBeginFunction);\n        this.parent.addEventListener(events.actionComplete, this.actionCompleteFunction);\n        this.parent.on(events.initialEnd, this.wireEvents, this);\n    };\n    /**\n     * @hidden\n     */\n    Edit.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(events.inBoundModelChanged, this.onPropertyChanged);\n        this.parent.off(events.initialEnd, this.initialEnd);\n        this.parent.off(events.keyPressed, this.keyPressHandler);\n        this.parent.off(events.autoCol, this.updateColTypeObj);\n        this.parent.off(events.tooltipDestroy, this.destroyToolTip);\n        this.parent.off(events.preventBatch, this.preventBatch);\n        this.parent.off(events.destroyForm, this.destroyForm);\n        this.parent.removeEventListener(events.actionComplete, this.actionCompleteFunction);\n        this.parent.removeEventListener(events.actionBegin, this.actionBeginFunction);\n        this.parent.off(events.initialEnd, this.unwireEvents);\n    };\n    Edit.prototype.actionComplete = function (e) {\n        var actions = ['add', 'beginEdit', 'save', 'delete', 'cancel'];\n        if (actions.indexOf(e.requestType) < 0) {\n            this.parent.isEdit = false;\n        }\n        this.refreshToolbar();\n    };\n    /**\n     * @hidden\n     */\n    Edit.prototype.getCurrentEditedData = function (form, editedData) {\n        var _this = this;\n        var gObj = this.parent;\n        if (gObj.editSettings.template) {\n            [].slice.call(form.elements).forEach(function (element) {\n                if (element.hasAttribute('name')) {\n                    var field = setComplexFieldID(element.getAttribute('name'));\n                    var column = gObj.getColumnByField(field) || { field: field, type: element.getAttribute('type') };\n                    var value = void 0;\n                    if (column.type === 'checkbox' || column.type === 'boolean') {\n                        value = element.checked;\n                    }\n                    else if (element.value) {\n                        value = element.value;\n                        if (element.ej2_instances &&\n                            element.ej2_instances.length &&\n                            !isNullOrUndefined(element.ej2_instances[0].value)) {\n                            element.blur();\n                            value = element.ej2_instances[0].value;\n                        }\n                    }\n                    if (column.edit && typeof column.edit.read === 'string') {\n                        value = getValue(column.edit.read, window)(element, value);\n                    }\n                    else if (column.edit && column.edit.read) {\n                        value = column.edit.read(element, value);\n                    }\n                    value = gObj.editModule.getValueFromType(column, value);\n                    DataUtil.setValue(column.field, value, editedData);\n                }\n            });\n            return editedData;\n        }\n        gObj.columnModel.filter(function (col) { return col.editTemplate; }).forEach(function (col) {\n            if (form[getComplexFieldID(col.field)]) {\n                var inputElements = [].slice.call(form[getComplexFieldID(col.field)]);\n                inputElements = inputElements.length ? inputElements : [form[getComplexFieldID(col.field)]];\n                inputElements.forEach(function (input) {\n                    var value = _this.getValue(col, input, editedData);\n                    DataUtil.setValue(col.field, value, editedData);\n                });\n            }\n        });\n        var inputs = [].slice.call(form.querySelectorAll('.e-field'));\n        for (var i = 0, len = inputs.length; i < len; i++) {\n            var col = gObj.getColumnByUid(inputs[i].getAttribute('e-mappinguid'));\n            if (col && col.field) {\n                var value = this.getValue(col, inputs[i], editedData);\n                DataUtil.setValue(col.field, value, editedData);\n            }\n        }\n        return editedData;\n    };\n    Edit.prototype.getValue = function (col, input, editedData) {\n        var value = input.value;\n        var gObj = this.parent;\n        var temp = col.edit.read;\n        if (col.type === 'checkbox' || col.type === 'boolean') {\n            value = input.checked;\n        }\n        if (typeof temp === 'string') {\n            temp = getValue(temp, window);\n            value = gObj.editModule.getValueFromType(col, (temp)(input, value));\n        }\n        else {\n            value = gObj.editModule.getValueFromType(col, col.edit.read(input, value));\n        }\n        if (isNullOrUndefined(editedData[col.field]) && value === '') {\n            value = editedData[col.field];\n        }\n        return value;\n    };\n    /**\n     * @hidden\n     */\n    Edit.prototype.onActionBegin = function (e) {\n        var restrictedRequestTypes = ['filterafteropen', 'filterbeforeopen', 'filterchoicerequest', 'save'];\n        if (this.parent.editSettings.mode !== 'Batch' && this.formObj && !this.formObj.isDestroyed\n            && restrictedRequestTypes.indexOf(e.requestType) === -1) {\n            this.destroyWidgets();\n            this.destroyForm();\n        }\n    };\n    /**\n     * @hidden\n     */\n    Edit.prototype.destroyWidgets = function (cols) {\n        var gObj = this.parent;\n        if (gObj.editSettings.template) {\n            this.parent.destroyTemplate(['editSettingsTemplate']);\n        }\n        cols = cols ? cols : this.parent.getColumns();\n        if (cols.some(function (column) { return !isNullOrUndefined(column.editTemplate); })) {\n            this.parent.destroyTemplate(['editTemplate']);\n        }\n        for (var _i = 0, cols_1 = cols; _i < cols_1.length; _i++) {\n            var col = cols_1[_i];\n            var temp = col.edit.destroy;\n            if (col.edit.destroy) {\n                if (typeof temp === 'string') {\n                    temp = getValue(temp, window);\n                    temp();\n                }\n                else {\n                    col.edit.destroy();\n                }\n            }\n        }\n        [].slice.call(this.formObj.element.elements).forEach(function (element) {\n            if (element.hasAttribute('name')) {\n                if (element.ej2_instances &&\n                    element.ej2_instances.length &&\n                    !element.ej2_instances[0].isDestroyed) {\n                    element.ej2_instances[0].destroy();\n                }\n            }\n        });\n    };\n    /**\n     * @hidden\n     */\n    Edit.prototype.destroyForm = function () {\n        this.destroyToolTip();\n        if (this.formObj && !this.formObj.isDestroyed) {\n            this.formObj.destroy();\n        }\n        this.destroyToolTip();\n    };\n    /**\n     * To destroy the editing.\n     * @return {void}\n     * @hidden\n     */\n    Edit.prototype.destroy = function () {\n        var gridElement = this.parent.element;\n        if (!gridElement) {\n            return;\n        }\n        var hasGridChild = gridElement.querySelector('.e-gridheader') &&\n            gridElement.querySelector('.e-gridcontent') ? true : false;\n        if (hasGridChild) {\n            this.destroyForm();\n        }\n        this.removeEventListener();\n        var elem = this.dialogObj.element;\n        if (elem.childElementCount > 0) {\n            this.dialogObj.destroy();\n            remove(elem);\n        }\n        elem = this.alertDObj.element;\n        if (elem.childElementCount > 0) {\n            this.alertDObj.destroy();\n            remove(elem);\n        }\n        if (!hasGridChild) {\n            return;\n        }\n        this.unwireEvents();\n        if (this.editModule) {\n            this.editModule.destroy();\n        }\n    };\n    Edit.prototype.keyPressHandler = function (e) {\n        switch (e.action) {\n            case 'insert':\n                this.addRecord();\n                break;\n            case 'delete':\n                if ((e.target.tagName !== 'INPUT' || e.target.classList.contains('e-checkselect'))\n                    && !document.querySelector('.e-popup-open')) {\n                    this.deleteRecord();\n                }\n                break;\n            case 'f2':\n                this.startEdit();\n                break;\n            case 'enter':\n                if (!parentsUntil(e.target, 'e-unboundcelldiv') && this.parent.editSettings.mode !== 'Batch' &&\n                    (parentsUntil(e.target, 'e-gridcontent') || (this.parent.frozenRows\n                        && parentsUntil(e.target, 'e-headercontent')))\n                    && !document.querySelectorAll('.e-popup-open').length) {\n                    e.preventDefault();\n                    this.endEdit();\n                }\n                break;\n            case 'escape':\n                this.closeEdit();\n                break;\n        }\n    };\n    Edit.prototype.preventBatch = function (args) {\n        this.preventObj = args;\n        this.showDialog('BatchSaveLostChanges', this.dialogObj);\n    };\n    Edit.prototype.executeAction = function () {\n        this.preventObj.handler.call(this.preventObj.instance, this.preventObj.arg1, this.preventObj.arg2, this.preventObj.arg3, this.preventObj.arg4, this.preventObj.arg5, this.preventObj.arg6, this.preventObj.arg7, this.preventObj.arg8);\n    };\n    /**\n     * @hidden\n     */\n    Edit.prototype.applyFormValidation = function (cols) {\n        var gObj = this.parent;\n        var frzCols = gObj.getFrozenColumns();\n        var form = this.parent.editSettings.mode !== 'Dialog' ?\n            gObj.element.querySelector('.e-gridform') :\n            document.querySelector('#' + gObj.element.id + '_dialogEdit_wrapper').querySelector('.e-gridform');\n        var mForm = gObj.element.querySelectorAll('.e-gridform')[1];\n        var rules = {};\n        var mRules = {};\n        cols = cols ? cols : gObj.getColumns();\n        cols.forEach(function (col, index) {\n            if (!col.visible) {\n                return;\n            }\n            if (index < frzCols && col.validationRules) {\n                rules[getComplexFieldID(col.field)] = col.validationRules;\n            }\n            else if (index >= frzCols && col.validationRules) {\n                mRules[getComplexFieldID(col.field)] = col.validationRules;\n            }\n        });\n        if (frzCols && this.parent.editSettings.mode !== 'Dialog') {\n            this.parent.editModule.mFormObj = this.createFormObj(mForm, mRules);\n        }\n        else {\n            rules = extend(rules, mRules);\n        }\n        this.parent.editModule.formObj = this.createFormObj(form, rules);\n    };\n    Edit.prototype.createFormObj = function (form, rules) {\n        var _this = this;\n        return new FormValidator(form, {\n            rules: rules,\n            locale: this.parent.locale,\n            validationComplete: function (args) {\n                _this.validationComplete(args);\n            },\n            customPlacement: function (inputElement, error) {\n                _this.valErrorPlacement(inputElement, error);\n            }\n        });\n    };\n    Edit.prototype.valErrorPlacement = function (inputElement, error) {\n        if (this.parent.isEdit) {\n            var id = error.getAttribute('for');\n            var elem = this.getElemTable(inputElement).querySelector('#' + id + '_Error');\n            if (!elem) {\n                this.createTooltip(inputElement, error, id, '');\n            }\n            else {\n                elem.querySelector('.e-tip-content').innerHTML = error.outerHTML;\n            }\n        }\n    };\n    Edit.prototype.getElemTable = function (inputElement) {\n        var isFHdr;\n        if (this.parent.editSettings.mode !== 'Dialog') {\n            isFHdr = (this.parent.frozenRows && this.parent.frozenRows\n                > (parseInt(closest(inputElement, '.e-row').getAttribute('aria-rowindex'), 10) || 0));\n        }\n        return this.parent.editSettings.mode !== 'Dialog' ? isFHdr ? this.parent.getHeaderTable() : this.parent.getContentTable() :\n            document.querySelector('#' + this.parent.element.id + '_dialogEdit_wrapper');\n    };\n    Edit.prototype.validationComplete = function (args) {\n        if (this.parent.isEdit) {\n            var elem = this.getElemTable(args.element).querySelector('#' + args.inputName + '_Error');\n            if (elem) {\n                if (args.status === 'failure') {\n                    elem.style.display = '';\n                }\n                else {\n                    elem.style.display = 'none';\n                }\n            }\n        }\n    };\n    Edit.prototype.createTooltip = function (element, error, name, display) {\n        var gcontent = this.parent.getContent().firstElementChild;\n        var isScroll = gcontent.scrollHeight > gcontent.clientHeight || gcontent.scrollWidth > gcontent.clientWidth;\n        var isInline = this.parent.editSettings.mode !== 'Dialog';\n        var isFHdr;\n        if (isInline) {\n            isFHdr = (this.parent.frozenRows && this.parent.frozenRows\n                > (parseInt(closest(element, '.e-row').getAttribute('aria-rowindex'), 10) || 0));\n        }\n        var fCont = this.parent.getContent().querySelector('.e-frozencontent');\n        var table = isInline ?\n            (isFHdr ? this.parent.getHeaderTable() : this.parent.getContentTable()) :\n            document.querySelector('#' + this.parent.element.id + '_dialogEdit_wrapper').querySelector('.e-dlg-content');\n        var client = table.getBoundingClientRect();\n        var left = isInline ?\n            this.parent.element.getBoundingClientRect().left : client.left;\n        var input = closest(element, 'td');\n        var inputClient = input ? input.getBoundingClientRect() : element.parentElement.getBoundingClientRect();\n        var div = this.parent.createElement('div', {\n            className: 'e-tooltip-wrap e-control e-popup e-griderror',\n            id: name + '_Error',\n            styles: 'display:' + display + ';top:' +\n                ((isFHdr ? inputClient.top + inputClient.height : inputClient.bottom - client.top\n                    - (this.parent.getFrozenColumns() ? fCont.scrollTop : 0)) + table.scrollTop + 9) + 'px;left:' +\n                (inputClient.left - left + table.scrollLeft + inputClient.width / 2) + 'px;' +\n                'max-width:' + inputClient.width + 'px;text-align:center;'\n        });\n        var content = this.parent.createElement('div', { className: 'e-tip-content' });\n        content.appendChild(error);\n        var validationForBottomRowPos;\n        if (this.parent.editSettings.newRowPosition === 'Bottom' && this.parent.editSettings.mode !== 'Dialog' &&\n            ((this.editModule.args && this.editModule.args.requestType === 'add') || this.editModule.isAdded)) {\n            validationForBottomRowPos = true;\n        }\n        var arrow;\n        if (validationForBottomRowPos) {\n            arrow = this.parent.createElement('div', { className: 'e-arrow-tip e-tip-bottom' });\n            arrow.appendChild(this.parent.createElement('div', { className: 'e-arrow-tip-outer e-tip-bottom' }));\n            arrow.appendChild(this.parent.createElement('div', { className: 'e-arrow-tip-inner e-tip-bottom' }));\n        }\n        else {\n            arrow = this.parent.createElement('div', { className: 'e-arrow-tip e-tip-top' });\n            arrow.appendChild(this.parent.createElement('div', { className: 'e-arrow-tip-outer e-tip-top' }));\n            arrow.appendChild(this.parent.createElement('div', { className: 'e-arrow-tip-inner e-tip-top' }));\n        }\n        div.appendChild(content);\n        div.appendChild(arrow);\n        table.appendChild(div);\n        var lineHeight = parseInt(document.defaultView.getComputedStyle(div, null).getPropertyValue('font-size'), 10);\n        if (div.getBoundingClientRect().width < inputClient.width &&\n            div.querySelector('label').getBoundingClientRect().height / (lineHeight * 1.2) >= 2) {\n            div.style.width = div.style.maxWidth;\n        }\n        div.style.left = (parseInt(div.style.left, 10) - div.offsetWidth / 2) + 'px';\n        if (!isScroll && isInline && !this.parent.allowPaging) {\n            gcontent.style.position = 'static';\n            var pos = calculateRelativeBasedPosition(input, div);\n            div.style.top = pos.top + inputClient.height + 9 + 'px';\n        }\n        if (validationForBottomRowPos) {\n            div.style.bottom = inputClient.height + 9 + 'px';\n            div.style.top = null;\n        }\n    };\n    /**\n     * @hidden\n     */\n    Edit.prototype.checkColumnIsGrouped = function (col) {\n        return !col.visible && !(this.parent.groupSettings.columns.indexOf(col.field) > -1);\n    };\n    return Edit;\n}());\nexport { Edit };\n/** @hidden */\nexport var Global;\n(function (Global) {\n    Global.timer = null;\n})(Global || (Global = {}));\n","/**\n * public Enum for `PdfBorderOverlapStyle`.\n * @private\n */\nexport var PdfBorderOverlapStyle;\n(function (PdfBorderOverlapStyle) {\n    /**\n     * Specifies the type of `Overlap`.\n     * @private\n     */\n    PdfBorderOverlapStyle[PdfBorderOverlapStyle[\"Overlap\"] = 0] = \"Overlap\";\n    /**\n     * Specifies the type of `Inside`.\n     * @private\n     */\n    PdfBorderOverlapStyle[PdfBorderOverlapStyle[\"Inside\"] = 1] = \"Inside\";\n})(PdfBorderOverlapStyle || (PdfBorderOverlapStyle = {}));\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { PdfBorders, PdfPaddings } from './pdf-borders';\nimport { PdfBorderOverlapStyle } from './../../tables/light-tables/enum';\n/**\n * Base class for the `grid style`,\n */\nvar PdfGridStyleBase = /** @class */ (function () {\n    function PdfGridStyleBase() {\n    }\n    Object.defineProperty(PdfGridStyleBase.prototype, \"backgroundBrush\", {\n        // Properties\n        /**\n         * Gets or sets the `background brush`.\n         * @private\n         */\n        get: function () {\n            return this.gridBackgroundBrush;\n        },\n        set: function (value) {\n            this.gridBackgroundBrush = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridStyleBase.prototype, \"textBrush\", {\n        /**\n         * Gets or sets the `text brush`.\n         * @private\n         */\n        get: function () {\n            return this.gridTextBrush;\n        },\n        set: function (value) {\n            this.gridTextBrush = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridStyleBase.prototype, \"textPen\", {\n        /**\n         * Gets or sets the `text pen`.\n         * @private\n         */\n        get: function () {\n            return this.gridTextPen;\n        },\n        set: function (value) {\n            this.gridTextPen = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridStyleBase.prototype, \"font\", {\n        /**\n         * Gets or sets the `font`.\n         * @private\n         */\n        get: function () {\n            return this.gridFont;\n        },\n        set: function (value) {\n            this.gridFont = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridStyleBase.prototype, \"backgroundImage\", {\n        /**\n         * Gets or sets the `background Image`.\n         * @private\n         */\n        get: function () {\n            return this.gridBackgroundImage;\n        },\n        set: function (value) {\n            this.gridBackgroundImage = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridStyleBase;\n}());\nexport { PdfGridStyleBase };\n/**\n * `PdfGridStyle` class provides customization of the appearance for the 'PdfGrid'.\n */\nvar PdfGridStyle = /** @class */ (function (_super) {\n    __extends(PdfGridStyle, _super);\n    //constructor\n    /**\n     * Initialize a new instance for `PdfGridStyle` class.\n     * @private\n     */\n    function PdfGridStyle() {\n        var _this = _super.call(this) || this;\n        _this.gridBorderOverlapStyle = PdfBorderOverlapStyle.Overlap;\n        _this.bAllowHorizontalOverflow = false;\n        _this.gridHorizontalOverflowType = PdfHorizontalOverflowType.LastPage;\n        return _this;\n    }\n    Object.defineProperty(PdfGridStyle.prototype, \"cellSpacing\", {\n        //Properties\n        /**\n         * Gets or sets the `cell spacing` of the 'PdfGrid'.\n         * @private\n         */\n        get: function () {\n            if (typeof this.gridCellSpacing === 'undefined') {\n                this.gridCellSpacing = 0;\n            }\n            return this.gridCellSpacing;\n        },\n        set: function (value) {\n            this.gridCellSpacing = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridStyle.prototype, \"horizontalOverflowType\", {\n        /**\n         * Gets or sets the type of the `horizontal overflow` of the 'PdfGrid'.\n         * @private\n         */\n        get: function () {\n            return this.gridHorizontalOverflowType;\n        },\n        set: function (value) {\n            this.gridHorizontalOverflowType = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridStyle.prototype, \"allowHorizontalOverflow\", {\n        /**\n         * Gets or sets a value indicating whether to `allow horizontal overflow`.\n         * @private\n         */\n        get: function () {\n            return this.bAllowHorizontalOverflow;\n        },\n        set: function (value) {\n            this.bAllowHorizontalOverflow = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridStyle.prototype, \"cellPadding\", {\n        /**\n         * Gets or sets the `cell padding`.\n         * @private\n         */\n        get: function () {\n            if (typeof this.gridCellPadding === 'undefined') {\n                this.gridCellPadding = new PdfPaddings();\n            }\n            return this.gridCellPadding;\n        },\n        set: function (value) {\n            if (typeof this.gridCellPadding === 'undefined') {\n                this.gridCellPadding = new PdfPaddings();\n                this.gridCellPadding = value;\n            }\n            else {\n                this.gridCellPadding = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridStyle.prototype, \"borderOverlapStyle\", {\n        /**\n         * Gets or sets the `border overlap style` of the 'PdfGrid'.\n         * @private\n         */\n        get: function () {\n            return this.gridBorderOverlapStyle;\n        },\n        set: function (value) {\n            this.gridBorderOverlapStyle = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridStyle;\n}(PdfGridStyleBase));\nexport { PdfGridStyle };\n/**\n * `PdfGridCellStyle` class provides customization of the appearance for the 'PdfGridCell'.\n */\nvar PdfGridCellStyle = /** @class */ (function (_super) {\n    __extends(PdfGridCellStyle, _super);\n    /**\n     * Initializes a new instance of the `PdfGridCellStyle` class.\n     * @private\n     */\n    function PdfGridCellStyle() {\n        var _this = _super.call(this) || this;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.gridCellBorders = PdfBorders.default;\n        return _this;\n    }\n    Object.defineProperty(PdfGridCellStyle.prototype, \"stringFormat\", {\n        //Properties\n        /**\n         * Gets the `string format` of the 'PdfGridCell'.\n         * @private\n         */\n        get: function () {\n            return this.format;\n        },\n        set: function (value) {\n            this.format = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCellStyle.prototype, \"borders\", {\n        /**\n         * Gets or sets the `border` of the 'PdfGridCell'.\n         * @private\n         */\n        get: function () {\n            return this.gridCellBorders;\n        },\n        set: function (value) {\n            this.gridCellBorders = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCellStyle.prototype, \"cellPadding\", {\n        /**\n         * Gets or sets the `cell padding`.\n         * @private\n         */\n        get: function () {\n            return this.gridCellPadding;\n        },\n        set: function (value) {\n            if (this.gridCellPadding == null || typeof this.gridCellPadding === 'undefined') {\n                this.gridCellPadding = new PdfPaddings();\n            }\n            this.gridCellPadding = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridCellStyle;\n}(PdfGridStyleBase));\nexport { PdfGridCellStyle };\n/**\n * `PdfGridRowStyle` class provides customization of the appearance for the `PdfGridRow`.\n */\nvar PdfGridRowStyle = /** @class */ (function () {\n    // public setBackgroundImage(value : PdfImage) : void {\n    //     this.gridRowBackgroundImage = value;\n    //     if (typeof this.parent !== 'undefined') {\n    //         for (let i : number = 0; i < this.parent.cells.count; i++) {\n    //             this.parent.cells.getCell(i).style.backgroundImage = value;\n    //         }\n    //     }\n    // }\n    // Constructor\n    /**\n     * Initializes a new instance of the `PdfGridRowStyle` class.\n     * @private\n     */\n    function PdfGridRowStyle() {\n        //\n    }\n    Object.defineProperty(PdfGridRowStyle.prototype, \"backgroundBrush\", {\n        // Properties\n        /**\n         * Gets or sets the `background brush`.\n         * @private\n         */\n        get: function () {\n            return this.gridRowBackgroundBrush;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfGridRowStyle.prototype.setBackgroundBrush = function (value) {\n        this.gridRowBackgroundBrush = value;\n        if (typeof this.parent !== 'undefined') {\n            for (var i = 0; i < this.parent.cells.count; i++) {\n                this.parent.cells.getCell(i).style.backgroundBrush = value;\n            }\n        }\n    };\n    Object.defineProperty(PdfGridRowStyle.prototype, \"textBrush\", {\n        /**\n         * Gets or sets the `text brush`.\n         * @private\n         */\n        get: function () {\n            return this.gridRowTextBrush;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfGridRowStyle.prototype.setTextBrush = function (value) {\n        this.gridRowTextBrush = value;\n        if (typeof this.parent !== 'undefined') {\n            for (var i = 0; i < this.parent.cells.count; i++) {\n                this.parent.cells.getCell(i).style.textBrush = value;\n            }\n        }\n    };\n    Object.defineProperty(PdfGridRowStyle.prototype, \"textPen\", {\n        /**\n         * Gets or sets the `text pen`.\n         * @private\n         */\n        get: function () {\n            return this.gridRowTextPen;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfGridRowStyle.prototype.setTextPen = function (value) {\n        this.gridRowTextPen = value;\n        if (typeof this.parent !== 'undefined') {\n            for (var i = 0; i < this.parent.cells.count; i++) {\n                this.parent.cells.getCell(i).style.textPen = value;\n            }\n        }\n    };\n    Object.defineProperty(PdfGridRowStyle.prototype, \"font\", {\n        /**\n         * Gets or sets the `font`.\n         * @private\n         */\n        get: function () {\n            return this.gridRowFont;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfGridRowStyle.prototype.setFont = function (value) {\n        this.gridRowFont = value;\n        if (typeof this.parent !== 'undefined') {\n            for (var i = 0; i < this.parent.cells.count; i++) {\n                this.parent.cells.getCell(i).style.font = value;\n            }\n        }\n    };\n    Object.defineProperty(PdfGridRowStyle.prototype, \"border\", {\n        /**\n         * Gets or sets the `border` of the current row.\n         * @private\n         */\n        get: function () {\n            if (typeof this.gridRowBorder === 'undefined') {\n                this.setBorder(new PdfBorders());\n            }\n            return this.gridRowBorder;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfGridRowStyle.prototype.setBorder = function (value) {\n        this.gridRowBorder = value;\n        if (typeof this.parent !== 'undefined') {\n            for (var i = 0; i < this.parent.cells.count; i++) {\n                this.parent.cells.getCell(i).style.borders = value;\n            }\n        }\n    };\n    /**\n     * sets the `parent row` of the current object.\n     * @private\n     */\n    PdfGridRowStyle.prototype.setParent = function (parent) {\n        this.parent = parent;\n    };\n    Object.defineProperty(PdfGridRowStyle.prototype, \"backgroundImage\", {\n        /**\n         * Gets or sets the `backgroundImage` of the 'PdfGridCell'.\n         * @private\n         */\n        get: function () {\n            return this.gridRowBackgroundImage;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridRowStyle;\n}());\nexport { PdfGridRowStyle };\n/**\n * public Enum for `PdfHorizontalOverflowType`.\n * @private\n */\nexport var PdfHorizontalOverflowType;\n(function (PdfHorizontalOverflowType) {\n    /**\n     * Specifies the type of `NextPage`.\n     * @private\n     */\n    PdfHorizontalOverflowType[PdfHorizontalOverflowType[\"NextPage\"] = 0] = \"NextPage\";\n    /**\n     * Specifies the type of `LastPage`.\n     * @private\n     */\n    PdfHorizontalOverflowType[PdfHorizontalOverflowType[\"LastPage\"] = 1] = \"LastPage\";\n})(PdfHorizontalOverflowType || (PdfHorizontalOverflowType = {}));\n","/**\n * public Enum for `PdfLayoutType`.\n * @private\n */\nexport var PdfLayoutType;\n(function (PdfLayoutType) {\n    /**\n     * Specifies the type of `Paginate`.\n     * @private\n     */\n    PdfLayoutType[PdfLayoutType[\"Paginate\"] = 0] = \"Paginate\";\n    /**\n     * Specifies the type of `OnePage`.\n     * @private\n     */\n    PdfLayoutType[PdfLayoutType[\"OnePage\"] = 1] = \"OnePage\";\n})(PdfLayoutType || (PdfLayoutType = {}));\n/**\n * public Enum for `PdfLayoutBreakType`.\n * @private\n */\nexport var PdfLayoutBreakType;\n(function (PdfLayoutBreakType) {\n    /**\n     * Specifies the type of `FitPage`.\n     * @private\n     */\n    PdfLayoutBreakType[PdfLayoutBreakType[\"FitPage\"] = 0] = \"FitPage\";\n    /**\n     * Specifies the type of `FitElement`.\n     * @private\n     */\n    PdfLayoutBreakType[PdfLayoutBreakType[\"FitElement\"] = 1] = \"FitElement\";\n    /**\n     * Specifies the type of `FitColumnsToPage`.\n     * @private\n     */\n    PdfLayoutBreakType[PdfLayoutBreakType[\"FitColumnsToPage\"] = 2] = \"FitColumnsToPage\";\n})(PdfLayoutBreakType || (PdfLayoutBreakType = {}));\n","import { RectangleF, PointF } from './../../drawing/pdf-drawing';\nimport { PdfLayoutParams, PdfLayoutFormat } from './base/element-layouter';\n/**\n * `PdfLayoutElement` class represents the base class for all elements that can be layout on the pages.\n * @private\n */\nvar PdfLayoutElement = /** @class */ (function () {\n    function PdfLayoutElement() {\n    }\n    Object.defineProperty(PdfLayoutElement.prototype, \"raiseBeginPageLayout\", {\n        // Property\n        /**\n         * Gets a value indicating whether the `start page layout event` should be raised.\n         * @private\n         */\n        get: function () {\n            return (typeof this.beginPageLayout !== 'undefined');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfLayoutElement.prototype, \"raiseEndPageLayout\", {\n        /**\n         * Gets a value indicating whether the `ending page layout event` should be raised.\n         * @private\n         */\n        get: function () {\n            return (typeof this.endPageLayout !== 'undefined');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Event Handlers\n    PdfLayoutElement.prototype.onBeginPageLayout = function (args) {\n        if (this.beginPageLayout) {\n            this.beginPageLayout(this, args);\n        }\n    };\n    PdfLayoutElement.prototype.onEndPageLayout = function (args) {\n        if (this.endPageLayout) {\n            this.endPageLayout(this, args);\n        }\n    };\n    PdfLayoutElement.prototype.drawHelper = function (arg2, arg3, arg4, arg5) {\n        if (arg3 instanceof PointF && typeof arg3.width === 'undefined' && typeof arg4 === 'undefined') {\n            return this.drawHelper(arg2, arg3.x, arg3.y);\n        }\n        else if (typeof arg3 === 'number' && typeof arg4 === 'number' && typeof arg5 === 'undefined') {\n            return this.drawHelper(arg2, arg3, arg4, null);\n        }\n        else if (arg3 instanceof RectangleF && typeof arg3.width !== 'undefined' && typeof arg4 === 'undefined') {\n            return this.drawHelper(arg2, arg3, null);\n        }\n        else if (arg3 instanceof PointF && typeof arg3.width === 'undefined' && arg4 instanceof PdfLayoutFormat) {\n            return this.drawHelper(arg2, arg3.x, arg3.y, arg4);\n        }\n        else if (typeof arg3 === 'number' && typeof arg4 === 'number' && (arg5 instanceof PdfLayoutFormat || arg5 == null)) {\n            var width = (arg2.graphics.clientSize.width - arg3);\n            var layoutRectangle = new RectangleF(arg3, arg4, width, 0);\n            return this.drawHelper(arg2, layoutRectangle, arg5);\n        }\n        else if (arg3 instanceof RectangleF && typeof arg3.width !== 'undefined' && typeof arg4 === 'boolean') {\n            this.bEmbedFonts = arg4;\n            return this.drawHelper(arg2, arg3, null);\n        }\n        else {\n            var param = new PdfLayoutParams();\n            var temparg3 = arg3;\n            var temparg4 = arg4;\n            param.page = arg2;\n            param.bounds = temparg3;\n            param.format = (temparg4 != null) ? temparg4 : new PdfLayoutFormat();\n            var result = this.layout(param);\n            return result;\n        }\n    };\n    return PdfLayoutElement;\n}());\nexport { PdfLayoutElement };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * TextLayouter.ts class for EJ2-PDF\n */\nimport { ElementLayouter, PdfLayoutResult } from './element-layouter';\nimport { RectangleF, SizeF } from './../../../drawing/pdf-drawing';\nimport { PdfStringLayouter } from './../../fonts/string-layouter';\nimport { PdfLayoutBreakType } from './../../figures/enum';\nimport { PdfColor } from './../../pdf-color';\nimport { PdfTextWebLink } from './../../../annotations/pdf-text-web-link';\n/**\n * Class that `layouts the text`.\n * @private\n */\nvar TextLayouter = /** @class */ (function (_super) {\n    __extends(TextLayouter, _super);\n    // Constructors\n    /**\n     * Initializes a new instance of the `TextLayouter` class.\n     * @private\n     */\n    function TextLayouter(element) {\n        return _super.call(this, element) || this;\n    }\n    Object.defineProperty(TextLayouter.prototype, \"element\", {\n        /**\n         * Gets the layout `element`.\n         * @private\n         */\n        get: function () {\n            return _super.prototype.getElement.call(this);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Implementation\n    /**\n     * `Layouts` the element.\n     * @private\n     */\n    TextLayouter.prototype.layoutInternal = function (param) {\n        /* tslint:disable */\n        this.format = (this.element.stringFormat !== null && typeof this.element.stringFormat !== 'undefined') ? this.element.stringFormat : null;\n        var currentPage = param.page;\n        var currentBounds = param.bounds;\n        var text = this.element.value;\n        var result = null;\n        var pageResult = new TextPageLayoutResult();\n        pageResult.page = currentPage;\n        pageResult.remainder = text;\n        for (;;) {\n            pageResult = this.layoutOnPage(text, currentPage, currentBounds, param);\n            result = this.getLayoutResult(pageResult);\n            break;\n        }\n        /* tslint:enable */\n        return result;\n    };\n    /**\n     * Raises `PageLayout` event if needed.\n     * @private\n     */\n    TextLayouter.prototype.getLayoutResult = function (pageResult) {\n        var result = new PdfTextLayoutResult(pageResult.page, pageResult.bounds, pageResult.remainder, pageResult.lastLineBounds);\n        return result;\n    };\n    /* tslint:disable */\n    /**\n     * `Layouts` the text on the page.\n     * @private\n     */\n    TextLayouter.prototype.layoutOnPage = function (text, currentPage, currentBounds, param) {\n        var result = new TextPageLayoutResult();\n        result.remainder = text;\n        result.page = currentPage;\n        currentBounds = this.checkCorrectBounds(currentPage, currentBounds);\n        var layouter = new PdfStringLayouter();\n        var stringResult = layouter.layout(text, this.element.font, this.format, currentBounds, currentPage.getClientSize().height, false, new SizeF(0, 0));\n        var textFinished = (stringResult.remainder == null);\n        var doesntFit = (param.format.break === PdfLayoutBreakType.FitElement);\n        var canDraw = !(doesntFit || stringResult.empty);\n        // Draw the text.\n        var graphics = currentPage.graphics;\n        var brush = this.element.getBrush();\n        if (this.element instanceof PdfTextWebLink) {\n            brush.color = new PdfColor(0, 0, 255);\n        }\n        graphics.drawStringLayoutResult(stringResult, this.element.font, this.element.pen, brush, currentBounds, this.format);\n        var lineInfo = stringResult.lines[stringResult.lineCount - 1];\n        result.lastLineBounds = graphics.getLineBounds(stringResult.lineCount - 1, stringResult, this.element.font, currentBounds, this.format);\n        result.bounds = this.getTextPageBounds(currentPage, currentBounds, stringResult);\n        result.remainder = stringResult.remainder;\n        result.end = (textFinished);\n        return result;\n    };\n    /* tslint:enable */\n    /**\n     * `Corrects current bounds` on the page.\n     * @private\n     */\n    TextLayouter.prototype.checkCorrectBounds = function (currentPage, currentBounds) {\n        var pageSize = currentPage.graphics.clientSize;\n        currentBounds.height = (currentBounds.height > 0) ? currentBounds.height : pageSize.height - currentBounds.y;\n        return currentBounds;\n    };\n    /**\n     * Returns a `rectangle` where the text was printed on the page.\n     * @private\n     */\n    /* tslint:disable */\n    TextLayouter.prototype.getTextPageBounds = function (currentPage, currentBounds, stringResult) {\n        var textSize = stringResult.actualSize;\n        var x = currentBounds.x;\n        var y = currentBounds.y;\n        var width = (currentBounds.width > 0) ? currentBounds.width : textSize.width;\n        var height = textSize.height;\n        var shiftedRect = currentPage.graphics.checkCorrectLayoutRectangle(textSize, currentBounds.x, currentBounds.y, this.format);\n        // if (currentBounds.width <= 0) {\n        x = shiftedRect.x;\n        // }\n        var verticalShift = currentPage.graphics.getTextVerticalAlignShift(textSize.height, currentBounds.height, this.format);\n        y += verticalShift;\n        var bounds = new RectangleF(x, y, width, height);\n        return bounds;\n    };\n    return TextLayouter;\n}(ElementLayouter));\nexport { TextLayouter };\nvar TextPageLayoutResult = /** @class */ (function () {\n    function TextPageLayoutResult() {\n    }\n    return TextPageLayoutResult;\n}());\nexport { TextPageLayoutResult };\nvar PdfTextLayoutResult = /** @class */ (function (_super) {\n    __extends(PdfTextLayoutResult, _super);\n    // Constructors\n    /**\n     * Initializes the new instance of `PdfTextLayoutResult` class.\n     * @private\n     */\n    function PdfTextLayoutResult(page, bounds, remainder, lastLineBounds) {\n        var _this = _super.call(this, page, bounds) || this;\n        _this.remainderText = remainder;\n        _this.lastLineTextBounds = lastLineBounds;\n        return _this;\n    }\n    Object.defineProperty(PdfTextLayoutResult.prototype, \"remainder\", {\n        // Properties\n        /**\n         * Gets a value that contains the `text` that was not printed.\n         * @private\n         */\n        get: function () {\n            return this.remainderText;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTextLayoutResult.prototype, \"lastLineBounds\", {\n        /**\n         * Gets a value that indicates the `bounds` of the last line that was printed on the page.\n         * @private\n         */\n        get: function () {\n            return this.lastLineTextBounds;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfTextLayoutResult;\n}(PdfLayoutResult));\nexport { PdfTextLayoutResult };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * PdfTextElement.ts class for EJ2-PDF\n */\nimport { PdfLayoutElement } from './../figures/layout-element';\nimport { PdfBrush } from './../brushes/pdf-brush';\nimport { PdfFont } from './../fonts/pdf-font';\nimport { PdfStandardFont } from './../fonts/pdf-standard-font';\nimport { PdfPen } from './../pdf-pen';\nimport { PdfLayoutParams } from './../figures/base/element-layouter';\nimport { TextLayouter } from './base/text-layouter';\nimport { PdfSolidBrush } from './../brushes/pdf-solid-brush';\nimport { PdfColor } from './../pdf-color';\nimport { RectangleF, SizeF, PointF } from './../../drawing/pdf-drawing';\nimport { PdfLayoutFormat } from './base/element-layouter';\nimport { PdfStringLayouter } from './../fonts/string-layouter';\nimport { PdfTextAlignment } from './../enum';\n/**\n * `PdfTextElement` class represents the text area with the ability to span several pages\n * and inherited from the 'PdfLayoutElement' class.\n * @private\n */\nvar PdfTextElement = /** @class */ (function (_super) {\n    __extends(PdfTextElement, _super);\n    function PdfTextElement(arg1, arg2, arg3, arg4, arg5) {\n        var _this = _super.call(this) || this;\n        // Fields\n        /**\n         * `Text` data.\n         * @private\n         */\n        _this.content = '';\n        /**\n         * `Value` of text data.\n         * @private\n         */\n        _this.elementValue = '';\n        /**\n         * indicate whether the drawText with PointF overload is called or not.\n         * @default false\n         * @private\n         */\n        _this.hasPointOverload = false;\n        /**\n         * indicate whether the PdfGridCell value is `PdfTextElement`\n         * @default false\n         * @private\n         */\n        _this.isPdfTextElement = false;\n        if (typeof arg1 === 'undefined') {\n            //\n        }\n        else if (typeof arg1 === 'string' && typeof arg2 === 'undefined') {\n            _this = _super.call(this) || this;\n            _this.content = arg1;\n            _this.elementValue = arg1;\n        }\n        else if (typeof arg1 === 'string' && arg2 instanceof PdfFont && typeof arg3 === 'undefined') {\n            _this = _super.call(this) || this;\n            _this.content = arg1;\n            _this.elementValue = arg1;\n            _this.pdfFont = arg2;\n        }\n        else if (typeof arg1 === 'string' && arg2 instanceof PdfFont && arg3 instanceof PdfPen && typeof arg4 === 'undefined') {\n            _this = _super.call(this) || this;\n            _this.content = arg1;\n            _this.elementValue = arg1;\n            _this.pdfFont = arg2;\n            _this.pdfPen = arg3;\n        }\n        else if (typeof arg1 === 'string' && arg2 instanceof PdfFont && arg3 instanceof PdfBrush && typeof arg4 === 'undefined') {\n            _this = _super.call(this) || this;\n            _this.content = arg1;\n            _this.elementValue = arg1;\n            _this.pdfFont = arg2;\n            _this.pdfBrush = arg3;\n        }\n        else {\n            _this = _super.call(this) || this;\n            _this.content = arg1;\n            _this.elementValue = arg1;\n            _this.pdfFont = arg2;\n            _this.pdfPen = arg3;\n            _this.pdfBrush = arg4;\n            _this.format = arg5;\n        }\n        return _this;\n    }\n    Object.defineProperty(PdfTextElement.prototype, \"text\", {\n        // Properties\n        /**\n         * Gets or sets a value indicating the `text` that should be printed.\n         * ```typescript\n         * // create a new PDF document.\n         * let document : PdfDocument = new PdfDocument();\n         * // add a page to the document.\n         * let page1 : PdfPage = document.pages.add();\n         * // create the font\n         * let font : PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 12);\n         * // create the Text Web Link\n         * let textLink : PdfTextWebLink = new PdfTextWebLink();\n         * // set the hyperlink\n         * textLink.url = 'http://www.google.com';\n         * //\n         * // set the link text\n         * textLink.text = 'Google';\n         * //\n         * // set the font\n         * textLink.font = font;\n         * // draw the hyperlink in PDF page\n         * textLink.draw(page1, new PointF(10, 40));\n         * // save the document.\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this.content;\n        },\n        set: function (value) {\n            this.elementValue = value;\n            this.content = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTextElement.prototype, \"value\", {\n        //get value\n        /**\n         * Gets or sets a `value` indicating the text that should be printed.\n         * @private\n         */\n        get: function () {\n            return this.elementValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTextElement.prototype, \"pen\", {\n        //get pen\n        /**\n         * Gets or sets a `PdfPen` that determines the color, width, and style of the text\n         * @private\n         */\n        get: function () {\n            return this.pdfPen;\n        },\n        //Set pen value\n        set: function (value) {\n            this.pdfPen = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTextElement.prototype, \"brush\", {\n        //get brush\n        /**\n         * Gets or sets the `PdfBrush` that will be used to draw the text with color and texture.\n         * @private\n         */\n        get: function () {\n            return this.pdfBrush;\n        },\n        //Set brush value\n        set: function (value) {\n            this.pdfBrush = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTextElement.prototype, \"font\", {\n        //get font\n        /**\n         * Gets or sets a `PdfFont` that defines the text format.\n         * ```typescript\n         * // create a new PDF document.\n         * let document : PdfDocument = new PdfDocument();\n         * // add a page to the document.\n         * let page1 : PdfPage = document.pages.add();\n         * // create the font\n         * let font : PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 12);\n         * // create the Text Web Link\n         * let textLink : PdfTextWebLink = new PdfTextWebLink();\n         * // set the hyperlink\n         * textLink.url = 'http://www.google.com';\n         * // set the link text\n         * textLink.text = 'Google';\n         * //\n         * // set the font\n         * textLink.font = font;\n         * //\n         * // draw the hyperlink in PDF page\n         * textLink.draw(page1, new PointF(10, 40));\n         * // save the document.\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this.pdfFont;\n        },\n        set: function (value) {\n            this.pdfFont = value;\n            if (this.pdfFont instanceof PdfStandardFont && this.content != null) {\n                this.elementValue = PdfStandardFont.convert(this.content);\n            }\n            else {\n                this.elementValue = this.content;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTextElement.prototype, \"stringFormat\", {\n        /**\n         * Gets or sets the `PdfStringFormat` that will be used to set the string format\n         * @private\n         */\n        get: function () {\n            return this.format;\n        },\n        set: function (value) {\n            this.format = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Implementation\n    /**\n     * Gets a `brush` for drawing.\n     * @private\n     */\n    PdfTextElement.prototype.getBrush = function () {\n        return (this.pdfBrush == null || typeof this.pdfBrush === 'undefined') ? new PdfSolidBrush(new PdfColor(0, 0, 0)) : this.pdfBrush;\n    };\n    // /**\n    //  * `Draws` an element on the Graphics.\n    //  * @private\n    //  */\n    // public drawInternal(graphics : PdfGraphics) : void {\n    //     graphics.drawString(this.elementValue, this.pdfFont, this.pdfPen, this.getBrush(), 0, 0, this.stringFormat);\n    // }\n    /**\n     * `Layouts` the element.\n     * @private\n     */\n    PdfTextElement.prototype.layout = function (param) {\n        var layouter = new TextLayouter(this);\n        var result = layouter.layout(param);\n        return result;\n    };\n    PdfTextElement.prototype.drawText = function (arg2, arg3, arg4, arg5) {\n        if (arg3 instanceof PointF && typeof arg3.width === 'undefined' && typeof arg4 === 'undefined') {\n            this.hasPointOverload = true;\n            return this.drawText(arg2, arg3.x, arg3.y);\n        }\n        else if (typeof arg3 === 'number' && typeof arg4 === 'number' && typeof arg5 === 'undefined') {\n            this.hasPointOverload = true;\n            return this.drawText(arg2, arg3, arg4, null);\n        }\n        else if (arg3 instanceof RectangleF && typeof arg3.width !== 'undefined' && typeof arg4 === 'undefined') {\n            return this.drawText(arg2, arg3, null);\n        }\n        else if (arg3 instanceof PointF && typeof arg3.width === 'undefined' && arg4 instanceof PdfLayoutFormat) {\n            this.hasPointOverload = true;\n            return this.drawText(arg2, arg3.x, arg3.y, arg4);\n        }\n        else if (typeof arg3 === 'number' && typeof arg4 === 'number' && (arg5 instanceof PdfLayoutFormat || arg5 == null)) {\n            this.hasPointOverload = true;\n            var width = (arg2.graphics.clientSize.width - arg3);\n            var layoutRectangle = new RectangleF(arg3, arg4, width, 0);\n            return this.drawText(arg2, layoutRectangle, arg5);\n        }\n        else if (arg3 instanceof RectangleF && typeof arg3.width !== 'undefined' && typeof arg4 === 'boolean') {\n            return this.drawText(arg2, arg3, null);\n        }\n        else {\n            var layout = new PdfStringLayouter();\n            if (this.hasPointOverload) {\n                var stringLayoutResult = layout.layout(this.value, this.font, this.stringFormat, new SizeF((arg2.graphics.clientSize.width - arg3.x), 0), true, arg2.graphics.clientSize);\n                var layoutResult = void 0;\n                var param = new PdfLayoutParams();\n                var temparg3 = arg3;\n                var temparg4 = arg4;\n                param.page = arg2;\n                var previousPage = arg2;\n                param.bounds = temparg3;\n                param.format = (temparg4 != null) ? temparg4 : new PdfLayoutFormat();\n                if (stringLayoutResult.lines.length > 1) {\n                    this.text = stringLayoutResult.layoutLines[0].text;\n                    if (param.bounds.y <= param.page.graphics.clientSize.height) {\n                        var previousPosition = new PointF(param.bounds.x, param.bounds.y);\n                        layoutResult = this.layout(param);\n                        var bounds = new RectangleF(0, layoutResult.bounds.y + stringLayoutResult.lineHeight, arg2.graphics.clientSize.width, stringLayoutResult.lineHeight);\n                        var isPaginate = false;\n                        for (var i = 1; i < stringLayoutResult.lines.length; i++) {\n                            param.page = layoutResult.page;\n                            param.bounds = new RectangleF(new PointF(bounds.x, bounds.y), new SizeF(bounds.width, bounds.height));\n                            this.text = stringLayoutResult.layoutLines[i].text;\n                            if (bounds.y + stringLayoutResult.lineHeight > layoutResult.page.graphics.clientSize.height) {\n                                isPaginate = true;\n                                param.page = param.page.graphics.getNextPage();\n                                if (previousPosition.y > (layoutResult.page.graphics.clientSize.height - layoutResult.bounds.height)) {\n                                    bounds = new RectangleF(0, layoutResult.bounds.height, layoutResult.page.graphics.clientSize.width, stringLayoutResult.lineHeight);\n                                }\n                                else {\n                                    bounds = new RectangleF(0, 0, layoutResult.page.graphics.clientSize.width, stringLayoutResult.lineHeight);\n                                }\n                                param.bounds = bounds;\n                            }\n                            layoutResult = this.layout(param);\n                            if (i !== (stringLayoutResult.lines.length - 1)) {\n                                bounds = new RectangleF(0, layoutResult.bounds.y + stringLayoutResult.lineHeight, layoutResult.page.graphics.clientSize.width, stringLayoutResult.lineHeight);\n                            }\n                            else {\n                                var lineWidth = this.font.measureString(this.text, this.format).width;\n                                layoutResult = this.calculateResultBounds(layoutResult, lineWidth, layoutResult.page.graphics.clientSize.width, 0);\n                            }\n                        }\n                    }\n                    return layoutResult;\n                }\n                else {\n                    var lineSize = this.font.measureString(this.text, this.format);\n                    if (param.bounds.y <= param.page.graphics.clientSize.height) {\n                        layoutResult = this.layout(param);\n                        layoutResult = this.calculateResultBounds(layoutResult, lineSize.width, layoutResult.page.graphics.clientSize.width, 0);\n                    }\n                    return layoutResult;\n                }\n            }\n            else {\n                var layoutResult = layout.layout(this.value, this.font, this.stringFormat, new SizeF(arg3.width, 0), false, arg2.graphics.clientSize);\n                var result = void 0;\n                var param = new PdfLayoutParams();\n                var temparg3 = arg3;\n                var temparg4 = arg4;\n                param.page = arg2;\n                param.bounds = temparg3;\n                param.format = (temparg4 != null) ? temparg4 : new PdfLayoutFormat();\n                if (layoutResult.lines.length > 1) {\n                    this.text = layoutResult.layoutLines[0].text;\n                    if (param.bounds.y <= param.page.graphics.clientSize.height) {\n                        var previousPosition = new PointF(param.bounds.x, param.bounds.y);\n                        result = this.layout(param);\n                        var bounds = new RectangleF(temparg3.x, result.bounds.y + layoutResult.lineHeight, temparg3.width, layoutResult.lineHeight);\n                        var isPaginate = false;\n                        for (var i = 1; i < layoutResult.lines.length; i++) {\n                            param.page = result.page;\n                            param.bounds = new RectangleF(bounds.x, bounds.y, bounds.width, bounds.height);\n                            this.text = layoutResult.layoutLines[i].text;\n                            if (bounds.y + layoutResult.lineHeight > result.page.graphics.clientSize.height) {\n                                isPaginate = true;\n                                param.page = param.page.graphics.getNextPage();\n                                if (previousPosition.y > (result.page.graphics.clientSize.height - result.bounds.height)) {\n                                    bounds = new RectangleF(temparg3.x, layoutResult.lineHeight, temparg3.width, layoutResult.lineHeight);\n                                }\n                                else {\n                                    bounds = new RectangleF(temparg3.x, 0, temparg3.width, layoutResult.lineHeight);\n                                }\n                                param.bounds = bounds;\n                            }\n                            result = this.layout(param);\n                            if (i !== (layoutResult.lines.length - 1)) {\n                                bounds = new RectangleF(temparg3.x, result.bounds.y + layoutResult.lineHeight, temparg3.width, layoutResult.lineHeight);\n                            }\n                            else {\n                                var lineWidth = this.font.measureString(this.text, this.format).width;\n                                result = this.calculateResultBounds(result, lineWidth, temparg3.width, temparg3.x);\n                            }\n                        }\n                    }\n                    return result;\n                }\n                else {\n                    var lineSize = this.font.measureString(this.text, this.format);\n                    if (param.bounds.y <= param.page.graphics.clientSize.height) {\n                        result = this.layout(param);\n                        result = this.calculateResultBounds(result, lineSize.width, temparg3.width, temparg3.x);\n                    }\n                    return result;\n                }\n            }\n        }\n    };\n    PdfTextElement.prototype.calculateResultBounds = function (result, lineWidth, maximumWidth, startPosition) {\n        var shift = 0;\n        if (this.stringFormat != null && typeof this.stringFormat !== 'undefined' && this.stringFormat.alignment === PdfTextAlignment.Center) {\n            result.bounds.x = startPosition + (maximumWidth - lineWidth) / 2;\n            result.bounds.width = lineWidth;\n        }\n        else if (this.stringFormat != null && typeof this.stringFormat !== 'undefined' && this.stringFormat.alignment === PdfTextAlignment.Right) {\n            result.bounds.x = startPosition + (maximumWidth - lineWidth);\n            result.bounds.width = lineWidth;\n        }\n        else if (this.stringFormat != null && typeof this.stringFormat !== 'undefined' && this.stringFormat.alignment === PdfTextAlignment.Justify) {\n            result.bounds.x = startPosition;\n            result.bounds.width = maximumWidth;\n        }\n        else {\n            result.bounds.width = startPosition;\n            result.bounds.width = lineWidth;\n        }\n        return result;\n    };\n    return PdfTextElement;\n}(PdfLayoutElement));\nexport { PdfTextElement };\n","import { PdfColor } from './../graphics/pdf-color';\nimport { RectangleF, PointF } from './../drawing/pdf-drawing';\nimport { PdfDictionary, SaveAnnotationEventHandler } from './../primitives/pdf-dictionary';\nimport { PdfArray } from './../primitives/pdf-array';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PdfReferenceHolder } from './../primitives/pdf-reference';\nimport { PdfString } from './../primitives/pdf-string';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\nimport { PdfName } from './../primitives/pdf-name';\nimport { PdfSolidBrush } from './../graphics/brushes/pdf-solid-brush';\nimport { PdfStandardFont } from './../graphics/fonts/pdf-standard-font';\nimport { PdfFontFamily } from './../graphics/fonts/enum';\nimport { PdfStringFormat } from './../graphics/fonts/pdf-string-format';\nimport { PdfTextAlignment } from './../graphics/enum';\n/**\n * `PdfAnnotation` class represents the base class for annotation objects.\n * @private\n */\nvar PdfAnnotation = /** @class */ (function () {\n    function PdfAnnotation(arg1) {\n        // Fields\n        /**\n         * Specifies the Internal variable to store fields of `PdfDictionaryProperties`.\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        /**\n         * `Color` of the annotation\n         * @private\n         */\n        this.pdfColor = new PdfColor(255, 255, 255);\n        /**\n         * `Bounds` of the annotation.\n         * @private\n         */\n        this.rectangle = new RectangleF(0, 0, 0, 0);\n        /**\n         * Parent `page` of the annotation.\n         * @private\n         */\n        this.pdfPage = null;\n        /**\n         * `Brush of the text` of the annotation.\n         * @default new PdfSolidBrush(new PdfColor(0, 0, 0))\n         * @private\n         */\n        this.textBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n        /**\n         * `Font of the text` of the annotation.\n         * @default new PdfStandardFont(PdfFontFamily.TimesRoman, 10)\n         * @private\n         */\n        this.textFont = new PdfStandardFont(PdfFontFamily.TimesRoman, 10);\n        /**\n         * `StringFormat of the text` of the annotation.\n         * @default new PdfStringFormat(PdfTextAlignment.Left)\n         * @private\n         */\n        this.format = new PdfStringFormat(PdfTextAlignment.Left);\n        /**\n         * `Text` of the annotation.\n         * @private\n         */\n        this.content = '';\n        /**\n         * Internal variable to store `dictionary`.\n         * @private\n         */\n        this.pdfDictionary = new PdfDictionary();\n        /**\n         * To specifying the `Inner color` with which to fill the annotation\n         * @private\n         */\n        this.internalColor = new PdfColor();\n        /**\n         * `opacity or darkness` of the annotation.\n         * @private\n         * @default 1.0\n         */\n        this.darkness = 1.0;\n        if (typeof arg1 === 'undefined') {\n            this.initialize();\n        }\n        else {\n            this.initialize();\n            this.bounds = arg1;\n        }\n    }\n    Object.defineProperty(PdfAnnotation.prototype, \"color\", {\n        // Properties\n        /**\n         * `Color` of the annotation\n         * @private\n         */\n        get: function () {\n            return this.pdfColor;\n        },\n        set: function (value) {\n            this.pdfColor = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfAnnotation.prototype, \"innerColor\", {\n        /**\n         * To specifying the `Inner color` with which to fill the annotation\n         * @private\n         */\n        get: function () {\n            return this.internalColor;\n        },\n        set: function (value) {\n            this.internalColor = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfAnnotation.prototype, \"bounds\", {\n        /**\n         * `bounds` of the annotation.\n         * @private\n         */\n        get: function () {\n            return this.rectangle;\n        },\n        set: function (value) {\n            this.rectangle = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfAnnotation.prototype, \"page\", {\n        /**\n         * Parent `page` of the annotation.\n         * @private\n         */\n        get: function () {\n            return this.pdfPage;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfAnnotation.prototype, \"font\", {\n        /**\n         * To specifying the `Font of the text` in the annotation.\n         * @private\n         */\n        get: function () {\n            return this.textFont;\n        },\n        set: function (value) {\n            this.textFont = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfAnnotation.prototype, \"stringFormat\", {\n        /**\n         * To specifying the `StringFormat of the text` in the annotation.\n         * @private\n         */\n        get: function () {\n            return this.format;\n        },\n        set: function (value) {\n            this.format = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfAnnotation.prototype, \"brush\", {\n        /**\n         * To specifying the `Brush of the text` in the annotation.\n         * @private\n         */\n        get: function () {\n            return this.textBrush;\n        },\n        set: function (value) {\n            this.textBrush = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfAnnotation.prototype, \"text\", {\n        /**\n         * `Text` of the annotation.\n         * @private\n         */\n        get: function () {\n            return this.content;\n        },\n        set: function (value) {\n            this.content = value;\n            this.dictionary.items.setValue(this.dictionaryProperties.contents, new PdfString(this.content));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfAnnotation.prototype, \"dictionary\", {\n        /**\n         * Internal variable to store `dictionary`.\n         * @hidden\n         */\n        get: function () {\n            return this.pdfDictionary;\n        },\n        set: function (value) {\n            this.pdfDictionary = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Implementation\n    /**\n     * `Initialize` the annotation event handler and specifies the type of the annotation.\n     * @private\n     */\n    PdfAnnotation.prototype.initialize = function () {\n        this.pdfDictionary.annotationBeginSave = new SaveAnnotationEventHandler(this);\n        this.pdfDictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.annot));\n    };\n    /**\n     * Sets related `page` of the annotation.\n     * @private\n     */\n    PdfAnnotation.prototype.setPage = function (page) {\n        this.pdfPage = page;\n        this.pdfDictionary.items.setValue(this.dictionaryProperties.p, new PdfReferenceHolder(this.pdfPage));\n    };\n    /**\n     * Handles the `BeginSave` event of the Dictionary.\n     * @private\n     */\n    PdfAnnotation.prototype.beginSave = function () {\n        this.save();\n    };\n    /**\n     * `Saves` an annotation.\n     * @private\n     */\n    /* tslint:disable */\n    PdfAnnotation.prototype.save = function () {\n        var nativeRectangle = new RectangleF(this.rectangle.x, this.rectangle.y, this.rectangle.width, this.rectangle.height);\n        var section = this.pdfPage.section;\n        var initialHeight = nativeRectangle.height;\n        var tempLoacation = section.pointToNativePdf(this.page, new PointF(nativeRectangle.x, nativeRectangle.y));\n        nativeRectangle.x = tempLoacation.x;\n        nativeRectangle.width = tempLoacation.x + nativeRectangle.width;\n        nativeRectangle.y = (tempLoacation.y - this.page.document.pageSettings.margins.top);\n        nativeRectangle.height = nativeRectangle.y - initialHeight;\n        this.pdfDictionary.items.setValue(this.dictionaryProperties.rect, PdfArray.fromRectangle(nativeRectangle));\n        this.dictionary.items.setValue(this.dictionaryProperties.ca, new PdfNumber(this.darkness));\n    };\n    Object.defineProperty(PdfAnnotation.prototype, \"element\", {\n        /* tslint:enable */\n        // IPdfWrapper Members\n        /**\n         * Gets the `element`.\n         * @private\n         */\n        get: function () {\n            return this.pdfDictionary;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfAnnotation;\n}());\nexport { PdfAnnotation };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { PdfAnnotation } from './annotation';\nimport { PdfName } from './../primitives/pdf-name';\n/**\n * `PdfLinkAnnotation` class represents the ink annotation class.\n * @private\n */\nvar PdfLinkAnnotation = /** @class */ (function (_super) {\n    __extends(PdfLinkAnnotation, _super);\n    function PdfLinkAnnotation(rectangle) {\n        var _this = this;\n        if (typeof rectangle === 'undefined') {\n            _this = _super.call(this) || this;\n        }\n        else {\n            _this = _super.call(this, rectangle) || this;\n        }\n        return _this;\n    }\n    // Implementation\n    /**\n     * `Initializes` annotation object.\n     * @private\n     */\n    PdfLinkAnnotation.prototype.initialize = function () {\n        _super.prototype.initialize.call(this);\n        this.dictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.link));\n    };\n    return PdfLinkAnnotation;\n}(PdfAnnotation));\nexport { PdfLinkAnnotation };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { PdfLinkAnnotation } from './link-annotation';\n/**\n * Represents base class for `link annotations` with associated action.\n * @private\n */\nvar PdfActionLinkAnnotation = /** @class */ (function (_super) {\n    __extends(PdfActionLinkAnnotation, _super);\n    // Constructors\n    /**\n     * Specifies the constructor for `ActionLinkAnnotation`.\n     * @private\n     */\n    function PdfActionLinkAnnotation(rectangle) {\n        var _this = _super.call(this, rectangle) || this;\n        // Fields\n        /**\n         * Internal variable to store annotation's `action`.\n         * @default null\n         * @private\n         */\n        _this.pdfAction = null;\n        return _this;\n    }\n    //Public method\n    /**\n     * get and set the `action`.\n     * @hidden\n     */\n    PdfActionLinkAnnotation.prototype.getSetAction = function (value) {\n        if (typeof value === 'undefined') {\n            return this.pdfAction;\n        }\n        else {\n            this.pdfAction = value;\n        }\n    };\n    return PdfActionLinkAnnotation;\n}(PdfLinkAnnotation));\nexport { PdfActionLinkAnnotation };\n","import { PdfDictionary } from './../primitives/pdf-dictionary';\nimport { PdfReferenceHolder } from './../primitives/pdf-reference';\nimport { PdfName } from './../primitives/pdf-name';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\n/**\n * `PdfAction` class represents base class for all action types.\n * @private\n */\nvar PdfAction = /** @class */ (function () {\n    // Constructors\n    /**\n     * Initialize instance for `Action` class.\n     * @private\n     */\n    function PdfAction() {\n        /**\n         * Specifies the Next `action` to perform.\n         * @private\n         */\n        this.action = null;\n        /**\n         * Specifies the Internal variable to store `dictionary properties`.\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        // super(); -> Object()\n        this.initialize();\n    }\n    Object.defineProperty(PdfAction.prototype, \"next\", {\n        // Properties\n        /**\n         * Gets and Sets the `Next` action to perform.\n         * @private\n         */\n        get: function () {\n            return this.action;\n        },\n        set: function (value) {\n            // if (this.action !== value) {\n            this.action = value;\n            this.dictionary.items.setValue(this.dictionaryProperties.next, new PdfReferenceHolder(this.action));\n            // }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfAction.prototype, \"dictionary\", {\n        /**\n         * Gets and Sets the instance of PdfDictionary class for `Dictionary`.\n         * @private\n         */\n        get: function () {\n            if (typeof this.pdfDictionary === 'undefined') {\n                this.pdfDictionary = new PdfDictionary();\n            }\n            return this.pdfDictionary;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Implementation\n    /**\n     * `Initialize` the action type.\n     * @private\n     */\n    PdfAction.prototype.initialize = function () {\n        this.dictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.action));\n    };\n    Object.defineProperty(PdfAction.prototype, \"element\", {\n        // IPdfWrapper Members\n        /**\n         * Gets the `Element` as IPdfPrimitive class.\n         * @private\n         */\n        get: function () {\n            return this.dictionary;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfAction;\n}());\nexport { PdfAction };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { PdfAction } from './action';\nimport { PdfString } from './../primitives/pdf-string';\nimport { PdfName } from './../primitives/pdf-name';\n/**\n * `PdfUriAction` class for initialize the uri related internals.\n * @private\n */\nvar PdfUriAction = /** @class */ (function (_super) {\n    __extends(PdfUriAction, _super);\n    function PdfUriAction(uri) {\n        var _this = _super.call(this) || this;\n        // Fields\n        /**\n         * Specifies the `uri` string.\n         * @default ''.\n         * @private\n         */\n        _this.uniformResourceIdentifier = '';\n        return _this;\n    }\n    Object.defineProperty(PdfUriAction.prototype, \"uri\", {\n        // Properties\n        /**\n         * Gets and Sets the value of `Uri`.\n         * @private\n         */\n        get: function () {\n            return this.uniformResourceIdentifier;\n        },\n        set: function (value) {\n            this.uniformResourceIdentifier = value;\n            this.dictionary.items.setValue(this.dictionaryProperties.uri, new PdfString(this.uniformResourceIdentifier));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Implementation\n    /**\n     * `Initialize` the internals.\n     * @private\n     */\n    PdfUriAction.prototype.initialize = function () {\n        _super.prototype.initialize.call(this);\n        this.dictionary.items.setValue(this.dictionaryProperties.s, new PdfName(this.dictionaryProperties.uri));\n    };\n    return PdfUriAction;\n}(PdfAction));\nexport { PdfUriAction };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { PdfActionLinkAnnotation } from './action-link-annotation';\nimport { PdfName } from './../primitives/pdf-name';\nimport { PdfUriAction } from './../actions/uri-action';\n/**\n * `PdfUriAnnotation` class represents the Uri annotation.\n * @private\n */\nvar PdfUriAnnotation = /** @class */ (function (_super) {\n    __extends(PdfUriAnnotation, _super);\n    function PdfUriAnnotation(rectangle, uri) {\n        var _this = _super.call(this, rectangle) || this;\n        if (typeof uri !== 'undefined') {\n            _this.uri = uri;\n        }\n        return _this;\n    }\n    Object.defineProperty(PdfUriAnnotation.prototype, \"uriAction\", {\n        /**\n         * Get `action` of the annotation.\n         * @private\n         */\n        get: function () {\n            if (typeof this.pdfUriAction === 'undefined') {\n                this.pdfUriAction = new PdfUriAction();\n            }\n            return this.pdfUriAction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfUriAnnotation.prototype, \"uri\", {\n        // Properties\n        /**\n         * Gets or sets the `Uri` address.\n         * @private\n         */\n        get: function () {\n            return this.uriAction.uri;\n        },\n        set: function (value) {\n            if (this.uriAction.uri !== value) {\n                this.uriAction.uri = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfUriAnnotation.prototype, \"action\", {\n        /**\n         * Gets or sets the `action`.\n         * @private\n         */\n        get: function () {\n            return this.getSetAction();\n        },\n        set: function (value) {\n            this.getSetAction(value);\n            this.uriAction.next = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Implementation\n    /**\n     * `Initializes` annotation object.\n     * @private\n     */\n    PdfUriAnnotation.prototype.initialize = function () {\n        _super.prototype.initialize.call(this);\n        this.dictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.link));\n        var tempPrimitive = this.uriAction.element;\n        this.dictionary.items.setValue(this.dictionaryProperties.a, this.uriAction.element);\n    };\n    return PdfUriAnnotation;\n}(PdfActionLinkAnnotation));\nexport { PdfUriAnnotation };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { PdfPage } from './../pages/pdf-page';\nimport { PointF, RectangleF, SizeF } from './../drawing/pdf-drawing';\nimport { PdfTextElement } from './../graphics/figures/text-element';\nimport { PdfUriAnnotation } from './uri-annotation';\nimport { PdfStringLayouter } from './../graphics/fonts/string-layouter';\nimport { PdfFontStyle } from './../graphics/fonts/enum';\nimport { PdfTextAlignment } from './../graphics/enum';\nimport { PdfArray } from './../primitives/pdf-array';\nimport { PdfNumber } from './../primitives/pdf-number';\n/**\n * `PdfTextWebLink` class represents the class for text web link annotation.\n * ```typescript\n * // create a new PDF document.\n * let document : PdfDocument = new PdfDocument();\n * // add a page to the document.\n * let page1 : PdfPage = document.pages.add();\n * // create the font\n * let font : PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 12);\n * //\n * // create the Text Web Link\n * let textLink : PdfTextWebLink = new PdfTextWebLink();\n * // set the hyperlink\n * textLink.url = 'http://www.google.com';\n * // set the link text\n * textLink.text = 'Google';\n * // set the font\n * textLink.font = font;\n * // draw the hyperlink in PDF page\n * textLink.draw(page1, new PointF(10, 40));\n * //\n * // save the document.\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nvar PdfTextWebLink = /** @class */ (function (_super) {\n    __extends(PdfTextWebLink, _super);\n    // Constructors\n    /**\n     * Initializes a new instance of the `PdfTextWebLink` class.\n     * @private\n     */\n    function PdfTextWebLink() {\n        var _this = _super.call(this) || this;\n        // Fields\n        /**\n         * Internal variable to store `Url`.\n         * @default ''\n         * @private\n         */\n        _this.uniformResourceLocator = '';\n        /**\n         * Internal variable to store `Uri Annotation` object.\n         * @default null\n         * @private\n         */\n        _this.uriAnnotation = null;\n        /**\n         * Checks whether the drawTextWebLink method with `PointF` overload is called or not.\n         * If it set as true, then the start position of each lines excluding firest line is changed as (0, Y).\n         * @private\n         * @hidden\n         */\n        _this.recalculateBounds = false;\n        _this.defaultBorder = new PdfArray();\n        for (var i = 0; i < 3; i++) {\n            _this.defaultBorder.add(new PdfNumber(0));\n        }\n        return _this;\n    }\n    Object.defineProperty(PdfTextWebLink.prototype, \"url\", {\n        // Properties\n        /**\n         * Gets or sets the `Uri address`.\n         * ```typescript\n         * // create a new PDF document.\n         * let document : PdfDocument = new PdfDocument();\n         * // add a page to the document.\n         * let page1 : PdfPage = document.pages.add();\n         * // create the font\n         * let font : PdfFont = new PdfStandardFont(PdfFontFamily.Helvetica, 12);\n         * // create the Text Web Link\n         * let textLink : PdfTextWebLink = new PdfTextWebLink();\n         * //\n         * // set the hyperlink\n         * textLink.url = 'http://www.google.com';\n         * //\n         * // set the link text\n         * textLink.text = 'Google';\n         * // set the font\n         * textLink.font = font;\n         * // draw the hyperlink in PDF page\n         * textLink.draw(page1, new PointF(10, 40));\n         * // save the document.\n         * document.save('output.pdf');\n         * // destroy the document\n         * document.destroy();\n         * ```\n         */\n        get: function () {\n            return this.uniformResourceLocator;\n        },\n        set: function (value) {\n            if (value.length === 0) {\n                throw new Error('ArgumentException : Url - string can not be empty');\n            }\n            this.uniformResourceLocator = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfTextWebLink.prototype.draw = function (arg1, arg2) {\n        if (arg1 instanceof PdfPage) {\n            var layout = new PdfStringLayouter();\n            var previousFontStyle = this.font.style;\n            if (arg2 instanceof PointF) {\n                this.recalculateBounds = true;\n                this.font.style = PdfFontStyle.Underline;\n                var layoutResult = layout.layout(this.value, this.font, this.stringFormat, new SizeF((arg1.graphics.clientSize.width - arg2.x), 0), true, arg1.graphics.clientSize);\n                if (layoutResult.lines.length === 1) {\n                    var textSize = this.font.measureString(this.value);\n                    var rect = new RectangleF(arg2, textSize);\n                    rect = this.calculateBounds(rect, textSize.width, arg1.graphics.clientSize.width, arg2.x);\n                    this.uriAnnotation = new PdfUriAnnotation(rect, this.url);\n                    this.uriAnnotation.dictionary.items.setValue('Border', this.defaultBorder);\n                    arg1.annotations.add(this.uriAnnotation);\n                    var result = this.drawText(arg1, arg2);\n                    this.font.style = previousFontStyle;\n                    return result;\n                }\n                else {\n                    var result = this.drawMultipleLineWithPoint(layoutResult, arg1, arg2);\n                    this.font.style = previousFontStyle;\n                    return result;\n                }\n            }\n            else {\n                var layoutResult = layout.layout(this.value, this.font, this.stringFormat, new SizeF(arg2.width, 0), false, new SizeF(0, 0));\n                this.font.style = PdfFontStyle.Underline;\n                if (layoutResult.lines.length === 1) {\n                    var textSize = this.font.measureString(this.value);\n                    var rect = new RectangleF(new PointF(arg2.x, arg2.y), textSize);\n                    rect = this.calculateBounds(rect, textSize.width, arg2.width, arg2.x);\n                    this.uriAnnotation = new PdfUriAnnotation(rect, this.url);\n                    this.uriAnnotation.dictionary.items.setValue('Border', this.defaultBorder);\n                    arg1.annotations.add(this.uriAnnotation);\n                    var returnValue = this.drawText(arg1, arg2);\n                    this.font.style = previousFontStyle;\n                    return returnValue;\n                }\n                else {\n                    var returnValue = this.drawMultipleLineWithBounds(layoutResult, arg1, arg2);\n                    this.font.style = previousFontStyle;\n                    return returnValue;\n                }\n            }\n        }\n        else {\n            var page = new PdfPage();\n            page = arg1.page;\n            return this.draw(page, arg2);\n        }\n    };\n    /* tslint:enable */\n    //Private methods\n    /**\n     * Helper method `Draw` a Multiple Line Text Web Link on the Graphics with the specified location.\n     * @private\n     */\n    PdfTextWebLink.prototype.drawMultipleLineWithPoint = function (result, page, location) {\n        var layoutResult;\n        for (var i = 0; i < result.layoutLines.length; i++) {\n            var size = this.font.measureString(result.lines[i].text);\n            var bounds = new RectangleF(location, size);\n            if (i !== 0) {\n                bounds.x = 0;\n            }\n            this.text = result.lines[i].text;\n            if (bounds.y + size.height > page.graphics.clientSize.height) {\n                if (i !== 0) {\n                    page = page.graphics.getNextPage();\n                    bounds = new RectangleF(0, 0, page.graphics.clientSize.width, size.height);\n                    location.y = 0;\n                }\n                else {\n                    break;\n                }\n            }\n            bounds = this.calculateBounds(bounds, size.width, page.graphics.clientSize.width, bounds.x);\n            this.uriAnnotation = new PdfUriAnnotation(bounds, this.url);\n            this.uriAnnotation.dictionary.items.setValue('Border', this.defaultBorder);\n            page.annotations.add(this.uriAnnotation);\n            if (i !== 0) {\n                layoutResult = this.drawText(page, new PointF(0, bounds.y));\n            }\n            else {\n                layoutResult = this.drawText(page, bounds.x, bounds.y);\n            }\n            location.y += size.height;\n        }\n        return layoutResult;\n    };\n    /**\n     * Helper method `Draw` a Multiple Line Text Web Link on the Graphics with the specified bounds.\n     * @private\n     */\n    PdfTextWebLink.prototype.drawMultipleLineWithBounds = function (result, page, bounds) {\n        var layoutResult;\n        for (var i = 0; i < result.layoutLines.length; i++) {\n            var size = this.font.measureString(result.lines[i].text);\n            var internalBounds = new RectangleF(new PointF(bounds.x, bounds.y), size);\n            internalBounds = this.calculateBounds(internalBounds, size.width, bounds.width, bounds.x);\n            this.text = result.lines[i].text;\n            if (bounds.y + size.height > page.graphics.clientSize.height) {\n                if (i !== 0) {\n                    page = page.graphics.getNextPage();\n                    bounds = new RectangleF(bounds.x, 0, bounds.width, size.height);\n                    internalBounds.y = 0;\n                }\n                else {\n                    break;\n                }\n            }\n            this.uriAnnotation = new PdfUriAnnotation(internalBounds, this.url);\n            this.uriAnnotation.dictionary.items.setValue('Border', this.defaultBorder);\n            page.annotations.add(this.uriAnnotation);\n            layoutResult = this.drawText(page, bounds);\n            bounds.y += size.height;\n        }\n        return layoutResult;\n    };\n    /* tslint:disable */\n    PdfTextWebLink.prototype.calculateBounds = function (currentBounds, lineWidth, maximumWidth, startPosition) {\n        var shift = 0;\n        if (this.stringFormat != null && typeof this.stringFormat !== 'undefined' && this.stringFormat.alignment === PdfTextAlignment.Center) {\n            currentBounds.x = startPosition + (maximumWidth - lineWidth) / 2;\n            currentBounds.width = lineWidth;\n        }\n        else if (this.stringFormat != null && typeof this.stringFormat !== 'undefined' && this.stringFormat.alignment === PdfTextAlignment.Right) {\n            currentBounds.x = startPosition + (maximumWidth - lineWidth);\n            currentBounds.width = lineWidth;\n        }\n        else if (this.stringFormat != null && typeof this.stringFormat !== 'undefined' && this.stringFormat.alignment === PdfTextAlignment.Justify) {\n            currentBounds.x = startPosition;\n            currentBounds.width = maximumWidth;\n        }\n        else {\n            currentBounds.width = startPosition;\n            currentBounds.width = lineWidth;\n        }\n        return currentBounds;\n    };\n    return PdfTextWebLink;\n}(PdfTextElement));\nexport { PdfTextWebLink };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { PdfGrid } from '../pdf-grid';\nimport { PdfStringFormat } from './../../../graphics/fonts/pdf-string-format';\nimport { SizeF, RectangleF, PointF } from './../../../drawing/pdf-drawing';\nimport { PdfBorders } from '../styles/pdf-borders';\nimport { PdfLayoutType, PdfLayoutBreakType } from './../../../graphics/figures/enum';\nimport { PdfLayoutResult, PdfLayoutFormat, ElementLayouter } from './../../../graphics/figures/base/element-layouter';\nimport { PdfHorizontalOverflowType } from '../styles/style';\nimport { TemporaryDictionary } from './../../../collections/object-object-pair/dictionary';\n/**\n * Class `lay outing the text`.\n *\n */\nvar PdfGridLayouter = /** @class */ (function (_super) {\n    __extends(PdfGridLayouter, _super);\n    //constructor\n    /**\n     * Initialize a new instance for `PdfGrid` class.\n     * @private\n     */\n    function PdfGridLayouter(baseFormat) {\n        var _this = _super.call(this, baseFormat) || this;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.gridInitialWidth = 0;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.gridSize = new SizeF(0, 0);\n        _this.parentCellIndex = 0;\n        _this.tempWidth = 0;\n        _this.childheight = 0;\n        /**\n         * Check weather it is `child grid or not`.\n         * @private\n         */\n        _this.isChildGrid = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.hasRowSpanSpan = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.isRearranged = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.pageBounds = new RectangleF();\n        /**\n         * @hidden\n         * @private\n         */\n        _this.listOfNavigatePages = [];\n        /**\n         * @hidden\n         * @private\n         */\n        _this.flag = true;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.columnRanges = [];\n        /**\n         * @hidden\n         * @private\n         */\n        _this.currentLocation = new PointF(0, 0);\n        /**\n         * @hidden\n         * @private\n         */\n        _this.breakRow = true;\n        /**\n         * Checks whether the x co-ordinate is need to set as client size or not.\n         * @hidden\n         * @private\n         */\n        _this.isOverloadWithPosition = false;\n        return _this;\n    }\n    Object.defineProperty(PdfGridLayouter.prototype, \"Grid\", {\n        //Properties\n        get: function () {\n            return this.elements;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Constructors\n    /**\n     * Initializes a new instance of the `StringLayouter` class.\n     * @private\n     */\n    //Public methods\n    /**\n     * `Layouts` the text.\n     * @private\n     */\n    /**\n     * `Layouts` the specified graphics.\n     * @private\n     */\n    /**\n     * `Layouts` the specified graphics.\n     * @private\n     */\n    /*public layout(graphics : PdfLayoutParams) : PdfLayoutResult\n    public layout(graphics : PdfGraphics, bounds : RectangleF) : void\n    public layout(graphics : PdfGraphics, bounds : PointF) : void\n    public layout(graphics ?: PdfGraphics | PdfLayoutParams, bounds ?: PointF | RectangleF) : void | PdfLayoutResult  {\n        if (graphics instanceof PdfGraphics) {\n        if (bounds instanceof PointF) {\n            if (bounds.x === 0) {\n                bounds.x = PdfBorders.default.right.width / 2;\n            }\n            if (bounds.y === 0) {\n                bounds.y = PdfBorders.default.top.width / 2;\n            }\n            let boundaries : RectangleF = new RectangleF(bounds, new SizeF(0, 0));\n            this.layout(graphics, boundaries);\n        } else {\n            let width : number = graphics.clientSize.width;\n            let parameter : PdfLayoutParams = new PdfLayoutParams();\n            parameter.bounds = bounds;\n            this.currentGraphics = graphics;\n            if (graphics.layer != null) {\n                let index : number = 0;\n                if (this.currentGraphics.page instanceof PdfPage) {\n                    index = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n                } else {\n                    index = (this.currentGraphics.page as PdfPageBase).defaultLayerIndex;\n                }\n            } else {\n                this.layoutInternal(parameter);\n            }\n        }\n    }\n    }*/\n    /**\n     * Gets the `format`.\n     * @private\n     */\n    PdfGridLayouter.prototype.getFormat = function (format) {\n        var f = format;\n        return f;\n    };\n    /**\n     * `Layouts` the element.\n     * @private\n     */\n    PdfGridLayouter.prototype.layoutInternal = function (param) {\n        var format = this.getFormat(param.format);\n        this.gridLayoutFormat = this.getFormat(param.format);\n        this.currentPage = param.page;\n        if (this.currentPage !== null) {\n            var pageHeight = this.currentPage.getClientSize().height;\n            var pageWidth = this.currentPage.getClientSize().width;\n            //if (pageHeight > pageWidth) {\n            this.currentPageBounds = this.currentPage.getClientSize();\n            //}\n        }\n        else {\n            throw Error('Can not set page as null');\n            //this.currentPageBounds = this.currentGraphics.clientSize;\n        }\n        this.currentGraphics = this.currentPage.graphics;\n        //this.currentGraphics = (this.currentPage != null ) ? this.currentPage.graphics : this.currentGraphics;\n        // if (this.currentGraphics.layer !== null) {\n        //     let index : number = 0;\n        //     if (this.currentGraphics.page instanceof PdfPage) {\n        //         index = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n        //     } else {\n        //         index = (this.currentGraphics.page as PdfPageBase).defaultLayerIndex;\n        //     }\n        //     this.listOfNavigatePages.push(index);\n        // }\n        var index = 0;\n        index = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n        this.listOfNavigatePages.push(index);\n        if (format != null && format.break === PdfLayoutBreakType.FitColumnsToPage) {\n            this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), new SizeF(this.Grid.columns.width, this.currentGraphics.clientSize.height));\n        }\n        else {\n            this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);\n        }\n        //this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);\n        if (this.Grid.rows.count !== 0) {\n            this.currentBounds.width = (param.bounds.width > 0) ? param.bounds.width :\n                (this.currentBounds.width - this.Grid.rows.getRow(0).cells.getCell(0).style.borders.left.width / 2);\n        }\n        else if (this.Grid.headers.count !== 0) {\n            // this.currentBounds.width = (param.bounds.width > 0) ? param.bounds.width : (this.currentBounds.width -\n            //                                 this.Grid.headers.getHeader(0).cells.getCell(0).style.borders.left.width / 2);\n            this.currentBounds.width = param.bounds.width;\n        }\n        else {\n            throw Error('Please add row or header into grid');\n        }\n        this.startLocation = new PointF(param.bounds.x, param.bounds.y);\n        // if (this.Grid.style.allowHorizontalOverflow && this.currentBounds.width > this.currentGraphics.clientSize.width) {\n        //     this.currentBounds.width = this.currentGraphics.clientSize.width;\n        //     this.currentBounds.width -= this.currentBounds.x;\n        // }\n        // if (this.Grid.isChildGrid) {\n        //     this.childheight = param.bounds.height;\n        // }\n        // if (param.format !== null && param.format.usePaginateBounds) {\n        //     if (param.format.paginateBounds.height > 0) {\n        //         this.currentBounds.height = param.format.paginateBounds.height;\n        //     }\n        //} else \n        if (param.bounds.height > 0 && !this.Grid.isChildGrid) {\n            this.currentBounds.height = param.bounds.height;\n        }\n        if (!this.Grid.isChildGrid) {\n            this.hType = this.Grid.style.horizontalOverflowType;\n        }\n        if (!this.Grid.style.allowHorizontalOverflow) {\n            this.columnRanges = [];\n            this.Grid.measureColumnsWidth(this.currentBounds);\n            this.columnRanges.push([0, this.Grid.columns.count - 1]);\n        }\n        else {\n            this.Grid.measureColumnsWidth();\n            this.determineColumnDrawRanges();\n        }\n        if (this.Grid.hasRowSpanSpan) {\n            for (var i = 0; i < this.Grid.rows.count; i++) {\n                var height = this.Grid.rows.getRow(i).height;\n                if (!this.Grid.rows.getRow(i).isRowHeightSet) {\n                    this.Grid.rows.getRow(i).isRowHeightSet = true;\n                }\n            }\n        }\n        var result = this.layoutOnPage(param);\n        return result;\n    };\n    // /* tslint:enable */\n    /**\n     * `Determines the column draw ranges`.\n     * @private\n     */\n    PdfGridLayouter.prototype.determineColumnDrawRanges = function () {\n        var startColumn = 0;\n        var endColumn = 0;\n        var cellWidths = 0;\n        var availableWidth = this.currentGraphics.clientSize.width - this.currentBounds.x;\n        for (var i = 0; i < this.Grid.columns.count; i++) {\n            cellWidths += this.Grid.columns.getColumn(i).width;\n            if (cellWidths >= availableWidth) {\n                var subWidths = 0;\n                for (var j = startColumn; j <= i; j++) {\n                    subWidths += this.Grid.columns.getColumn(j).width;\n                    if (subWidths > availableWidth) {\n                        break;\n                    }\n                    endColumn = j;\n                }\n                this.columnRanges.push([startColumn, endColumn]);\n                startColumn = endColumn + 1;\n                endColumn = startColumn;\n                cellWidths = (endColumn <= i) ? this.Grid.columns.getColumn(i).width : 0;\n            }\n        }\n        // if (startColumn !== this.columns.Count) {\n        this.columnRanges.push([startColumn, this.Grid.columns.count - 1]);\n        // }\n    };\n    /**\n     * `Layouts the on page`.\n     * @private\n     */\n    PdfGridLayouter.prototype.layoutOnPage = function (param) {\n        /* tslint:disable */\n        this.pageBounds.x = param.bounds.x;\n        this.pageBounds.y = param.bounds.y;\n        this.pageBounds.height = param.bounds.height;\n        var format = this.getFormat(param.format);\n        var endArgs = null;\n        var result = null;\n        var layoutedPages = new TemporaryDictionary();\n        var startPage = param.page;\n        var isParentCell = false;\n        var cellBounds = [];\n        for (var index = 0; index < this.columnRanges.length; index++) {\n            var range = this.columnRanges[index];\n            this.cellStartIndex = range[0];\n            this.cellEndIndex = range[1];\n            var returnObject = this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex);\n            this.currentBounds = returnObject.currentBounds;\n            this.currentRowIndex = returnObject.currentRowIndex;\n            // if (returnObject.returnValue) {\n            //     result = new PdfGridLayoutResult(this.currentPage, this.currentBounds);\n            //     break;\n            // }\n            //Draw Headers.\n            var drawHeader = void 0;\n            for (var i_1 = 0; i_1 < this.Grid.headers.count; i_1++) {\n                var row = this.Grid.headers.getHeader(i_1);\n                var headerHeight = this.currentBounds.y;\n                // RowLayoutResult\n                var headerResult = this.drawRow(row);\n                // if (headerHeight === this.currentBounds.y) {\n                //     drawHeader = true;\n                //     if (PdfGrid.repeatRowIndex === -1) {\n                //         PdfGrid.repeatRowIndex = this.rows.getRow.indexOf(row);\n                //     }\n                // } else {\n                drawHeader = false;\n                // }\n            }\n            var i = 0;\n            var length_1 = this.Grid.rows.count;\n            var repeatRow = void 0;\n            var startingHeight = 0;\n            var flag = true;\n            //Here is to draw parent Grid and Cells\n            cellBounds = [];\n            //Draw row by row with the specified cell range.\n            for (var j = 0; j < this.Grid.rows.count; j++) {\n                var row = this.Grid.rows.getRow(j);\n                i++;\n                this.currentRowIndex = i - 1;\n                var originalHeight = this.currentBounds.y;\n                startPage = this.currentPage;\n                PdfGridLayouter.repeatRowIndex = -1;\n                if (flag && row.grid.isChildGrid) {\n                    startingHeight = originalHeight;\n                    flag = false;\n                }\n                var rowResult = null;\n                ///rowResult = this.drawRow(row);\n                /*if(!row.isrowFinish) {\n                    if(!row.grid.isgridSplit){\n                        rowResult = this.drawRow(row);\n                        row.isrowFinish = true;\n                        row.isrowDraw = true;\n                    } else {\n                        if(!row.isrowDraw){\n                            rowResult = this.drawRow(row);\n                            row.isrowFinish = true;\n                            row.isrowDraw = true;\n                            row.grid.isgridSplit = false;\n                        } else {\n                            rowResult =  null;\n                            break;\n                        }\n                    }\n                }\n                else {\n                    //row.isrowFinish = false;\n                    //rowResult = this.drawRow(row);\n                    rowResult = null;\n                    break;\n                    \n                }             */\n                if (this.Grid.splitChildRowIndex == -1) {\n                    rowResult = this.drawRow(row);\n                    row.isrowFinish = true;\n                }\n                else {\n                    if (row.grid.ParentCell.row.grid.isGridSplit && this.Grid.splitChildRowIndex <= row.rowIndex) {\n                        rowResult = this.drawRow(row);\n                        row.isrowFinish = true;\n                    }\n                    else if (row.isrowFinish) {\n                        continue;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                //rowResult = this.drawRow(row);\n                cellBounds.push(rowResult.bounds.width);\n                /*if (row.isRowBreaksNextPage)\n                    {\n                        let x : number  = 0;\n                        for (let l : number = 0; l < row.cells.count; l++)\n                        {\n                            let isNestedRowBreak : boolean = false;\n                            if (row.height == row.cells.getCell(l).height)\n                            {\n                                let n : number;\n                                let grid : PdfGrid = row.cells.getCell(l).value as PdfGrid;\n                                for (let m : number = grid.rows.count; 0 < m; m--)\n                                {\n                                    if ((grid.rows.getRow(m - 1).rowBreakHeight > 0))\n                                    {\n                                        isNestedRowBreak = true;\n                                        break;\n                                    }\n                                    if (grid.rows.getRow(m - 1).isRowBreaksNextPage)\n                                    {\n                                        row.rowBreakHeightValue = grid.rows.getRow(m - 1).rowBreakHeightValue;\n                                        break;\n                                    }\n                                    row.rowBreakHeightValue += grid.rows.getRow(m - 1).height;\n                                }\n                            }\n                            if (isNestedRowBreak)\n                                break;\n                        }\n                        for (let j : number = 0; j < row.cells.count; j++)\n                        {\n\n                            if (row.height > row.cells.getCell(j).height)\n                            {\n                                row.cells.getCell(j).value = \" \";\n                                let rect : RectangleF ;\n                                let page : PdfPage = this.getNextPage(this.currentPage);\n                                let section : PdfSection = this.currentPage.section;\n                                let index : number = section.indexOf(page);\n                                for (let k : number = 0; k < (section.count - 1) - index; k++)\n                                {\n                                    rect = new RectangleF(x, 0, row.grid.columns.getColumn(j).width, page.getClientSize().height);\n                                    PdfGridLayouter.repeatRowIndex = -1;\n                                    row.cells.getCell(j).draw(page.graphics, rect, false);\n                                    page = this.getNextPage(page);\n                                }\n                                rect = new RectangleF(x, 0, row.grid.columns.getColumn(j).width, row.rowBreakHeightValue);\n\n                                row.cells.getCell(j).draw(page.graphics, rect, false);\n                            }\n                            x += row.grid.columns.getColumn(j).width;\n                        }\n                    }*/\n                //if height remains same, it is understood that row is not drawn in the page\n                if (originalHeight === this.currentBounds.y) {\n                    repeatRow = true;\n                    PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n                }\n                else {\n                    repeatRow = false;\n                    PdfGridLayouter.repeatRowIndex = -1;\n                }\n                while (!rowResult.isFinish && startPage != null) {\n                    var tempResult = this.getLayoutResult();\n                    /*if (startPage != this.currentPage)\n                        {\n                            if (row.grid.isChildGrid && row.grid.ParentCell != null)\n                            {\n                                let bounds : RectangleF= new RectangleF(new PointF(format.paginateBounds.x,format.paginateBounds.y), new SizeF(param.bounds.width, tempResult.bounds.height));\n                                bounds.x += param.bounds.x;\n                                if (row.grid.ParentCell.row.grid.style.cellPadding != null)\n                                {\n                                    bounds.y += row.grid.ParentCell.row.grid.style.cellPadding.top;\n                                    if (bounds.height > this.currentPageBounds.height)\n                                    {\n                                        bounds.height = this.currentPageBounds.height - bounds.y;\n                                        bounds.height -= (row.grid.ParentCell.row.grid.style.cellPadding.bottom);\n                                    }\n                                }\n                                // Draw border for cells in the nested grid cell's row.\n                                for (let c : number = 0; c < row.cells.count; c++)\n                                {\n                                    let cell : PdfGridCell = row.cells.getCell(c);\n                                    let cellWidth :  number= 0;\n                                    if (cell.columnSpan > 1)\n                                    {\n                                        for (; c < cell.columnSpan; c++)\n                                            cellWidth += row.grid.columns.getColumn(c).width;\n                                    }\n                                    else\n                                        cellWidth = Math.max(cell.width, row.grid.columns.getColumn(c).width);\n                                    cell.drawCellBorders(this.currentGraphics, new RectangleF(new PointF(bounds.x,bounds.y), new SizeF(cellWidth, bounds.height)));\n                                    bounds.x += cellWidth;\n                                    c += (cell.columnSpan - 1);\n                                }\n                            }\n                        }\n                        */\n                    endArgs = this.raisePageLayouted(tempResult);\n                    if (endArgs.cancel || repeatRow)\n                        break;\n                    else if (this.Grid.allowRowBreakAcrossPages) {\n                        //If there is no space in the current page, add new page and then draw the remaining row.\n                        this.currentPage = this.getNextPageformat(format);\n                        originalHeight = this.currentBounds.y;\n                        var location_1 = new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2);\n                        // if (format.paginateBounds == new RectangleF(0,0,0,0) && this.startLocation == location)\n                        // {\n                        //     this.currentBounds.x += this.startLocation.x;\n                        //     this.currentBounds.y += this.startLocation.y;\n                        // }\n                        if (this.Grid.isChildGrid && row.grid.ParentCell != null) {\n                            if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n                                if (row.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top < this.currentBounds.height) {\n                                    this.currentBounds.y = this.Grid.ParentCell.row.grid.style.cellPadding.top;\n                                }\n                            }\n                        }\n                        if (row.grid.ParentCell != null) {\n                            row.grid.ParentCell.row.isRowBreaksNextPage = true;\n                            row.grid.ParentCell.row.rowBreakHeightValue = row.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top + this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n                            for (var i_2 = row.rowIndex + 1; i_2 < row.grid.rows.count; i_2++) {\n                                row.grid.ParentCell.row.rowBreakHeightValue += row.grid.rows.getRow(i_2).height;\n                            }\n                            //row.rowBreakHeight = row.grid.ParentCell.row.rowBreakHeightValue;\n                        }\n                        /*if (row.noOfPageCount > 1)\n                        {\n                            let temp : number = row.rowBreakHeightValue;\n                            for (let j : number = 1; j < row.noOfPageCount; j++)\n                            {\n                                row.rowBreakHeightValue = 0;\n                                row.height = ((row.noOfPageCount - 1) * this.currentPage.getClientSize().height);\n                                this.drawRow(row);\n                                this.currentPage = this.getNextPageformat(format);\n                                startPage = this.currentPage;\n                            }\n                            row.rowBreakHeightValue = temp;\n                            row.noOfPageCount = 1;\n                            rowResult = this.drawRow(row);\n                        } else {\n                            rowResult = this.drawRow(row);\n                        }\n                        /*if(row.grid.isChildGrid){\n                            row.isrowFinish = false;\n                            row.isrowDraw = false;\n                            row.grid.isgridSplit = true;\n                            row.grid.ParentCell.row.grid.isgridSplit = true;\n                            //rowResult.isFinish = false;\n                            break;\n                        }*/\n                        if (row.grid.isChildGrid) {\n                            //row.grid.isgridSplit = true;\n                            row.isrowFinish = false;\n                            //row.grid.ParentCell.row.grid.isgridSplit = true;\n                            row.grid.splitChildRowIndex = row.rowIndex;\n                            row.grid.ParentCell.row.grid.splitChildRowIndex = row.grid.ParentCell.row.rowIndex;\n                            if (row.grid.ParentCell.row.grid.isGridSplit) {\n                                row.grid.ParentCell.row.noOfPageCount += 1;\n                                row.grid.ParentCell.row.grid.isGridSplit = false;\n                            }\n                            break;\n                        }\n                        if (row.noOfPageCount < 1) {\n                            if (row.grid.splitChildRowIndex != -1) {\n                                row.grid.isGridSplit = true;\n                            }\n                            this.currentBounds.y = 0.50;\n                            if (this.Grid.repeatHeader) {\n                                for (var j_1 = 0; j_1 < this.Grid.headers.count; j_1++) {\n                                    var headerRepeat = this.Grid.headers.getHeader(j_1);\n                                    this.drawRow(headerRepeat);\n                                }\n                            }\n                            rowResult = this.drawRow(row);\n                            if (row.noOfPageCount >= 1) {\n                                var temp = row.rowBreakHeightValue;\n                                for (var j_2 = 0; j_2 < row.noOfPageCount; j_2++) {\n                                    //this.currentPage.section.add();\n                                    var tempResult1 = this.getLayoutResult();\n                                    endArgs = this.raisePageLayouted(tempResult1);\n                                    this.currentPage = this.getNextPageformat(format);\n                                    originalHeight = this.currentBounds.y;\n                                    //row.rowBreakHeightValue = 0;\n                                    if (row.grid.splitChildRowIndex != -1) {\n                                        row.grid.isGridSplit = true;\n                                    }\n                                    this.currentBounds.y = 0.5;\n                                    if (this.Grid.repeatHeader) {\n                                        for (var i_3 = 0; i_3 < this.Grid.headers.count; i_3++) {\n                                            var header = this.Grid.headers.getHeader(i_3);\n                                            this.drawRow(header);\n                                        }\n                                    }\n                                    //row.height = ((row.noOfPageCount - 1) * this.currentPage.getClientSize().height);\n                                    this.drawRow(row);\n                                }\n                                // row.rowBreakHeight = temp;\n                                // row.noOfPageCount = 1;\n                                // rowResult = this.drawRow(row);\n                            }\n                            row.grid.splitChildRowIndex = -1;\n                            row.grid.isGridSplit = false;\n                            rowResult.isFinish = true;\n                            //row.NestedGridLayoutResult.bounds.height = row.rowBreakHeightValue;\n                            //this.currentBounds.y = rowResult.bounds.y;\n                            for (var i_4 = 0; i_4 < row.cells.count; i_4++) {\n                                if (row.cells.getCell(i_4).value instanceof PdfGrid) {\n                                    row.cells.getCell(i_4).value.splitChildRowIndex = -1;\n                                }\n                            }\n                        }\n                    }\n                    // else if (!this.Grid.allowRowBreakAcrossPages && i < length)\n                    // {\n                    //     this.currentPage = this.getNextPageformat(format);\n                    //     break;\n                    // }\n                    // else if (i >= length)\n                    //     break;\n                }\n                if (!rowResult.isFinish && startPage !== null && format.layout !== PdfLayoutType.OnePage && repeatRow) {\n                    // During pagination, cell position is maintained here.\n                    this.startLocation.x = this.currentBounds.x;\n                    var isAddNextPage = false;\n                    this.currentPage = this.getNextPageformat(format);\n                    /*if (!this.Grid.isSingleGrid)\n                    {\n                        for ( let j : number= 0; j < this.Grid.rows.count; j++)\n                        {\n                            let isWidthGreaterthanParent : boolean = false;\n                            for (let k : number = 0; k < this.Grid.rows.getRow(j).cells.count; k++)\n                            {\n                                if (this.Grid.rows.getRow(j).cells.getCell(k).width > this.currentPageBounds.width)\n                                    isWidthGreaterthanParent = true;\n                            }\n                            if (isWidthGreaterthanParent && this.Grid.rows.getRow(j).cells.getCell(this.rowBreakPageHeightCellIndex).pageCount > 0)\n                            {\n                                isAddNextPage = true;\n                            }\n                        }\n                    }\n                    if (!this.Grid.isRearranged && isAddNextPage)\n                         {\n                             let section : PdfSection = this.currentPage.section;\n                             \n                             //this.currentPage = section.add();\n                         \n                             this.currentGraphics = this.currentPage.graphics;\n                             this.currentBounds = new RectangleF(new PointF(0,0), this.currentPage.getClientSize());\n                          \n                             let pageindex  : number = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n                         }\n                         else\n                         {\n                             this.currentPage = this.getNextPageformat(format);\n                         }\n                         if (format.paginateBounds.y == 0)\n                             this.currentBounds.y = PdfBorders.default.top.width/2;\n                         else\n                         {\n                             this.currentBounds.y = format == null ? 0 : format.paginateBounds.y;\n                             \n                         }\n                         if (this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex))\n                             break;*/\n                    if ((param.format !== null) && !param.format.usePaginateBounds && param.bounds !== null &&\n                        param.bounds.height > 0 && !this.Grid.isChildGrid) {\n                        this.currentBounds.height = param.bounds.height;\n                    }\n                    if ((param.format !== null) && !param.format.usePaginateBounds && param.bounds !== null &&\n                        param.bounds.y > 0 && !this.Grid.isChildGrid) {\n                        this.currentBounds.y = param.bounds.y;\n                    }\n                    this.startLocation.y = this.currentBounds.y;\n                    if ((format.paginateBounds.x === format.paginateBounds.y) &&\n                        (format.paginateBounds.y === format.paginateBounds.height) &&\n                        (format.paginateBounds.height === format.paginateBounds.width) && (format.paginateBounds.width === 0)) {\n                        this.currentBounds.x += this.startLocation.x;\n                    }\n                    if (this.currentBounds.x === PdfBorders.default.left.width / 2) {\n                        this.currentBounds.y += this.startLocation.x;\n                    }\n                    if (this.Grid.repeatHeader) {\n                        for (var i_5 = 0; i_5 < this.Grid.headers.count; i_5++) {\n                            var header = this.Grid.headers.getHeader(i_5);\n                            this.drawRow(header);\n                        }\n                    }\n                    this.drawRow(row);\n                    if (this.currentPage !== null && !layoutedPages.containsKey(this.currentPage)) {\n                        layoutedPages.add(this.currentPage, range);\n                    }\n                }\n                if (row.NestedGridLayoutResult != null) {\n                    // Position for next row in the grid.\n                    this.currentPage = row.NestedGridLayoutResult.page;\n                    this.currentGraphics = this.currentPage.graphics; //If not, next row will not be drawn in the layouted page.\n                    this.startLocation = new PointF(row.NestedGridLayoutResult.bounds.x, row.NestedGridLayoutResult.bounds.y);\n                    var recalHeight = this.ReCalculateHeight(row, row.NestedGridLayoutResult.bounds.height);\n                    this.currentBounds.y = recalHeight;\n                    //this.currentBounds.y = row.NestedGridLayoutResult.bounds.height;\n                    if (startPage != this.currentPage) {\n                        var secion = this.currentPage.section;\n                        var startIndex = secion.indexOf(startPage) + 1;\n                        var endIndex = secion.indexOf(this.currentPage);\n                        for (var page = startIndex; page < endIndex + 1; page++) {\n                            var pageGraphics = this.currentPage.graphics;\n                            var location_2 = new PointF(format.paginateBounds.x, format.paginateBounds.y);\n                            var height = page == endIndex ? (row.NestedGridLayoutResult.bounds.height - param.bounds.y) :\n                                (this.currentBounds.height - location_2.y);\n                            if (height <= pageGraphics.clientSize.height)\n                                height += param.bounds.y;\n                            // if (row.grid.isChildGrid && row.grid.ParentCell != null)\n                            //     location.x += param.bounds.x;\n                            location_2.y = format == null ? 0.5 : format.paginateBounds.y;\n                            // Draw border for last paginated row containing nested grid.\n                            for (var c = 0; c < row.cells.count; c++) {\n                                var cell = row.cells.getCell(c);\n                                var cellWidth = 0;\n                                var totalwidth = 0;\n                                if (cell.value instanceof PdfGrid) {\n                                    for (var i_6 = 0; i_6 < cell.value.columns.count; i_6++) {\n                                        totalwidth += cell.value.columns.getColumn(i_6).columnWidth;\n                                    }\n                                }\n                                else {\n                                    totalwidth = cell.width;\n                                }\n                                // if (cell.columnSpan > 1)\n                                // {\n                                //     for (; c < cell.columnSpan; c++)\n                                //         cellWidth += row.grid.columns.getColumn(c).width;\n                                // }\n                                // else\n                                cellWidth = Math.max(totalwidth, row.grid.columns.getColumn(c).width);\n                                cell.drawCellBorders(pageGraphics, new RectangleF(location_2, new SizeF(cellWidth, height)));\n                                location_2.x += cellWidth;\n                                c += (cell.columnSpan - 1);\n                            }\n                        }\n                        // So, nested grid drawing is completed for the current row. Update page.\n                        // Otherwise, the next nested grid of the parent will draw borders from start.\n                        startPage = this.currentPage;\n                    }\n                }\n            }\n            var isPdfGrid = false;\n            var maximumCellBoundsWidth = 0;\n            if (cellBounds.length > 0) {\n                maximumCellBoundsWidth = cellBounds[0];\n            }\n            var largeNavigatePage = [[1, 2]];\n            for (var c = 0; c < this.Grid.rows.count; c++) {\n                if (this.cellEndIndex != -1 && this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value instanceof PdfGrid) {\n                    var grid = this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value;\n                    this.rowLayoutBoundsWidth = grid.rowLayoutBoundsWidth;\n                    isPdfGrid = true;\n                    // if (largeNavigatePage[0][0] < grid.listOfNavigatePages.length)\n                    // {\n                    //     largeNavigatePage[0][0] = grid.listOfNavigatePages.length;\n                    //     largeNavigatePage[0][1] = cellBounds[c];\n                    // }\n                    // else if ((largeNavigatePage[0][0] == grid.listOfNavigatePages.length) && (largeNavigatePage[0][1] < cellBounds[c]))\n                    // {\n                    //     largeNavigatePage[0][1] = cellBounds[c];\n                    // }\n                }\n            }\n            if (!isPdfGrid && cellBounds.length > 0) {\n                for (var c = 0; c < i - 1; c++) {\n                    if (maximumCellBoundsWidth < cellBounds[c]) {\n                        maximumCellBoundsWidth = cellBounds[c];\n                    }\n                }\n                this.rowLayoutBoundsWidth = maximumCellBoundsWidth;\n            }\n            else {\n                this.rowLayoutBoundsWidth = largeNavigatePage[0][1];\n            }\n            if (this.columnRanges.indexOf(range) < this.columnRanges.length - 1\n                && startPage != null && format.layout != PdfLayoutType.OnePage) {\n                isParentCell = this.Grid.isChildGrid;\n                if (largeNavigatePage[0][0] != 0) {\n                    var section = this.currentPage.section;\n                    var pageIndex = section.indexOf(this.currentPage);\n                    this.currentGraphics = this.currentPage.graphics;\n                    this.currentBounds = new RectangleF(new PointF(0, 0), this.currentPage.getClientSize());\n                    var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n                }\n                else {\n                    this.currentPage = this.getNextPageformat(format);\n                }\n                // let locationGrid : PointF= new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2);\n                // if (format.paginateBounds == new RectangleF(0,0,0,0) && this.startLocation == locationGrid)\n                // {\n                //     this.currentBounds.x += this.startLocation.x;\n                //     this.currentBounds.y += this.startLocation.y;\n                // }\n            }\n            if (this.columnRanges.length - 1 !== index && this.columnRanges.length > 1 && format.layout !== PdfLayoutType.OnePage) {\n                this.currentPage = this.getNextPageformat(format);\n                if ((format.paginateBounds.x === format.paginateBounds.y) && (format.paginateBounds.y === format.paginateBounds.height)\n                    && (format.paginateBounds.height === format.paginateBounds.width) && (format.paginateBounds.width === 0)) {\n                    this.currentBounds.x += this.startLocation.x;\n                    this.currentBounds.y += this.startLocation.y;\n                    //this.currentBounds.height = this.pageBounds.height;\n                }\n            }\n        }\n        result = this.getLayoutResult();\n        if (this.Grid.style.allowHorizontalOverflow && this.Grid.style.horizontalOverflowType == PdfHorizontalOverflowType.NextPage) {\n            this.reArrangePages(layoutedPages);\n        }\n        this.raisePageLayouted(result);\n        return result;\n    };\n    /* tslint:enable */\n    /**\n     * Gets the `next page`.\n     * @private\n     */\n    PdfGridLayouter.prototype.getNextPageformat = function (format) {\n        var section = this.currentPage.section;\n        var nextPage = null;\n        var index = section.indexOf(this.currentPage);\n        this.flag = false;\n        if (index === section.count - 1) {\n            nextPage = section.add();\n        }\n        else {\n            nextPage = section.getPages()[index + 1];\n        }\n        this.currentGraphics = nextPage.graphics;\n        var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n        if (!(this.listOfNavigatePages.indexOf(pageindex) !== -1)) {\n            this.listOfNavigatePages.push(pageindex);\n        }\n        this.currentBounds = new RectangleF(new PointF(0, 0), nextPage.getClientSize());\n        // if ((format.paginateBounds.x !== format.paginateBounds.y) && (format.paginateBounds.y !== format.paginateBounds.height)\n        //     && (format.paginateBounds.height !== format.paginateBounds.width) && (format.paginateBounds.width !== 0)) {\n        //     this.currentBounds.x = format.paginateBounds.x;\n        //     this.currentBounds.y = format.paginateBounds.y;\n        //     this.currentBounds.height = format.paginateBounds.height;\n        // }\n        return nextPage;\n    };\n    PdfGridLayouter.prototype.CheckIfDefaultFormat = function (format) {\n        var defaultFormat = new PdfStringFormat();\n        return (format.alignment === defaultFormat.alignment && format.characterSpacing === defaultFormat.characterSpacing &&\n            format.clipPath === defaultFormat.clipPath && format.firstLineIndent === defaultFormat.firstLineIndent &&\n            format.horizontalScalingFactor === defaultFormat.horizontalScalingFactor &&\n            format.lineAlignment === defaultFormat.lineAlignment\n            && format.lineLimit === defaultFormat.lineLimit && format.lineSpacing === defaultFormat.lineSpacing &&\n            format.measureTrailingSpaces === defaultFormat.measureTrailingSpaces && format.noClip === defaultFormat.noClip &&\n            format.paragraphIndent === defaultFormat.paragraphIndent && format.rightToLeft === defaultFormat.rightToLeft &&\n            format.subSuperScript === defaultFormat.subSuperScript && format.wordSpacing === defaultFormat.wordSpacing &&\n            format.wordWrap === defaultFormat.wordWrap);\n    };\n    /**\n     * `Raises BeforeCellDraw event`.\n     * @private\n     */\n    PdfGridLayouter.prototype.RaiseBeforeCellDraw = function (graphics, rowIndex, cellIndex, bounds, value, style) {\n        var args = null;\n        if (this.Grid.raiseBeginCellDraw) {\n            args = new PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style);\n            this.Grid.onBeginCellDraw(args);\n            style = args.style;\n        }\n        return style;\n    };\n    /**\n     * `Raises AfterCellDraw event`.\n     * @private\n     */\n    PdfGridLayouter.prototype.raiseAfterCellDraw = function (graphics, rowIndex, cellIndex, bounds, value, cellstyle) {\n        var args = null;\n        if (this.Grid.raiseEndCellDraw) {\n            args = new PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, cellstyle);\n            this.Grid.onEndCellDraw(args);\n        }\n    };\n    PdfGridLayouter.prototype.reArrangePages = function (layoutedPages) {\n        var document = this.currentPage.document;\n        var pages = [];\n        var keys = layoutedPages.keys();\n        var values = layoutedPages.values();\n        for (var i = 0; i < keys.length; i++) {\n            var page = keys[i];\n            page.section = null;\n            pages.push(page);\n            document.pages.remove(page);\n        }\n        /* tslint:disable */\n        for (var i = 0; i < layoutedPages.size(); i++) {\n            var count = 0;\n            for (var j = i, count_1 = (layoutedPages.size() / this.columnRanges.length); j < layoutedPages.size(); j += count_1) {\n                var page = pages[j];\n                if (document.pages.indexOf(page) === -1) {\n                    document.pages.add(page);\n                }\n            }\n        }\n        /* tslint:enable */\n    };\n    /**\n     * Gets the `layout result`.\n     * @private\n     */\n    PdfGridLayouter.prototype.getLayoutResult = function () {\n        if (this.Grid.isChildGrid && this.Grid.allowRowBreakAcrossPages) {\n            for (var i = 0; i < this.Grid.rows.count; i++) {\n                var row = this.Grid.rows.getRow(i);\n                if (row.rowBreakHeight > 0 && row.repeatFlag) {\n                    this.startLocation.y = this.currentPage.origin.y;\n                }\n            }\n        }\n        var bounds;\n        if (!this.isChanged) {\n            bounds = new RectangleF(this.startLocation, new SizeF(this.currentBounds.width, this.currentBounds.y -\n                this.startLocation.y));\n        }\n        // else {\n        //     bounds = new RectangleF(this.currentLocation, new SizeF(this.currentBounds.width, this.currentBounds.y -\n        //                              this.currentLocation.y));\n        // }\n        /* tslint:enable */\n        return new PdfGridLayoutResult(this.currentPage, bounds);\n    };\n    /**\n     * `Recalculate row height` for the split cell to be drawn.\n     * @private\n     */\n    PdfGridLayouter.prototype.ReCalculateHeight = function (row, height) {\n        var newHeight = 0.0;\n        for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n            if (!(row.cells.getCell(i).remainingString === null || row.cells.getCell(i).remainingString === '' ||\n                typeof row.cells.getCell(i).remainingString === 'undefined')) {\n                newHeight = Math.max(newHeight, row.cells.getCell(i).measureHeight());\n            }\n        }\n        return Math.max(height, newHeight);\n    };\n    /**\n     * `Raises BeforePageLayout event`.\n     * @private\n     */\n    PdfGridLayouter.prototype.raiseBeforePageLayout = function (currentPage, currentBounds, currentRow) {\n        var cancel = false;\n        if (this.Grid.raiseBeginPageLayout) {\n            var args = new PdfGridBeginPageLayoutEventArgs(currentBounds, currentPage, currentRow);\n            this.Grid.onBeginPageLayout(args);\n            // if (currentBounds !== args.Bounds) {\n            //     this.isChanged = true;\n            //     this.currentLocation = new PointF(args.Bounds.x, args.Bounds.y);\n            //     this.measureColumnsWidth(new RectangleF(new PointF(args.Bounds.x, args.Bounds.y) ,\n            //                                                  new SizeF(args.Bounds.width + args.Bounds.x ,\n            //                                                                 args.Bounds.height)));\n            // }\n            cancel = args.cancel;\n            currentBounds = args.bounds;\n            currentRow = args.startRowIndex;\n        }\n        return { returnValue: cancel, currentBounds: currentBounds, currentRowIndex: currentRow };\n    };\n    /**\n     * `Raises PageLayout event` if needed.\n     * @private\n     */\n    PdfGridLayouter.prototype.raisePageLayouted = function (result) {\n        var args = new PdfGridEndPageLayoutEventArgs(result);\n        if (this.Grid.raiseEndPageLayout) {\n            this.Grid.onEndPageLayout(args);\n        }\n        return args;\n    };\n    PdfGridLayouter.prototype.drawRow = function (row, result, height) {\n        if (typeof result === 'undefined') {\n            //.. Check if required space available.\n            //.....If the row conains spans which  falls through more than one page, then draw the row to next page.                        \n            var result_1 = new RowLayoutResult();\n            var rowHeightWithSpan = 0;\n            var location_3 = new PointF(0, 0);\n            var size = new SizeF(0, 0);\n            var isHeader = false;\n            if (row.rowSpanExists) {\n                var maxSpan = 0;\n                var currRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n                if (currRowIndex === -1) {\n                    currRowIndex = this.Grid.headers.indexOf(row);\n                    if (currRowIndex !== -1) {\n                        isHeader = true;\n                    }\n                }\n                for (var i = 0; i < row.cells.count; i++) {\n                    var cell = row.cells.getCell(i);\n                    maxSpan = Math.max(maxSpan, cell.rowSpan);\n                }\n                for (var i = currRowIndex; i < currRowIndex + maxSpan; i++) {\n                    rowHeightWithSpan += (isHeader ? this.Grid.headers.getHeader(i).height : this.Grid.rows.getRow(i).height);\n                }\n                // let rowMaxHeight : number = rowHeightWithSpan;\n                // for (let i : number = 0; i < row.cells.count; i++ ) {\n                //     rowMaxHeight = rowMaxHeight > row.cells.getCell(i).height ? rowMaxHeight : row.cells.getCell(i).height;\n                // }\n                // let flag : boolean = true;\n                // let nextRow : PdfGridRow = this.Grid.headers.getHeader(this.Grid.headers.indexOf(row) + 1);\n                // for (let i : number = 0; i < nextRow.cells.count; i++ ) {\n                //     if (nextRow.cells.getCell(i).value !== '' && nextRow.cells.getCell(i).value !== undefined) {\n                //         flag = false;\n                //         break;\n                //     }\n                // }\n                // if ((rowMaxHeight > rowHeightWithSpan) && flag) {\n                //     row.height += (rowMaxHeight - rowHeightWithSpan);\n                // }                \n            }\n            var calculatedHeight = row.rowBreakHeight > 0.0 ? row.rowBreakHeight : row.height;\n            if (this.Grid.isChildGrid && this.Grid.ParentCell != null) {\n                //Split row only if row height exceeds page height and AllowRowBreakAcrossPages is true.\n                // if (calculatedHeight + this.Grid.ParentCell.row.grid.style.cellPadding.bottom +\n                //             this.Grid.ParentCell.row.grid.style.cellPadding.top > this.currentPageBounds.height) {\n                //     if (this.Grid.allowRowBreakAcrossPages) {\n                //         result.isFinish = true;\n                //         if ( this.Grid.isChildGrid && row.rowBreakHeight > 0 ) {\n                //             if (this.Grid.ParentCell.row.grid.style.cellPadding !== null) {\n                //                 this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n                //             }\n                //             this.currentBounds.x = this.startLocation.x;\n                //         }\n                //         result.bounds = this.currentBounds ;\n                //         this.drawRowWithBreak(result, row, calculatedHeight);\n                //     } else {\n                //         //If AllowRowBreakAcrossPages is not true, draw the row till it fits the page.                       \n                //         if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n                //             this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n                //             calculatedHeight = this.currentBounds.height - this.currentBounds.y -\n                //                     this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n                //         }\n                //         result.isFinish = false;\n                //         this.drawRow( row, result, calculatedHeight);\n                //     }\n                // } else\n                if (this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + calculatedHeight >\n                    this.currentPageBounds.height || this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom\n                    + calculatedHeight > this.currentBounds.height || this.currentBounds.y +\n                    this.Grid.ParentCell.row.grid.style.cellPadding.bottom + rowHeightWithSpan > this.currentPageBounds.height) {\n                    //If a row is repeated and still cannot fit in page, proceed draw.\n                    if (this.Grid.ParentCell.row.grid.LayoutFormat.break === PdfLayoutBreakType.FitPage) {\n                        PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n                        this.Grid.splitChildRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n                    }\n                    if (PdfGridLayouter.repeatRowIndex > -1 && PdfGridLayouter.repeatRowIndex === row.rowIndex) {\n                        if (this.Grid.allowRowBreakAcrossPages) {\n                            result_1.isFinish = true;\n                            // if (this.Grid.isChildGrid && row.rowBreakHeightValue > 0) {\n                            //     // if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n                            //     //     this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n                            //     // }\n                            //     this.currentBounds.x = this.startLocation.x;\n                            // }\n                            result_1.bounds = this.currentBounds;\n                            this.drawRowWithBreak(result_1, row, calculatedHeight);\n                            row.repeatFlag = true;\n                            row.repeatRowNumber = PdfGridLayouter.repeatRowIndex;\n                        }\n                        // else {\n                        //     result.isFinish = false;\n                        //     row.repeatFlag = false;\n                        //     this.drawRow( row, result, calculatedHeight);\n                        // }\n                    }\n                    // else {\n                    //     result.isFinish = false;\n                    // }\n                }\n                else {\n                    result_1.isFinish = true;\n                    if (row.grid.ParentCell.row.rowBreakHeightValue > 0) {\n                        row.repeatFlag = true;\n                    }\n                    else {\n                        row.repeatFlag = false;\n                        calculatedHeight = row.height;\n                    }\n                    if (this.Grid.isChildGrid && row.rowBreakHeight > 0) {\n                        if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n                            calculatedHeight += this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n                        }\n                    }\n                    this.drawRow(row, result_1, calculatedHeight);\n                }\n            }\n            else {\n                //Split row only if row height exceeds page height and AllowRowBreakAcrossPages is true.\n                if (calculatedHeight > this.currentPageBounds.height) {\n                    if (this.Grid.allowRowBreakAcrossPages) {\n                        result_1.isFinish = true;\n                        //result.bounds = this.currentBounds;\n                        this.drawRowWithBreak(result_1, row, calculatedHeight);\n                        row.isrowFinish = true;\n                        row.repeatFlag = true;\n                        if (row.grid.splitChildRowIndex !== -1) {\n                            result_1.isFinish = false;\n                        }\n                    }\n                    // else {\n                    //     //If AllowRowBreakAcrossPages is not true, draw the row till it fits the page.\n                    //     result.isFinish = false;\n                    //     this.drawRow( row, result, calculatedHeight);\n                    // }\n                }\n                else if (this.currentBounds.y + calculatedHeight > this.currentPageBounds.height ||\n                    this.currentBounds.y + calculatedHeight > (this.currentBounds.height + this.startLocation.y) ||\n                    this.currentBounds.y + rowHeightWithSpan > this.currentPageBounds.height) {\n                    // If a row is repeated and still cannot fit in page, proceed draw.\n                    if (this.Grid.LayoutFormat.break === PdfLayoutBreakType.FitPage) {\n                        PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n                    }\n                    if (PdfGridLayouter.repeatRowIndex > -1 && PdfGridLayouter.repeatRowIndex === row.rowIndex) {\n                        if (this.Grid.allowRowBreakAcrossPages) {\n                            result_1.isFinish = true;\n                            this.drawRowWithBreak(result_1, row, calculatedHeight);\n                            row.repeatFlag = true;\n                            row.repeatRowNumber = PdfGridLayouter.repeatRowIndex;\n                            if (row.grid.splitChildRowIndex !== -1) {\n                                result_1.isFinish = false;\n                            }\n                        }\n                        // else {\n                        //     result.isFinish = false;\n                        //     this.drawRow(row, result, calculatedHeight);\n                        // }\n                    }\n                    else {\n                        result_1.isFinish = false;\n                    }\n                }\n                else {\n                    result_1.isFinish = true;\n                    this.drawRow(row, result_1, calculatedHeight);\n                    row.repeatFlag = false;\n                }\n            }\n            return result_1;\n        }\n        else {\n            var skipcell = false;\n            var location_4 = new PointF(this.currentBounds.x, this.currentBounds.y);\n            // if (row.grid.isChildGrid && row.grid.allowRowBreakAcrossPages && this.startLocation.x !== this.currentBounds.x && row.width <\n            //                 this.currentPage.getClientSize().width) {\n            //     location.x = this.startLocation.x;\n            // }\n            result.bounds = new RectangleF(location_4, new SizeF(0, 0));\n            height = this.ReCalculateHeight(row, height);\n            for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n                var cancelSpans = ((i > this.cellEndIndex + 1) && (row.cells.getCell(i).columnSpan > 1));\n                // let cancelSpans : boolean = false;\n                if (!cancelSpans) {\n                    for (var j = 1; j < row.cells.getCell(i).columnSpan; j++) {\n                        row.cells.getCell(i + j).isCellMergeContinue = true;\n                    }\n                }\n                var size = new SizeF(this.Grid.columns.getColumn(i).width, height);\n                // if (size.width > this.currentGraphics.clientSize.width) {\n                //     size.width = this.currentGraphics.clientSize.width;\n                // }\n                // if (this.Grid.isChildGrid && this.Grid.style.allowHorizontalOverflow) {\n                //     if (size.width >= this.currentGraphics.clientSize.width) {\n                //         size.width -= 2 * this.currentBounds.x;\n                //     }\n                // }\n                /* tslint:disable */\n                if (!this.CheckIfDefaultFormat(this.Grid.columns.getColumn(i).format) &&\n                    this.CheckIfDefaultFormat(row.cells.getCell(i).stringFormat)) {\n                    row.cells.getCell(i).stringFormat = this.Grid.columns.getColumn(i).format;\n                }\n                var cellstyle = row.cells.getCell(i).style;\n                var tempValue = ((typeof row.cells.getCell(i).value === 'string' &&\n                    row.cells.getCell(i).value !== null) ? row.cells.getCell(i).value : '');\n                row.cells.getCell(i).style = this.RaiseBeforeCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, cellstyle);\n                //row.cells.getCell(i).style = cellstyle;\n                if (!skipcell) {\n                    if (row.cells.getCell(i).value instanceof PdfGrid) {\n                        var grid = row.cells.getCell(i).value;\n                        grid.parentCellIndex = i;\n                    }\n                    var stringResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location_4, size), cancelSpans);\n                    if (row.grid.style.allowHorizontalOverflow && (row.cells.getCell(i).columnSpan > this.cellEndIndex ||\n                        i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1) && this.cellEndIndex < row.cells.count - 1) {\n                        row.rowOverflowIndex = this.cellEndIndex;\n                    }\n                    if (row.grid.style.allowHorizontalOverflow && (row.rowOverflowIndex > 0 && (row.cells.getCell(i).columnSpan >\n                        this.cellEndIndex || i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1)) &&\n                        row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1 > 0) {\n                        row.cells.getCell(row.rowOverflowIndex + 1).value = stringResult !== null ? (stringResult.remainder !== undefined) ?\n                            stringResult.remainder : '' : '';\n                        row.cells.getCell(row.rowOverflowIndex + 1).stringFormat = row.cells.getCell(i).stringFormat;\n                        row.cells.getCell(row.rowOverflowIndex + 1).style = row.cells.getCell(i).style;\n                        row.cells.getCell(row.rowOverflowIndex + 1).columnSpan = row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1;\n                    }\n                }\n                /* tslint:enable */\n                tempValue = ((typeof row.cells.getCell(i).value === 'string' &&\n                    row.cells.getCell(i).value !== null) ? row.cells.getCell(i).value : '');\n                if (!cancelSpans) {\n                    this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, row.cells.getCell(i).style);\n                }\n                if (row.cells.getCell(i).value instanceof PdfGrid) {\n                    var grid = row.cells.getCell(i).value;\n                    if (this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width) {\n                        location_4.x = grid.rowLayoutBoundsWidth;\n                        location_4.x += grid.style.cellSpacing;\n                    }\n                    else {\n                        location_4.x += this.Grid.columns.getColumn(i).width;\n                    }\n                }\n                else {\n                    location_4.x += this.Grid.columns.getColumn(i).width;\n                }\n            }\n            if (!row.rowMergeComplete || row.isRowHeightSet) {\n                this.currentBounds.y += height;\n            }\n            result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location_4.x, location_4.y));\n        }\n    };\n    PdfGridLayouter.prototype.drawRowWithBreak = function (result, row, calculateHeight) {\n        var location = new PointF(this.currentBounds.x, this.currentBounds.y);\n        if (row.grid.isChildGrid && row.grid.allowRowBreakAcrossPages && this.startLocation.x !== this.currentBounds.x) {\n            location.x = this.startLocation.x;\n        }\n        result.bounds = new RectangleF(location, new SizeF(0, 0));\n        this.gridHeight = row.rowBreakHeight > 0 ? this.currentPageBounds.height : 0;\n        // Calculate the remaining height.\n        if (row.grid.style.cellPadding.top + this.currentBounds.y + row.grid.style.cellPadding.bottom < this.currentPageBounds.height) {\n            row.rowBreakHeight = this.currentBounds.y + calculateHeight - this.currentPageBounds.height;\n        }\n        // else {\n        //     row.rowBreakHeight = calculateHeight;\n        //     result.isFinish = false;\n        //     return;\n        // }\n        // No need to explicit break if the row height is equal to grid height.\n        for (var i = 0; i < row.cells.count; i++) {\n            var cell = row.cells.getCell(i);\n            var cellHeight = cell.measureHeight();\n            if (cellHeight === calculateHeight && cell.value instanceof PdfGrid) {\n                row.rowBreakHeight = 0;\n            }\n            // else if (cellHeight === calculateHeight && (cell.value as PdfGrid) === null) {\n            //     row.rowBreakHeight = this.currentBounds.y + calculateHeight - this.currentPageBounds.height;\n            // }\n        }\n        for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n            var cancelSpans = ((row.cells.getCell(i).columnSpan + i > this.cellEndIndex + 1) &&\n                (row.cells.getCell(i).columnSpan > 1));\n            // if (!cancelSpans) {\n            //     for (let k : number = 1; k < row.cells.getCell(i).columnSpan; k++) {\n            //         row.cells.getCell(i + k).isCellMergeContinue = true;\n            //     }\n            //}\n            var size = new SizeF(this.Grid.columns.getColumn(i).width, this.gridHeight > 0.0 ? this.gridHeight :\n                this.currentPageBounds.height);\n            // if (size.width === 0) {\n            //     size = new SizeF(row.cells.getCell(i).width, size.height);\n            // }\n            // if (!this.CheckIfDefaultFormat(this.Grid.columns.getColumn(i).format) &&\n            //         this.CheckIfDefaultFormat((row.cells.getCell(i).stringFormat))) {\n            //     row.cells.getCell(i).stringFormat = this.Grid.columns.getColumn(i).format;\n            // }\n            var cellstyle1 = row.cells.getCell(i).style;\n            row.cells.getCell(i).style = cellstyle1;\n            var skipcell = false;\n            var stringResult = null;\n            if (!skipcell) {\n                stringResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location, size), cancelSpans);\n            }\n            //If still row is to be drawn, set cell finished drawing cell as false and update the text to be drawn.\n            if (row.rowBreakHeight > 0.0) {\n                if (stringResult != null) {\n                    row.cells.getCell(i).FinishedDrawingCell = false;\n                    row.cells.getCell(i).remainingString = stringResult.remainder == null ? ' ' : stringResult.remainder;\n                    if (row.grid.isChildGrid) {\n                        row.rowBreakHeight = calculateHeight - stringResult.actualSize.height;\n                    }\n                }\n            }\n            result.isFinish = (!result.isFinish) ? result.isFinish : row.cells.getCell(i).FinishedDrawingCell;\n            // let tempValue : string = ((typeof row.cells.getCell(i).value === 'string' &&\n            //row.cells.getCell(i).value !== null) ? row.cells.getCell(i).value : '') as string;\n            // if (!cancelSpans) {\n            //     // this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i,\n            //     //           new RectangleF(location, size), tempValue, row.cells.getCell(i).style);            \n            //     this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location, size),\n            //                             (row.cells.getCell(i).value as string) ? row.cells.getCell(i).value.toString() : ' ',\n            //                             row.cells.getCell(i).style);\n            //     }                \n            if (row.cells.getCell(i).value instanceof PdfGrid) {\n                var grid = row.cells.getCell(i).value;\n                this.rowBreakPageHeightCellIndex = i;\n                // row.cells.getCell(i).pageCount = grid.listOfNavigatePages.length;\n                // for (let j : number = 0;j<grid.listOfNavigatePages.length;j++){\n                //     let pageIndex : number =grid.listOfNavigatePages.indexOf(j);\n                //             this.Grid.listOfNavigatePages.push(pageIndex);\n                //     }\n                if (this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width) {\n                    location.x = this.rowLayoutBoundsWidth;\n                    location.x += grid.style.cellSpacing;\n                }\n                else {\n                    location.x += this.Grid.columns.getColumn(i).width;\n                }\n            }\n            else {\n                location.x += this.Grid.columns.getColumn(i).width;\n            }\n        }\n        this.currentBounds.y += this.gridHeight > 0.0 ? this.gridHeight : calculateHeight;\n        result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location.x, location.y));\n    };\n    /**\n     * @hidden\n     * @private\n     */\n    PdfGridLayouter.repeatRowIndex = -1;\n    return PdfGridLayouter;\n}(ElementLayouter));\nexport { PdfGridLayouter };\n// recalculateBounds : boolean, clientSize : SizeF\n//Implementation\n/**\n * `Initializes` internal data.\n * @private\n */\n//Internal declaration\nvar PdfGridLayoutResult = /** @class */ (function (_super) {\n    __extends(PdfGridLayoutResult, _super);\n    /**\n     * Constructor\n     * @private\n     */\n    function PdfGridLayoutResult(page, bounds) {\n        return _super.call(this, page, bounds) || this;\n    }\n    return PdfGridLayoutResult;\n}(PdfLayoutResult));\nexport { PdfGridLayoutResult };\n/**\n * `PdfGridLayoutFormat` class represents a flexible grid that consists of columns and rows.\n */\nvar PdfGridLayoutFormat = /** @class */ (function (_super) {\n    __extends(PdfGridLayoutFormat, _super);\n    /**\n     * Initializes a new instance of the `PdfGridLayoutFormat` class.\n     * @private\n     */\n    function PdfGridLayoutFormat(baseFormat) {\n        var _this = this;\n        if (typeof baseFormat === 'undefined') {\n            _this = _super.call(this) || this;\n        }\n        else {\n            _this = _super.call(this, baseFormat) || this;\n        }\n        return _this;\n    }\n    return PdfGridLayoutFormat;\n}(PdfLayoutFormat));\nexport { PdfGridLayoutFormat };\nvar GridCellEventArgs = /** @class */ (function () {\n    // Constructors\n    /**\n     * Initialize a new instance for `GridCellEventArgs` class.\n     * @private\n     */\n    function GridCellEventArgs(graphics, rowIndex, cellIndex, bounds, value) {\n        this.gridRowIndex = rowIndex;\n        this.gridCellIndex = cellIndex;\n        this.internalValue = value;\n        this.gridBounds = bounds;\n        this.pdfGraphics = graphics;\n    }\n    Object.defineProperty(GridCellEventArgs.prototype, \"rowIndex\", {\n        // Properties\n        /**\n         * Gets the value of current `row index`.\n         * @private\n         */\n        get: function () {\n            return this.gridRowIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridCellEventArgs.prototype, \"cellIndex\", {\n        /**\n         * Gets the value of current `cell index`.\n         * @private\n         */\n        get: function () {\n            return this.gridCellIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridCellEventArgs.prototype, \"value\", {\n        /**\n         * Gets the actual `value` of current cell.\n         * @private\n         */\n        get: function () {\n            return this.internalValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridCellEventArgs.prototype, \"bounds\", {\n        /**\n         * Gets the `bounds` of current cell.\n         * @private\n         */\n        get: function () {\n            return this.gridBounds;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridCellEventArgs.prototype, \"graphics\", {\n        /**\n         * Gets the instance of `current graphics`.\n         * @private\n         */\n        get: function () {\n            return this.pdfGraphics;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return GridCellEventArgs;\n}());\nexport { GridCellEventArgs };\nvar PdfGridBeginCellDrawEventArgs = /** @class */ (function (_super) {\n    __extends(PdfGridBeginCellDrawEventArgs, _super);\n    // Constructors\n    /**\n     * Initializes a new instance of the `StartCellLayoutEventArgs` class.\n     * @private\n     */\n    function PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style) {\n        var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;\n        _this.style = style;\n        return _this;\n    }\n    Object.defineProperty(PdfGridBeginCellDrawEventArgs.prototype, \"skip\", {\n        // Properties\n        /**\n         * Gets or sets a value indicating whether the value of this cell should be `skipped`.\n         * @private\n         */\n        get: function () {\n            return this.bSkip;\n        },\n        set: function (value) {\n            this.bSkip = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridBeginCellDrawEventArgs.prototype, \"style\", {\n        /**\n         * Gets or sets a `style` value of the cell.\n         * @private\n         */\n        get: function () {\n            return this.cellStyle;\n        },\n        set: function (value) {\n            this.cellStyle = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridBeginCellDrawEventArgs;\n}(GridCellEventArgs));\nexport { PdfGridBeginCellDrawEventArgs };\nvar PdfGridEndCellDrawEventArgs = /** @class */ (function (_super) {\n    __extends(PdfGridEndCellDrawEventArgs, _super);\n    // Constructors\n    /**\n     * Initializes a new instance of the `PdfGridEndCellLayoutEventArgs` class.\n     * @private\n     */\n    function PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style) {\n        var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;\n        _this.cellStyle = style;\n        return _this;\n    }\n    Object.defineProperty(PdfGridEndCellDrawEventArgs.prototype, \"style\", {\n        // Propertise\n        /**\n         * Get the `PdfGridCellStyle`.\n         * @private\n         */\n        get: function () {\n            return this.cellStyle;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridEndCellDrawEventArgs;\n}(GridCellEventArgs));\nexport { PdfGridEndCellDrawEventArgs };\nvar PdfCancelEventArgs = /** @class */ (function () {\n    function PdfCancelEventArgs() {\n    }\n    Object.defineProperty(PdfCancelEventArgs.prototype, \"cancel\", {\n        // Properties\n        /**\n         * Gets and Sets the value of `cancel`.\n         * @private\n         */\n        get: function () {\n            return this.isCancel;\n        },\n        set: function (value) {\n            this.isCancel = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfCancelEventArgs;\n}());\nexport { PdfCancelEventArgs };\nvar BeginPageLayoutEventArgs = /** @class */ (function (_super) {\n    __extends(BeginPageLayoutEventArgs, _super);\n    // Constructors\n    /**\n     * Initializes a new instance of the `BeginPageLayoutEventArgs` class with the specified rectangle and page.\n     * @private\n     */\n    function BeginPageLayoutEventArgs(bounds, page) {\n        var _this = _super.call(this) || this;\n        _this.bounds = bounds;\n        _this.pdfPage = page;\n        return _this;\n    }\n    Object.defineProperty(BeginPageLayoutEventArgs.prototype, \"bounds\", {\n        // Properties\n        /**\n         * Gets or sets value that indicates the lay outing `bounds` on the page.\n         * @private\n         */\n        get: function () {\n            return this.cellBounds;\n        },\n        set: function (value) {\n            this.cellBounds = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BeginPageLayoutEventArgs.prototype, \"page\", {\n        /**\n         * Gets the `page` where the lay outing should start.\n         * @private\n         */\n        get: function () {\n            return this.pdfPage;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return BeginPageLayoutEventArgs;\n}(PdfCancelEventArgs));\nexport { BeginPageLayoutEventArgs };\n/**\n * `EndPageLayoutEventArgs` class is alternate for end page layout events.\n */\nvar EndPageLayoutEventArgs = /** @class */ (function (_super) {\n    __extends(EndPageLayoutEventArgs, _super);\n    // Constructors\n    /**\n     * Initializes a new instance of the `EndPageLayoutEventArgs` class. with the specified 'PdfLayoutResult'.\n     * @private\n     */\n    function EndPageLayoutEventArgs(result) {\n        var _this = _super.call(this) || this;\n        _this.layoutResult = result;\n        return _this;\n    }\n    Object.defineProperty(EndPageLayoutEventArgs.prototype, \"result\", {\n        // Properties\n        /**\n         * Gets the lay outing `result` of the page.\n         * @private\n         */\n        get: function () {\n            return this.layoutResult;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EndPageLayoutEventArgs.prototype, \"nextPage\", {\n        /**\n         * Gets or sets a value indicating the `next page` where the element should be layout.\n         * @private\n         */\n        get: function () {\n            return this.nextPdfPage;\n        },\n        set: function (value) {\n            this.nextPdfPage = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return EndPageLayoutEventArgs;\n}(PdfCancelEventArgs));\nexport { EndPageLayoutEventArgs };\n/**\n * `PdfGridBeginPageLayoutEventArgs` class is alternate for begin page layout events.\n */\nvar PdfGridBeginPageLayoutEventArgs = /** @class */ (function (_super) {\n    __extends(PdfGridBeginPageLayoutEventArgs, _super);\n    // Constructors\n    /**\n     * Initialize a new instance of `PdfGridBeginPageLayoutEventArgs` class.\n     * @private\n     */\n    function PdfGridBeginPageLayoutEventArgs(bounds, page, startRow) {\n        var _this = _super.call(this, bounds, page) || this;\n        _this.startRow = startRow;\n        return _this;\n    }\n    Object.defineProperty(PdfGridBeginPageLayoutEventArgs.prototype, \"startRowIndex\", {\n        // Properties\n        /**\n         * Gets the `start row index`.\n         * @private\n         */\n        get: function () {\n            return this.startRow;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridBeginPageLayoutEventArgs;\n}(BeginPageLayoutEventArgs));\nexport { PdfGridBeginPageLayoutEventArgs };\n/**\n * `PdfGridEndPageLayoutEventArgs` class is alternate for begin page layout events.\n */\nvar PdfGridEndPageLayoutEventArgs = /** @class */ (function (_super) {\n    __extends(PdfGridEndPageLayoutEventArgs, _super);\n    // Constructors\n    /**\n     * Initialize a new instance of `PdfGridEndPageLayoutEventArgs` class.\n     * @private\n     */\n    function PdfGridEndPageLayoutEventArgs(result) {\n        return _super.call(this, result) || this;\n    }\n    return PdfGridEndPageLayoutEventArgs;\n}(EndPageLayoutEventArgs));\nexport { PdfGridEndPageLayoutEventArgs };\nvar RowLayoutResult = /** @class */ (function () {\n    //Constructors\n    /**\n     * Initializes a new instance of the `RowLayoutResult` class.\n     * @private\n     */\n    function RowLayoutResult() {\n        this.layoutedBounds = new RectangleF(0, 0, 0, 0);\n    }\n    Object.defineProperty(RowLayoutResult.prototype, \"isFinish\", {\n        /**\n         * Gets or sets a value indicating whether this instance `is finish`.\n         * @private\n         */\n        get: function () {\n            return this.bIsFinished;\n        },\n        set: function (value) {\n            this.bIsFinished = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RowLayoutResult.prototype, \"bounds\", {\n        /**\n         * Gets or sets the `bounds`.\n         * @private\n         */\n        get: function () {\n            return this.layoutedBounds;\n        },\n        set: function (value) {\n            this.layoutedBounds = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return RowLayoutResult;\n}());\nexport { RowLayoutResult };\n","import { PdfGrid } from './pdf-grid';\nimport { PdfGridCellStyle } from './styles/style';\nimport { PdfStringLayouter } from './../../graphics/fonts/string-layouter';\nimport { PdfDocument } from './../../document/pdf-document';\nimport { PdfStringFormat } from './../../graphics/fonts/pdf-string-format';\nimport { RectangleF, PointF, SizeF } from './../../drawing/pdf-drawing';\nimport { PdfDashStyle, PdfLineCap } from './../../graphics/enum';\nimport { PdfBorderOverlapStyle } from './../tables/light-tables/enum';\nimport { PdfSolidBrush } from './../../graphics/brushes/pdf-solid-brush';\nimport { PdfColor } from './../../graphics/pdf-color';\nimport { PdfImage } from './../../graphics/images/pdf-image';\nimport { PdfBitmap } from './../../graphics/images/pdf-bitmap';\nimport { PdfTextWebLink } from './../../annotations/pdf-text-web-link';\nimport { PdfLayoutType } from './../../graphics/figures/enum';\nimport { PdfGridLayouter, PdfGridLayoutFormat } from './../../structured-elements/grid/layout/grid-layouter';\nimport { PdfLayoutParams } from '../../../implementation/graphics/figures/base/element-layouter';\n/**\n * `PdfGridCell` class represents the schema of a cell in a 'PdfGrid'.\n */\nvar PdfGridCell = /** @class */ (function () {\n    function PdfGridCell(row) {\n        /**\n         * `Width` of the cell.\n         * @default 0\n         * @private\n         */\n        this.cellWidth = 0;\n        /**\n         * `Height` of the cell.\n         * @default 0\n         * @private\n         */\n        this.cellHeight = 0;\n        /**\n         * `tempval`to stores current width .\n         * @default 0\n         * @private\n         */\n        this.tempval = 0;\n        this.fontSpilt = false;\n        /**\n         * Specifies weather the `cell is drawn`.\n         * @default true\n         * @private\n         */\n        this.finsh = true;\n        /**\n         * The `remaining height` of row span.\n         * @default 0\n         * @private\n         */\n        this.rowSpanRemainingHeight = 0;\n        this.hasRowSpan = false;\n        this.hasColSpan = false;\n        /**\n         * the 'isFinish' is set to page finish\n         */\n        this.isFinish = true;\n        /**\n         * The `present' to store the current cell.\n         * @default false\n         * @private\n         */\n        this.present = false;\n        if (typeof row === 'undefined') {\n            this.gridRowSpan = 1;\n            this.colSpan = 1;\n        }\n        else {\n            this.constructor();\n            this.gridRow = row;\n        }\n    }\n    Object.defineProperty(PdfGridCell.prototype, \"isCellMergeContinue\", {\n        //Properties\n        get: function () {\n            return this.internalIsCellMergeContinue;\n        },\n        set: function (value) {\n            this.internalIsCellMergeContinue = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"isRowMergeContinue\", {\n        get: function () {\n            return this.internalIsRowMergeContinue;\n        },\n        set: function (value) {\n            this.internalIsRowMergeContinue = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"isCellMergeStart\", {\n        get: function () {\n            return this.internalIsCellMergeStart;\n        },\n        set: function (value) {\n            this.internalIsCellMergeStart = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"isRowMergeStart\", {\n        get: function () {\n            return this.internalIsRowMergeStart;\n        },\n        set: function (value) {\n            this.internalIsRowMergeStart = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"remainingString\", {\n        /**\n         * Gets or sets the `remaining string` after the row split between pages.\n         * @private\n         */\n        get: function () {\n            return this.remaining;\n        },\n        set: function (value) {\n            this.remaining = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"FinishedDrawingCell\", {\n        /**\n         * Gets or sets the `FinishedDrawingCell` .\n         * @private\n         */\n        get: function () {\n            return this.isFinish;\n        },\n        set: function (value) {\n            this.isFinish = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"stringFormat\", {\n        /**\n         * Gets or sets the `string format`.\n         * @private\n         */\n        get: function () {\n            if (this.format == null) {\n                this.format = new PdfStringFormat();\n            }\n            return this.format;\n        },\n        set: function (value) {\n            this.format = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"row\", {\n        /**\n         * Gets or sets the parent `row`.\n         * @private\n         */\n        get: function () {\n            return this.gridRow;\n        },\n        set: function (value) {\n            this.gridRow = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"value\", {\n        /**\n         * Gets or sets the `value` of the cell.\n         * @private\n         */\n        get: function () {\n            return this.objectValue;\n        },\n        set: function (value) {\n            this.objectValue = value;\n            if (this.objectValue instanceof PdfGrid) {\n                this.row.grid.isSingleGrid = false;\n                var grid = this.objectValue;\n                grid.ParentCell = this;\n                this.objectValue.isChildGrid = true;\n                var rowCount = this.row.grid.rows.count;\n                for (var i = 0; i < rowCount; i++) {\n                    var row = this.row.grid.rows.getRow(i);\n                    var colCount = row.cells.count;\n                    for (var j = 0; j < colCount; j++) {\n                        var cell = row.cells.getCell(j);\n                        cell.parent = this;\n                    }\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"rowSpan\", {\n        /**\n         * Gets or sets a value that indicates the total number of rows that cell `spans` within a PdfGrid.\n         * @private\n         */\n        get: function () {\n            return this.gridRowSpan;\n        },\n        set: function (value) {\n            if (value < 1) {\n                throw new Error('ArgumentException : Invalid span specified, must be greater than or equal to 1');\n            }\n            else {\n                this.gridRowSpan = value;\n                this.row.rowSpanExists = true;\n                this.row.grid.hasRowSpanSpan = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"style\", {\n        /**\n         * Gets or sets the cell `style`.\n         * @private\n         */\n        get: function () {\n            if (this.cellStyle == null) {\n                this.cellStyle = new PdfGridCellStyle();\n            }\n            return this.cellStyle;\n        },\n        set: function (value) {\n            this.cellStyle = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"height\", {\n        /**\n         * Gets the `height` of the PdfGrid cell.[Read-Only].\n         * @private\n         */\n        get: function () {\n            if (this.cellHeight === 0) {\n                this.cellHeight = this.measureHeight();\n            }\n            return this.cellHeight;\n        },\n        set: function (value) {\n            this.cellHeight = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"columnSpan\", {\n        /**\n         * Gets or sets a value that indicates the total number of columns that cell `spans` within a PdfGrid.\n         * @private\n         */\n        get: function () {\n            return this.colSpan;\n        },\n        set: function (value) {\n            if (value < 1) {\n                throw Error('Invalid span specified, must be greater than or equal to 1');\n            }\n            else {\n                this.colSpan = value;\n                this.row.columnSpanExists = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridCell.prototype, \"width\", {\n        /**\n         * Gets the `width` of the PdfGrid cell.[Read-Only].\n         * @private\n         */\n        get: function () {\n            if (this.cellWidth === 0 || this.row.grid.isComplete) {\n                this.cellWidth = this.measureWidth();\n            }\n            return Math.round(this.cellWidth);\n        },\n        set: function (value) {\n            this.cellWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Implementation\n    /**\n     * `Calculates the width`.\n     * @private\n     */\n    PdfGridCell.prototype.measureWidth = function () {\n        // .. Calculate the cell text width.\n        // .....Add border widths, cell spacings and paddings to the width.\n        var width = 0;\n        var layouter = new PdfStringLayouter();\n        if (typeof this.objectValue === 'string') {\n            /* tslint:disable */\n            var slr = layouter.layout(this.objectValue, this.getTextFont(), this.stringFormat, new SizeF(Number.MAX_VALUE, Number.MAX_VALUE), false, new SizeF(0, 0));\n            width += slr.actualSize.width;\n            width += (this.style.borders.left.width + this.style.borders.right.width) * 2;\n        }\n        else if (this.objectValue instanceof PdfGrid) {\n            width = this.objectValue.size.width;\n            //width += this.objectValue.style.cellSpacing;\n        }\n        else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {\n            width += this.objectValue.width;\n        }\n        else if (this.objectValue instanceof PdfTextWebLink) {\n            var webLink = this.objectValue;\n            var result = layouter.layout(webLink.text, webLink.font, webLink.stringFormat, new SizeF(0, 0), false, new SizeF(0, 0));\n            /* tslint:enable */\n            width += result.actualSize.width;\n            width += (this.style.borders.left.width + this.style.borders.right.width) * 2;\n        }\n        if (!(this.objectValue instanceof PdfGrid)) {\n            if (this.style.cellPadding != null) {\n                width += (this.style.cellPadding.left + this.style.cellPadding.right);\n            }\n            else {\n                width += (this.row.grid.style.cellPadding.left + this.row.grid.style.cellPadding.right);\n            }\n        }\n        else {\n            if (this.style.cellPadding != null || typeof this.style.cellPadding !== 'undefined') {\n                if (typeof this.style.cellPadding.left !== 'undefined' && this.style.cellPadding.hasLeftPad) {\n                    width += this.style.cellPadding.left;\n                }\n                if (typeof this.style.cellPadding.right !== 'undefined' && this.style.cellPadding.hasRightPad) {\n                    width += this.style.cellPadding.right;\n                }\n            }\n            else {\n                if (typeof this.row.grid.style.cellPadding.left !== 'undefined' && this.row.grid.style.cellPadding.hasLeftPad) {\n                    width += this.row.grid.style.cellPadding.left;\n                }\n                if (typeof this.row.grid.style.cellPadding.right !== 'undefined' && this.row.grid.style.cellPadding.hasRightPad) {\n                    width += this.row.grid.style.cellPadding.right;\n                }\n            }\n        }\n        width += this.row.grid.style.cellSpacing;\n        return width;\n    };\n    /**\n     * Draw the `cell background`.\n     * @private\n     */\n    PdfGridCell.prototype.drawCellBackground = function (graphics, bounds) {\n        var backgroundBrush = this.getBackgroundBrush();\n        //graphics.isTemplateGraphics = true;\n        if (backgroundBrush != null) {\n            graphics.save();\n            graphics.drawRectangle(backgroundBrush, bounds.x, bounds.y, bounds.width, bounds.height);\n            graphics.restore();\n        }\n        if (this.style.backgroundImage != null) {\n            var image = this.getBackgroundImage();\n            graphics.drawImage(this.style.backgroundImage, bounds.x, bounds.y, bounds.width, bounds.height);\n        }\n    };\n    /**\n     * `Adjusts the text layout area`.\n     * @private\n     */\n    /* tslint:disable */\n    PdfGridCell.prototype.adjustContentLayoutArea = function (bounds) {\n        //Add Padding value to its Cell Bounds\n        var returnBounds = new RectangleF(bounds.x, bounds.y, bounds.width, bounds.height);\n        if (!(this.objectValue instanceof PdfGrid)) {\n            if (typeof this.style.cellPadding === 'undefined' || this.style.cellPadding == null) {\n                returnBounds.x += this.gridRow.grid.style.cellPadding.left + this.cellStyle.borders.left.width;\n                returnBounds.y += this.gridRow.grid.style.cellPadding.top + this.cellStyle.borders.top.width;\n                returnBounds.width -= (this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left);\n                returnBounds.height -= (this.gridRow.grid.style.cellPadding.bottom + this.gridRow.grid.style.cellPadding.top);\n                returnBounds.height -= (this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width);\n            }\n            else {\n                returnBounds.x += this.style.cellPadding.left + this.cellStyle.borders.left.width;\n                returnBounds.y += this.style.cellPadding.top + this.cellStyle.borders.top.width;\n                returnBounds.width -= (this.style.cellPadding.right + this.style.cellPadding.left);\n                returnBounds.width -= (this.cellStyle.borders.left.width + this.cellStyle.borders.right.width);\n                returnBounds.height -= (this.style.cellPadding.bottom + this.style.cellPadding.top);\n                returnBounds.height -= (this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width);\n                if (this.rowSpan === 1) {\n                    returnBounds.width -= (this.style.borders.left.width);\n                }\n            }\n        }\n        else {\n            if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n                if (typeof this.gridRow.grid.style.cellPadding.left !== 'undefined' && this.gridRow.grid.style.cellPadding.hasLeftPad) {\n                    returnBounds.x += this.gridRow.grid.style.cellPadding.left + this.cellStyle.borders.left.width;\n                    returnBounds.width -= this.gridRow.grid.style.cellPadding.left;\n                }\n                if (typeof this.gridRow.grid.style.cellPadding.top !== 'undefined' && this.gridRow.grid.style.cellPadding.hasTopPad) {\n                    returnBounds.y += this.gridRow.grid.style.cellPadding.top + this.cellStyle.borders.top.width;\n                    returnBounds.height -= this.gridRow.grid.style.cellPadding.top;\n                }\n                if (typeof this.gridRow.grid.style.cellPadding.right !== 'undefined' && this.gridRow.grid.style.cellPadding.hasRightPad) {\n                    returnBounds.width -= this.gridRow.grid.style.cellPadding.right;\n                }\n                if (typeof this.gridRow.grid.style.cellPadding.bottom !== 'undefined' && this.gridRow.grid.style.cellPadding.hasBottomPad) {\n                    returnBounds.height -= this.gridRow.grid.style.cellPadding.bottom;\n                }\n            }\n            else {\n                if (typeof this.style.cellPadding.left !== 'undefined' && this.style.cellPadding.hasLeftPad) {\n                    returnBounds.x += this.style.cellPadding.left + this.cellStyle.borders.left.width;\n                    returnBounds.width -= this.style.cellPadding.left;\n                }\n                if (typeof this.style.cellPadding.top !== 'undefined' && this.style.cellPadding.hasTopPad) {\n                    returnBounds.y += this.style.cellPadding.top + this.cellStyle.borders.top.width;\n                    returnBounds.height -= this.style.cellPadding.top;\n                }\n                if (typeof this.style.cellPadding.right !== 'undefined' && this.style.cellPadding.hasRightPad) {\n                    returnBounds.width -= this.style.cellPadding.right;\n                }\n                if (typeof this.style.cellPadding.bottom !== 'undefined' && this.style.cellPadding.hasBottomPad) {\n                    returnBounds.height -= this.style.cellPadding.bottom;\n                }\n            }\n            returnBounds.width -= (this.cellStyle.borders.left.width + this.cellStyle.borders.right.width);\n            returnBounds.height -= (this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width);\n        }\n        return returnBounds;\n    };\n    /**\n     * `Draws` the specified graphics.\n     * @private\n     */\n    PdfGridCell.prototype.draw = function (graphics, bounds, cancelSubsequentSpans) {\n        var isrowbreak = false;\n        /*if (!this.row.grid.isSingleGrid)\n        {\n            //Check whether the Grid Span to Nextpage\n            if ((this.remainingString != null) || (PdfGridLayouter.repeatRowIndex != -1))\n            {\n                this.DrawParentCells(graphics, bounds, true);\n            }\n            else if (this.row.grid.rows.count > 1)\n            {\n                for (let i : number  = 0; i < this.row.grid.rows.count; i++)\n                {\n                    if (this.row == this.row.grid.rows.getRow(i))\n                    {\n                        if (this.row.grid.rows.getRow(i).rowBreakHeight > 0)\n                            isrowbreak = true;\n                        if ((i > 0) && (isrowbreak))\n                            this.DrawParentCells(graphics, bounds, false);\n                    }\n                }\n            }\n        } */\n        var result = null;\n        /*if (cancelSubsequentSpans)\n        {\n            //..Cancel all subsequent cell spans, if no space exists.\n            let currentCellIndex : number = this.row.cells.indexOf(this);\n            for (let i : number = currentCellIndex + 1; i <= currentCellIndex + this.colSpan; i++)\n            {\n                this.row.cells.getCell(i).isCellMergeContinue = false;\n                this.row.cells.getCell(i).isRowMergeContinue = false;\n            }\n            this.colSpan = 1;\n        }*/\n        //..Skip cells which were already covered by spanmap.\n        if (this.internalIsCellMergeContinue || this.internalIsRowMergeContinue) {\n            if (this.internalIsCellMergeContinue && this.row.grid.style.allowHorizontalOverflow) {\n                if ((this.row.rowOverflowIndex > 0 && (this.row.cells.indexOf(this) != this.row.rowOverflowIndex + 1)) || (this.row.rowOverflowIndex == 0 && this.internalIsCellMergeContinue)) {\n                    return result;\n                }\n            }\n            else {\n                return result;\n            }\n        }\n        //Adjust bounds with Row and Column Spacing\n        bounds = this.adjustOuterLayoutArea(bounds, graphics);\n        this.drawCellBackground(graphics, bounds);\n        var textPen = this.getTextPen();\n        var textBrush = this.getTextBrush();\n        if (typeof textPen === 'undefined' && typeof textBrush === 'undefined') {\n            textBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n        }\n        var font = this.getTextFont();\n        var strFormat = this.getStringFormat();\n        var innerLayoutArea = bounds;\n        if (innerLayoutArea.height >= graphics.clientSize.height) {\n            // If to break row to next page.\n            if (this.row.grid.allowRowBreakAcrossPages) {\n                innerLayoutArea.height -= innerLayoutArea.y;\n                //bounds.height -= bounds.y;\n                // if(this.row.grid.isChildGrid)\n                // {\n                //     innerLayoutArea.height -= this.row.grid.ParentCell.row.grid.style.cellPadding.bottom;\n                // }\n            }\n            // if user choose to cut the row whose height is more than page height.\n            // else\n            // {\n            //     innerLayoutArea.height = graphics.clientSize.height;\n            //     bounds.height = graphics.clientSize.height;\n            // }\n        }\n        innerLayoutArea = this.adjustContentLayoutArea(innerLayoutArea);\n        if (typeof this.objectValue === 'string' || typeof this.remaining === 'string') {\n            var temp = void 0;\n            var layoutRectangle = void 0;\n            if (innerLayoutArea.height < font.height)\n                layoutRectangle = new RectangleF(innerLayoutArea.x, innerLayoutArea.y, innerLayoutArea.width, font.height);\n            else\n                layoutRectangle = innerLayoutArea;\n            if (innerLayoutArea.height < font.height && this.row.grid.isChildGrid && this.row.grid.ParentCell != null) {\n                var height = layoutRectangle.height - this.row.grid.ParentCell.row.grid.style.cellPadding.bottom - this.row.grid.style.cellPadding.bottom;\n                if (this.row.grid.splitChildRowIndex != -1) {\n                    this.fontSpilt = true;\n                    this.row.rowFontSplit = true;\n                }\n                if (height > 0 && height < font.height)\n                    layoutRectangle.height = height;\n                // else if (height + this.row.grid.style.cellPadding.bottom > 0 && height + this.row.grid.style.cellPadding.bottom < font.height)\n                //     layoutRectangle.height = height + this.row.grid.style.cellPadding.bottom;\n                // else if (bounds.height < font.height)\n                //     layoutRectangle.height = bounds.height;\n                // else if (bounds.height - this.row.grid.ParentCell.row.grid.style.cellPadding.bottom < font.height)\n                //     layoutRectangle.height = bounds.height - this.row.grid.ParentCell.row.grid.style.cellPadding.bottom;                        \n            }\n            if (this.gridRow.grid.style.cellSpacing != 0) {\n                layoutRectangle.width -= this.gridRow.grid.style.cellSpacing;\n                bounds.width -= this.gridRow.grid.style.cellSpacing;\n            }\n            if (this.isFinish) {\n                // if (this.row.grid.splitChildRowIndex != -1 && !this.row.grid.isChildGrid && typeof this.remaining === 'undefined'){\n                //     this.remaining = '';\n                //     graphics.drawString(this.remaining, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n                // } else {\n                temp = this.remaining === '' ? this.remaining : this.objectValue;\n                graphics.drawString(temp, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n                if (this.row.grid.splitChildRowIndex != -1 && !this.row.grid.isChildGrid && typeof this.remaining === 'undefined') {\n                    this.remaining = '';\n                    //graphics.drawString(this.remaining, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n                }\n            }\n            else {\n                if (typeof this.remaining == 'undefined' || this.remaining === null) {\n                    this.remaining = '';\n                }\n                if (this.row.repeatFlag) {\n                    graphics.drawString(this.remaining, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n                }\n                //  else {\n                //     if(this.row.grid.ParentCell.row.repeatFlag) {\n                //         graphics.drawString((this.remaining as string), font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);                    \n                //     } else {\n                //         layoutRectangle.height = this.row.height;\n                //         graphics.drawString((this.objectValue as string), font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n                //         bounds.height = this.row.height;\n                //     }\n                //  }\n                this.isFinish = true;\n                //graphics.drawString((this.remaining as string), font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat);\n            }\n            result = graphics.stringLayoutResult;\n            // if(this.row.grid.isChildGrid && this.row.rowBreakHeight > 0 && result !=null) {\n            //     bounds.height -= this.row.grid.ParentCell.row.grid.style.cellPadding.bottom;\n            // }\n        }\n        else if (this.objectValue instanceof PdfGrid) {\n            var childGrid = this.objectValue;\n            childGrid.isChildGrid = true;\n            childGrid.ParentCell = this;\n            var layoutRect = void 0;\n            layoutRect = innerLayoutArea;\n            if (this.gridRow.grid.style.cellSpacing != 0) {\n                bounds.width -= this.gridRow.grid.style.cellSpacing;\n            }\n            // layoutRect = bounds;\n            // if (this.style.cellPadding != null){\n            //     layoutRect = bounds;            \n            // } else if((this.row.grid.style.cellPadding != null) && (childGrid.style.cellPadding.bottom === 0.5) && (childGrid.style.cellPadding.top === 0.5)\n            //                               && (childGrid.style.cellPadding.left === 5.76) && (childGrid.style.cellPadding.right === 5.76)\n            //                               && (this.gridRow.grid.style.cellSpacing === 0) && (childGrid.style.cellSpacing === 0)) {\n            //     layoutRect = innerLayoutArea;\n            // }\n            // if(this.objectValue.style.cellPadding != null && typeof this.objectValue.style.cellPadding !== 'undefined'){\n            //     layoutRect = bounds;\n            // }           \n            var layouter = new PdfGridLayouter(childGrid);\n            var format = new PdfGridLayoutFormat();\n            if (this.row.grid.LayoutFormat != null)\n                format = this.row.grid.LayoutFormat;\n            else\n                format.layout = PdfLayoutType.Paginate;\n            var param = new PdfLayoutParams();\n            if (graphics.layer != null) {\n                // Define layout parameters.\n                param.page = graphics.page;\n                param.bounds = layoutRect;\n                param.format = format;\n                //Set the span \n                childGrid.setSpan();\n                childGrid.checkSpan();\n                // Draw the child grid.\n                var childGridResult = layouter.Layouter(param);\n                //let childGridResult : PdfLayoutResult = layouter.innerLayout(param);\n                this.value = childGrid;\n                if (this.row.grid.splitChildRowIndex !== -1) {\n                    this.height = this.row.rowBreakHeightValue;\n                }\n                if (param.page != childGridResult.page) //&& (isWidthGreaterthanParent != true))\n                 {\n                    childGridResult.bounds.height = this.row.rowBreakHeightValue;\n                    if (this.row.rowBreakHeight == 0)\n                        this.row.NestedGridLayoutResult = childGridResult;\n                    else\n                        this.row.rowBreakHeight = this.row.rowBreakHeightValue;\n                    //bounds.height = this.row.rowBreakHeight;\n                    //After drawing paginated nested grid, the bounds of the parent grid in start page should be corrected for borders.\n                    //bounds.height = graphics.clientSize.height - bounds.y;\n                }\n            }\n        }\n        else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {\n            var imageBounds = void 0;\n            if (this.objectValue.width <= innerLayoutArea.width) {\n                imageBounds = new RectangleF(innerLayoutArea.x, innerLayoutArea.y, this.objectValue.width, innerLayoutArea.height);\n            }\n            else {\n                imageBounds = innerLayoutArea;\n            }\n            graphics.drawImage(this.objectValue, imageBounds.x, imageBounds.y, imageBounds.width, imageBounds.height);\n        }\n        else if (this.objectValue instanceof PdfTextWebLink) {\n            this.objectValue.draw(graphics.currentPage, innerLayoutArea);\n        }\n        else if (typeof this.objectValue === 'undefined') {\n            this.objectValue = \"\";\n            graphics.drawString(this.objectValue, font, textPen, textBrush, innerLayoutArea.x, innerLayoutArea.y, innerLayoutArea.width, innerLayoutArea.height, strFormat);\n            if (this.style.cellPadding != null && this.style.cellPadding.bottom == 0 && this.style.cellPadding.left == 0 && this.style.cellPadding.right == 0 && this.style.cellPadding.top == 0) {\n                bounds.width -= (this.style.borders.left.width + this.style.borders.right.width);\n            }\n            if (this.gridRow.grid.style.cellSpacing != 0) {\n                bounds.width -= this.gridRow.grid.style.cellSpacing;\n            }\n        }\n        if (this.style.borders != null) {\n            if (!this.fontSpilt)\n                this.drawCellBorders(graphics, bounds);\n            else {\n                if (this.row.grid.ParentCell.row.grid.splitChildRowIndex != -1) {\n                    this.row.rowFontSplit = false;\n                    this.drawCellBorders(graphics, bounds);\n                }\n            }\n        }\n        return result;\n    };\n    /* tslint:enable */\n    /**\n     * Draws the `cell border` constructed by drawing lines.\n     * @private\n     */\n    PdfGridCell.prototype.drawCellBorders = function (graphics, bounds) {\n        if (this.row.grid.style.borderOverlapStyle === PdfBorderOverlapStyle.Inside) {\n            bounds.x += this.style.borders.left.width;\n            bounds.y += this.style.borders.top.width;\n            bounds.width -= this.style.borders.right.width;\n            bounds.height -= this.style.borders.bottom.width;\n        }\n        var p1 = new PointF(bounds.x, bounds.y + bounds.height);\n        var p2 = new PointF(bounds.x, bounds.y);\n        var pen = this.cellStyle.borders.left;\n        if (this.cellStyle.borders.left.dashStyle === PdfDashStyle.Solid) {\n            pen.lineCap = PdfLineCap.Square;\n        }\n        // SetTransparency(ref graphics, pen);\n        graphics.drawLine(pen, p1, p2);\n        p1 = new PointF(bounds.x + bounds.width, bounds.y);\n        p2 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height);\n        pen = this.cellStyle.borders.right;\n        if ((bounds.x + bounds.width) > (graphics.clientSize.width - (pen.width / 2))) {\n            p1 = new PointF(graphics.clientSize.width - (pen.width / 2), bounds.y);\n            p2 = new PointF(graphics.clientSize.width - (pen.width / 2), bounds.y + bounds.height);\n        }\n        if (this.cellStyle.borders.right.dashStyle === PdfDashStyle.Solid) {\n            pen.lineCap = PdfLineCap.Square;\n        }\n        graphics.drawLine(pen, p1, p2);\n        p1 = new PointF(bounds.x, bounds.y);\n        p2 = new PointF(bounds.x + bounds.width, bounds.y);\n        pen = this.cellStyle.borders.top;\n        if (this.cellStyle.borders.top.dashStyle === PdfDashStyle.Solid) {\n            pen.lineCap = PdfLineCap.Square;\n        }\n        graphics.drawLine(pen, p1, p2);\n        p1 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height);\n        p2 = new PointF(bounds.x, bounds.y + bounds.height);\n        pen = this.cellStyle.borders.bottom;\n        // if ((bounds.y + bounds.height) > (graphics.clientSize.height - (pen.width / 2))) {\n        //     p1 = new PointF((bounds.x + bounds.width), (graphics.clientSize.height - (pen.width / 2)));\n        //     p2 = new PointF(bounds.x, (graphics.clientSize.height - (pen.width / 2)));\n        // }\n        if (this.cellStyle.borders.bottom.dashStyle === PdfDashStyle.Solid) {\n            pen.lineCap = PdfLineCap.Square;\n        }\n        graphics.drawLine(pen, p1, p2);\n    };\n    // private setTransparency(graphics : PdfGraphics, pen : PdfPen) : void {\n    //     let alpha : number = (pen.color.a / 255)as number;\n    //     graphics.save();\n    //     graphics.setTransparency(alpha);\n    // }\n    /**\n     * `Adjusts the outer layout area`.\n     * @private\n     */\n    /* tslint:disable */\n    PdfGridCell.prototype.adjustOuterLayoutArea = function (bounds, g) {\n        var isHeader = false;\n        var cellSpacing = this.row.grid.style.cellSpacing;\n        if (cellSpacing > 0) {\n            bounds = new RectangleF(bounds.x + cellSpacing, bounds.y + cellSpacing, bounds.width - cellSpacing, bounds.height - cellSpacing);\n        }\n        var currentColIndex = this.row.cells.indexOf(this);\n        if (this.columnSpan > 1 || (this.row.rowOverflowIndex > 0 && (currentColIndex == this.row.rowOverflowIndex + 1) && this.isCellMergeContinue)) {\n            var span = this.columnSpan;\n            if (span == 1 && this.isCellMergeContinue) {\n                for (var j = currentColIndex + 1; j < this.row.grid.columns.count; j++) {\n                    if (this.row.cells.getCell(j).isCellMergeContinue)\n                        span++;\n                    else\n                        break;\n                }\n            }\n            var totalWidth = 0;\n            for (var i = currentColIndex; i < currentColIndex + span; i++) {\n                if (this.row.grid.style.allowHorizontalOverflow) {\n                    var width = void 0;\n                    var compWidth = this.row.grid.size.width < g.clientSize.width ? this.row.grid.size.width : g.clientSize.width;\n                    if (this.row.grid.size.width > g.clientSize.width) {\n                        width = bounds.x + totalWidth + this.row.grid.columns.getColumn(i).width;\n                    }\n                    else {\n                        width = totalWidth + this.row.grid.columns.getColumn(i).width;\n                    }\n                    if (width > compWidth) {\n                        break;\n                    }\n                }\n                totalWidth += this.row.grid.columns.getColumn(i).width;\n            }\n            totalWidth -= this.row.grid.style.cellSpacing;\n            bounds.width = totalWidth;\n        }\n        if (this.rowSpan > 1 || this.row.rowSpanExists) {\n            var span = this.rowSpan;\n            var currentRowIndex = this.row.grid.rows.rowCollection.indexOf(this.row);\n            if (currentRowIndex == -1) {\n                currentRowIndex = this.row.grid.headers.indexOf(this.row);\n                if (currentRowIndex != -1) {\n                    isHeader = true;\n                }\n            }\n            // if (span == 1 && this.isCellMergeContinue) {\n            //         for (let j : number = currentRowIndex + 1; j < this.row.grid.rows.count; j++)\n            //         {\n            //             let flag : boolean = (isHeader ? this.row.grid.headers.getHeader(j).cells.getCell(currentColIndex).isCellMergeContinue : this.row.grid.rows.getRow(j).cells.getCell(currentColIndex).isCellMergeContinue);\n            //             if (flag)\n            //                 span++;\n            //             else\n            //                 break;\n            //         }\n            // }\n            var totalHeight = 0;\n            var max = 0;\n            for (var i = currentRowIndex; i < currentRowIndex + span; i++) {\n                totalHeight += (isHeader ? this.row.grid.headers.getHeader(i).height : this.row.grid.rows.getRow(i).height);\n                var row = this.row.grid.rows.getRow(i);\n                var rowIndex = this.row.grid.rows.rowCollection.indexOf(row);\n                /*if (this.rowSpan > 1)\n                    {\n                        for (let k : number = 0; k < this.row.cells.count; k++) {\n                            let cell : PdfGridCell = this.row.cells.getCell(k);\n                            if(cell.rowSpan>1)\n                            {\n                                let tempHeight : number =0;\n                                \n                                for (let j :number = i; j < i +cell.rowSpan; j++)\n                                {\n                                    if (!this.row.grid.rows.getRow(j).isRowSpanRowHeightSet)\n                                        this.row.grid.rows.getRow(j).isRowHeightSet = false;\n                                    tempHeight += this.row.grid.rows.getRow(j).height;\n                                    if (!this.row.grid.rows.getRow(j).isRowSpanRowHeightSet)\n                                        this.row.grid.rows.getRow(j).isRowHeightSet = true;\n                                }\n                                //To check the Row spanned cell height is greater than the total spanned row height.\n                                if(cell.height>tempHeight)\n                                {\n                                    if (max < (cell.height - tempHeight))\n                                    {\n                                        max = cell.height - tempHeight;\n                                        if (this.rowSpanRemainingHeight != 0 && max > this.rowSpanRemainingHeight)\n                                        {\n                                            max += this.rowSpanRemainingHeight;\n                                        }\n                                        let index :number = row.cells.indexOf(cell);\n                                        //set the m_rowspanRemainingHeight to last rowspanned row.\n                                        this.row.grid.rows.getRow((rowIndex +cell.rowSpan) - 1).cells.getCell(index).rowSpanRemainingHeight = max;\n                                        this.rowSpanRemainingHeight = this.row.grid.rows.getRow((rowIndex + cell.rowSpan) - 1).cells.getCell(index).rowSpanRemainingHeight;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (!this.row.grid.rows.getRow(i).isRowSpanRowHeightSet)\n                    this.row.grid.rows.getRow(i).isRowHeightSet = true;*/\n            }\n            var cellIndex = this.row.cells.indexOf(this);\n            totalHeight -= this.row.grid.style.cellSpacing;\n            // if (this.row.cells.getCell(cellIndex).height > totalHeight && (!this.row.grid.rows.getRow((currentRowIndex + span) - 1).isRowHeightSet)) {\n            //      this.row.grid.rows.getRow((currentRowIndex + span) - 1).cells.getCell(cellIndex).rowSpanRemainingHeight = this.row.cells.getCell(cellIndex).height - totalHeight;\n            //      totalHeight = this.row.cells.getCell(cellIndex).height;\n            //      bounds.height = totalHeight;\n            // } else {\n            bounds.height = totalHeight;\n            //  }\n            if (!this.row.rowMergeComplete) {\n                bounds.height = totalHeight;\n            }\n        }\n        return bounds;\n    };\n    /* tslint:enable */\n    /**\n     * Gets the `text font`.\n     * @private\n     */\n    PdfGridCell.prototype.getTextFont = function () {\n        if (typeof this.style.font !== 'undefined' && this.style.font != null) {\n            return this.style.font;\n        }\n        else if (typeof this.row.style.font !== 'undefined' && this.row.style.font != null) {\n            return this.row.style.font;\n        }\n        else if (typeof this.row.grid.style.font !== 'undefined' && this.row.grid.style.font != null) {\n            return this.row.grid.style.font;\n        }\n        else {\n            return PdfDocument.defaultFont;\n        }\n    };\n    /**\n     * Gets the `text brush`.\n     * @private\n     */\n    PdfGridCell.prototype.getTextBrush = function () {\n        if (typeof this.style.textBrush !== 'undefined' && this.style.textBrush != null) {\n            return this.style.textBrush;\n        }\n        else if (typeof this.row.style.textBrush !== 'undefined' && this.row.style.textBrush != null) {\n            return this.row.style.textBrush;\n        }\n        else {\n            return this.row.grid.style.textBrush;\n        }\n    };\n    /**\n     * Gets the `text pen`.\n     * @private\n     */\n    PdfGridCell.prototype.getTextPen = function () {\n        if (typeof this.style.textPen !== 'undefined' && this.style.textPen != null) {\n            return this.style.textPen;\n        }\n        else if (typeof this.row.style.textPen !== 'undefined' && this.row.style.textPen != null) {\n            return this.row.style.textPen;\n        }\n        else {\n            return this.row.grid.style.textPen;\n        }\n    };\n    /**\n     * Gets the `background brush`.\n     * @private\n     */\n    PdfGridCell.prototype.getBackgroundBrush = function () {\n        if (typeof this.style.backgroundBrush !== 'undefined' && this.style.backgroundBrush != null) {\n            return this.style.backgroundBrush;\n        }\n        else if (typeof this.row.style.backgroundBrush !== 'undefined' && this.row.style.backgroundBrush != null) {\n            return this.row.style.backgroundBrush;\n        }\n        else {\n            return this.row.grid.style.backgroundBrush;\n        }\n    };\n    /**\n     * Gets the `background image`.\n     * @private\n     */\n    PdfGridCell.prototype.getBackgroundImage = function () {\n        if (typeof this.style.backgroundImage !== 'undefined' && this.style.backgroundImage != null) {\n            return this.style.backgroundImage;\n        }\n        else if (typeof this.row.style.backgroundImage !== 'undefined' && this.row.style.backgroundImage != null) {\n            return this.row.style.backgroundImage;\n        }\n        else {\n            return this.row.grid.style.backgroundImage;\n        }\n    };\n    /**\n     * Gets the current `StringFormat`.\n     * @private\n     */\n    PdfGridCell.prototype.getStringFormat = function () {\n        if (typeof this.style.stringFormat !== 'undefined' && this.style.stringFormat != null) {\n            return this.style.stringFormat;\n        }\n        else {\n            return this.stringFormat;\n        }\n    };\n    /**\n     * Calculates the `height`.\n     * @private\n     */\n    PdfGridCell.prototype.measureHeight = function () {\n        // .. Calculate the cell text height.\n        // .....Add border widths, cell spacings and paddings to the height.\n        var width = this.calculateWidth();\n        // //check whether the Current PdfGridCell has padding\n        if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n            width -= (this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left);\n            //width -= (this.style.borders.left.width + this.style.borders.right.width);\n        }\n        else {\n            width -= (this.style.cellPadding.right + this.style.cellPadding.left);\n            width -= (this.style.borders.left.width + this.style.borders.right.width);\n        }\n        var height = 0;\n        var layouter = new PdfStringLayouter();\n        if (typeof this.objectValue === 'string' || typeof this.remaining === 'string') {\n            var currentValue = this.objectValue;\n            /* tslint:disable */\n            if (!this.isFinish)\n                currentValue = !(this.remaining === null || this.remaining === '' ||\n                    typeof this.remaining === 'undefined') ? this.remaining : this.objectValue;\n            var slr = null;\n            var cellIndex = this.row.cells.indexOf(this);\n            if (this.gridRow.grid.style.cellSpacing != 0) {\n                width -= this.gridRow.grid.style.cellSpacing * 2;\n            }\n            if (!this.row.cells.getCell(cellIndex).hasColSpan && !this.row.cells.getCell(cellIndex).hasRowSpan) {\n                if (this.gridRow.grid.isChildGrid) {\n                    if (width < 0) {\n                        this.tempval = width;\n                        if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n                            this.tempval += (this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left);\n                        }\n                        else {\n                            this.tempval += (this.style.cellPadding.right + this.style.cellPadding.left);\n                            this.tempval += (this.style.borders.left.width + this.style.borders.right.width);\n                        }\n                    }\n                    else {\n                        this.tempval = width;\n                    }\n                    slr = layouter.layout(currentValue, this.getTextFont(), this.stringFormat, new SizeF(this.tempval, 0), false, new SizeF(0, 0));\n                    height += slr.actualSize.height;\n                }\n                else {\n                    slr = layouter.layout(currentValue, this.getTextFont(), this.stringFormat, new SizeF(width, 0), false, new SizeF(0, 0));\n                    height += slr.actualSize.height;\n                }\n            }\n            /* tslint:enable */\n            height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n        }\n        else if (this.objectValue instanceof PdfGrid) {\n            var cellIndex = this.row.cells.indexOf(this);\n            var internalWidth = 0;\n            if ((this.style.cellPadding != null || typeof this.style.cellPadding !== 'undefined')) {\n                internalWidth = this.calculateWidth();\n                if (typeof this.style.cellPadding.left !== 'undefined' && this.style.cellPadding.hasLeftPad) {\n                    internalWidth -= this.style.cellPadding.left;\n                }\n                if (typeof this.style.cellPadding.right !== 'undefined' && this.style.cellPadding.hasRightPad) {\n                    internalWidth -= this.style.cellPadding.right;\n                }\n            }\n            else if ((this.row.grid.style.cellPadding != null || typeof this.row.grid.style.cellPadding !== 'undefined')) {\n                internalWidth = this.calculateWidth();\n                if (typeof this.row.grid.style.cellPadding.left !== 'undefined' && this.row.grid.style.cellPadding.hasLeftPad) {\n                    internalWidth -= this.row.grid.style.cellPadding.left;\n                }\n                if (typeof this.row.grid.style.cellPadding.right !== 'undefined' && this.row.grid.style.cellPadding.hasRightPad) {\n                    internalWidth -= this.row.grid.style.cellPadding.right;\n                }\n            }\n            else {\n                internalWidth = this.calculateWidth();\n            }\n            this.objectValue.tempWidth = internalWidth;\n            if (!this.row.cells.getCell(cellIndex).hasColSpan && !this.row.cells.getCell(cellIndex).hasRowSpan) {\n                height = this.objectValue.size.height;\n            }\n            else {\n                height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n            }\n            if (this.gridRow.grid.style.cellSpacing !== 0) {\n                width -= this.gridRow.grid.style.cellSpacing * 2;\n                //height += (this.row.grid.style.cellPadding.top + this.row.grid.style.cellPadding.bottom);\n            }\n            if (this.style.cellPadding != null || typeof this.style.cellPadding !== 'undefined') {\n                if (typeof this.row.grid.style.cellPadding.top !== 'undefined' && this.row.grid.style.cellPadding.hasTopPad) {\n                    height += this.row.grid.style.cellPadding.top;\n                }\n                if (this.row.grid.style.cellPadding.hasBottomPad && typeof this.row.grid.style.cellPadding.bottom !== 'undefined') {\n                    height += this.row.grid.style.cellPadding.bottom;\n                }\n            }\n            height += this.objectValue.style.cellSpacing;\n        }\n        else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {\n            height += this.objectValue.height;\n        }\n        else if (this.objectValue instanceof PdfTextWebLink) {\n            var webLink = this.objectValue;\n            /* tslint:disable */\n            var slr = layouter.layout(webLink.text, webLink.font, webLink.stringFormat, new SizeF(width, 0), false, new SizeF(0, 0));\n            /* tslint:enable */\n            height += slr.actualSize.height;\n            height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n        }\n        else if (typeof this.objectValue === 'undefined') {\n            if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n                width -= (this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left);\n            }\n            else {\n                width -= (this.style.cellPadding.right + this.style.cellPadding.left);\n                width -= (this.style.borders.left.width + this.style.borders.right.width);\n            }\n            height += (this.style.borders.top.width + this.style.borders.bottom.width) * 2;\n        }\n        //Add padding top and bottom value to height\n        if (!(this.objectValue instanceof PdfGrid)) {\n            if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n                height += (this.row.grid.style.cellPadding.top + this.row.grid.style.cellPadding.bottom);\n            }\n            else {\n                height += (this.style.cellPadding.top + this.style.cellPadding.bottom);\n            }\n        }\n        else {\n            if (this.style.cellPadding == null || typeof this.style.cellPadding === 'undefined') {\n                if (typeof this.row.grid.style.cellPadding.top !== 'undefined' && this.row.grid.style.cellPadding.hasTopPad) {\n                    height += this.row.grid.style.cellPadding.top;\n                }\n                if (typeof this.row.grid.style.cellPadding.bottom !== 'undefined' && this.row.grid.style.cellPadding.hasBottomPad) {\n                    height += this.row.grid.style.cellPadding.bottom;\n                }\n            }\n            else {\n                if (typeof this.style.cellPadding.top !== 'undefined' && this.style.cellPadding.hasTopPad) {\n                    height += this.style.cellPadding.top;\n                }\n                if (typeof this.style.cellPadding.bottom !== 'undefined' && this.style.cellPadding.hasBottomPad) {\n                    height += this.style.cellPadding.bottom;\n                }\n            }\n        }\n        height += this.row.grid.style.cellSpacing;\n        return height;\n    };\n    /**\n     * return the calculated `width` of the cell.\n     * @private\n     */\n    PdfGridCell.prototype.calculateWidth = function () {\n        var cellIndex = this.row.cells.indexOf(this);\n        var rowindex = this.row.grid.rows.rowCollection.indexOf(this.row);\n        var columnSpan = this.columnSpan;\n        var width = 0;\n        if (columnSpan === 1) {\n            for (var i = 0; i < columnSpan; i++) {\n                width += this.row.grid.columns.getColumn(cellIndex + i).width;\n            }\n        }\n        else if (columnSpan > 1) {\n            for (var i = 0; i < columnSpan; i++) {\n                width += this.row.grid.columns.getColumn(cellIndex + i).width;\n                if ((i + 1) < columnSpan) {\n                    this.row.cells.getCell(cellIndex + i + 1).hasColSpan = true;\n                }\n            }\n        }\n        if (this.parent != null && this.parent.row.width > 0) {\n            if ((this.row.grid.isChildGrid) && this.parent != null && (this.row.width > this.parent.row.width)) {\n                width = 0;\n                for (var j = 0; j < this.parent.columnSpan; j++) {\n                    width += this.parent.row.grid.columns.getColumn(j).width;\n                }\n                width = width / this.row.cells.count;\n            }\n        }\n        return width;\n    };\n    return PdfGridCell;\n}());\nexport { PdfGridCell };\n/**\n * `PdfGridCellCollection` class provides access to an ordered,\n * strongly typed collection of 'PdfGridCell' objects.\n * @private\n */\nvar PdfGridCellCollection = /** @class */ (function () {\n    //Constructor\n    /**\n     * Initializes a new instance of the `PdfGridCellCollection` class with the row.\n     * @private\n     */\n    function PdfGridCellCollection(row) {\n        /**\n         * @hidden\n         * @private\n         */\n        this.cells = [];\n        this.gridRow = row;\n    }\n    //Properties\n    /**\n     * Gets the current `cell`.\n     * @private\n     */\n    PdfGridCellCollection.prototype.getCell = function (index) {\n        if (index < 0 || index >= this.count) {\n            throw new Error('IndexOutOfRangeException');\n        }\n        return this.cells[index];\n    };\n    Object.defineProperty(PdfGridCellCollection.prototype, \"count\", {\n        /**\n         * Gets the cells `count`.[Read-Only].\n         * @private\n         */\n        get: function () {\n            return this.cells.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfGridCellCollection.prototype.add = function (cell) {\n        if (typeof cell === 'undefined') {\n            var tempcell = new PdfGridCell();\n            this.add(tempcell);\n            return cell;\n        }\n        else {\n            cell.row = this.gridRow;\n            this.cells.push(cell);\n        }\n    };\n    /**\n     * Returns the `index of` a particular cell in the collection.\n     * @private\n     */\n    PdfGridCellCollection.prototype.indexOf = function (cell) {\n        return this.cells.indexOf(cell);\n    };\n    return PdfGridCellCollection;\n}());\nexport { PdfGridCellCollection };\n","import { PdfGridCell } from './pdf-grid-cell';\nimport { PdfStringFormat } from './../../graphics/fonts/pdf-string-format';\n/**\n * `PdfGridColumn` class represents the schema of a column in a 'PdfGrid'.\n */\nvar PdfGridColumn = /** @class */ (function () {\n    //Constructors\n    /**\n     * Initializes a new instance of the `PdfGridColumn` class with the parent grid.\n     * @private\n     */\n    function PdfGridColumn(grid) {\n        /**\n         * The `width` of the column.\n         * @default 0\n         * @private\n         */\n        this.columnWidth = 0;\n        this.grid = grid;\n    }\n    Object.defineProperty(PdfGridColumn.prototype, \"width\", {\n        /**\n         * Gets or sets the `width` of the 'PdfGridColumn'.\n         * @private\n         */\n        get: function () {\n            return this.columnWidth;\n        },\n        set: function (value) {\n            this.isCustomWidth = true;\n            this.columnWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridColumn.prototype, \"format\", {\n        /**\n         * Gets or sets the information about the text `formatting`.\n         * @private\n         */\n        get: function () {\n            if (this.stringFormat == null) {\n                this.stringFormat = new PdfStringFormat(); //GetDefaultFormat();\n            }\n            return this.stringFormat;\n        },\n        set: function (value) {\n            this.stringFormat = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridColumn;\n}());\nexport { PdfGridColumn };\n/**\n * `PdfGridColumnCollection` class provides access to an ordered,\n * strongly typed collection of 'PdfGridColumn' objects.\n * @private\n */\nvar PdfGridColumnCollection = /** @class */ (function () {\n    //properties\n    //Constructors\n    /**\n     * Initializes a new instance of the `PdfGridColumnCollection` class with the parent grid.\n     * @private\n     */\n    function PdfGridColumnCollection(grid) {\n        /**\n         * @hidden\n         * @private\n         */\n        this.internalColumns = [];\n        /**\n         * @hidden\n         * @private\n         */\n        this.columnWidth = 0;\n        this.grid = grid;\n        this.internalColumns = [];\n    }\n    //Iplementation\n    /**\n     * `Add` a new column to the 'PdfGrid'.\n     * @private\n     */\n    PdfGridColumnCollection.prototype.add = function (count) {\n        // public add(column : PdfGridColumn) : void\n        // public add(arg : number|PdfGridColumn) : void {\n        // if (typeof arg === 'number') {\n        for (var i = 0; i < count; i++) {\n            this.internalColumns.push(new PdfGridColumn(this.grid));\n            for (var index = 0; index < this.grid.rows.count; index++) {\n                var row = this.grid.rows.getRow(index);\n                var cell = new PdfGridCell();\n                cell.value = '';\n                row.cells.add(cell);\n            }\n        }\n        // } else {\n        //     let column : PdfGridColumn = new PdfGridColumn(this.grid);\n        //     this.columns.push(column);\n        //     return column;\n        // }\n    };\n    Object.defineProperty(PdfGridColumnCollection.prototype, \"count\", {\n        /**\n         * Gets the `number of columns` in the 'PdfGrid'.[Read-Only].\n         * @private\n         */\n        get: function () {\n            return this.internalColumns.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridColumnCollection.prototype, \"width\", {\n        /**\n         * Gets the `widths`.\n         * @private\n         */\n        get: function () {\n            if (this.columnWidth === 0) {\n                this.columnWidth = this.measureColumnsWidth();\n            }\n            if (this.grid.initialWidth !== 0 && this.columnWidth !== this.grid.initialWidth && !this.grid.style.allowHorizontalOverflow) {\n                this.columnWidth = this.grid.initialWidth;\n                this.grid.isPageWidth = true;\n            }\n            return this.columnWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridColumnCollection.prototype, \"columns\", {\n        /**\n         * Gets the `array of PdfGridColumn`.[Read-Only]\n         * @private\n         */\n        get: function () {\n            return this.internalColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets the `PdfGridColumn` from the specified index.[Read-Only]\n     * @private\n     */\n    PdfGridColumnCollection.prototype.getColumn = function (index) {\n        if (index >= 0 && index <= this.columns.length) {\n            return this.columns[index];\n        }\n        else {\n            throw Error('can not get the column from the index: ' + index);\n        }\n    };\n    //Implementation\n    /**\n     * `Calculates the column widths`.\n     * @private\n     */\n    PdfGridColumnCollection.prototype.measureColumnsWidth = function () {\n        var totalWidth = 0;\n        this.grid.measureColumnsWidth();\n        for (var i = 0, count = this.internalColumns.length; i < count; i++) {\n            totalWidth += this.internalColumns[i].width;\n        }\n        return totalWidth;\n    };\n    /**\n     * Gets the `widths of the columns`.\n     * @private\n     */\n    PdfGridColumnCollection.prototype.getDefaultWidths = function (totalWidth) {\n        var widths = [];\n        var summ = 0.0;\n        var subFactor = this.count;\n        for (var i = 0; i < this.count; i++) {\n            if (this.grid.isPageWidth && totalWidth >= 0 && !this.internalColumns[i].isCustomWidth) {\n                this.internalColumns[i].width = 0;\n            }\n            else {\n                widths[i] = this.internalColumns[i].width;\n                if (this.internalColumns[i].width > 0 && this.internalColumns[i].isCustomWidth) {\n                    totalWidth -= this.internalColumns[i].width;\n                    subFactor--;\n                }\n                else {\n                    widths[i] = 0;\n                }\n            }\n        }\n        for (var i = 0; i < this.count; i++) {\n            var width = totalWidth / subFactor;\n            if (widths[i] <= 0) {\n                widths[i] = width;\n            }\n        }\n        return widths;\n    };\n    return PdfGridColumnCollection;\n}());\nexport { PdfGridColumnCollection };\n","import { PdfGridCell, PdfGridCellCollection } from './pdf-grid-cell';\nimport { PdfGridRowStyle } from './styles/style';\n/**\n * `PdfGridRow` class provides customization of the settings for the particular row.\n */\nvar PdfGridRow = /** @class */ (function () {\n    //Constructor\n    /**\n     * Initializes a new instance of the `PdfGridRow` class with the parent grid.\n     * @private\n     */\n    function PdfGridRow(grid) {\n        /**\n         * Stores the index of the overflowing row.\n         * @private\n         */\n        this.gridRowOverflowIndex = 0;\n        /**\n         * The `height` of the row.\n         * @private\n         */\n        this.rowHeight = 0;\n        /**\n         * The `width` of the row.\n         * @private\n         */\n        this.rowWidth = 0;\n        /**\n         * The `isFinish` of the row.\n         * @private\n         */\n        this.isrowFinish = false;\n        /**\n         * Check whether the Row span row height `is set explicitly`.\n         * @default false\n         * @public\n         */\n        this.isRowSpanRowHeightSet = false;\n        /**\n         * The `page count` of the row.\n         * @public\n         */\n        this.noOfPageCount = 0;\n        /**\n         * Check whether the row height `is set explicitly`.\n         * @default false\n         * @private\n         */\n        this.isRowHeightSet = false;\n        this.isPageBreakRowSpanApplied = false;\n        /**\n         * Check weather the row merge `is completed` or not.\n         * @default true\n         * @private\n         */\n        this.isRowMergeComplete = true;\n        this.repeatFlag = false;\n        this.rowFontSplit = false;\n        this.pdfGrid = grid;\n    }\n    Object.defineProperty(PdfGridRow.prototype, \"rowSpanExists\", {\n        //Properties\n        /**\n         * Gets or sets a value indicating [`row span exists`].\n         * @private\n         */\n        get: function () {\n            return this.bRowSpanExists;\n        },\n        set: function (value) {\n            this.bRowSpanExists = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridRow.prototype, \"cells\", {\n        /**\n         * Gets the `cells` from the selected row.[Read-Only].\n         * @private\n         */\n        get: function () {\n            if (this.gridCells == null) {\n                this.gridCells = new PdfGridCellCollection(this);\n            }\n            return this.gridCells;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridRow.prototype, \"grid\", {\n        /**\n         * Gets or sets the parent `grid`.\n         * @private\n         */\n        get: function () {\n            return this.pdfGrid;\n        },\n        set: function (value) {\n            this.pdfGrid = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridRow.prototype, \"style\", {\n        /**\n         * Gets or sets the row `style`.\n         * @private\n         */\n        get: function () {\n            if (typeof this.rowStyle === 'undefined') {\n                this.rowStyle = new PdfGridRowStyle();\n                this.rowStyle.setParent(this);\n            }\n            return this.rowStyle;\n        },\n        set: function (value) {\n            this.rowStyle = value;\n            for (var i = 0; i < this.cells.count; i++) {\n                this.cells.getCell(i).style.borders = value.border;\n                if (typeof value.font !== 'undefined') {\n                    this.cells.getCell(i).style.font = value.font;\n                }\n                if (typeof value.backgroundBrush !== 'undefined') {\n                    this.cells.getCell(i).style.backgroundBrush = value.backgroundBrush;\n                }\n                if (typeof value.backgroundImage !== 'undefined') {\n                    this.cells.getCell(i).style.backgroundImage = value.backgroundImage;\n                }\n                if (typeof value.textBrush !== 'undefined') {\n                    this.cells.getCell(i).style.textBrush = value.textBrush;\n                }\n                if (typeof value.textPen !== 'undefined') {\n                    this.cells.getCell(i).style.textPen = value.textPen;\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridRow.prototype, \"rowBreakHeight\", {\n        /**\n         * `Height` of the row yet to be drawn after split.\n         * @private\n         */\n        get: function () {\n            if (typeof this.gridRowBreakHeight === 'undefined') {\n                this.gridRowBreakHeight = 0;\n            }\n            return this.gridRowBreakHeight;\n        },\n        set: function (value) {\n            this.gridRowBreakHeight = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridRow.prototype, \"rowOverflowIndex\", {\n        /**\n         * `over flow index` of the row.\n         * @private\n         */\n        get: function () {\n            return this.gridRowOverflowIndex;\n        },\n        set: function (value) {\n            this.gridRowOverflowIndex = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridRow.prototype, \"height\", {\n        /**\n         * Gets or sets the `height` of the row.\n         * @private\n         */\n        get: function () {\n            if (!this.isRowHeightSet) {\n                this.rowHeight = this.measureHeight();\n            }\n            return this.rowHeight;\n        },\n        set: function (value) {\n            this.rowHeight = value;\n            this.isRowHeightSet = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridRow.prototype, \"width\", {\n        /**\n         * Gets or sets the `width` of the row.\n         * @private\n         */\n        get: function () {\n            if (this.rowWidth === 0 || typeof this.rowWidth === 'undefined') {\n                this.rowWidth = this.measureWidth();\n            }\n            return this.rowWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridRow.prototype, \"NestedGridLayoutResult\", {\n        /**\n         * Gets or sets the row `Nested grid Layout Result`.\n         * @private\n         */\n        get: function () {\n            return this.gridResult;\n        },\n        set: function (value) {\n            this.gridResult = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridRow.prototype, \"columnSpanExists\", {\n        /**\n         * Gets or sets a value indicating [`column span exists`].\n         * @private\n         */\n        get: function () {\n            return this.bColumnSpanExists;\n        },\n        set: function (value) {\n            this.bColumnSpanExists = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridRow.prototype, \"rowMergeComplete\", {\n        /**\n         * Check whether the Row `has row span or row merge continue`.\n         * @private\n         */\n        get: function () {\n            return this.isRowMergeComplete;\n        },\n        set: function (value) {\n            this.isRowMergeComplete = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridRow.prototype, \"rowIndex\", {\n        /**\n         * Returns `index` of the row.\n         * @private\n         */\n        get: function () {\n            return this.grid.rows.rowCollection.indexOf(this);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Implementation\n    /**\n     * `Calculates the height`.\n     * @private\n     */\n    PdfGridRow.prototype.measureHeight = function () {\n        var rowSpanRemainingHeight = 0;\n        var rowHeight;\n        var maxHeight = 0;\n        if (this.cells.getCell(0).rowSpan > 1) {\n            rowHeight = 0;\n        }\n        else {\n            rowHeight = this.cells.getCell(0).height;\n        }\n        for (var i = 0; i < this.cells.count; i++) {\n            var cell = this.cells.getCell(i);\n            //get the maximum rowspan remaining height.\n            if (cell.rowSpanRemainingHeight > rowSpanRemainingHeight) {\n                rowSpanRemainingHeight = cell.rowSpanRemainingHeight;\n            }\n            //skip the cell if row spanned.\n            // if (cell.isRowMergeContinue) {\n            //     continue;\n            // }\n            // if (!cell.isRowMergeContinue) {\n            //     this.rowMergeComplete = false;\n            // }\n            this.rowMergeComplete = false;\n            if (cell.rowSpan > 1) {\n                var cellIn = i;\n                var rowin = this.grid.rows.rowCollection.indexOf(this);\n                for (var j = 0; j < cell.rowSpan; j++) {\n                    if ((j + 1) < cell.rowSpan) {\n                        this.grid.rows.getRow(rowin + j + 1).cells.getCell(cellIn).hasRowSpan = true;\n                    }\n                }\n                if (maxHeight < cell.height) {\n                    maxHeight = cell.height;\n                }\n                continue;\n            }\n            rowHeight = Math.max(rowHeight, cell.height);\n        }\n        if (maxHeight > rowHeight) {\n            rowHeight = maxHeight;\n        }\n        if (rowHeight === 0) {\n            rowHeight = maxHeight;\n        }\n        else if (rowSpanRemainingHeight > 0) {\n            rowHeight += rowSpanRemainingHeight;\n        }\n        return rowHeight;\n    };\n    PdfGridRow.prototype.measureWidth = function () {\n        var rowWid = 0;\n        for (var i = 0; i < this.grid.columns.count; i++) {\n            var column = this.grid.columns.getColumn(i);\n            rowWid += column.width;\n        }\n        return rowWid;\n    };\n    return PdfGridRow;\n}());\nexport { PdfGridRow };\n/**\n * `PdfGridRowCollection` class provides access to an ordered, strongly typed collection of 'PdfGridRow' objects.\n * @private\n */\nvar PdfGridRowCollection = /** @class */ (function () {\n    // Constructor\n    /**\n     * Initializes a new instance of the `PdfGridRowCollection` class with the parent grid.\n     * @private\n     */\n    function PdfGridRowCollection(grid) {\n        this.rows = [];\n        this.grid = grid;\n    }\n    Object.defineProperty(PdfGridRowCollection.prototype, \"count\", {\n        //Properties\n        /**\n         * Gets the number of header in the `PdfGrid`.[Read-Only].\n         * @private\n         */\n        get: function () {\n            return this.rows.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridRowCollection.prototype, \"rowCollection\", {\n        //Implementation\n        /**\n         * Return the row collection of the `grid`.\n         * @private\n         */\n        get: function () {\n            return this.rows;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfGridRowCollection.prototype.addRow = function (arg) {\n        if (typeof arg === 'undefined') {\n            var temprow = new PdfGridRow(this.grid);\n            this.addRow(temprow);\n            return temprow;\n        }\n        else {\n            arg.style.setBackgroundBrush(this.grid.style.backgroundBrush);\n            arg.style.setFont(this.grid.style.font);\n            arg.style.setTextBrush(this.grid.style.textBrush);\n            arg.style.setTextPen(this.grid.style.textPen);\n            if (arg.cells.count === 0) {\n                for (var i = 0; i < this.grid.columns.count; i++) {\n                    arg.cells.add(new PdfGridCell());\n                }\n            }\n            this.rows.push(arg);\n        }\n    };\n    /**\n     * Return the row by index.\n     * @private\n     */\n    PdfGridRowCollection.prototype.getRow = function (index) {\n        return this.rows[index];\n    };\n    return PdfGridRowCollection;\n}());\nexport { PdfGridRowCollection };\n/**\n * `PdfGridHeaderCollection` class provides customization of the settings for the header.\n * @private\n */\nvar PdfGridHeaderCollection = /** @class */ (function () {\n    //constructor\n    /**\n     * Initializes a new instance of the `PdfGridHeaderCollection` class with the parent grid.\n     * @private\n     */\n    function PdfGridHeaderCollection(grid) {\n        /**\n         * The array to store the `rows` of the grid header.\n         * @private\n         */\n        this.rows = [];\n        this.grid = grid;\n        this.rows = [];\n    }\n    //Properties\n    /**\n     * Gets a 'PdfGridRow' object that represents the `header` row in a 'PdfGridHeaderCollection' control.[Read-Only].\n     * @private\n     */\n    PdfGridHeaderCollection.prototype.getHeader = function (index) {\n        // if (index < 0 || index >= Count) {\n        //     throw new IndexOutOfRangeException();\n        // }\n        return (this.rows[index]);\n    };\n    Object.defineProperty(PdfGridHeaderCollection.prototype, \"count\", {\n        /**\n         * Gets the `number of header` in the 'PdfGrid'.[Read-Only]\n         * @private\n         */\n        get: function () {\n            return this.rows.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfGridHeaderCollection.prototype.add = function (arg) {\n        if (typeof arg === 'number') {\n            var row = void 0;\n            for (var i = 0; i < arg; i++) {\n                row = new PdfGridRow(this.grid);\n                for (var j = 0; j < this.grid.columns.count; j++) {\n                    row.cells.add(new PdfGridCell());\n                }\n                this.rows.push(row);\n            }\n            return this.rows;\n        }\n        else {\n            this.rows.push(arg);\n        }\n    };\n    PdfGridHeaderCollection.prototype.indexOf = function (row) {\n        return this.rows.indexOf(row);\n    };\n    return PdfGridHeaderCollection;\n}());\nexport { PdfGridHeaderCollection };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * PdfGrid.ts class for EJ2-PDF\n */\nimport { PdfGridColumnCollection } from './pdf-grid-column';\nimport { PdfGridRowCollection, PdfGridHeaderCollection } from './pdf-grid-row';\nimport { RectangleF, SizeF, PointF } from './../../drawing/pdf-drawing';\nimport { PdfLayoutElement } from './../../graphics/figures/layout-element';\nimport { PdfLayoutFormat } from './../../graphics/figures/base/element-layouter';\nimport { PdfGridStyle } from './styles/style';\nimport { PdfGridLayouter } from './../../structured-elements/grid/layout/grid-layouter';\nvar PdfGrid = /** @class */ (function (_super) {\n    __extends(PdfGrid, _super);\n    //constructor\n    /**\n     * Initialize a new instance for `PdfGrid` class.\n     * @private\n     */\n    function PdfGrid() {\n        var _this = _super.call(this) || this;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.gridSize = new SizeF(0, 0);\n        /**\n         * Check the child grid is ' split or not'\n         */\n        _this.isGridSplit = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.isRearranged = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.pageBounds = new RectangleF();\n        /**\n         * @hidden\n         * @private\n         */\n        _this.listOfNavigatePages = [];\n        /**\n         * @hidden\n         * @private\n         */\n        _this.parentCellIndex = 0;\n        _this.tempWidth = 0;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.breakRow = true;\n        _this.splitChildRowIndex = -1;\n        /**\n         * The event raised on `begin cell lay outing`.\n         * @event\n         * @private\n         */\n        //public beginPageLayout : Function;\n        /**\n         * The event raised on `end cell lay outing`.\n         * @event\n         * @private\n         */\n        //public endPageLayout : Function;\n        _this.hasRowSpanSpan = false;\n        _this.hasColumnSpan = false;\n        _this.isSingleGrid = true;\n        return _this;\n    }\n    Object.defineProperty(PdfGrid.prototype, \"raiseBeginCellDraw\", {\n        //Properties\n        /**\n         * Gets a value indicating whether the `start cell layout event` should be raised.\n         * @private\n         */\n        get: function () {\n            return (typeof this.beginCellDraw !== 'undefined' && typeof this.beginCellDraw !== null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"raiseEndCellDraw\", {\n        /**\n         * Gets a value indicating whether the `end cell layout event` should be raised.\n         * @private\n         */\n        get: function () {\n            return (typeof this.endCellDraw !== 'undefined' && typeof this.endCellDraw !== null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"repeatHeader\", {\n        /**\n         * Gets or sets a value indicating whether to `repeat header`.\n         * @private\n         */\n        get: function () {\n            if (this.bRepeatHeader == null || typeof this.bRepeatHeader === 'undefined') {\n                this.bRepeatHeader = false;\n            }\n            return this.bRepeatHeader;\n        },\n        set: function (value) {\n            this.bRepeatHeader = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"allowRowBreakAcrossPages\", {\n        /**\n         * Gets or sets a value indicating whether to split or cut rows that `overflow a page`.\n         * @private\n         */\n        get: function () {\n            return this.breakRow;\n        },\n        set: function (value) {\n            this.breakRow = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"columns\", {\n        /**\n         * Gets the `column` collection of the PdfGrid.[Read-Only]\n         * @private\n         */\n        get: function () {\n            if (this.gridColumns == null || typeof this.gridColumns === 'undefined') {\n                this.gridColumns = new PdfGridColumnCollection(this);\n            }\n            return this.gridColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"rows\", {\n        /**\n         * Gets the `row` collection from the PdfGrid.[Read-Only]\n         * @private\n         */\n        get: function () {\n            if (this.gridRows == null) {\n                this.gridRows = new PdfGridRowCollection(this);\n            }\n            return this.gridRows;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"headers\", {\n        /**\n         * Gets the `headers` collection from the PdfGrid.[Read-Only]\n         * @private\n         */\n        get: function () {\n            if (this.gridHeaders == null || typeof this.gridHeaders === 'undefined') {\n                this.gridHeaders = new PdfGridHeaderCollection(this);\n            }\n            return this.gridHeaders;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"initialWidth\", {\n        /**\n         * Indicating `initial width` of the page.\n         * @private\n         */\n        get: function () {\n            return this.gridInitialWidth;\n        },\n        set: function (value) {\n            this.gridInitialWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"style\", {\n        /**\n         * Gets or sets the `grid style`.\n         * @private\n         */\n        get: function () {\n            if (this.gridStyle == null) {\n                this.gridStyle = new PdfGridStyle();\n            }\n            return this.gridStyle;\n        },\n        set: function (value) {\n            if (this.gridStyle == null) {\n                this.gridStyle = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"isPageWidth\", {\n        /**\n         * Gets a value indicating whether the grid column width is considered to be `page width`.\n         * @private\n         */\n        get: function () {\n            return this.ispageWidth;\n        },\n        set: function (value) {\n            this.ispageWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"isChildGrid\", {\n        /**\n         * Gets or set if grid `is nested grid`.\n         * @private\n         */\n        get: function () {\n            return this.ischildGrid;\n        },\n        set: function (value) {\n            this.ischildGrid = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"size\", {\n        /**\n         * Gets or set if grid ' is split or not'\n         * @public\n         */\n        // public get isGridSplit() : boolean {\n        //     return this.isgridSplit;\n        // }\n        // public set isGridSplit(value : boolean) {\n        //     this.isgridSplit = value;\n        // }public get isGridSplit() : boolean {\n        //     return this.isgridSplit;\n        // }\n        // public set isGridSplit(value : boolean) {\n        //     this.isgridSplit = value;\n        // }\n        /**\n         * Gets the `size`.\n         * @private\n         */\n        get: function () {\n            if ((this.gridSize.width === 0 || typeof this.gridSize.width === 'undefined') && this.gridSize.height === 0) {\n                this.gridSize = this.measure();\n            }\n            return this.gridSize;\n            // } else {\n            //     return this.gridSize;\n            // }\n        },\n        set: function (value) {\n            this.gridSize = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"ParentCell\", {\n        get: function () {\n            return this.parentCell;\n        },\n        set: function (value) {\n            this.parentCell = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"LayoutFormat\", {\n        get: function () {\n            return this.layoutFormat;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfGrid.prototype.draw = function (arg1, arg2, arg3, arg4) {\n        if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && typeof arg3 === 'undefined') {\n            return this.drawHelper(arg1, arg2.x, arg2.y);\n        }\n        else if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {\n            return this.drawHelper(arg1, arg2, arg3, null);\n        }\n        else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'undefined') {\n            return this.drawHelper(arg1, arg2, null);\n        }\n        else if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && arg3 instanceof PdfLayoutFormat) {\n            return this.drawHelper(arg1, arg2.x, arg2.y, arg3);\n        }\n        else if (typeof arg2 === 'number' && typeof arg3 === 'number' && (arg4 instanceof PdfLayoutFormat || arg4 == null)) {\n            var width = (arg1.graphics.clientSize.width - arg2);\n            var layoutRectangle = new RectangleF(arg2, arg3, width, 0);\n            return this.drawHelper(arg1, layoutRectangle, arg4);\n        }\n        else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'boolean') {\n            return this.drawHelper(arg1, arg2, null);\n        }\n        else {\n            return this.drawHelper(arg1, arg2, arg3);\n        }\n    };\n    /**\n     * `measures` this instance.\n     * @private\n     */\n    PdfGrid.prototype.measure = function () {\n        var height = 0;\n        var width = this.columns.width;\n        for (var i = 0; i < this.headers.count; i++) {\n            var row = this.headers.getHeader(i);\n            height += row.height;\n        }\n        for (var i = 0; i < this.rows.count; i++) {\n            var row = this.rows.getRow(i);\n            height += row.height;\n        }\n        return new SizeF(width, height);\n    };\n    PdfGrid.prototype.onBeginCellDraw = function (args) {\n        if (this.raiseBeginCellDraw) {\n            this.beginCellDraw(this, args);\n        }\n    };\n    PdfGrid.prototype.onEndCellDraw = function (args) {\n        if (this.raiseEndCellDraw) {\n            this.endCellDraw(this, args);\n        }\n    };\n    /**\n     * `Layouts` the specified graphics.\n     * @private\n     */\n    PdfGrid.prototype.layout = function (param) {\n        // if (this.rows.count !== 0) {\n        //     if (this.rows.getRow(0).cells.getCell(0).style.borders.left.width !== 1) {\n        //         let x : number = this.rows.getRow(0).cells.getCell(0).style.borders.left.width / 2;\n        //         let y : number = this.rows.getRow(0).cells.getCell(0).style.borders.top.width / 2;\n        //         if (param.bounds.x === PdfBorders.default.right.width / 2 && param.bounds.y === PdfBorders.default.right.width / 2) {\n        //             let newBound : RectangleF = new RectangleF(x, y, this.gridSize.width, this.gridSize.height);\n        //             param.bounds = newBound;\n        //         }\n        //     }\n        // }\n        this.setSpan();\n        this.checkSpan();\n        this.layoutFormat = param.format;\n        this.gridLocation = param.bounds;\n        var layouter = new PdfGridLayouter(this);\n        var result = (layouter.Layouter(param));\n        return result;\n    };\n    PdfGrid.prototype.setSpan = function () {\n        var colSpan = 1;\n        var rowSpan = 1;\n        var currentCellIndex = 0;\n        var currentRowIndex = 0;\n        var maxSpan = 0;\n        var rowCount = this.headers.count;\n        for (var i = 0; i < rowCount; i++) {\n            var row = this.headers.getHeader(i);\n            maxSpan = 0;\n            var colCount = row.cells.count;\n            for (var j = 0; j < colCount; j++) {\n                var cell = row.cells.getCell(j);\n                maxSpan = Math.max(maxSpan, cell.rowSpan);\n                //Skip setting span map for already coverted rows/columns.\n                if (!cell.isCellMergeContinue && !cell.isRowMergeContinue && (cell.columnSpan > 1 || cell.rowSpan > 1)) {\n                    if (cell.columnSpan + j > row.cells.count) {\n                        throw new Error('Invalid span specified at row ' + j.toString() + ' column ' + i.toString());\n                    }\n                    if (cell.rowSpan + i > this.headers.count) {\n                        throw new Error('Invalid span specified at Header ' + j.toString() + ' column ' + i.toString());\n                    }\n                    // if (this.rows.count !== 0 && cell.rowSpan + i > this.rows.count) {\n                    //     throw new Error('Invalid span specified at row ' + j.toString() + ' column ' + i.toString());\n                    // }\n                    if (cell.columnSpan > 1 && cell.rowSpan > 1) {\n                        colSpan = cell.columnSpan;\n                        rowSpan = cell.rowSpan;\n                        currentCellIndex = j;\n                        currentRowIndex = i;\n                        cell.isCellMergeStart = true;\n                        cell.isRowMergeStart = true;\n                        //Set Column merges for first row\n                        while (colSpan > 1) {\n                            currentCellIndex++;\n                            row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                            row.cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                            row.cells.getCell(currentCellIndex).rowSpan = rowSpan;\n                            colSpan--;\n                        }\n                        currentCellIndex = j;\n                        colSpan = cell.columnSpan;\n                        //Set Row Merges and column merges foreach subsequent rows.\n                        while (rowSpan > 1) {\n                            currentRowIndex++;\n                            this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                            this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                            rowSpan--;\n                            while (colSpan > 1) {\n                                currentCellIndex++;\n                                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                                colSpan--;\n                            }\n                            colSpan = cell.columnSpan;\n                            currentCellIndex = j;\n                        }\n                    }\n                    else if (cell.columnSpan > 1 && cell.rowSpan === 1) {\n                        colSpan = cell.columnSpan;\n                        currentCellIndex = j;\n                        cell.isCellMergeStart = true;\n                        //Set Column merges.\n                        while (colSpan > 1) {\n                            currentCellIndex++;\n                            row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                            colSpan--;\n                        }\n                    }\n                    else if (cell.columnSpan === 1 && cell.rowSpan > 1) {\n                        rowSpan = cell.rowSpan;\n                        currentRowIndex = i;\n                        //Set row Merges.\n                        while (rowSpan > 1) {\n                            currentRowIndex++;\n                            this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                            rowSpan--;\n                        }\n                    }\n                }\n            }\n            row.maximumRowSpan = maxSpan;\n        }\n    };\n    PdfGrid.prototype.checkSpan = function () {\n        var cellcolSpan;\n        var cellrowSpan = 1;\n        var cellmaxSpan = 0;\n        var currentCellIndex;\n        var currentRowIndex = 0;\n        cellcolSpan = cellrowSpan = 1;\n        currentCellIndex = currentRowIndex = 0;\n        if (this.hasRowSpanSpan || this.hasColumnSpan) {\n            var rowCount = this.rows.count;\n            for (var i = 0; i < rowCount; i++) {\n                var row = this.rows.getRow(i);\n                cellmaxSpan = 0;\n                var colCount = row.cells.count;\n                for (var j = 0; j < colCount; j++) {\n                    var cell = row.cells.getCell(j);\n                    cellmaxSpan = Math.max(cellmaxSpan, cell.rowSpan);\n                    //Skip setting span map for already coverted rows/columns.\n                    if (!cell.isCellMergeContinue && !cell.isRowMergeContinue\n                        && (cell.columnSpan > 1 || cell.rowSpan > 1)) {\n                        if (cell.columnSpan + j > row.cells.count) {\n                            throw new Error('Invalid span specified at row  ' + j.toString() + ' column ' + i.toString());\n                        }\n                        if (cell.rowSpan + i > this.rows.count) {\n                            throw new Error('Invalid span specified at row  ' + j.toString() + ' column ' + i.toString());\n                        }\n                        if (cell.columnSpan > 1 && cell.rowSpan > 1) {\n                            cellcolSpan = cell.columnSpan;\n                            cellrowSpan = cell.rowSpan;\n                            currentCellIndex = j;\n                            currentRowIndex = i;\n                            cell.isCellMergeStart = true;\n                            cell.isRowMergeStart = true;\n                            //Set Column merges for first row\n                            while (cellcolSpan > 1) {\n                                currentCellIndex++;\n                                row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                                row.cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                                cellcolSpan--;\n                            }\n                            currentCellIndex = j;\n                            cellcolSpan = cell.columnSpan;\n                            //Set Row Merges and column merges foreach subsequent rows.\n                            while (cellrowSpan > 1) {\n                                currentRowIndex++;\n                                this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                                this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                                cellrowSpan--;\n                                while (cellcolSpan > 1) {\n                                    currentCellIndex++;\n                                    this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                                    this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                                    cellcolSpan--;\n                                }\n                                cellcolSpan = cell.columnSpan;\n                                currentCellIndex = j;\n                            }\n                        }\n                        else if (cell.columnSpan > 1 && cell.rowSpan === 1) {\n                            cellcolSpan = cell.columnSpan;\n                            currentCellIndex = j;\n                            cell.isCellMergeStart = true;\n                            //Set Column merges.\n                            while (cellcolSpan > 1) {\n                                currentCellIndex++;\n                                row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                                cellcolSpan--;\n                            }\n                        }\n                        else if (cell.columnSpan === 1 && cell.rowSpan > 1) {\n                            cellrowSpan = cell.rowSpan;\n                            currentRowIndex = i;\n                            //Set row Merges.\n                            while (cellrowSpan > 1) {\n                                currentRowIndex++;\n                                this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                                cellrowSpan--;\n                            }\n                        }\n                    }\n                }\n                row.maximumRowSpan = cellmaxSpan;\n            }\n        }\n    };\n    PdfGrid.prototype.measureColumnsWidth = function (bounds) {\n        if (typeof bounds !== 'undefined') {\n            this.isPageWidth = false;\n            var widths = this.columns.getDefaultWidths(bounds.width - bounds.x);\n            //let tempWidth : number = this.columns.getColumn(0).width;\n            for (var i = 0, count = this.columns.count; i < count; i++) {\n                // if (this.columns.getColumn(i).width < 0)\n                //     this.columns.getColumn(i).columnWidth = widths[i];\n                // else if (this.columns.getColumn(i).width > 0 && !this.columns.getColumn(i).isCustomWidth && widths[i]>0 && this.isComplete)\n                this.columns.getColumn(i).columnWidth = widths[i];\n                this.tempWidth = widths[i];\n            }\n            if (this.ParentCell != null && this.style.allowHorizontalOverflow == false && this.ParentCell.row.grid.style.allowHorizontalOverflow == false) {\n                var padding = 0;\n                var columnWidth = 0;\n                var columnCount = this.columns.count;\n                var childGridColumnWidth = 0;\n                if (this.ParentCell.style.cellPadding != null || typeof this.ParentCell.style.cellPadding !== 'undefined') {\n                    if (typeof this.ParentCell.style.cellPadding.left != 'undefined' && this.ParentCell.style.cellPadding.hasLeftPad) {\n                        padding += this.ParentCell.style.cellPadding.left;\n                    }\n                    if (typeof this.ParentCell.style.cellPadding.right != 'undefined' && this.ParentCell.style.cellPadding.hasRightPad) {\n                        padding += this.ParentCell.style.cellPadding.right;\n                    }\n                }\n                for (var i = 0; i < this.ParentCell.columnSpan; i++) {\n                    columnWidth += this.ParentCell.row.grid.columns.getColumn(this.parentCellIndex + i).width;\n                }\n                for (var j = 0; j < this.columns.count; j++) {\n                    if (this.gridColumns.getColumn(j).width > 0 && this.gridColumns.getColumn(j).isCustomWidth) {\n                        columnWidth -= this.gridColumns.getColumn(j).width;\n                        columnCount--;\n                    }\n                }\n                if ((this.ParentCell.row.grid.style.cellPadding != null || typeof this.ParentCell.row.grid.style.cellPadding != 'undefined')) {\n                    if (typeof this.ParentCell.row.grid.style.cellPadding.top != 'undefined' && this.ParentCell.row.grid.style.cellPadding.hasTopPad) {\n                        padding += this.ParentCell.row.grid.style.cellPadding.top;\n                    }\n                    if (typeof this.ParentCell.row.grid.style.cellPadding.bottom != 'undefined' && this.ParentCell.row.grid.style.cellPadding.hasBottomPad) {\n                        padding += this.ParentCell.row.grid.style.cellPadding.bottom;\n                    }\n                }\n                if (this.ParentCell.row.grid.style.cellSpacing != 0) {\n                    columnWidth -= this.ParentCell.row.grid.style.cellSpacing * 2;\n                }\n                if (columnWidth > padding) {\n                    childGridColumnWidth = (columnWidth - padding) / columnCount;\n                    this.tempWidth = childGridColumnWidth;\n                    if (this.ParentCell != null) {\n                        for (var j = 0; j < this.columns.count; j++) {\n                            if (!this.columns.getColumn(j).isCustomWidth)\n                                this.columns.getColumn(j).columnWidth = childGridColumnWidth;\n                        }\n                    }\n                }\n            }\n            // if (this.ParentCell != null && this.ParentCell.row.width > 0)\n            // {\n            //     if (this.isChildGrid && this.gridSize.width > this.ParentCell.row.width)\n            //     {\n            //         widths = this.columns.getDefaultWidths(bounds.width);\n            //         for (let i : number = 0; i < this.columns.count; i++)\n            //         {\n            //             this.columns.getColumn(i).width = widths[i];\n            //         }\n            //     }\n            // }\n        }\n        else {\n            var widths = [this.columns.count];\n            for (var n = 0; n < this.columns.count; n++) {\n                widths[n] = 0;\n            }\n            var cellWidth = 0;\n            var cellWidths = 0;\n            if ((typeof this.isChildGrid === 'undefined' && typeof this.gridLocation !== 'undefined') || (this.isChildGrid === null && typeof this.gridLocation !== 'undefined')) {\n                this.initialWidth = this.gridLocation.width;\n            }\n            if (this.headers.count > 0) {\n                var colCount_1 = this.headers.getHeader(0).cells.count;\n                var rowCount = this.headers.count;\n                for (var i = 0; i < colCount_1; i++) {\n                    cellWidth = 0;\n                    for (var j = 0; j < rowCount; j++) {\n                        var rowWidth = Math.min(this.initialWidth, this.headers.getHeader(j).cells.getCell(i).width);\n                        cellWidth = Math.max(cellWidth, rowWidth);\n                    }\n                    widths[i] = cellWidth;\n                }\n            }\n            // else {\n            //     let colCount : number = this.rows.getRow(0).cells.count;\n            //     let rowCount : number = this.rows.count;\n            //     for (let i : number = 0; i < colCount; i++) {\n            //         cellWidth = 0;\n            //         for (let j : number = 0; j < rowCount; j++) {\n            //             let rowWidth : number = Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width);\n            //             cellWidth = Math.max(cellWidth, rowWidth);\n            //         }\n            //         widths[i] = cellWidth;\n            //     }\n            // }\n            cellWidth = 0;\n            for (var i = 0, colCount_2 = this.columns.count; i < colCount_2; i++) {\n                for (var j = 0, rowCount = this.rows.count; j < rowCount; j++) {\n                    if ((this.rows.getRow(j).cells.getCell(i).columnSpan == 1 && !this.rows.getRow(j).cells.getCell(i).isCellMergeContinue) || this.rows.getRow(j).cells.getCell(i).value != null) {\n                        if (this.rows.getRow(j).cells.getCell(i).value != null && !this.rows.getRow(j).grid.style.allowHorizontalOverflow) {\n                            var value = this.rows.getRow(j).grid.style.cellPadding.right +\n                                this.rows.getRow(j).grid.style.cellPadding.left\n                                + this.rows.getRow(j).cells.getCell(i).style.borders.left.width / 2;\n                            //  if (this.initialWidth != 0 )\n                            //         (this.rows.getRow(j).cells.getCell(i).value as PdfGrid).initialWidth = this.initialWidth - value;\n                        }\n                        var rowWidth = 0;\n                        rowWidth = this.initialWidth > 0.0 ? Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width) : this.rows.getRow(j).cells.getCell(i).width;\n                        // let internalWidth : number = this.rows.getRow(j).cells.getCell(i).width;\n                        // internalWidth += this.rows.getRow(j).cells.getCell(i).style.borders.left.width;\n                        // internalWidth += this.rows.getRow(j).cells.getCell(i).style.borders.right.width;\n                        // let internalHeight : number = this.rows.getRow(j).cells.getCell(i).height;\n                        // internalHeight += (this.rows.getRow(j).cells.getCell(i).style.borders.top.width);\n                        // internalHeight += (this.rows.getRow(j).cells.getCell(i).style.borders.bottom.width);\n                        // let isCorrectWidth : boolean = (internalWidth + this.gridLocation.x) > this.currentGraphics.clientSize.width;\n                        // let isCorrectHeight : boolean = (internalHeight + this.gridLocation.y) > this.currentGraphics.clientSize.height;\n                        // if (isCorrectWidth || isCorrectHeight) {\n                        //     throw Error('Image size exceeds client size of the page. Can not insert this image');\n                        // }\n                        // rowWidth = Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width);\n                        cellWidth = Math.max(widths[i], Math.max(cellWidth, rowWidth));\n                        cellWidth = Math.max(this.columns.getColumn(i).width, cellWidth);\n                    }\n                }\n                if (this.rows.count != 0)\n                    widths[i] = cellWidth;\n                cellWidth = 0;\n            }\n            for (var i = 0, RowCount = this.rows.count; i < RowCount; i++) {\n                for (var j = 0, ColCount = this.columns.count; j < ColCount; j++) {\n                    if (this.rows.getRow(i).cells.getCell(j).columnSpan > 1) {\n                        var total = widths[j];\n                        for (var k = 1; k < this.rows.getRow(i).cells.getCell(j).columnSpan; k++) {\n                            total += widths[j + k];\n                        }\n                        // if (this.rows.getRow(i).cells.getCell(j).width > total)\n                        // {\n                        //     let extendedWidth : number = this.rows.getRow(i).cells.getCell(j).width - total;\n                        //     extendedWidth = extendedWidth / this.rows.getRow(i).cells.getCell(j).columnSpan;\n                        //     for (let k : number = j; k < j + this.rows.getRow(i).cells.getCell(j).columnSpan; k++)\n                        //         widths[k] += extendedWidth;\n                        // }\n                    }\n                }\n            }\n            // if (this.isChildGrid && this.initialWidth != 0)\n            // {\n            //     widths = this.columns.getDefaultWidths(this.initialWidth);\n            // }\n            for (var i = 0, count = this.columns.count; i < count; i++) {\n                if (this.columns.getColumn(i).width <= 0)\n                    this.columns.getColumn(i).columnWidth = widths[i];\n                else if (this.columns.getColumn(i).width > 0 && !this.columns.getColumn(i).isCustomWidth)\n                    this.columns.getColumn(i).columnWidth = widths[i];\n            }\n            var padding = 0;\n            var colWidth = 0;\n            var colCount = this.columns.count;\n            var childGridColWidth = 0;\n            colWidth = this.tempWidth;\n            for (var j = 0; j < this.columns.count; j++) {\n                if (this.gridColumns.getColumn(j).width > 0 && this.gridColumns.getColumn(j).isCustomWidth) {\n                    colWidth -= this.gridColumns.getColumn(j).width;\n                    colCount--;\n                }\n            }\n            // if (this.style.cellSpacing != 0){\n            //     colWidth -= this.style.cellSpacing * 2;\n            // }\n            if (colWidth > 0) {\n                if (this.ParentCell.row.grid.style.cellSpacing != 0) {\n                    colWidth -= this.ParentCell.row.grid.style.cellSpacing * 2;\n                }\n            }\n            if (colWidth > padding) {\n                childGridColWidth = (colWidth) / colCount;\n                if (this.ParentCell != null) {\n                    for (var j = 0; j < this.columns.count; j++) {\n                        if (!this.columns.getColumn(j).isCustomWidth)\n                            this.columns.getColumn(j).columnWidth = childGridColWidth;\n                    }\n                }\n            }\n        }\n    };\n    return PdfGrid;\n}(PdfLayoutElement));\nexport { PdfGrid };\n","import { PdfDictionary } from './../primitives/pdf-dictionary';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PdfName } from './../primitives/pdf-name';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\n/**\n * Represents a simple `transparency`.\n * @private\n */\nvar PdfTransparency = /** @class */ (function () {\n    // Properties\n    // /**\n    //  * Gets the `stroke` operation alpha value.\n    //  * @private\n    //  */\n    // public get stroke() : number {\n    //     let result : number = this.getNumber(this.dictionaryProperties.CA);\n    //     return result;\n    // }\n    // /**\n    //  * Gets the `fill` operation alpha value.\n    //  * @private\n    //  */\n    // public get fill() : number {\n    //     let result : number = this.getNumber(this.dictionaryProperties.ca);\n    //     return result;\n    // }\n    // /**\n    //  * Gets the `blend mode`.\n    //  * @private\n    //  */\n    // public get mode() : PdfBlendMode {\n    //     let result : string = this.getName(this.dictionaryProperties.ca);\n    //     return PdfBlendMode.Normal;\n    // }\n    // Constructors\n    /**\n     * Initializes a new instance of the `Transparency` class.\n     * @private\n     */\n    function PdfTransparency(stroke, fill, mode) {\n        // Fields\n        /**\n         * Internal variable to store `dictionary`.\n         * @default new PdfDictionary()\n         * @private\n         */\n        this.dictionary = new PdfDictionary();\n        /**\n         * Internal variable for accessing fields from `DictionryProperties` class.\n         * @default new DictionaryProperties()\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        this.dictionary.items.setValue(this.dictionaryProperties.CA, new PdfNumber(stroke));\n        this.dictionary.items.setValue(this.dictionaryProperties.ca, new PdfNumber(fill));\n        this.dictionary.items.setValue(this.dictionaryProperties.BM, new PdfName(mode.toString()));\n    }\n    Object.defineProperty(PdfTransparency.prototype, \"element\", {\n        // // Implementation\n        // /**\n        //  * Gets the `number value`.\n        //  * @private\n        //  */\n        // private getNumber(keyName : string) : number {\n        //     let result : number = 0.0;\n        //     let numb : PdfNumber = this.dictionary.items.getValue(keyName) as PdfNumber;\n        //     result = numb.intValue;\n        //     return result;\n        // }\n        // /**\n        //  * Gets the `name value`.\n        //  * @private\n        //  */\n        // private getName(keyName : string) : string {\n        //     let result : string = null;\n        //     let name : PdfName = this.dictionary.items.getValue(keyName) as PdfName;\n        //     result = name.value;\n        //     return result;\n        // }\n        // IPdfWrapper Members\n        /**\n         * Gets the `element`.\n         * @private\n         */\n        get: function () {\n            return this.dictionary;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfTransparency;\n}());\nexport { PdfTransparency };\n","import { PdfNumber } from './pdf-number';\nimport { Operators } from './../input-output/pdf-operators';\n/**\n * `PdfArray` class is used to perform array related primitive operations.\n * @private\n */\nvar PdfArray = /** @class */ (function () {\n    function PdfArray(array) {\n        //Fields\n        /**\n         * `startMark` - '['\n         * @private\n         */\n        this.startMark = '[';\n        /**\n         * `endMark` - ']'.\n         * @private\n         */\n        this.endMark = ']';\n        /**\n         * Internal variable to store the `position`.\n         * @default -1\n         * @private\n         */\n        this.position9 = -1;\n        /**\n         * Internal variable to hold `cloned object`.\n         * @default null\n         * @private\n         */\n        this.clonedObject9 = null;\n        /**\n         * Represents the Font dictionary.\n         * @hidden\n         * @private\n         */\n        this.isFont = false;\n        if (typeof array === 'undefined') {\n            this.internalElements = [];\n        }\n        else {\n            if (typeof array !== 'undefined' && !(array instanceof PdfArray)) {\n                var tempNumberArray = array;\n                for (var index = 0; index < tempNumberArray.length; index++) {\n                    var pdfNumber = new PdfNumber(tempNumberArray[index]);\n                    this.add(pdfNumber);\n                }\n                // } else if (typeof array !== 'undefined' && (array instanceof PdfArray)) {\n            }\n            else {\n                var tempArray = array;\n                // if (tempArray.Elements.length > 0) {\n                this.internalElements = [];\n                for (var index = 0; index < tempArray.elements.length; index++) {\n                    this.internalElements.push(tempArray.elements[index]);\n                }\n                // }\n            }\n        }\n    }\n    //property\n    /**\n     * Gets the `IPdfSavable` at the specified index.\n     * @private\n     */\n    PdfArray.prototype.items = function (index) {\n        // if (index < 0 || index >= this.Count) {\n        //     throw new Error('ArgumentOutOfRangeException : index, The index can\"t be less then zero or greater then Count.');\n        // }\n        return this.internalElements[index];\n    };\n    Object.defineProperty(PdfArray.prototype, \"count\", {\n        /**\n         * Gets the `count`.\n         * @private\n         */\n        get: function () {\n            return this.internalElements.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfArray.prototype, \"status\", {\n        /**\n         * Gets or sets the `Status` of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.status9;\n        },\n        set: function (value) {\n            this.status9 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfArray.prototype, \"isSaving\", {\n        /**\n         * Gets or sets a value indicating whether this document `is saving` or not.\n         * @private\n         */\n        get: function () {\n            return this.isSaving9;\n        },\n        set: function (value) {\n            this.isSaving9 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfArray.prototype, \"clonedObject\", {\n        /**\n         * Returns `cloned object`.\n         * @private\n         */\n        get: function () {\n            return this.clonedObject9;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfArray.prototype, \"position\", {\n        /**\n         * Gets or sets the `position` of the object.\n         * @private\n         */\n        get: function () {\n            return this.position9;\n        },\n        set: function (value) {\n            this.position9 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfArray.prototype, \"objectCollectionIndex\", {\n        /**\n         * Gets or sets the `index` value of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.index9;\n        },\n        set: function (value) {\n            this.index9 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfArray.prototype, \"CrossTable\", {\n        /**\n         * Returns `PdfCrossTable` associated with the object.\n         * @private\n         */\n        get: function () {\n            return this.pdfCrossTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfArray.prototype, \"elements\", {\n        /**\n         * Gets the `elements` of the Pdf Array.\n         * @private\n         */\n        get: function () {\n            return this.internalElements;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * `Adds` the specified element to the PDF array.\n     * @private\n     */\n    PdfArray.prototype.add = function (element) {\n        // if (element === null) {\n        //     throw new Error('ArgumentNullException : obj');\n        // }\n        if (typeof this.internalElements === 'undefined') {\n            this.internalElements = [];\n        }\n        this.internalElements.push(element);\n        this.markedChange();\n    };\n    /**\n     * `Marks` the object changed.\n     * @private\n     */\n    PdfArray.prototype.markedChange = function () {\n        this.bChanged = true;\n    };\n    /**\n     * `Determines` whether the specified element is within the array.\n     * @private\n     */\n    PdfArray.prototype.contains = function (element) {\n        var returnValue = false;\n        for (var index = 0; index < this.internalElements.length; index++) {\n            var tempElement = this.internalElements[index];\n            var inputElement = element;\n            if (tempElement != null && typeof tempElement !== 'undefined' && inputElement != null && typeof inputElement !== 'undefined') {\n                if (tempElement.value === inputElement.value) {\n                    return true;\n                }\n            }\n            // if (this.internalElements[index] === element) {\n            //     returnValue = true;\n            // }\n        }\n        return returnValue;\n    };\n    /**\n     * Returns the `primitive object` of input index.\n     * @private\n     */\n    PdfArray.prototype.getItems = function (index) {\n        // if (index < 0 || index >= this.Count) {\n        //     throw new Error('ArgumentOutOfRangeException : index , The index can\"t be less then zero or greater then Count.');\n        // }\n        return this.internalElements[index];\n    };\n    /**\n     * `Saves` the object using the specified writer.\n     * @private\n     */\n    PdfArray.prototype.save = function (writer) {\n        // if (writer === null) {\n        //     throw new Error('ArgumentNullException : writer');\n        // }\n        writer.write(this.startMark);\n        for (var i = 0, len = this.count; i < len; i++) {\n            this.getItems(i).save(writer);\n            if (i + 1 !== len) {\n                writer.write(Operators.whiteSpace);\n            }\n        }\n        writer.write(this.endMark);\n    };\n    /**\n     * Creates a `copy of PdfArray`.\n     * @private\n     */\n    PdfArray.prototype.clone = function (crossTable) {\n        // if (this.clonedObject9 !== null && this.clonedObject9.CrossTable === crossTable) {\n        //     return this.clonedObject9;\n        // } else {\n        this.clonedObject9 = null;\n        // Else clone the object.\n        var newArray = new PdfArray();\n        for (var index = 0; index < this.internalElements.length; index++) {\n            var obj = this.internalElements[index];\n            newArray.add(obj.clone(crossTable));\n        }\n        newArray.pdfCrossTable = crossTable;\n        this.clonedObject9 = newArray;\n        return newArray;\n    };\n    /**\n     * Creates filled PDF array `from the rectangle`.\n     * @private\n     */\n    PdfArray.fromRectangle = function (bounds) {\n        var values = [bounds.x, bounds.y, bounds.width, bounds.height];\n        var array = new PdfArray(values);\n        return array;\n    };\n    // /**\n    //  * Creates the rectangle from filled PDF array.\n    //  * @private\n    //  */\n    // public ToRectangle() : RectangleF {\n    //     if (this.Count < 4) {\n    //         throw Error('InvalidOperationException-Can not convert to rectangle.');\n    //     }\n    //     let x1 : number;\n    //     let x2 : number;\n    //     let y1 : number;\n    //     let y2 : number;\n    //     let num : PdfNumber = this.getItems(0) as PdfNumber;\n    //     x1 = num.IntValue;\n    //     num = this.getItems(1) as PdfNumber;\n    //     y1 = num.IntValue;\n    //     num = this.getItems(2) as PdfNumber;\n    //     x2 = num.IntValue;\n    //     num = this.getItems(3) as PdfNumber;\n    //     y2 = num.IntValue;\n    //     let x : number = Math.min(x1, x2);\n    //     let y : number = Math.min(y1, y2);\n    //     let width : number = Math.abs(x1 - x2);\n    //     let height : number = Math.abs(y1 - y2);\n    //     let rect : RectangleF = new RectangleF(new PointF(x, y), new SizeF(width, height));\n    //     return rect;\n    // }\n    /**\n     * `Inserts` the element into the array.\n     * @private\n     */\n    PdfArray.prototype.insert = function (index, element) {\n        if (index < this.internalElements.length && index > 0) {\n            var tempElements = [];\n            for (var i = 0; i < index; i++) {\n                tempElements.push(this.internalElements[i]);\n            }\n            tempElements.push(element);\n            for (var i = index; i < this.internalElements.length; i++) {\n                tempElements.push(this.internalElements[i]);\n            }\n            this.internalElements = tempElements;\n        }\n        else {\n            this.internalElements.push(element);\n        }\n        this.markChanged();\n    };\n    /**\n     * `Checks whether array contains the element`.\n     * @private\n     */\n    PdfArray.prototype.indexOf = function (element) {\n        return this.internalElements.indexOf(element);\n    };\n    /**\n     * `Removes` element from the array.\n     * @private\n     */\n    PdfArray.prototype.remove = function (element) {\n        // if (element === null) {\n        //     throw new Error('ArgumentNullException : element');\n        // }\n        var index = this.internalElements.indexOf(element);\n        // if (index >= 0 && index < this.internalElements.length) {\n        this.internalElements[index] = null;\n        // }\n        this.markChanged();\n    };\n    /**\n     * `Remove` the element from the array by its index.\n     * @private\n     */\n    PdfArray.prototype.removeAt = function (index) {\n        // this.internalElements.RemoveAt(index);\n        if (this.internalElements.length > index) {\n            var tempArray = [];\n            for (var i = 0; i < index; i++) {\n                tempArray.push(this.internalElements[i]);\n            }\n            for (var i = index + 1; i < this.internalElements.length; i++) {\n                tempArray.push(this.internalElements[i]);\n            }\n            this.internalElements = tempArray;\n        }\n        this.markChanged();\n    };\n    /**\n     * `Clear` the array.\n     * @private\n     */\n    PdfArray.prototype.clear = function () {\n        this.internalElements = [];\n        this.markChanged();\n    };\n    /**\n     * `Marks` the object changed.\n     * @private\n     */\n    PdfArray.prototype.markChanged = function () {\n        this.bChanged = true;\n    };\n    return PdfArray;\n}());\nexport { PdfArray };\n","/**\n * PdfNumbersConvertor.ts class for EJ2-PDF\n * @private\n */\nimport { PdfNumberStyle } from './../../pages/enum';\n/**\n * `PdfNumbersConvertor` for convert page number into numbers, roman letters, etc.,\n * @private\n */\nvar PdfNumbersConvertor = /** @class */ (function () {\n    function PdfNumbersConvertor() {\n    }\n    // Static methods\n    /**\n     * Convert string value from page number with correct format.\n     * @private\n     */\n    PdfNumbersConvertor.convert = function (intArabic, numberStyle) {\n        var result = '';\n        switch (numberStyle) {\n            case PdfNumberStyle.None:\n                result = '';\n                break;\n            case PdfNumberStyle.Numeric:\n                result = intArabic.toString();\n                break;\n            case PdfNumberStyle.LowerLatin:\n                result = this.arabicToLetter(intArabic).toLowerCase();\n                break;\n            case PdfNumberStyle.LowerRoman:\n                result = this.arabicToRoman(intArabic).toLowerCase();\n                break;\n            case PdfNumberStyle.UpperLatin:\n                result = this.arabicToLetter(intArabic);\n                break;\n            case PdfNumberStyle.UpperRoman:\n                result = this.arabicToRoman(intArabic);\n                break;\n        }\n        return result;\n    };\n    /**\n     * Converts `arabic to roman` letters.\n     * @private\n     */\n    PdfNumbersConvertor.arabicToRoman = function (intArabic) {\n        var retval = '';\n        retval += this.generateNumber(intArabic, 1000, 'M');\n        retval += this.generateNumber(intArabic, 900, 'CM');\n        retval += this.generateNumber(intArabic, 500, 'D');\n        retval += this.generateNumber(intArabic, 400, 'CD');\n        retval += this.generateNumber(intArabic, 100, 'C');\n        retval += this.generateNumber(intArabic, 90, 'XC');\n        retval += this.generateNumber(intArabic, 50, 'L');\n        retval += this.generateNumber(intArabic, 40, 'XL');\n        retval += this.generateNumber(intArabic, 10, 'X');\n        retval += this.generateNumber(intArabic, 9, 'IX');\n        retval += this.generateNumber(intArabic, 5, 'V');\n        retval += this.generateNumber(intArabic, 4, 'IV');\n        retval += this.generateNumber(intArabic, 1, 'I');\n        return retval.toString();\n    };\n    /**\n     * Converts `arabic to normal letters`.\n     * @private\n     */\n    PdfNumbersConvertor.arabicToLetter = function (arabic) {\n        var stack = this.convertToLetter(arabic);\n        var result = '';\n        while (stack.length > 0) {\n            var num = stack.pop();\n            result = this.appendChar(result, num);\n        }\n        return result.toString();\n    };\n    /**\n     * Generate a string value of an input number.\n     * @private\n     */\n    PdfNumbersConvertor.generateNumber = function (value, magnitude, letter) {\n        var numberstring = '';\n        while (value >= magnitude) {\n            value -= magnitude;\n            numberstring += letter;\n        }\n        return numberstring.toString();\n    };\n    /**\n     * Convert a input number into letters.\n     * @private\n     */\n    PdfNumbersConvertor.convertToLetter = function (arabic) {\n        if (arabic <= 0) {\n            throw Error('ArgumentOutOfRangeException-arabic, Value can not be less 0');\n        }\n        var stack = [];\n        while (arabic > this.letterLimit) {\n            var remainder = arabic % this.letterLimit;\n            if (remainder === 0.0) {\n                arabic = arabic / this.letterLimit - 1;\n                remainder = this.letterLimit;\n            }\n            else {\n                arabic /= this.letterLimit;\n            }\n            stack.push(remainder);\n        }\n        stack.push(arabic);\n        return stack;\n    };\n    /**\n     * Convert number to actual string value.\n     * @private\n     */\n    PdfNumbersConvertor.appendChar = function (builder, value) {\n        var letter = String.fromCharCode(PdfNumbersConvertor.acsiiStartIndex + value);\n        builder += letter;\n        return builder;\n    };\n    // Fields\n    /**\n     * numbers of letters in english [readonly].\n     * @default = 26.0\n     * @private\n     */\n    PdfNumbersConvertor.letterLimit = 26.0;\n    /**\n     * Resturns `acsii start index` value.\n     * @default 64\n     * @private\n     */\n    PdfNumbersConvertor.acsiiStartIndex = (65 - 1);\n    return PdfNumbersConvertor;\n}());\nexport { PdfNumbersConvertor };\n","/**\n * Represent class to store information about `template and value pairs`.\n * @private\n */\nvar PdfTemplateValuePair = /** @class */ (function () {\n    function PdfTemplateValuePair(template, value) {\n        // Fields\n        /**\n         * Internal variable to store template.\n         * @default null\n         * @private\n         */\n        this.pdfTemplate = null;\n        /**\n         * Intenal variable to store value.\n         * @private\n         */\n        this.content = '';\n        if (typeof template === 'undefined') {\n            //\n        }\n        else {\n            this.template = template;\n            this.value = value;\n        }\n    }\n    Object.defineProperty(PdfTemplateValuePair.prototype, \"template\", {\n        // Properties\n        /**\n         * Gets or sets the template.\n         * @private\n         */\n        get: function () {\n            return this.pdfTemplate;\n        },\n        set: function (value) {\n            this.pdfTemplate = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfTemplateValuePair.prototype, \"value\", {\n        /**\n         * Gets or sets the value.\n         * @private\n         */\n        get: function () {\n            return this.content;\n        },\n        set: function (value) {\n            this.content = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfTemplateValuePair;\n}());\nexport { PdfTemplateValuePair };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * PdfAutomaticField.ts class for EJ2-PDF\n */\nimport { PdfAutomaticField } from './automatic-field';\nimport { TemporaryDictionary } from './../../collections/object-object-pair/dictionary';\nimport { PdfTemplateValuePair } from './pdf-template-value-pair';\nimport { SizeF, PointF } from './../../drawing/pdf-drawing';\nimport { PdfTemplate } from './../../graphics/figures/pdf-template';\n/**\n * Represents automatic field which has the same value within the `PdfGraphics`.\n */\nvar PdfMultipleValueField = /** @class */ (function (_super) {\n    __extends(PdfMultipleValueField, _super);\n    function PdfMultipleValueField() {\n        var _this = _super.call(this) || this;\n        //  Fields\n        /**\n         * Stores the instance of dictionary values of `graphics and template value pair`.\n         * @private\n         */\n        _this.list = new TemporaryDictionary();\n        return _this;\n    }\n    // Implementation\n    /* tslint:disable */\n    PdfMultipleValueField.prototype.performDraw = function (graphics, location, scalingX, scalingY) {\n        _super.prototype.performDrawHelper.call(this, graphics, location, scalingX, scalingY);\n        var value = this.getValue(graphics);\n        var template = new PdfTemplate(this.getSize());\n        this.list.setValue(graphics, new PdfTemplateValuePair(template, value));\n        var g = template.graphics;\n        var size = this.getSize();\n        template.graphics.drawString(value, this.getFont(), this.pen, this.getBrush(), 0, 0, size.width, size.height, this.stringFormat);\n        var drawLocation = new PointF(location.x + this.location.x, location.y + this.location.y);\n        graphics.drawPdfTemplate(template, drawLocation, new SizeF(template.width * scalingX, template.height * scalingY));\n    };\n    return PdfMultipleValueField;\n}(PdfAutomaticField));\nexport { PdfMultipleValueField };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { PdfBrush } from './../../graphics/brushes/pdf-brush';\nimport { PdfNumberStyle } from './../../pages/enum';\nimport { PdfNumbersConvertor } from './pdf-numbers-convertor';\nimport { PdfMultipleValueField } from './multiple-value-field';\n/**\n * Represents PDF document `page number field`.\n * @public\n */\nvar PdfPageNumberField = /** @class */ (function (_super) {\n    __extends(PdfPageNumberField, _super);\n    function PdfPageNumberField(font, arg2) {\n        var _this = _super.call(this) || this;\n        // Fields\n        /**\n         * Stores the number style of the page number field.\n         * @private\n         */\n        _this.internalNumberStyle = PdfNumberStyle.Numeric;\n        if (typeof arg2 === 'undefined') {\n            _this.font = font;\n        }\n        else if (arg2 instanceof PdfBrush) {\n            _this.font = font;\n            _this.brush = arg2;\n        }\n        else {\n            _this.font = font;\n            _this.bounds = arg2;\n        }\n        return _this;\n    }\n    Object.defineProperty(PdfPageNumberField.prototype, \"numberStyle\", {\n        // Properties\n        /**\n         * Gets and sets the number style of the page number field.\n         * @private\n         */\n        get: function () {\n            return this.internalNumberStyle;\n        },\n        set: function (value) {\n            this.internalNumberStyle = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Return the `string` value of page number field.\n     * @public\n     */\n    PdfPageNumberField.prototype.getValue = function (graphics) {\n        var result = null;\n        var page = this.getPageFromGraphics(graphics);\n        result = this.internalGetValue(page);\n        return result;\n    };\n    /**\n     * Internal method to `get actual value of page number`.\n     * @private\n     */\n    PdfPageNumberField.prototype.internalGetValue = function (page) {\n        var document = page.document;\n        var pageIndex = document.pages.indexOf(page) + 1;\n        return PdfNumbersConvertor.convert(pageIndex, this.numberStyle);\n    };\n    return PdfPageNumberField;\n}(PdfMultipleValueField));\nexport { PdfPageNumberField };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * PdfCompositeField.ts class for EJ2-PDF\n */\nimport { PdfMultipleValueField } from './multiple-value-field';\n/**\n * Represents class which can concatenate multiple automatic fields into single string.\n */\nvar PdfCompositeField = /** @class */ (function (_super) {\n    __extends(PdfCompositeField, _super);\n    // Constructor\n    /**\n     * Initialize a new instance of `PdfCompositeField` class.\n     * @param font Font of the field.\n     * @param brush Color of the field.\n     * @param text Content of the field.\n     * @param list List of the automatic fields in specific order based on the text content.\n     */\n    function PdfCompositeField(font, brush, text) {\n        var list = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            list[_i - 3] = arguments[_i];\n        }\n        var _this = _super.call(this) || this;\n        // Fields\n        /**\n         * Stores the array of automatic fields.\n         * @private\n         */\n        _this.internalAutomaticFields = null;\n        /**\n         * Stores the text value of the field.\n         * @private\n         */\n        _this.internalText = '';\n        _this.font = font;\n        _this.brush = brush;\n        _this.text = text;\n        _this.automaticFields = list;\n        return _this;\n    }\n    Object.defineProperty(PdfCompositeField.prototype, \"text\", {\n        // Properties\n        /**\n         * Gets and sets the content of the field.\n         * @public\n         */\n        get: function () {\n            return this.internalText;\n        },\n        set: function (value) {\n            this.internalText = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfCompositeField.prototype, \"automaticFields\", {\n        /**\n         * Gets and sets the list of the field to drawn.\n         * @public\n         */\n        get: function () {\n            return this.internalAutomaticFields;\n        },\n        set: function (value) {\n            this.internalAutomaticFields = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Implementation\n    /**\n     * Return the actual value generated from the list of automatic fields.\n     * @public\n     */\n    PdfCompositeField.prototype.getValue = function (graphics) {\n        var values = [];\n        var text = this.text.toString();\n        if (typeof this.automaticFields !== 'undefined' && this.automaticFields != null && this.automaticFields.length > 0) {\n            for (var i = 0; i < this.automaticFields.length; i++) {\n                var automaticField = this.automaticFields[i];\n                text = text.replace('{' + i + '}', automaticField.getValue(graphics));\n            }\n        }\n        return text;\n    };\n    return PdfCompositeField;\n}(PdfMultipleValueField));\nexport { PdfCompositeField };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * PdfSingleValueField.ts class for EJ2-PDF\n */\nimport { PdfAutomaticField } from './automatic-field';\nimport { TemporaryDictionary } from './../../collections/object-object-pair/dictionary';\nimport { PdfTemplateValuePair } from './pdf-template-value-pair';\nimport { PointF, SizeF } from './../../drawing/pdf-drawing';\nimport { PdfTemplate } from './../../graphics/figures/pdf-template';\n/**\n * Represents automatic field which has the same value in the whole document.\n */\nvar PdfSingleValueField = /** @class */ (function (_super) {\n    __extends(PdfSingleValueField, _super);\n    // Constructors\n    function PdfSingleValueField() {\n        var _this = _super.call(this) || this;\n        // Fields\n        /* tslint:disable */\n        _this.list = new TemporaryDictionary();\n        /* tslint:enable */\n        _this.painterGraphics = [];\n        return _this;\n    }\n    PdfSingleValueField.prototype.performDraw = function (graphics, location, scalingX, scalingY) {\n        _super.prototype.performDrawHelper.call(this, graphics, location, scalingX, scalingY);\n        var page = this.getPageFromGraphics(graphics);\n        var document = page.document;\n        var textValue = this.getValue(graphics);\n        /* tslint:disable */\n        if (this.list.containsKey(document)) {\n            var pair = this.list.getValue(document);\n            var drawLocation = new PointF(location.x + this.location.x, location.y + this.location.y);\n            graphics.drawPdfTemplate(pair.template, drawLocation, new SizeF(pair.template.width * scalingX, pair.template.height * scalingY));\n            this.painterGraphics.push(graphics);\n        }\n        else {\n            var size = this.getSize();\n            var template = new PdfTemplate(size);\n            this.list.setValue(document, new PdfTemplateValuePair(template, textValue));\n            template.graphics.drawString(textValue, this.getFont(), this.pen, this.getBrush(), 0, 0, size.width, size.height, this.stringFormat);\n            var drawLocation = new PointF(location.x + this.location.x, location.y + this.location.y);\n            graphics.drawPdfTemplate(template, drawLocation, new SizeF(template.width * scalingX, template.height * scalingY));\n            this.painterGraphics.push(graphics);\n        }\n        /* tslint:enable */\n    };\n    return PdfSingleValueField;\n}(PdfAutomaticField));\nexport { PdfSingleValueField };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * PdfPageCountField.ts class for EJ2-PDF\n */\nimport { PdfSingleValueField } from './single-value-field';\nimport { PdfNumberStyle } from './../../pages/enum';\nimport { PdfBrush } from './../../graphics/brushes/pdf-brush';\nimport { PdfNumbersConvertor } from './pdf-numbers-convertor';\n/**\n * Represents total PDF document page count automatic field.\n */\nvar PdfPageCountField = /** @class */ (function (_super) {\n    __extends(PdfPageCountField, _super);\n    function PdfPageCountField(font, arg2) {\n        var _this = _super.call(this) || this;\n        // Fields\n        /**\n         * Stores the number style of the field.\n         * @private\n         */\n        _this.internalNumberStyle = PdfNumberStyle.Numeric;\n        if (typeof arg2 === 'undefined') {\n            _this.font = font;\n        }\n        else if (arg2 instanceof PdfBrush) {\n            _this.font = font;\n            _this.brush = arg2;\n        }\n        else {\n            _this.font = font;\n            _this.bounds = arg2;\n        }\n        return _this;\n    }\n    Object.defineProperty(PdfPageCountField.prototype, \"numberStyle\", {\n        // Properties\n        /**\n         * Gets and sets the number style of the field.\n         * @public\n         */\n        get: function () {\n            return this.internalNumberStyle;\n        },\n        set: function (value) {\n            this.internalNumberStyle = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Implementation\n    /**\n     * Return the actual value of the content to drawn.\n     * @public\n     */\n    PdfPageCountField.prototype.getValue = function (graphics) {\n        var result = null;\n        var page = this.getPageFromGraphics(graphics);\n        var document = page.section.parent.document;\n        var count = document.pages.count;\n        result = PdfNumbersConvertor.convert(count, this.numberStyle);\n        return result;\n    };\n    return PdfPageCountField;\n}(PdfSingleValueField));\nexport { PdfPageCountField };\n","import * as events from '../base/constant';\nimport { PdfDocument, PdfGrid, PdfBorders, PdfPen, PdfPaddings } from '@syncfusion/ej2-pdf-export';\nimport { PdfStandardFont, PdfFontFamily, PdfFontStyle, PdfBitmap } from '@syncfusion/ej2-pdf-export';\nimport { PdfStringFormat, PdfTextAlignment, PdfColor, PdfSolidBrush } from '@syncfusion/ej2-pdf-export';\nimport { PdfVerticalAlignment, RectangleF, PdfPageTemplateElement } from '@syncfusion/ej2-pdf-export';\nimport { PointF, PdfPageNumberField, PdfCompositeField } from '@syncfusion/ej2-pdf-export';\nimport { PdfPageCountField, SizeF, PdfPageSettings, PdfPageOrientation } from '@syncfusion/ej2-pdf-export';\nimport { ExportHelper, ExportValueFormatter } from './export-helper';\nimport { Data } from '../actions/data';\nimport { SummaryModelGenerator, GroupSummaryModelGenerator, CaptionSummaryModelGenerator } from '../services/summary-model-generator';\nimport { compile, getEnumValue, isNullOrUndefined, detach } from '@syncfusion/ej2-base';\nimport { CellType } from '../base/enum';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { getValue } from '@syncfusion/ej2-base';\nimport { getUid, getPrintGridModel } from '../base/util';\n/**\n * `PDF Export` module is used to handle the exportToPDF action.\n * @hidden\n */\nvar PdfExport = /** @class */ (function () {\n    /**\n     * Constructor for the Grid PDF Export module\n     * @hidden\n     */\n    function PdfExport(parent) {\n        this.hideColumnInclude = false;\n        this.currentViewData = false;\n        this.customDataSource = false;\n        this.isGrouping = false;\n        this.parent = parent;\n        this.helper = new ExportHelper(parent);\n        this.gridPool = {};\n    }\n    /**\n     * For internal use only - Get the module name.\n     */\n    PdfExport.prototype.getModuleName = function () {\n        return 'PdfExport';\n    };\n    PdfExport.prototype.init = function (parent) {\n        this.exportValueFormatter = new ExportValueFormatter(parent.locale);\n        this.pdfDocument = undefined;\n        this.hideColumnInclude = false;\n        this.currentViewData = false;\n        this.parent = parent;\n        this.isGrouping = false;\n        this.isExporting = true;\n        parent.id = getUid('main-grid');\n        this.gridPool[parent.id] = false;\n    };\n    PdfExport.prototype.exportWithData = function (parent, pdfDoc, resolve, returnType, pdfExportProperties, isMultipleExport) {\n        var _this = this;\n        this.init(parent);\n        if (!isNullOrUndefined(pdfDoc)) {\n            this.pdfDocument = pdfDoc;\n        }\n        else {\n            this.pdfDocument = new PdfDocument();\n        }\n        this.processExport(parent, returnType, pdfExportProperties, isMultipleExport).then(function () {\n            _this.isExporting = false;\n            parent.trigger(events.pdfExportComplete, _this.isBlob ? { promise: _this.blobPromise } : {});\n            resolve(_this.pdfDocument);\n        });\n    };\n    /**\n     * Used to map the input data\n     * @return {void}\n     */\n    PdfExport.prototype.Map = function (parent, pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {\n        var _this = this;\n        this.data = new Data(this.parent);\n        this.isBlob = isBlob;\n        this.gridPool = {};\n        if (parent.childGrid && !(!isNullOrUndefined(pdfExportProperties) && pdfExportProperties.hierarchyExportMode === 'None')) {\n            parent.expandedRows = getPrintGridModel(parent).expandedRows;\n        }\n        var args = {\n            requestType: 'beforePdfExport', gridObject: parent, cancel: false\n        };\n        var can = 'cancel';\n        parent.trigger(events.beforePdfExport, args);\n        if (args[can] === true) {\n            return new Promise(function (resolve, reject) {\n                return resolve();\n            });\n        }\n        if (!isNullOrUndefined(pdfExportProperties) && !isNullOrUndefined(pdfExportProperties.dataSource)\n            && pdfExportProperties.dataSource instanceof DataManager) {\n            return new Promise(function (resolve, reject) {\n                pdfExportProperties.dataSource.executeQuery(new Query()).then(function (returnType) {\n                    _this.exportWithData(parent, pdfDoc, resolve, returnType, pdfExportProperties, isMultipleExport);\n                });\n            });\n        }\n        else {\n            var allPromise_1 = [];\n            allPromise_1.push(this.data.getData({}, ExportHelper.getQuery(parent, this.data)));\n            allPromise_1.push(this.helper.getColumnData(parent));\n            return new Promise(function (resolve, reject) {\n                Promise.all(allPromise_1).then(function (e) {\n                    _this.init(parent);\n                    if (!isNullOrUndefined(pdfDoc)) {\n                        _this.pdfDocument = pdfDoc;\n                    }\n                    else {\n                        _this.pdfDocument = new PdfDocument();\n                    }\n                    _this.processExport(parent, e[0], pdfExportProperties, isMultipleExport).then(function () {\n                        _this.isExporting = false;\n                        parent.trigger(events.pdfExportComplete, _this.isBlob ? { promise: _this.blobPromise } : {});\n                        resolve(_this.pdfDocument);\n                    });\n                });\n            });\n        }\n    };\n    PdfExport.prototype.processExport = function (gObj, returnType, pdfExportProperties, isMultipleExport) {\n        var _this = this;\n        var section = this.pdfDocument.sections.add();\n        var pdfGrid;\n        this.processSectionExportProperties(section, pdfExportProperties);\n        var pdfPage = section.pages.add();\n        return new Promise(function (resolve, reject) {\n            pdfGrid = _this.processGridExport(gObj, returnType, pdfExportProperties);\n            _this.globalResolve = resolve;\n            _this.gridPool[gObj.id] = true;\n            _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n        }).then(function () {\n            // draw the grid\n            pdfGrid.draw(pdfPage, 0, 0);\n            if (!isMultipleExport) {\n                // save the PDF\n                if (!_this.isBlob) {\n                    if (!isNullOrUndefined(pdfExportProperties) && pdfExportProperties.fileName) {\n                        _this.pdfDocument.save(pdfExportProperties.fileName);\n                    }\n                    else {\n                        _this.pdfDocument.save('Export.pdf');\n                    }\n                }\n                else {\n                    _this.blobPromise = _this.pdfDocument.save();\n                }\n                _this.pdfDocument.destroy();\n                delete gObj.expandedRows;\n            }\n            return _this.pdfDocument;\n        });\n    };\n    PdfExport.prototype.processSectionExportProperties = function (section, pdfExportProperties) {\n        if (!isNullOrUndefined(pdfExportProperties) && (!isNullOrUndefined(pdfExportProperties.pageOrientation)\n            || !isNullOrUndefined(pdfExportProperties.pageSize))) {\n            var pdfPageSettings = new PdfPageSettings();\n            pdfPageSettings.orientation = (pdfExportProperties.pageOrientation === 'Landscape') ?\n                PdfPageOrientation.Landscape : PdfPageOrientation.Portrait;\n            pdfPageSettings.size = this.getPageSize(pdfExportProperties.pageSize);\n            section.setPageSettings(pdfPageSettings);\n        }\n        return section;\n    };\n    PdfExport.prototype.processGridExport = function (gObj, returnType, pdfExportProperties) {\n        if (!isNullOrUndefined(pdfExportProperties)) {\n            this.gridTheme = pdfExportProperties.theme;\n        }\n        var helper = new ExportHelper(gObj);\n        var dataSource = this.processExportProperties(pdfExportProperties, returnType.result);\n        var columns = gObj.enableColumnVirtualization ? gObj.getColumns() : gObj.columns;\n        var isGrouping = false;\n        if (gObj.groupSettings.columns.length) {\n            isGrouping = true;\n        }\n        if (gObj.childGrid && !isNullOrUndefined(pdfExportProperties)) {\n            gObj.hierarchyPrintMode = pdfExportProperties.hierarchyExportMode || 'Expanded';\n        }\n        // create a grid\n        var pdfGrid = new PdfGrid();\n        // get header theme style\n        var headerThemeStyle = this.getHeaderThemeStyle();\n        var border = headerThemeStyle.border;\n        var headerFont = headerThemeStyle.font;\n        var headerBrush = headerThemeStyle.brush;\n        var returnValue = helper.getHeaders(columns, this.hideColumnInclude);\n        // Column collection with respect to the records in the grid\n        var gridColumns = returnValue.columns;\n        // process grid header content\n        pdfGrid = this.processGridHeaders(gObj.groupSettings.columns.length, pdfGrid, returnValue.rows, gridColumns, border, headerFont, headerBrush, gObj);\n        // set alignment, width and type of the values of the column\n        this.setColumnProperties(gridColumns, pdfGrid, helper, gObj);\n        var captionThemeStyle = this.getSummaryCaptionThemeStyle();\n        if (!isNullOrUndefined(dataSource) && dataSource.length) {\n            if (isGrouping) {\n                if (!isNullOrUndefined(captionThemeStyle.border)) {\n                    border = captionThemeStyle.border;\n                }\n                this.processGroupedRecords(pdfGrid, dataSource, gridColumns, gObj, border, 0, captionThemeStyle.font, captionThemeStyle.\n                    brush, captionThemeStyle.backgroundBrush, returnType, pdfExportProperties, helper, 0);\n            }\n            else {\n                this.processRecord(border, gridColumns, gObj, dataSource, pdfGrid, 0, pdfExportProperties, helper, 0);\n            }\n            if (!isNullOrUndefined(returnType.aggregates)) {\n                var summaryModel = new SummaryModelGenerator(gObj);\n                var sRows = void 0;\n                if (this.customDataSource) {\n                    sRows = summaryModel.generateRows(dataSource, returnType.aggregates);\n                }\n                else if (this.currentViewData) {\n                    sRows = summaryModel.generateRows(this.parent.getCurrentViewRecords(), returnType.aggregates);\n                }\n                else if (isGrouping) {\n                    sRows = summaryModel.generateRows(dataSource.records, returnType.aggregates);\n                }\n                else {\n                    sRows = summaryModel.generateRows(returnType.result, returnType.aggregates);\n                }\n                this.processAggregates(sRows, pdfGrid, border, captionThemeStyle.font, captionThemeStyle.brush, captionThemeStyle.backgroundBrush, false);\n            }\n        }\n        else {\n            var row = pdfGrid.rows.addRow();\n            row.style.setBorder(border);\n        }\n        return pdfGrid;\n    };\n    PdfExport.prototype.getSummaryCaptionThemeStyle = function () {\n        if (!isNullOrUndefined(this.gridTheme) && !isNullOrUndefined(this.gridTheme.caption)) {\n            var fontSize = !isNullOrUndefined(this.gridTheme.caption.fontSize) ? this.gridTheme.caption.fontSize : 9.75;\n            var fontFamily = !isNullOrUndefined(this.gridTheme.caption.fontName) ?\n                this.getFontFamily(this.gridTheme.caption.fontName) : PdfFontFamily.Helvetica;\n            var fontStyle = this.getFontStyle(this.gridTheme.caption);\n            var pdfColor = new PdfColor(0, 0, 0);\n            if (!isNullOrUndefined(this.gridTheme.caption.fontColor)) {\n                var penBrushColor = this.hexToRgb(this.gridTheme.caption.fontColor);\n                pdfColor = new PdfColor(penBrushColor.r, penBrushColor.g, penBrushColor.b);\n            }\n            var borderCaption = this.gridTheme.caption.border ? this.getBorderStyle(this.gridTheme.caption.border) : null;\n            var font = new PdfStandardFont(fontFamily, fontSize, fontStyle);\n            if (!isNullOrUndefined(this.gridTheme.caption.font)) {\n                font = this.gridTheme.caption.font;\n            }\n            return { font: font, brush: new PdfSolidBrush(pdfColor), backgroundBrush: new PdfSolidBrush(new PdfColor(246, 246, 246)),\n                border: borderCaption };\n        }\n        else {\n            //Material theme\n            return { font: new PdfStandardFont(PdfFontFamily.Helvetica, 9.75), brush: new PdfSolidBrush(new PdfColor(0, 0, 0)),\n                backgroundBrush: new PdfSolidBrush(new PdfColor(246, 246, 246)) };\n        }\n    };\n    PdfExport.prototype.getHeaderThemeStyle = function () {\n        var border = new PdfBorders();\n        if (!isNullOrUndefined(this.gridTheme) && !isNullOrUndefined(this.gridTheme.header)) {\n            var fontFamily = !isNullOrUndefined(this.gridTheme.header.fontName) ?\n                this.getFontFamily(this.gridTheme.header.fontName) : PdfFontFamily.Helvetica;\n            var fontStyle = this.getFontStyle(this.gridTheme.header);\n            var fontSize = !isNullOrUndefined(this.gridTheme.header.fontSize) ? this.gridTheme.header.fontSize : 10.5;\n            var pdfColor = new PdfColor();\n            if (!isNullOrUndefined(this.gridTheme.header.fontColor)) {\n                var penBrushColor = this.hexToRgb(this.gridTheme.header.fontColor);\n                pdfColor = new PdfColor(penBrushColor.r, penBrushColor.g, penBrushColor.b);\n            }\n            var font = new PdfStandardFont(fontFamily, fontSize, fontStyle);\n            if (!isNullOrUndefined(this.gridTheme.header.font)) {\n                font = this.gridTheme.header.font;\n            }\n            return { border: this.getBorderStyle(this.gridTheme.header.border), font: font, brush: new PdfSolidBrush(pdfColor) };\n        }\n        else {\n            //Material theme\n            border.all = new PdfPen(new PdfColor(234, 234, 234));\n            return { border: border, font: new PdfStandardFont(PdfFontFamily.Helvetica, 10.5),\n                brush: new PdfSolidBrush(new PdfColor(102, 102, 102)) };\n        }\n    };\n    /* tslint:disable-next-line:no-any */\n    PdfExport.prototype.processGroupedRecords = function (pdfGrid, dataSource, gridColumns, gObj, border, level, font, brush, backgroundBrush, returnType, pdfExportProperties, helper, index) {\n        var groupIndex = level;\n        for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {\n            var dataSourceItems = dataSource_1[_i];\n            var row = pdfGrid.rows.addRow();\n            var col = gObj.getColumnByField(dataSourceItems.field);\n            /* tslint:disable-next-line:no-any */\n            var args = {\n                value: dataSourceItems.key,\n                column: col,\n                style: undefined,\n                isForeignKey: col.isForeignColumn(),\n            };\n            /* tslint:disable-next-line:max-line-length */\n            var value = this.parent.getColumnByField(dataSourceItems.field).headerText + ': ' + this.exportValueFormatter.formatCellValue(args) + ' - ' + dataSourceItems.count + (dataSource.count > 1 ? ' items' : ' item');\n            row.cells.getCell(groupIndex).value = value;\n            row.cells.getCell(groupIndex + 1).style.stringFormat = new PdfStringFormat(PdfTextAlignment.Left);\n            row.style.setBorder(border);\n            row.style.setFont(font);\n            row.style.setTextBrush(brush);\n            row.style.setBackgroundBrush(backgroundBrush);\n            var sRows = void 0;\n            var captionSummaryModel = new CaptionSummaryModelGenerator(gObj);\n            if (!isNullOrUndefined(dataSourceItems.items.records)) {\n                sRows = captionSummaryModel.generateRows(dataSourceItems.items.records, dataSourceItems);\n            }\n            else {\n                sRows = captionSummaryModel.generateRows(dataSourceItems.items, dataSourceItems);\n            }\n            if (!isNullOrUndefined(sRows) && sRows.length === 0) {\n                row.cells.getCell(groupIndex + 1).columnSpan = pdfGrid.columns.count - (groupIndex + 1);\n            }\n            if (!isNullOrUndefined(dataSource.childLevels) && dataSource.childLevels > 0) {\n                this.processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, true, row, groupIndex);\n                this.processGroupedRecords(pdfGrid, dataSourceItems.items, gridColumns, gObj, border, (groupIndex + 1), font, brush, backgroundBrush, returnType, pdfExportProperties, helper, index);\n                var groupSummaryModel = new GroupSummaryModelGenerator(gObj);\n                sRows = groupSummaryModel.generateRows(dataSourceItems.items.records, dataSourceItems);\n                this.processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, false);\n            }\n            else {\n                this.processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, true, row, groupIndex);\n                index = this.processRecord(border, gridColumns, gObj, dataSourceItems.items, pdfGrid, (groupIndex + 1), pdfExportProperties, helper, index);\n                var groupSummaryModel = new GroupSummaryModelGenerator(gObj);\n                sRows = groupSummaryModel.generateRows(dataSourceItems.items, dataSourceItems);\n                this.processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, false);\n            }\n        }\n    };\n    PdfExport.prototype.processGridHeaders = function (childLevels, pdfGrid, rows, gridColumn, border, headerFont, headerBrush, grid) {\n        var columnCount = gridColumn.length + childLevels;\n        // add columns\n        pdfGrid.columns.add(columnCount);\n        // add header\n        pdfGrid.headers.add(rows.length);\n        // set cell values of each rows in the header\n        for (var i = 0; i < rows.length; i++) {\n            var gridHeader = pdfGrid.headers.getHeader(i);\n            gridHeader.style.setBorder(border);\n            gridHeader.style.setFont(headerFont);\n            gridHeader.style.setTextBrush(headerBrush);\n            var colSpan = 0;\n            var cellLength = rows[i].cells.length;\n            for (var j = 0; j < cellLength; j++) {\n                var cell = rows[i].cells[j];\n                var pdfCell = gridHeader.cells.getCell(j + colSpan);\n                switch (cell.cellType) {\n                    case CellType.HeaderIndent:\n                    case CellType.DetailHeader:\n                        pdfCell.value = '';\n                        pdfCell.width = 20;\n                        break;\n                    case CellType.Header:\n                    case CellType.StackedHeader:\n                        if (pdfCell.value !== null) {\n                            if (!isNullOrUndefined(cell.column.headerTextAlign)) {\n                                pdfCell.style.stringFormat = this.getHorizontalAlignment(cell.column.headerTextAlign);\n                            }\n                            if (!isNullOrUndefined(cell.rowSpan)) {\n                                pdfCell.rowSpan = cell.rowSpan;\n                                pdfCell.style.stringFormat = this.getVerticalAlignment('Bottom', pdfCell.style.stringFormat, cell.column.textAlign);\n                                for (var k = 1; k < rows[i].cells[j].rowSpan; k++) {\n                                    pdfGrid.headers.getHeader(i + k).cells.getCell(j).value = null;\n                                }\n                            }\n                            if (!isNullOrUndefined(cell.colSpan)) {\n                                pdfCell.columnSpan = cell.colSpan;\n                                colSpan += cell.colSpan - 1;\n                            }\n                            pdfCell.value = cell.column.headerText;\n                            var args = {\n                                cell: pdfCell,\n                                gridCell: cell,\n                                style: pdfCell.style\n                            };\n                            this.parent.trigger(events.pdfHeaderQueryCellInfo, args);\n                        }\n                        else {\n                            colSpan += pdfCell.columnSpan;\n                            j = j - 1;\n                        }\n                        break;\n                }\n            }\n        }\n        if (pdfGrid.columns.count >= 6) {\n            pdfGrid.style.allowHorizontalOverflow = true;\n        }\n        return pdfGrid;\n    };\n    PdfExport.prototype.processExportProperties = function (pdfExportProperties, dataSource) {\n        if (!isNullOrUndefined(pdfExportProperties)) {\n            if (!isNullOrUndefined(pdfExportProperties.theme)) {\n                this.gridTheme = pdfExportProperties.theme;\n            }\n            var clientSize = this.pdfDocument.pageSettings.size;\n            if (!isNullOrUndefined(pdfExportProperties.header)) {\n                /* tslint:disable-next-line:no-any */\n                var header = pdfExportProperties.header;\n                var position = new PointF(0, header.fromTop);\n                var size = new SizeF((clientSize.width - 80), (header.height * 0.75));\n                var bounds = new RectangleF(position, size);\n                this.pdfDocument.template.top = this.drawPageTemplate(new PdfPageTemplateElement(bounds), header);\n            }\n            if (!isNullOrUndefined(pdfExportProperties.footer)) {\n                /* tslint:disable-next-line:no-any */\n                var footer = pdfExportProperties.footer;\n                var position = new PointF(0, ((clientSize.width - 80) - (footer.fromBottom * 0.75)));\n                var size = new SizeF((clientSize.width - 80), (footer.height * 0.75));\n                var bounds = new RectangleF(position, size);\n                this.pdfDocument.template.bottom = this.drawPageTemplate(new PdfPageTemplateElement(bounds), footer);\n            }\n            if (!isNullOrUndefined(pdfExportProperties.includeHiddenColumn) && !this.isGrouping) {\n                this.hideColumnInclude = pdfExportProperties.includeHiddenColumn;\n            }\n            if (!isNullOrUndefined(pdfExportProperties.dataSource)) {\n                if (!(pdfExportProperties.dataSource instanceof DataManager)) {\n                    dataSource = pdfExportProperties.dataSource;\n                }\n                this.customDataSource = true;\n                this.currentViewData = false;\n            }\n            else if (!isNullOrUndefined(pdfExportProperties.exportType)) {\n                if (pdfExportProperties.exportType === 'CurrentPage') {\n                    dataSource = this.parent.currentViewData;\n                    this.currentViewData = true;\n                    this.customDataSource = false;\n                }\n                else {\n                    this.currentViewData = false;\n                    this.customDataSource = false;\n                }\n            }\n            else {\n                this.currentViewData = false;\n                this.customDataSource = false;\n            }\n        }\n        else {\n            this.currentViewData = false;\n            this.customDataSource = false;\n        }\n        return dataSource;\n    };\n    PdfExport.prototype.drawPageTemplate = function (template, element) {\n        for (var _i = 0, _a = element.contents; _i < _a.length; _i++) {\n            var content = _a[_i];\n            this.processContentValidation(content);\n            switch (content.type) {\n                case 'Text':\n                    /* tslint:disable-next-line:max-line-length */\n                    if (content.value === '' || content.value === undefined || content.value === null || typeof content.value !== 'string') {\n                        throw new Error('please enter the valid input value in text content...');\n                    }\n                    this.drawText(template, content);\n                    break;\n                case 'PageNumber':\n                    this.drawPageNumber(template, content);\n                    break;\n                case 'Image':\n                    if (content.src === undefined || content.src === null || content.src === '') {\n                        throw new Error('please enter the valid base64 string in image content...');\n                    }\n                    this.drawImage(template, content);\n                    break;\n                case 'Line':\n                    this.drawLine(template, content);\n                    break;\n                default:\n                    throw new Error('Please set valid content type...');\n            }\n        }\n        return template;\n    };\n    PdfExport.prototype.processContentValidation = function (content) {\n        if (content.type === undefined || content.type === null) {\n            throw new Error('please set valid content type...');\n        }\n        else {\n            if (content.type === 'Line') {\n                if (content.points === undefined || content.points === null) {\n                    throw new Error('please enter valid points in ' + content.type + ' content...');\n                }\n                else {\n                    if (content.points.x1 === undefined || content.points.x1 === null || typeof content.points.x1 !== 'number') {\n                        throw new Error('please enter valid x1 co-ordinate in ' + content.type + ' points...');\n                    }\n                    if (content.points.y1 === undefined || content.points.y1 === null || typeof content.points.y1 !== 'number') {\n                        throw new Error('please enter valid y1 co-ordinate in ' + content.type + ' points...');\n                    }\n                    if (content.points.x2 === undefined || content.points.x2 === null || typeof content.points.x2 !== 'number') {\n                        throw new Error('please enter valid x2 co-ordinate in ' + content.type + ' points...');\n                    }\n                    if (content.points.y2 === undefined || content.points.y2 === null || typeof content.points.y2 !== 'number') {\n                        throw new Error('please enter valid y2 co-ordinate in ' + content.type + ' points...');\n                    }\n                }\n            }\n            else {\n                if (content.position === undefined || content.position === null) {\n                    throw new Error('please enter valid position in ' + content.type + ' content...');\n                }\n                else {\n                    if (content.position.x === undefined || content.position.x === null || typeof content.position.x !== 'number') {\n                        throw new Error('please enter valid x co-ordinate in ' + content.type + ' position...');\n                    }\n                    if (content.position.y === undefined || content.position.y === null || typeof content.position.y !== 'number') {\n                        throw new Error('please enter valid y co-ordinate in ' + content.type + ' position...');\n                    }\n                }\n            }\n        }\n    };\n    /* tslint:disable-next-line:no-any */\n    PdfExport.prototype.drawText = function (pageTemplate, content) {\n        var font = this.getFont(content);\n        var brush = this.getBrushFromContent(content);\n        var pen = null;\n        if (!isNullOrUndefined(content.style.textPenColor)) {\n            var penColor = this.hexToRgb(content.style.textPenColor);\n            pen = new PdfPen(new PdfColor(penColor.r, penColor.g, penColor.b));\n        }\n        if (brush == null && pen == null) {\n            brush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n        }\n        var value = content.value.toString();\n        var x = content.position.x * 0.75;\n        var y = content.position.y * 0.75;\n        var format;\n        var result = this.setContentFormat(content, format);\n        if (result !== null && !isNullOrUndefined(result.format) && !isNullOrUndefined(result.size)) {\n            pageTemplate.graphics.drawString(value, font, pen, brush, x, y, result.size.width, result.size.height, result.format);\n        }\n        else {\n            pageTemplate.graphics.drawString(value, font, pen, brush, x, y, format);\n        }\n    };\n    /* tslint:disable-next-line:no-any */\n    PdfExport.prototype.drawPageNumber = function (documentHeader, content) {\n        var font = this.getFont(content);\n        var brush = null;\n        if (!isNullOrUndefined(content.style.textBrushColor)) {\n            /* tslint:disable-next-line:max-line-length */\n            var brushColor = this.hexToRgb(content.style.textBrushColor);\n            brush = new PdfSolidBrush(new PdfColor(brushColor.r, brushColor.g, brushColor.b));\n        }\n        else {\n            brush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n        }\n        var pageNumber = new PdfPageNumberField(font, brush);\n        pageNumber.numberStyle = this.getPageNumberStyle(content.pageNumberType);\n        var compositeField;\n        var format;\n        if (!isNullOrUndefined(content.format)) {\n            if (content.format.indexOf('$total') !== -1 && content.format.indexOf('$current') !== -1) {\n                var pageCount = new PdfPageCountField(font);\n                if (content.format.indexOf('$total') > content.format.indexOf('$current')) {\n                    format = content.format.replace('$current', '0');\n                    format = format.replace('$total', '1');\n                }\n                else {\n                    format = content.format.replace('$current', '1');\n                    format = format.replace('$total', '0');\n                }\n                compositeField = new PdfCompositeField(font, brush, format, pageNumber, pageCount);\n            }\n            else if (content.format.indexOf('$current') !== -1 && content.format.indexOf('$total') === -1) {\n                format = content.format.replace('$current', '0');\n                compositeField = new PdfCompositeField(font, brush, format, pageNumber);\n            }\n            else {\n                var pageCount = new PdfPageCountField(font);\n                format = content.format.replace('$total', '0');\n                compositeField = new PdfCompositeField(font, brush, format, pageCount);\n            }\n        }\n        else {\n            format = '{0}';\n            compositeField = new PdfCompositeField(font, brush, format, pageNumber);\n        }\n        var x = content.position.x * 0.75;\n        var y = content.position.y * 0.75;\n        var result = this.setContentFormat(content, compositeField.stringFormat);\n        if (result !== null && !isNullOrUndefined(result.format) && !isNullOrUndefined(result.size)) {\n            compositeField.stringFormat = result.format;\n            compositeField.bounds = new RectangleF(x, y, result.size.width, result.size.height);\n        }\n        compositeField.draw(documentHeader.graphics, x, y);\n    };\n    /* tslint:disable-next-line:no-any */\n    PdfExport.prototype.drawImage = function (documentHeader, content) {\n        var x = content.position.x * 0.75;\n        var y = content.position.y * 0.75;\n        var width = (!isNullOrUndefined(content.size)) ? (content.size.width * 0.75) : undefined;\n        var height = (!isNullOrUndefined(content.size)) ? (content.size.height * 0.75) : undefined;\n        var image = new PdfBitmap(content.src);\n        if (!isNullOrUndefined(width)) {\n            documentHeader.graphics.drawImage(image, x, y, width, height);\n        }\n        else {\n            documentHeader.graphics.drawImage(image, x, y);\n        }\n    };\n    /* tslint:disable-next-line:no-any */\n    PdfExport.prototype.drawLine = function (documentHeader, content) {\n        var x1 = content.points.x1 * 0.75;\n        var y1 = content.points.y1 * 0.75;\n        var x2 = content.points.x2 * 0.75;\n        var y2 = content.points.y2 * 0.75;\n        var pen = this.getPenFromContent(content);\n        if (!isNullOrUndefined(content.style) && content.style !== null) {\n            if (!isNullOrUndefined(content.style.penSize) && content.style.penSize !== null && typeof content.style.penSize === 'number') {\n                pen.width = content.style.penSize * 0.75;\n            }\n            pen.dashStyle = this.getDashStyle(content.style.dashStyle);\n        }\n        documentHeader.graphics.drawLine(pen, x1, y1, x2, y2);\n    };\n    /* tslint:disable-next-line:no-any */ /* tslint:disable-next-line:max-line-length */\n    PdfExport.prototype.processAggregates = function (sRows, pdfGrid, border, font, brush, backgroundBrush, isCaption, captionRow, groupIndex) {\n        for (var _i = 0, sRows_1 = sRows; _i < sRows_1.length; _i++) {\n            var row = sRows_1[_i];\n            var startIndex = 0;\n            var leastCaptionSummaryIndex = -1;\n            var index = 0;\n            var isEmpty = true;\n            /* tslint:disable-next-line:no-any */\n            var value = [];\n            for (var i = 0; i < pdfGrid.columns.count; i++) {\n                var cell = row.cells[index];\n                if (cell.cellType === CellType.DetailFooterIntent) {\n                    i--;\n                    index++;\n                    continue;\n                }\n                if (!this.hideColumnInclude) {\n                    while (cell.visible === undefined) {\n                        if (cell.cellType === CellType.DetailFooterIntent) {\n                            continue;\n                        }\n                        if (!isNullOrUndefined(captionRow)) {\n                            if (!isNullOrUndefined(captionRow.cells.getCell(i).value)) {\n                                value.push('');\n                                value.push(captionRow.cells.getCell(i).value);\n                                isEmpty = false;\n                                i += 1;\n                            }\n                            else {\n                                value.push('');\n                            }\n                        }\n                        else {\n                            value.push('');\n                        }\n                        i += 1;\n                        index = index + 1;\n                        cell = row.cells[index];\n                    }\n                    while (!isNullOrUndefined(cell.visible) && !cell.visible) {\n                        index = index + 1;\n                        cell = row.cells[index];\n                    }\n                }\n                if (cell.isDataCell) {\n                    var templateFn = {};\n                    /* tslint:disable-next-line:max-line-length */\n                    if (!isNullOrUndefined(cell.column.footerTemplate) || !isNullOrUndefined(cell.column.groupCaptionTemplate) || !isNullOrUndefined(cell.column.groupFooterTemplate)) {\n                        /* tslint:disable-next-line:no-any */\n                        var result = this.getTemplateFunction(templateFn, i, leastCaptionSummaryIndex, cell.column);\n                        templateFn = result.templateFunction;\n                        leastCaptionSummaryIndex = result.leastCaptionSummaryIndex;\n                        /* tslint:disable-next-line:max-line-length */\n                        var txt = (templateFn[getEnumValue(CellType, cell.cellType)](row.data[cell.column.field ? cell.column.field : cell.column.columnName]));\n                        value.push(txt[0].textContent);\n                        isEmpty = false;\n                    }\n                    else {\n                        /* tslint:disable-next-line:no-any */\n                        var result = this.getSummaryWithoutTemplate(row.data[cell.column.field]);\n                        if (!isNullOrUndefined(result)) {\n                            value.push(result);\n                        }\n                    }\n                }\n                else {\n                    value.push('');\n                }\n                if (isEmpty && value[i] !== '' && !isNullOrUndefined(value[i]) && value[i] !== null) {\n                    isEmpty = false;\n                }\n                index += 1;\n            }\n            if (!isEmpty) {\n                if (!isCaption) {\n                    var gridRow = pdfGrid.rows.addRow();\n                    gridRow.style.setBorder(border);\n                    gridRow.style.setFont(font);\n                    gridRow.style.setTextBrush(brush);\n                    gridRow.style.setBackgroundBrush(backgroundBrush);\n                    for (var i = 0; i < pdfGrid.columns.count; i++) {\n                        gridRow.cells.getCell(i).value = value[i].toString();\n                    }\n                }\n                else {\n                    for (var i = 0; i < pdfGrid.columns.count; i++) {\n                        captionRow.cells.getCell(i).value = value[i].toString();\n                        if (i === (groupIndex + 1) && leastCaptionSummaryIndex !== -1) {\n                            captionRow.cells.getCell(i).columnSpan = leastCaptionSummaryIndex - (groupIndex + 1);\n                        }\n                        else if (i === (groupIndex + 1) && leastCaptionSummaryIndex === -1) {\n                            captionRow.cells.getCell(i).columnSpan = pdfGrid.columns.count - (groupIndex + 1);\n                        }\n                    }\n                }\n            }\n        }\n    };\n    /* tslint:disable-next-line:no-any */\n    PdfExport.prototype.getTemplateFunction = function (templateFn, index, leastCaptionSummaryIndex, column) {\n        if (!isNullOrUndefined(column.footerTemplate)) {\n            templateFn[getEnumValue(CellType, CellType.Summary)] = compile(column.footerTemplate);\n        }\n        else if (!isNullOrUndefined(column.groupCaptionTemplate)) {\n            if (leastCaptionSummaryIndex === -1) {\n                leastCaptionSummaryIndex = index;\n            }\n            templateFn[getEnumValue(CellType, CellType.CaptionSummary)] = compile(column.groupCaptionTemplate);\n        }\n        else {\n            templateFn[getEnumValue(CellType, CellType.GroupSummary)] = compile(column.groupFooterTemplate);\n        }\n        return { templateFunction: templateFn, leastCaptionSummaryIndex: leastCaptionSummaryIndex };\n    };\n    /* tslint:disable-next-line:no-any */\n    PdfExport.prototype.getSummaryWithoutTemplate = function (data) {\n        if (!isNullOrUndefined(data.Sum)) {\n            return data.Sum;\n        }\n        else if (!isNullOrUndefined(data.Average)) {\n            return data.Average;\n        }\n        else if (!isNullOrUndefined(data.Max)) {\n            return data.Max;\n        }\n        else if (!isNullOrUndefined(data.Min)) {\n            return data.Min;\n        }\n        else if (!isNullOrUndefined(data.Count)) {\n            return data.Count;\n        }\n        else if (!isNullOrUndefined(data.TrueCount)) {\n            return data.TrueCount;\n        }\n        else if (!isNullOrUndefined(data.FalseCount)) {\n            return data.FalseCount;\n        }\n        else if (!isNullOrUndefined(data.Custom)) {\n            return data.Custom;\n        }\n    };\n    /**\n     * Set alignment, width and type of the values of the column\n     */\n    PdfExport.prototype.setColumnProperties = function (gridColumns, pdfGrid, helper, gObj) {\n        var startIndex = gObj.groupSettings.columns.length;\n        for (var i = 0; i < startIndex; i++) {\n            pdfGrid.columns.getColumn(i).width = 20;\n        }\n        for (var i = 0; i < gridColumns.length; i++) {\n            if (!isNullOrUndefined(gridColumns[i].textAlign)) {\n                pdfGrid.columns.getColumn(i + startIndex).format = this.getHorizontalAlignment(gridColumns[i].textAlign);\n            }\n            // Need to add width consideration with % value\n            if (pdfGrid.style.allowHorizontalOverflow && !isNullOrUndefined(gridColumns[i].width)) {\n                pdfGrid.columns.getColumn(i + startIndex).width = typeof gridColumns[i].width === 'number' ?\n                    gridColumns[i].width * 0.75 : helper.getConvertedWidth(gridColumns[i].width) * 0.75;\n            }\n        }\n    };\n    /**\n     * set default style properties of each rows in exporting grid\n     * @private\n     */\n    PdfExport.prototype.setRecordThemeStyle = function (row, border) {\n        if (!isNullOrUndefined(this.gridTheme) && !isNullOrUndefined(this.gridTheme.record)) {\n            var fontFamily = !isNullOrUndefined(this.gridTheme.record.fontName) ?\n                this.getFontFamily(this.gridTheme.record.fontName) : PdfFontFamily.Helvetica;\n            var fontSize = !isNullOrUndefined(this.gridTheme.record.fontSize) ? this.gridTheme.record.fontSize : 9.75;\n            var fontStyle = this.getFontStyle(this.gridTheme.record);\n            var font = new PdfStandardFont(fontFamily, fontSize, fontStyle);\n            if (!isNullOrUndefined(this.gridTheme.record.font)) {\n                font = this.gridTheme.record.font;\n            }\n            row.style.setFont(font);\n            var pdfColor = new PdfColor();\n            if (!isNullOrUndefined(this.gridTheme.record.fontColor)) {\n                var penBrushColor = this.hexToRgb(this.gridTheme.record.fontColor);\n                pdfColor = new PdfColor(penBrushColor.r, penBrushColor.g, penBrushColor.b);\n            }\n            row.style.setTextBrush(new PdfSolidBrush(pdfColor));\n        }\n        else {\n            row.style.setTextBrush(new PdfSolidBrush(new PdfColor(0, 0, 0)));\n        }\n        var borderRecord = this.gridTheme && this.gridTheme.record &&\n            this.gridTheme.record.border ? this.getBorderStyle(this.gridTheme.record.border) : border;\n        row.style.setBorder(borderRecord);\n        return row;\n    };\n    /**\n     * generate the formatted cell values\n     * @private\n     */\n    PdfExport.prototype.processRecord = function (border, columns, gObj, dataSource, pdfGrid, startIndex, pdfExportProperties, helper, rowIndex) {\n        var rows = helper.getGridRowModel(columns, dataSource, gObj, rowIndex);\n        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n            var row = rows_1[_i];\n            rowIndex++;\n            // create a new row and set default style properties\n            var gridRow = this.setRecordThemeStyle(pdfGrid.rows.addRow(), border);\n            var cellLength = row.cells.length;\n            for (var j = 0; j < cellLength; j++) {\n                var gridCell = row.cells[j];\n                if (gridCell.cellType !== CellType.Data) {\n                    continue;\n                }\n                var column = gridCell.column;\n                var field = column.field;\n                var cellValue = !isNullOrUndefined(field) ? getValue(field, row.data) : '';\n                var value = !isNullOrUndefined(cellValue) ? cellValue : '';\n                var foreignKeyData = void 0;\n                if (column.isForeignColumn && column.isForeignColumn()) {\n                    foreignKeyData = helper.getFData(value, column);\n                    value = getValue(column.foreignKeyValue, foreignKeyData);\n                }\n                var data = row.data;\n                var cell = gridRow.cells.getCell(j);\n                var args = {\n                    data: data,\n                    value: value,\n                    column: column,\n                    style: undefined,\n                    colSpan: 1,\n                    cell: cell\n                };\n                args.value = this.exportValueFormatter.formatCellValue(args);\n                this.parent.trigger(events.pdfQueryCellInfo, args);\n                cell.value = args.value;\n                if (!isNullOrUndefined(args.style)) {\n                    this.processCellStyle(cell, args);\n                }\n                if (args.colSpan > 1) {\n                    if ((j + 1 + args.colSpan) > gridRow.cells.count) {\n                        args.colSpan = gridRow.cells.count - (j + 1);\n                    }\n                    cell.columnSpan = args.colSpan;\n                    for (var i = 1; i < cell.columnSpan; i++) {\n                        var spanCell = gridRow.cells.getCell(j + i);\n                        spanCell.value = '';\n                    }\n                    j += (args.colSpan - 1);\n                }\n            }\n            if (row.isExpand) {\n                var gridRow_1 = this.setRecordThemeStyle(pdfGrid.rows.addRow(), border);\n                var cell = gridRow_1.cells.getCell(startIndex);\n                cell.columnSpan = gridRow_1.cells.count - (startIndex);\n                cell.style.cellPadding = new PdfPaddings(10, 10, 10, 10);\n                gObj.isPrinting = true;\n                var exportType = (!isNullOrUndefined(pdfExportProperties) && pdfExportProperties.exportType) ?\n                    pdfExportProperties.exportType : 'AllPages';\n                var returnValue = this.helper.createChildGrid(gObj, row, exportType, this.gridPool);\n                var childGridObj = returnValue.childGrid;\n                var element = returnValue.element;\n                childGridObj.actionFailure =\n                    helper.failureHandler(this.gridPool, childGridObj, this.globalResolve);\n                var args = { childGrid: childGridObj, row: row, cell: cell, exportProperties: pdfExportProperties };\n                this.parent.trigger(events.exportDetailDataBound, args);\n                childGridObj.beforeDataBound = this.childGridCell(cell, childGridObj, pdfExportProperties);\n                childGridObj.appendTo(element);\n            }\n            this.parent.notify(events.exportRowDataBound, { type: 'pdf', rowObj: row });\n        }\n        return rowIndex;\n    };\n    PdfExport.prototype.childGridCell = function (cell, childGridObj, pdfExportProperties) {\n        var _this = this;\n        return function (result) {\n            childGridObj.beforeDataBound = null;\n            result.cancel = true;\n            cell.value = _this.processGridExport(childGridObj, result, pdfExportProperties);\n            childGridObj.destroy();\n            detach(childGridObj.element);\n            _this.gridPool[childGridObj.id] = true;\n            _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n            return cell;\n        };\n    };\n    PdfExport.prototype.processCellStyle = function (cell, args) {\n        if (!isNullOrUndefined(args.style.backgroundColor)) {\n            var backColor = this.hexToRgb(args.style.backgroundColor);\n            cell.style.backgroundBrush = new PdfSolidBrush(new PdfColor(backColor.r, backColor.g, backColor.b));\n        }\n        if (!isNullOrUndefined(args.style.textAlignment)) {\n            cell.style.stringFormat = this.getHorizontalAlignment(args.style.textAlignment);\n        }\n        if (!isNullOrUndefined(args.style.cellPadding)) {\n            cell.style.cellPadding = args.style.cellPadding;\n        }\n        if (!isNullOrUndefined(args.style.verticalAlignment)) {\n            cell.style.stringFormat = this.getVerticalAlignment(args.style.verticalAlignment, cell.style.stringFormat);\n        }\n        if (!isNullOrUndefined(args.style.textBrushColor)) {\n            var textBrushColor = this.hexToRgb(args.style.textBrushColor);\n            cell.style.textBrush = new PdfSolidBrush(new PdfColor(textBrushColor.r, textBrushColor.g, textBrushColor.b));\n        }\n        if (!isNullOrUndefined(args.style.textPenColor)) {\n            var textPenColor = this.hexToRgb(args.style.textPenColor);\n            cell.style.textPen = new PdfPen(new PdfColor(textPenColor.r, textPenColor.g, textPenColor.b));\n        }\n        if (!isNullOrUndefined(args.style.fontFamily) || !isNullOrUndefined(args.style.fontSize) || !isNullOrUndefined(args.style.bold) ||\n            !isNullOrUndefined(args.style.italic) || !isNullOrUndefined(args.style.underline) || !isNullOrUndefined(args.style.strikeout)) {\n            cell.style.font = this.getFont(args);\n        }\n        if (!isNullOrUndefined(args.style.border)) {\n            var border = new PdfBorders();\n            var borderWidth = args.style.border.width;\n            // set border width\n            var width = (!isNullOrUndefined(borderWidth) && typeof borderWidth === 'number') ? (borderWidth * 0.75) : (undefined);\n            // set border color\n            var color = new PdfColor(196, 196, 196);\n            if (!isNullOrUndefined(args.style.border.color)) {\n                var borderColor = this.hexToRgb(args.style.border.color);\n                color = new PdfColor(borderColor.r, borderColor.g, borderColor.b);\n            }\n            var pen = new PdfPen(color, width);\n            // set border dashStyle 'Solid <default>, Dash, Dot, DashDot, DashDotDot'\n            if (!isNullOrUndefined(args.style.border.dashStyle)) {\n                pen.dashStyle = this.getDashStyle(args.style.border.dashStyle);\n            }\n            border.all = pen;\n            cell.style.borders = border;\n        }\n        if (!isNullOrUndefined(args.style.paragraphIndent)) {\n            cell.style.stringFormat = new PdfStringFormat();\n            cell.style.stringFormat.paragraphIndent = args.style.paragraphIndent;\n        }\n    };\n    /**\n     * set text alignment of each columns in exporting grid\n     * @private\n     */\n    PdfExport.prototype.getHorizontalAlignment = function (textAlign, format) {\n        if (format === undefined) {\n            format = new PdfStringFormat();\n        }\n        switch (textAlign) {\n            case 'Right':\n                format.alignment = PdfTextAlignment.Right;\n                break;\n            case 'Center':\n                format.alignment = PdfTextAlignment.Center;\n                break;\n            case 'Justify':\n                format.alignment = PdfTextAlignment.Justify;\n                break;\n            case 'Left':\n                format.alignment = PdfTextAlignment.Left;\n                break;\n        }\n        return format;\n    };\n    /**\n     * set vertical alignment of each columns in exporting grid\n     * @private\n     */\n    PdfExport.prototype.getVerticalAlignment = function (verticalAlign, format, textAlign) {\n        if (format === undefined) {\n            format = new PdfStringFormat();\n            format = this.getHorizontalAlignment(textAlign, format);\n        }\n        switch (verticalAlign) {\n            case 'Bottom':\n                format.lineAlignment = PdfVerticalAlignment.Bottom;\n                break;\n            case 'Middle':\n                format.lineAlignment = PdfVerticalAlignment.Middle;\n                break;\n            case 'Top':\n                format.lineAlignment = PdfVerticalAlignment.Top;\n                break;\n        }\n        return format;\n    };\n    PdfExport.prototype.getFontFamily = function (fontFamily) {\n        switch (fontFamily) {\n            case 'TimesRoman':\n                return 2;\n            case 'Courier':\n                return 1;\n            case 'Symbol':\n                return 3;\n            case 'ZapfDingbats':\n                return 4;\n            default:\n                return 0;\n        }\n    };\n    /* tslint:disable-next-line:no-any */\n    PdfExport.prototype.getFont = function (content) {\n        if (content.style.font) {\n            return content.style.font;\n        }\n        var fontSize = (!isNullOrUndefined(content.style.fontSize)) ? (content.style.fontSize * 0.75) : 9.75;\n        var fontFamily = (!isNullOrUndefined(content.style.fontFamily)) ?\n            (this.getFontFamily(content.style.fontFamily)) : PdfFontFamily.TimesRoman;\n        var fontStyle = PdfFontStyle.Regular;\n        if (!isNullOrUndefined(content.style.bold) && content.style.bold) {\n            fontStyle |= PdfFontStyle.Bold;\n        }\n        if (!isNullOrUndefined(content.style.italic) && content.style.italic) {\n            fontStyle |= PdfFontStyle.Italic;\n        }\n        if (!isNullOrUndefined(content.style.underline) && content.style.underline) {\n            fontStyle |= PdfFontStyle.Underline;\n        }\n        if (!isNullOrUndefined(content.style.strikeout) && content.style.strikeout) {\n            fontStyle |= PdfFontStyle.Strikeout;\n        }\n        return new PdfStandardFont(fontFamily, fontSize, fontStyle);\n    };\n    PdfExport.prototype.getPageNumberStyle = function (pageNumberType) {\n        switch (pageNumberType) {\n            case 'LowerLatin':\n                return 2;\n            case 'LowerRoman':\n                return 3;\n            case 'UpperLatin':\n                return 4;\n            case 'UpperRoman':\n                return 5;\n            default:\n                return 1;\n        }\n    };\n    PdfExport.prototype.setContentFormat = function (content, format) {\n        if (!isNullOrUndefined(content.size)) {\n            var width = content.size.width * 0.75;\n            var height = content.size.height * 0.75;\n            format = new PdfStringFormat(PdfTextAlignment.Left, PdfVerticalAlignment.Middle);\n            if (!isNullOrUndefined(content.style.hAlign)) {\n                switch (content.style.hAlign) {\n                    case 'Right':\n                        format.alignment = PdfTextAlignment.Right;\n                        break;\n                    case 'Center':\n                        format.alignment = PdfTextAlignment.Center;\n                        break;\n                    case 'Justify':\n                        format.alignment = PdfTextAlignment.Justify;\n                        break;\n                    default:\n                        format.alignment = PdfTextAlignment.Left;\n                }\n            }\n            if (!isNullOrUndefined(content.style.vAlign)) {\n                format = this.getVerticalAlignment(content.style.vAlign, format);\n            }\n            return { format: format, size: new SizeF(width, height) };\n        }\n        return null;\n    };\n    PdfExport.prototype.getPageSize = function (pageSize) {\n        switch (pageSize) {\n            case 'Letter':\n                return new SizeF(612, 792);\n            case 'Note':\n                return new SizeF(540, 720);\n            case 'Legal':\n                return new SizeF(612, 1008);\n            case 'A0':\n                return new SizeF(2380, 3368);\n            case 'A1':\n                return new SizeF(1684, 2380);\n            case 'A2':\n                return new SizeF(1190, 1684);\n            case 'A3':\n                return new SizeF(842, 1190);\n            case 'A5':\n                return new SizeF(421, 595);\n            case 'A6':\n                return new SizeF(297, 421);\n            case 'A7':\n                return new SizeF(210, 297);\n            case 'A8':\n                return new SizeF(148, 210);\n            case 'A9':\n                return new SizeF(105, 148);\n            // case 'A10':\n            //     return new SizeF(74, 105);\n            case 'B0':\n                return new SizeF(2836, 4008);\n            case 'B1':\n                return new SizeF(2004, 2836);\n            case 'B2':\n                return new SizeF(1418, 2004);\n            case 'B3':\n                return new SizeF(1002, 1418);\n            case 'B4':\n                return new SizeF(709, 1002);\n            case 'B5':\n                return new SizeF(501, 709);\n            case 'Archa':\n                return new SizeF(648, 864);\n            case 'Archb':\n                return new SizeF(864, 1296);\n            case 'Archc':\n                return new SizeF(1296, 1728);\n            case 'Archd':\n                return new SizeF(1728, 2592);\n            case 'Arche':\n                return new SizeF(2592, 3456);\n            case 'Flsa':\n                return new SizeF(612, 936);\n            case 'HalfLetter':\n                return new SizeF(396, 612);\n            case 'Letter11x17':\n                return new SizeF(792, 1224);\n            case 'Ledger':\n                return new SizeF(1224, 792);\n            default:\n                return new SizeF(595, 842);\n        }\n    };\n    PdfExport.prototype.getDashStyle = function (dashStyle) {\n        switch (dashStyle) {\n            case 'Dash':\n                return 1;\n            case 'Dot':\n                return 2;\n            case 'DashDot':\n                return 3;\n            case 'DashDotDot':\n                return 4;\n            default:\n                return 0;\n        }\n    };\n    PdfExport.prototype.getPenFromContent = function (content) {\n        var pen = new PdfPen(new PdfColor(0, 0, 0));\n        if (!isNullOrUndefined(content.style) && content.style !== null && !isNullOrUndefined(content.style.penColor)) {\n            var penColor = this.hexToRgb(content.style.penColor);\n            pen = new PdfPen(new PdfColor(penColor.r, penColor.g, penColor.b));\n        }\n        return pen;\n    };\n    PdfExport.prototype.getBrushFromContent = function (content) {\n        var brush = null;\n        if (!isNullOrUndefined(content.style.textBrushColor)) {\n            /* tslint:disable-next-line:max-line-length */\n            var brushColor = this.hexToRgb(content.style.textBrushColor);\n            brush = new PdfSolidBrush(new PdfColor(brushColor.r, brushColor.g, brushColor.b));\n        }\n        return brush;\n    };\n    PdfExport.prototype.hexToRgb = function (hex) {\n        if (hex === null || hex === '' || hex.length !== 7) {\n            throw new Error('please set valid hex value for color...');\n        }\n        hex = hex.substring(1);\n        var bigint = parseInt(hex, 16);\n        var r = (bigint >> 16) & 255;\n        var g = (bigint >> 8) & 255;\n        var b = bigint & 255;\n        return { r: r, g: g, b: b };\n    };\n    PdfExport.prototype.getFontStyle = function (theme) {\n        var fontStyle = PdfFontStyle.Regular;\n        if (!isNullOrUndefined(theme) && theme.bold) {\n            fontStyle |= PdfFontStyle.Bold;\n        }\n        if (!isNullOrUndefined(theme) && theme.italic) {\n            fontStyle |= PdfFontStyle.Italic;\n        }\n        if (!isNullOrUndefined(theme) && theme.underline) {\n            fontStyle |= PdfFontStyle.Underline;\n        }\n        if (!isNullOrUndefined(theme) && theme.strikeout) {\n            fontStyle |= PdfFontStyle.Strikeout;\n        }\n        return fontStyle;\n    };\n    PdfExport.prototype.getBorderStyle = function (border) {\n        var borders = new PdfBorders();\n        if (!isNullOrUndefined(border)) {\n            var borderWidth = border.width;\n            // set border width\n            var width = (!isNullOrUndefined(borderWidth) && typeof borderWidth === 'number') ? borderWidth * 0.75 : undefined;\n            // set border color\n            var color = new PdfColor(196, 196, 196);\n            if (!isNullOrUndefined(border.color)) {\n                var borderColor = this.hexToRgb(border.color);\n                color = new PdfColor(borderColor.r, borderColor.g, borderColor.b);\n            }\n            var pen = new PdfPen(color, width);\n            // set border dashStyle 'Solid <default>, Dash, Dot, DashDot, DashDotDot'\n            if (!isNullOrUndefined(border.dashStyle)) {\n                pen.dashStyle = this.getDashStyle(border.dashStyle);\n            }\n            borders.all = pen;\n        }\n        else {\n            borders.all = new PdfPen(new PdfColor(234, 234, 234));\n        }\n        return borders;\n    };\n    /**\n     * To destroy the pdf export\n     * @return {void}\n     * @hidden\n     */\n    PdfExport.prototype.destroy = function () {\n        //destroy for exporting\n    };\n    return PdfExport;\n}());\nexport { PdfExport };\n","/**\n * PdfFont.ts class for EJ2-PDF\n */\nimport { PdfFontStyle } from './enum';\nimport { SizeF } from './../../drawing/pdf-drawing';\nimport { PdfStringFormat } from './pdf-string-format';\nimport { PdfStringLayouter } from './string-layouter';\nimport { StringTokenizer } from './string-tokenizer';\n/**\n * Defines a particular format for text, including font face, size, and style attributes.\n * @private\n */\nvar PdfFont = /** @class */ (function () {\n    function PdfFont(size, style) {\n        /**\n         * `Style` of the font.\n         * @private\n         */\n        this.fontStyle = PdfFontStyle.Regular;\n        if (typeof size === 'number' && typeof style === 'undefined') {\n            this.fontSize = size;\n        }\n        else {\n            this.fontSize = size;\n            this.setStyle(style);\n        }\n    }\n    Object.defineProperty(PdfFont.prototype, \"name\", {\n        //Properties\n        /**\n         * Gets the face name of this Font.\n         * @private\n         */\n        get: function () {\n            return this.metrics.name;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfFont.prototype, \"size\", {\n        /**\n         * Gets the size of this font.\n         * @private\n         */\n        get: function () {\n            return this.fontSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfFont.prototype, \"height\", {\n        /**\n         * Gets the height of the font in points.\n         * @private\n         */\n        get: function () {\n            return this.metrics.getHeight(null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfFont.prototype, \"style\", {\n        /**\n         * Gets the style information for this font.\n         * @private\n         */\n        get: function () {\n            return this.fontStyle;\n        },\n        set: function (value) {\n            this.fontStyle = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfFont.prototype, \"bold\", {\n        /**\n         * Gets a value indicating whether this `PdfFont` is `bold`.\n         * @private\n         */\n        get: function () {\n            return ((this.style & PdfFontStyle.Bold) > 0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfFont.prototype, \"italic\", {\n        /**\n         * Gets a value indicating whether this `PdfFont` has the `italic` style applied.\n         * @private\n         */\n        get: function () {\n            return ((this.style & PdfFontStyle.Italic) > 0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfFont.prototype, \"strikeout\", {\n        /**\n         * Gets a value indicating whether this `PdfFont` is `strikeout`.\n         * @private\n         */\n        get: function () {\n            return ((this.style & PdfFontStyle.Strikeout) > 0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfFont.prototype, \"underline\", {\n        /**\n         * Gets a value indicating whether this `PdfFont` is `underline`.\n         * @private\n         */\n        get: function () {\n            return ((this.style & PdfFontStyle.Underline) > 0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfFont.prototype, \"metrics\", {\n        /**\n         * Gets or sets the `metrics` for this font.\n         * @private\n         */\n        get: function () {\n            return this.fontMetrics;\n        },\n        set: function (value) {\n            this.fontMetrics = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfFont.prototype, \"element\", {\n        // /**\n        //  * Gets and Sets the font `internals`.\n        //  * @private\n        //  */\n        // public get fontInternal() : IPdfPrimitive {\n        //     return this.pdfFontInternals;\n        // }\n        // public set fontInternal(value : IPdfPrimitive) {\n        //     this.pdfFontInternals = value;\n        // }\n        //IPdfWrapper Members\n        /**\n         * Gets the `element` representing the font.\n         * @private\n         */\n        get: function () {\n            return this.pdfFontInternals;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfFont.prototype.measureString = function (text, arg2, arg3, arg4, arg5) {\n        if (typeof text === 'string' && typeof arg2 === 'undefined') {\n            return this.measureString(text, null);\n        }\n        else if (typeof text === 'string' && (arg2 instanceof PdfStringFormat || arg2 == null) && typeof arg3 === 'undefined' && typeof arg4 === 'undefined') {\n            var temparg2 = arg2;\n            var charactersFitted = 0;\n            var linesFilled = 0;\n            return this.measureString(text, temparg2, charactersFitted, linesFilled);\n        }\n        else if (typeof text === 'string' && (arg2 instanceof PdfStringFormat || arg2 == null) && typeof arg3 === 'number' && typeof arg4 === 'number') {\n            var temparg2 = arg2;\n            return this.measureString(text, 0, temparg2, arg3, arg4);\n            // } else if (typeof text === 'string' && typeof arg2 === 'number' && typeof arg3 === 'undefined') {\n            //     return this.measureString(text, arg2, null);\n            // } else if (typeof text === 'string' && typeof arg2 === 'number' && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'undefined' && typeof arg5 === 'undefined') {\n            //     let temparg3 : PdfStringFormat = arg3 as PdfStringFormat;\n            //     let charactersFitted : number = 0;\n            //     let linesFilled : number = 0;\n            //     return this.measureString(text, arg2, temparg3, charactersFitted, linesFilled);\n        }\n        else if (typeof text === 'string' && typeof arg2 === 'number' && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'number' && typeof arg5 === 'number') {\n            var layoutArea = new SizeF(arg2, 0);\n            var temparg3 = arg3;\n            return this.measureString(text, layoutArea, temparg3, arg4, arg5);\n            // } else if (typeof text === 'string' && arg2 instanceof SizeF && typeof arg3 === 'undefined') {\n            //     return this.measureString(text, arg2, null);\n            // } else if (typeof text === 'string' && arg2 instanceof SizeF && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'undefined' && typeof arg5 === 'undefined') {\n            //     let temparg3 : PdfStringFormat = arg3 as PdfStringFormat;\n            //     let charactersFitted : number = 0;\n            //     let linesFilled : number = 0;\n            //     return this.measureString(text, arg2, temparg3, charactersFitted, linesFilled);\n        }\n        else {\n            if (text == null) {\n                throw Error(\"ArgumentNullException(\\\"text\\\")\");\n            }\n            var temparg2 = arg2;\n            var temparg3 = arg3;\n            var layouter = new PdfStringLayouter();\n            var result = layouter.layout(text, this, temparg3, temparg2, false, new SizeF(0, 0));\n            // arg4 = (result.Remainder == null) ? text.length : text.length - result.Remainder.length;\n            arg4 = text.length;\n            arg5 = (result.empty) ? 0 : result.lines.length;\n            return result.actualSize;\n        }\n    };\n    /* tslint:enable */\n    //IPdfCache Members\n    /**\n     * `Checks` whether the object is similar to another object.\n     * @private\n     */\n    PdfFont.prototype.equalsTo = function (obj) {\n        var result = this.equalsToFont(obj);\n        return result;\n    };\n    /**\n     * Returns `internals` of the object.\n     * @private\n     */\n    PdfFont.prototype.getInternals = function () {\n        return this.pdfFontInternals;\n    };\n    /**\n     * Sets `internals` to the object.\n     * @private\n     */\n    PdfFont.prototype.setInternals = function (internals) {\n        if (internals == null) {\n            throw new Error('ArgumentNullException:internals');\n        }\n        this.pdfFontInternals = internals;\n    };\n    /**\n     * Sets the `style` of the font.\n     * @private\n     */\n    PdfFont.prototype.setStyle = function (style) {\n        this.fontStyle = style;\n    };\n    /**\n     * Applies `settings` to the default line width.\n     * @private\n     */\n    PdfFont.prototype.applyFormatSettings = function (line, format, width) {\n        // if (line == null) {\n        //     throw new Error(`ArgumentNullException:line`);\n        // }\n        var realWidth = width;\n        if (format != null && width > 0) {\n            // Space among characters is not default.\n            if (format.characterSpacing !== 0) {\n                realWidth += (line.length - 1) * format.characterSpacing;\n            }\n            // Space among words is not default.\n            if (format.wordSpacing !== 0) {\n                var symbols = StringTokenizer.spaces;\n                var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\n                realWidth += whitespacesCount * format.wordSpacing;\n            }\n        }\n        return realWidth;\n    };\n    //Constants\n    /**\n     * `Multiplier` of the symbol width.\n     * @default 0.001\n     * @private\n     */\n    PdfFont.charSizeMultiplier = 0.001;\n    /**\n     * `Synchronization` object.\n     * @private\n     */\n    PdfFont.syncObject = new Object();\n    return PdfFont;\n}());\nexport { PdfFont };\n","/**\n * dictionaryProperties.ts class for EJ2-PDF\n * PDF dictionary properties.\n * @private\n */\nvar DictionaryProperties = /** @class */ (function () {\n    /**\n     * Initialize an instance for `PdfDictionaryProperties` class.\n     * @private\n     */\n    function DictionaryProperties() {\n        /**\n         * Specifies the value of `Pages`.\n         * @private\n         */\n        this.pages = 'Pages';\n        /**\n         * Specifies the value of `Kids`.\n         * @private\n         */\n        this.kids = 'Kids';\n        /**\n         * Specifies the value of `Count`.\n         * @private\n         */\n        this.count = 'Count';\n        /**\n         * Specifies the value of `Resources`.\n         * @private\n         */\n        this.resources = 'Resources';\n        /**\n         * Specifies the value of `Type`.\n         * @private\n         */\n        this.type = 'Type';\n        /**\n         * Specifies the value of `Size`.\n         * @private\n         */\n        this.size = 'Size';\n        /**\n         * Specifies the value of `MediaBox`.\n         * @private\n         */\n        this.mediaBox = 'MediaBox';\n        /**\n         * Specifies the value of `Parent`.\n         * @private\n         */\n        this.parent = 'Parent';\n        /**\n         * Specifies the value of `Root`.\n         * @private\n         */\n        this.root = 'Root';\n        /**\n         * Specifies the value of `DecodeParms`.\n         * @private\n         */\n        this.decodeParms = 'DecodeParms';\n        /**\n         * Specifies the value of `Filter`.\n         * @private\n         */\n        this.filter = 'Filter';\n        /**\n         * Specifies the value of `Font`.\n         * @private\n         */\n        this.font = 'Font';\n        /**\n         * Specifies the value of `Type1`.\n         * @private\n         */\n        this.type1 = 'Type1';\n        /**\n         * Specifies the value of `BaseFont`.\n         * @private\n         */\n        this.baseFont = 'BaseFont';\n        /**\n         * Specifies the value of `Encoding`.\n         * @private\n         */\n        this.encoding = 'Encoding';\n        /**\n         * Specifies the value of `Subtype`.\n         * @private\n         */\n        this.subtype = 'Subtype';\n        /**\n         * Specifies the value of `Contents`.\n         * @private\n         */\n        this.contents = 'Contents';\n        /**\n         * Specifies the value of `ProcSet`.\n         * @private\n         */\n        this.procset = 'ProcSet';\n        /**\n         * Specifies the value of `ColorSpace`.\n         * @private\n         */\n        this.colorSpace = 'ColorSpace';\n        /**\n         * Specifies the value of `ExtGState`.\n         * @private\n         */\n        this.extGState = 'ExtGState';\n        /**\n         * Specifies the value of `Pattern`.\n         * @private\n         */\n        this.pattern = 'Pattern';\n        /**\n         * Specifies the value of `XObject`.\n         * @private\n         */\n        this.xObject = 'XObject';\n        /**\n         * Specifies the value of `Length`.\n         * @private\n         */\n        this.length = 'Length';\n        /**\n         * Specifies the value of `Width`.\n         * @private\n         */\n        this.width = 'Width';\n        /**\n         * Specifies the value of `Height`.\n         * @private\n         */\n        this.height = 'Height';\n        /**\n         * Specifies the value of `BitsPerComponent`.\n         * @private\n         */\n        this.bitsPerComponent = 'BitsPerComponent';\n        /**\n         * Specifies the value of `Image`.\n         * @private\n         */\n        this.image = 'Image';\n        /**\n         * Specifies the value of `dctdecode`.\n         * @private\n         */\n        this.dctdecode = 'DCTDecode';\n        /**\n         * Specifies the value of `Columns`.\n         * @private\n         */\n        this.columns = 'Columns';\n        /**\n         * Specifies the value of `BlackIs1`.\n         * @private\n         */\n        this.blackIs1 = 'BlackIs1';\n        /**\n         * Specifies the value of `K`.\n         * @private\n         */\n        this.k = 'K';\n        /**\n         * Specifies the value of `S`.\n         * @private\n         */\n        this.s = 'S';\n        /**\n         * Specifies the value of `Predictor`.\n         * @private\n         */\n        this.predictor = 'Predictor';\n        /**\n         * Specifies the value of `DeviceRGB`.\n         * @private\n         */\n        this.deviceRgb = 'DeviceRGB';\n        /**\n         * Specifies the value of `Next`.\n         * @private\n         */\n        this.next = 'Next';\n        /**\n         * Specifies the value of `Action`.\n         * @private\n         */\n        this.action = 'Action';\n        /**\n         * Specifies the value of `Link`.\n         * @private\n         */\n        this.link = 'Link';\n        /**\n         *\n         * Specifies the value of `A`.\n         * @private\n         */\n        this.a = 'A';\n        /**\n         * Specifies the value of `Annot`.\n         * @private\n         */\n        this.annot = 'Annot';\n        /**\n         * Specifies the value of `P`.\n         * @private\n         */\n        this.p = 'P';\n        /**\n         * Specifies the value of `C`.\n         * @private\n         */\n        this.c = 'C';\n        /**\n         * Specifies the value of `Rect`.\n         * @private\n         */\n        this.rect = 'Rect';\n        /**\n         * Specifies the value of `URI`.\n         * @private\n         */\n        this.uri = 'URI';\n        /**\n         * Specifies the value of `Annots`.\n         * @private\n         */\n        this.annots = 'Annots';\n        /**\n         * Specifies the value of `ca`.\n         * @private\n         */\n        this.ca = 'ca';\n        /**\n         * Specifies the value of `CA`.\n         * @private\n         */\n        this.CA = 'CA';\n        /**\n         * Specifies the value of `XYZ`.\n         * @private\n         */\n        this.xyz = 'XYZ';\n        /**\n         * Specifies the value of `Fit`.\n         * @private\n         */\n        this.fit = 'Fit';\n        /**\n         * Specifies the value of `Dest`.\n         * @private\n         */\n        this.dest = 'Dest';\n        /**\n         * Specifies the value of `BM`.\n         * @private\n         */\n        this.BM = 'BM';\n        /**\n         * Specifies the value of `flatedecode`.\n         * @private\n         */\n        this.flatedecode = 'FlateDecode';\n        /**\n         * Specifies the value of `Rotate`.\n         * @private\n         */\n        this.rotate = 'Rotate';\n        /**\n         * Specifies the value of 'bBox'.\n         * @private\n         */\n        this.bBox = 'BBox';\n        /**\n         * Specifies the value of 'form'.\n         * @private\n         */\n        this.form = 'Form';\n        /**\n         * Specifies the value of 'w'.\n         * @private\n         */\n        this.w = 'W';\n        /**\n         * Specifies the value of 'cIDFontType2'.\n         * @private\n         */\n        this.cIDFontType2 = 'CIDFontType2';\n        /**\n         * Specifies the value of 'cIDToGIDMap'.\n         * @private\n         */\n        this.cIDToGIDMap = 'CIDToGIDMap';\n        /**\n         * Specifies the value of 'identity'.\n         * @private\n         */\n        this.identity = 'Identity';\n        /**\n         * Specifies the value of 'dw'.\n         * @private\n         */\n        this.dw = 'DW';\n        /**\n         * Specifies the value of 'fontDescriptor'.\n         * @private\n         */\n        this.fontDescriptor = 'FontDescriptor';\n        /**\n         * Specifies the value of 'cIDSystemInfo'.\n         * @private\n         */\n        this.cIDSystemInfo = 'CIDSystemInfo';\n        /**\n         * Specifies the value of 'fontName'.\n         * @private\n         */\n        this.fontName = 'FontName';\n        /**\n         * Specifies the value of 'flags'.\n         * @private\n         */\n        this.flags = 'Flags';\n        /**\n         * Specifies the value of 'fontBBox'.\n         * @private\n         */\n        this.fontBBox = 'FontBBox';\n        /**\n         * Specifies the value of 'missingWidth'.\n         * @private\n         */\n        this.missingWidth = 'MissingWidth';\n        /**\n         * Specifies the value of 'stemV'.\n         * @private\n         */\n        this.stemV = 'StemV';\n        /**\n         * Specifies the value of 'italicAngle'.\n         * @private\n         */\n        this.italicAngle = 'ItalicAngle';\n        /**\n         * Specifies the value of 'capHeight'.\n         * @private\n         */\n        this.capHeight = 'CapHeight';\n        /**\n         * Specifies the value of 'ascent'.\n         * @private\n         */\n        this.ascent = 'Ascent';\n        /**\n         * Specifies the value of 'descent'.\n         * @private\n         */\n        this.descent = 'Descent';\n        /**\n         * Specifies the value of 'leading'.\n         * @private\n         */\n        this.leading = 'Leading';\n        /**\n         * Specifies the value of 'avgWidth'.\n         * @private\n         */\n        this.avgWidth = 'AvgWidth';\n        /**\n         * Specifies the value of 'fontFile2'.\n         * @private\n         */\n        this.fontFile2 = 'FontFile2';\n        /**\n         * Specifies the value of 'maxWidth'.\n         * @private\n         */\n        this.maxWidth = 'MaxWidth';\n        /**\n         * Specifies the value of 'xHeight'.\n         * @private\n         */\n        this.xHeight = 'XHeight';\n        /**\n         * Specifies the value of 'stemH'.\n         * @private\n         */\n        this.stemH = 'StemH';\n        /**\n         * Specifies the value of 'registry'.\n         * @private\n         */\n        this.registry = 'Registry';\n        /**\n         * Specifies the value of 'ordering'.\n         * @private\n         */\n        this.ordering = 'Ordering';\n        /**\n         * Specifies the value of 'supplement'.\n         * @private\n         */\n        this.supplement = 'Supplement';\n        /**\n         * Specifies the value of 'type0'.\n         * @private\n         */\n        this.type0 = 'Type0';\n        /**\n         * Specifies the value of 'identityH'.\n         * @private\n         */\n        this.identityH = 'Identity-H';\n        /**\n         * Specifies the value of 'toUnicode'.\n         * @private\n         */\n        this.toUnicode = 'ToUnicode';\n        /**\n         * Specifies the value of 'descendantFonts'.\n         * @private\n         */\n        this.descendantFonts = 'DescendantFonts';\n        //\n    }\n    return DictionaryProperties;\n}());\nexport { DictionaryProperties };\n","/**\n * `PdfNumber` class is used to perform number related primitive operations.\n * @private\n */\nvar PdfNumber = /** @class */ (function () {\n    /**\n     * Initializes a new instance of the `PdfNumber` class.\n     * @private\n     */\n    function PdfNumber(value) {\n        /**\n         * Sotres the `position`.\n         * @default -1\n         * @private\n         */\n        this.position5 = -1;\n        this.value = value;\n    }\n    Object.defineProperty(PdfNumber.prototype, \"intValue\", {\n        /**\n         * Gets or sets the `integer` value.\n         * @private\n         */\n        get: function () {\n            return this.value;\n        },\n        set: function (value) {\n            this.value = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfNumber.prototype, \"isInteger\", {\n        /**\n         * Gets or sets a value indicating whether this instance `is integer`.\n         * @private\n         */\n        get: function () {\n            return this.integer;\n        },\n        set: function (value) {\n            this.integer = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfNumber.prototype, \"status\", {\n        /**\n         * Gets or sets the `Status` of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.status5;\n        },\n        set: function (value) {\n            this.status5 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfNumber.prototype, \"isSaving\", {\n        /**\n         * Gets or sets a value indicating whether this document `is saving` or not.\n         * @private\n         */\n        get: function () {\n            return this.isSaving5;\n        },\n        set: function (value) {\n            this.isSaving5 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfNumber.prototype, \"objectCollectionIndex\", {\n        /**\n         * Gets or sets the `index` value of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.index5;\n        },\n        set: function (value) {\n            this.index5 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfNumber.prototype, \"position\", {\n        /**\n         * Gets or sets the `position` of the object.\n         * @private\n         */\n        get: function () {\n            return this.position5;\n        },\n        set: function (value) {\n            this.position5 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfNumber.prototype, \"clonedObject\", {\n        /**\n         * Returns `cloned object`.\n         * @private\n         */\n        get: function () {\n            var rValue = null;\n            return rValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * `Saves the object`.\n     * @private\n     */\n    PdfNumber.prototype.save = function (writer) {\n        writer.write(this.intValue.toString()); //tostring(CultureInfo.InletiantCulture)\n    };\n    /**\n     * Creates a `copy of PdfNumber`.\n     * @private\n     */\n    PdfNumber.prototype.clone = function (crossTable) {\n        var newNumber = new PdfNumber(this.value);\n        return newNumber;\n    };\n    /**\n     * Converts a `float value to a string` using Adobe PDF rules.\n     * @private\n     */\n    PdfNumber.floatToString = function (number) {\n        // let tempString1 : string = number.toString();\n        // let tempString2 : string = tempString1.indexOf('.') != -1 ? tempString1.substring(0, tempString1.indexOf('.')) : tempString1;\n        var returnString = number.toFixed(2);\n        if (returnString === '0.00') {\n            returnString = '.00';\n        }\n        // let prefixLength : number = (22 - tempString2.length) >= 0 ? (22 - tempString2.length) : 0;\n        // for (let index : number = 0; index < prefixLength; index++) {\n        //     returnString += '0';\n        // }\n        // returnString += tempString2 + '.00';\n        // returnString += (tempString3.length > 6) ? tempString3.substring(0,6) : tempString3;\n        // let suffixLength : number = (6 - tempString3.length) >= 0 ? (6 - tempString3.length) : 0;\n        // for (let index : number = 0; index < suffixLength; index++) {\n        //     returnString += '0';\n        // }\n        return returnString;\n    };\n    /**\n     * Determines the `minimum of the three values`.\n     * @private\n     */\n    PdfNumber.min = function (x, y, z) {\n        var r = Math.min(x, y);\n        return Math.min(z, r);\n    };\n    return PdfNumber;\n}());\nexport { PdfNumber };\n","import { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\nimport { PdfStream } from './../primitives/pdf-stream';\nimport { PdfArray } from './../primitives/pdf-array';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PdfName } from './../primitives/pdf-name';\nimport { PdfDictionary } from './../primitives/pdf-dictionary';\nimport { PdfString } from './../primitives/pdf-string';\n/**\n * `PdfReference` class is used to perform reference related primitive operations.\n * @private\n */\nvar PdfReference = /** @class */ (function () {\n    function PdfReference(objNumber, genNumber) {\n        /**\n         * Holds the `index` number of the object.\n         * @default -1\n         * @private\n         */\n        this.index3 = -1;\n        /**\n         * Internal variable to store the `position`.\n         * @default -1\n         * @private\n         */\n        this.position3 = -1;\n        /**\n         * Holds the `object number`.\n         * @default 0\n         * @private\n         */\n        this.objNumber = 0;\n        /**\n         * Holds the `generation number` of the object.\n         * @default 0\n         * @private\n         */\n        this.genNumber = 0;\n        if (typeof objNumber === 'number' && typeof genNumber === 'number') {\n            this.objNumber = objNumber;\n            this.genNumber = genNumber;\n            // } else if (typeof objNum === 'string' && typeof genNum === 'string') {\n        }\n        else {\n            this.objNumber = Number(objNumber);\n            this.genNumber = Number(genNumber);\n        }\n    }\n    Object.defineProperty(PdfReference.prototype, \"status\", {\n        //Property\n        /**\n         * Gets or sets the `Status` of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.status3;\n        },\n        set: function (value) {\n            this.status3 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReference.prototype, \"isSaving\", {\n        /**\n         * Gets or sets a value indicating whether this document `is saving` or not.\n         * @private\n         */\n        get: function () {\n            return this.isSaving3;\n        },\n        set: function (value) {\n            this.isSaving3 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReference.prototype, \"objectCollectionIndex\", {\n        /**\n         * Gets or sets the `index` value of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.index3;\n        },\n        set: function (value) {\n            this.index3 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReference.prototype, \"position\", {\n        /**\n         * Gets or sets the `position` of the object.\n         * @private\n         */\n        get: function () {\n            return this.position3;\n        },\n        set: function (value) {\n            this.position3 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReference.prototype, \"clonedObject\", {\n        /**\n         * Returns `cloned object`.\n         * @private\n         */\n        get: function () {\n            var returnObject3 = null;\n            return returnObject3;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //IPdfPrimitives methods\n    /**\n     * `Saves` the object.\n     * @private\n     */\n    PdfReference.prototype.save = function (writer) {\n        writer.write(this.toString());\n    };\n    /**\n     * Returns a `string` representing the object.\n     * @private\n     */\n    PdfReference.prototype.toString = function () {\n        return this.objNumber.toString() + ' ' + this.genNumber.toString() + ' R';\n    };\n    /**\n     * Creates a `deep copy` of the IPdfPrimitive object.\n     * @private\n     */\n    PdfReference.prototype.clone = function (crossTable) {\n        return null;\n    };\n    return PdfReference;\n}());\nexport { PdfReference };\n/**\n * `PdfReferenceHolder` class is used to perform reference holder related primitive operations.\n * @private\n */\nvar PdfReferenceHolder = /** @class */ (function () {\n    function PdfReferenceHolder(obj1, obj2) {\n        /**\n         * Holds the `index` number of the object.\n         * @default -1\n         * @private\n         */\n        this.index4 = -1;\n        /**\n         * Internal variable to store the `position`.\n         * @default -1\n         * @private\n         */\n        this.position4 = -1;\n        /**\n         * The `index` of the object within the object collection.\n         * @default -1\n         * @private\n         */\n        this.objectIndex = -1;\n        /**\n         * @hidden\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        // if (typeof obj2 === 'undefined') {\n        if (obj1 instanceof PdfArray\n            || obj1 instanceof PdfDictionary\n            || obj1 instanceof PdfName\n            || obj1 instanceof PdfNumber\n            || obj1 instanceof PdfStream\n            || obj1 instanceof PdfReference\n            || obj1 instanceof PdfString) {\n            // if (obj1 === null) {\n            //     throw new Error('ArgumentNullException : obj');\n            // }\n            this.primitiveObject = obj1;\n            // } else if (obj1 instanceof PdfPageBase\n            //             || obj1 instanceof PdfPage\n            //             || obj1 instanceof PdfSection\n            //             || obj1 instanceof PdfSectionCollection) {\n        }\n        else {\n            var tempObj = obj1;\n            this.constructor(tempObj.element);\n        }\n        // }\n        // else {\n        //     if (obj2 === null) {\n        //         throw new Error('ArgumentNullException : crossTable');\n        //     }\n        //     if (obj1 === null) {\n        //         throw new Error('ArgumentNullException : reference');\n        //     }\n        //     this.crossTable = obj2;\n        //     let tempObj1 : PdfReference = <PdfReference>obj1;\n        //     this.reference = tempObj1;\n        // }\n    }\n    Object.defineProperty(PdfReferenceHolder.prototype, \"status\", {\n        //Properties\n        /**\n         * Gets or sets the `Status` of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.status4;\n        },\n        set: function (value) {\n            this.status4 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReferenceHolder.prototype, \"isSaving\", {\n        /**\n         * Gets or sets a value indicating whether this document `is saving` or not.\n         * @private\n         */\n        get: function () {\n            return this.isSaving4;\n        },\n        set: function (value) {\n            this.isSaving4 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReferenceHolder.prototype, \"objectCollectionIndex\", {\n        /**\n         * Gets or sets the `index` value of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.index4;\n        },\n        set: function (value) {\n            this.index4 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReferenceHolder.prototype, \"position\", {\n        /**\n         * Gets or sets the `position` of the object.\n         * @private\n         */\n        get: function () {\n            return this.position4;\n        },\n        set: function (value) {\n            this.position4 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReferenceHolder.prototype, \"clonedObject\", {\n        /**\n         * Returns `cloned object`.\n         * @private\n         */\n        get: function () {\n            return null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReferenceHolder.prototype, \"object\", {\n        /**\n         * Gets the `object` the reference is of.\n         * @private\n         */\n        get: function () {\n            // if ((this.reference != null) || (this.object == null)) {\n            //     this.object = this.GetterObject();\n            // }\n            return this.primitiveObject;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReferenceHolder.prototype, \"reference\", {\n        /**\n         * Gets the `reference`.\n         * @private\n         */\n        get: function () {\n            return this.pdfReference;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReferenceHolder.prototype, \"index\", {\n        /**\n         * Gets the `index` of the object.\n         * @private\n         */\n        get: function () {\n            // let items : PdfMainObjectCollection = this.crossTable.PdfObjects;\n            // this.objectIndex = items.GetObjectIndex(this.reference);\n            // if (this.objectIndex < 0) {\n            //     let obj : IPdfPrimitive = this.crossTable.GetObject(this.reference);\n            //     this.objectIndex = items.Count - 1;\n            // }\n            return this.objectIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReferenceHolder.prototype, \"element\", {\n        /**\n         * Gets the `element`.\n         * @private\n         */\n        get: function () {\n            return this.primitiveObject;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * `Writes` a reference into a PDF document.\n     * @private\n     */\n    PdfReferenceHolder.prototype.save = function (writer) {\n        // if (writer == null) {\n        //     throw new Error('ArgumentNullException : writer');\n        // }\n        var position = writer.position;\n        var cTable = writer.document.crossTable;\n        // if (cTable.Document instanceof PdfDocument) {\n        this.object.isSaving = true;\n        // }\n        var reference = null;\n        // if (writer.Document.FileStructure.IncrementalUpdate === true && writer.Document.isStreamCopied === true) {\n        //     if (this.reference === null) {\n        //         reference = cTable.GetReference(this.Object);\n        //     } else {\n        //         reference = this.reference;\n        //     }\n        // } else {\n        //     reference = cTable.GetReference(this.Object);\n        // }\n        // if (!(writer.Document.FileStructure.IncrementalUpdate === true && writer.Document.isStreamCopied === true)) {\n        reference = cTable.getReference(this.object);\n        // }\n        // if (writer.Position !== position) {\n        //     writer.Position = position;\n        // }\n        reference.save(writer);\n    };\n    /**\n     * Creates a `copy of PdfReferenceHolder`.\n     * @private\n     */\n    PdfReferenceHolder.prototype.clone = function (crossTable) {\n        var refHolder = null;\n        var temp = null;\n        var refNum = '';\n        var reference = null;\n        // Restricts addition of same object multiple time.\n        /* if (this.Reference != null && this.crossTable != null && this.crossTable.PageCorrespondance.containsKey(this.Reference)) {\n            refHolder = new PdfReferenceHolder(this.crossTable.PageCorrespondance.getValue(this.Reference) as PdfReference, crossTable);\n            return refHolder;\n        }\n        if (Object instanceof PdfNumber) {\n            return new PdfNumber((Object as PdfNumber).IntValue);\n        }\n        */\n        // if (Object instanceof PdfDictionary) {\n        //     // Meaning the referenced page is not available for import.\n        //     let type : PdfName = new PdfName(this.dictionaryProperties.type);\n        //     let dict : PdfDictionary = Object as PdfDictionary;\n        //     if (dict.ContainsKey(type)) {\n        //         let pageName : PdfName = dict.Items.getValue(type.Value) as PdfName;\n        //         if (pageName !== null) {\n        //             if (pageName.Value === 'Page') {\n        //                 return new PdfNull();\n        //             }\n        //         }\n        //     }\n        // }\n        /* if (Object instanceof PdfName) {\n            return new PdfName ((Object as PdfName ).Value);\n        }\n        */\n        // Resolves circular references.\n        // if (crossTable.PrevReference !== null && (crossTable.PrevReference.indexOf(this.Reference) !== -1)) {\n        //     let obj : IPdfPrimitive = this.crossTable.GetObject(this.Reference).ClonedObject;\n        //     if (obj !== null) {\n        //         reference = crossTable.GetReference(obj);\n        //         return new PdfReferenceHolder(reference, crossTable);\n        //     } else {\n        //         return new PdfNull();\n        //     }\n        // }\n        /*if (this.Reference !== null) {\n            crossTable.PrevReference.push(this.Reference);\n        }\n        reference = crossTable.GetReference(temp);\n        refHolder = new PdfReferenceHolder(reference, crossTable);\n        return refHolder;\n        */\n        return null;\n    };\n    return PdfReferenceHolder;\n}());\nexport { PdfReferenceHolder };\n","/**\n * StringTokenizer.ts class for EJ2-PDF\n * Utility class for working with strings.\n * @private\n */\nvar StringTokenizer = /** @class */ (function () {\n    // Constructors\n    /**\n     * Initializes a new instance of the `StringTokenizer` class.\n     * @private\n     */\n    function StringTokenizer(textValue) {\n        /**\n         * Current `position`.\n         * @private\n         */\n        this.currentPosition = 0;\n        if (textValue == null) {\n            throw new Error('ArgumentNullException:text');\n        }\n        this.text = textValue;\n    }\n    Object.defineProperty(StringTokenizer.prototype, \"length\", {\n        // Properties\n        /**\n         * Gets text `length`.\n         * @private\n         */\n        get: function () {\n            return this.text.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StringTokenizer.prototype, \"end\", {\n        get: function () {\n            return (this.currentPosition === this.text.length);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StringTokenizer.prototype, \"position\", {\n        /**\n         * Gets or sets the position.\n         * @private\n         */\n        get: function () {\n            return this.currentPosition;\n        },\n        set: function (value) {\n            this.currentPosition = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StringTokenizer.getCharsCount = function (text, symbols) {\n        if (typeof symbols === 'string') {\n            if (text == null) {\n                throw new Error('ArgumentNullException:wholeText');\n            }\n            var numSymbols = 0;\n            var curIndex = 0;\n            for (;;) {\n                curIndex = text.indexOf(symbols, curIndex);\n                if (curIndex === -1) {\n                    break;\n                }\n                else {\n                    numSymbols++;\n                    curIndex++;\n                }\n            }\n            return numSymbols;\n        }\n        else {\n            if (text == null) {\n                throw new Error('ArgumentNullException:text');\n            }\n            if (symbols == null) {\n                throw new Error('ArgumentNullException:symbols');\n            }\n            var count = 0;\n            for (var i = 0, len = text.length; i < len; i++) {\n                var ch = text[i];\n                if (this.contains(symbols, ch)) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    };\n    /**\n     * Reads line of the text.\n     * @private\n     */\n    StringTokenizer.prototype.readLine = function () {\n        var pos = this.currentPosition;\n        while (pos < this.length) {\n            var ch = this.text[pos];\n            switch (ch) {\n                case '\\r':\n                case '\\n': {\n                    var text = this.text.substring(this.currentPosition, pos - this.currentPosition);\n                    this.currentPosition = pos + 1;\n                    this.currentPosition++;\n                    return text;\n                }\n            }\n            pos++;\n        }\n        // The remaining text.\n        if (pos > this.currentPosition) {\n            var text2 = this.text.substring(this.currentPosition, pos - this.currentPosition);\n            this.currentPosition = pos;\n            return text2;\n        }\n        return null;\n    };\n    /**\n     * Reads line of the text.\n     * @private\n     */\n    StringTokenizer.prototype.peekLine = function () {\n        var pos = this.currentPosition;\n        var line = this.readLine();\n        this.currentPosition = pos;\n        return line;\n    };\n    /**\n     * Reads a word from the text.\n     * @private\n     */\n    StringTokenizer.prototype.readWord = function () {\n        var pos = this.currentPosition;\n        while (pos < this.length) {\n            var ch = this.text[pos];\n            switch (ch) {\n                case '\\r':\n                case '\\n':\n                    var textValue = this.text.substr(this.currentPosition, pos - this.currentPosition);\n                    this.currentPosition = pos + 1;\n                    if (((ch === '\\r') && (this.currentPosition < this.length)) && (this.text[this.currentPosition] === '\\n')) {\n                        this.currentPosition++;\n                    }\n                    return textValue;\n                case ' ':\n                case '\\t': {\n                    if (pos === this.currentPosition) {\n                        pos++;\n                    }\n                    var text = this.text.substr(this.currentPosition, pos - this.currentPosition);\n                    this.currentPosition = pos;\n                    return text;\n                }\n            }\n            pos++;\n        }\n        // The remaining text.\n        if (pos > this.currentPosition) {\n            var text2 = this.text.substr(this.currentPosition, pos - this.currentPosition);\n            this.currentPosition = pos;\n            return text2;\n        }\n        return null;\n    };\n    /**\n     * Peeks a word from the text.\n     * @private\n     */\n    StringTokenizer.prototype.peekWord = function () {\n        var pos = this.currentPosition;\n        var word = this.readWord();\n        this.currentPosition = pos;\n        return word;\n    };\n    StringTokenizer.prototype.read = function (count) {\n        if (typeof count === 'undefined') {\n            var ch = '0';\n            if (!this.end) {\n                ch = this.text[this.currentPosition];\n                this.currentPosition++;\n            }\n            return ch;\n        }\n        else {\n            var num = 0;\n            var builder = '';\n            while (!this.end && num < count) {\n                var ch = this.read();\n                builder = builder + ch;\n                num++;\n            }\n            return builder;\n        }\n    };\n    /**\n     * Peeks char form the data.\n     * @private\n     */\n    StringTokenizer.prototype.peek = function () {\n        var ch = '0';\n        if (!this.end) {\n            ch = this.text[this.currentPosition];\n        }\n        return ch;\n    };\n    /**\n     * Closes a reader.\n     * @private\n     */\n    StringTokenizer.prototype.close = function () {\n        this.text = null;\n    };\n    StringTokenizer.prototype.readToEnd = function () {\n        var text;\n        if (this.currentPosition === 0) {\n            text = this.text;\n        }\n        else {\n            text = this.text.substring(this.length, this.currentPosition);\n        }\n        this.currentPosition = this.length;\n        return text;\n    };\n    //Implementation\n    /**\n     * Checks whether array contains a symbol.\n     * @private\n     */\n    StringTokenizer.contains = function (array, symbol) {\n        var contains = false;\n        for (var i = 0; i < array.length; i++) {\n            if (array[i] === symbol) {\n                contains = true;\n                break;\n            }\n        }\n        return contains;\n    };\n    // Constants\n    /**\n     * `Whitespace` symbol.\n     * @private\n     */\n    StringTokenizer.whiteSpace = ' ';\n    /**\n     * `tab` symbol.\n     * @private\n     */\n    StringTokenizer.tab = '\\t';\n    /**\n     * Array of `spaces`.\n     * @private\n     */\n    StringTokenizer.spaces = [StringTokenizer.whiteSpace, StringTokenizer.tab];\n    /**\n     * `Pattern` for WhiteSpace.\n     * @private\n     */\n    StringTokenizer.whiteSpacePattern = '^[ \\t]+$';\n    return StringTokenizer;\n}());\nexport { StringTokenizer };\n","import { Row } from './../models/row';\nimport { CellType } from '../base/enum';\nimport { isNullOrUndefined, Internationalization, getValue, createElement } from '@syncfusion/ej2-base';\nimport { Cell } from '../models/cell';\nimport { ValueFormatter } from './../services/value-formatter';\nimport { Query } from '@syncfusion/ej2-data';\nimport { getForeignData, measureColumnDepth, getUid } from '../base/util';\nimport { Grid } from '../base/grid';\n/**\n * @hidden\n * `ExportHelper` for `PdfExport` & `ExcelExport`\n */\nvar ExportHelper = /** @class */ (function () {\n    function ExportHelper(parent) {\n        this.hideColumnInclude = false;\n        this.foreignKeyData = {};\n        this.parent = parent;\n    }\n    ExportHelper.getQuery = function (parent, data) {\n        return data.isRemote() ?\n            data.generateQuery(true).requiresCount().take(parent.pageSettings.totalRecordsCount) :\n            data.generateQuery(true).requiresCount();\n    };\n    ExportHelper.prototype.getFData = function (value, column) {\n        var foreignKeyData = getForeignData(column, {}, value, this.foreignKeyData[column.field])[0];\n        return foreignKeyData;\n    };\n    ExportHelper.prototype.getGridRowModel = function (columns, dataSource, gObj, startIndex) {\n        if (startIndex === void 0) { startIndex = 0; }\n        var rows = [];\n        var length = dataSource.length;\n        if (length) {\n            for (var i = 0; i < length; i++, startIndex++) {\n                var options = { isExpand: false };\n                options.data = dataSource[i];\n                options.index = startIndex;\n                if (gObj.childGrid) {\n                    if (gObj.hierarchyPrintMode === 'All') {\n                        options.isExpand = true;\n                    }\n                    else if (gObj.hierarchyPrintMode === 'Expanded' &&\n                        this.parent.expandedRows && this.parent.expandedRows[startIndex]) {\n                        options.isExpand = gObj.expandedRows[startIndex].isExpand;\n                    }\n                }\n                var row = new Row(options);\n                row.cells = this.generateCells(columns, gObj);\n                rows.push(row);\n            }\n            this.processColumns(rows);\n        }\n        return rows;\n    };\n    ExportHelper.prototype.generateCells = function (columns, gObj) {\n        var cells = [];\n        columns = gObj.enableColumnVirtualization && gObj.getColumns ? gObj.getColumns() : columns;\n        if (gObj.childGridLevel) {\n            var len = gObj.childGridLevel;\n            for (var i = 0; len > i; i++) {\n                cells.push(this.generateCell({}, CellType.Indent));\n            }\n        }\n        for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {\n            var col = columns_1[_i];\n            cells.push(this.generateCell(col, CellType.Data));\n        }\n        return cells;\n    };\n    ExportHelper.prototype.getColumnData = function (gridObj) {\n        var _this = this;\n        var columnPromise = [];\n        var promise;\n        var fColumns = gridObj.getForeignKeyColumns();\n        if (fColumns.length) {\n            fColumns.forEach(function (col) {\n                columnPromise.push(col.dataSource.executeQuery(new Query()));\n            });\n            promise = Promise.all(columnPromise).then(function (e) {\n                fColumns.forEach(function (col, index) {\n                    _this.foreignKeyData[col.field] = e[index].result;\n                });\n                // tslint:disable-next-line:no-any\n            });\n        }\n        return promise;\n    };\n    ExportHelper.prototype.getHeaders = function (columns, isHideColumnInclude) {\n        if (isHideColumnInclude) {\n            this.hideColumnInclude = true;\n        }\n        else {\n            this.hideColumnInclude = false;\n        }\n        this.colDepth = measureColumnDepth(columns);\n        var rows = [];\n        for (var i = 0; i < this.colDepth; i++) {\n            rows[i] = new Row({});\n            rows[i].cells = [];\n        }\n        rows = this.processColumns(rows);\n        rows = this.processHeaderCells(rows);\n        return { rows: rows, columns: this.generateActualColumns(columns) };\n    };\n    ExportHelper.prototype.getConvertedWidth = function (input) {\n        var value = parseFloat(input);\n        return (input.indexOf('%') !== -1) ? (this.parent.element.getBoundingClientRect().width * value / 100) : value;\n    };\n    ExportHelper.prototype.generateActualColumns = function (columns, actualColumns) {\n        if (actualColumns === void 0) { actualColumns = []; }\n        for (var _i = 0, columns_2 = columns; _i < columns_2.length; _i++) {\n            var column = columns_2[_i];\n            if (column.commands) {\n                continue;\n            }\n            if (!column.columns) {\n                if (column.visible || this.hideColumnInclude) {\n                    actualColumns.push(column);\n                }\n            }\n            else {\n                if (column.visible || this.hideColumnInclude) {\n                    var colSpan = this.getCellCount(column, 0);\n                    if (colSpan !== 0) {\n                        this.generateActualColumns(column.columns, actualColumns);\n                    }\n                }\n            }\n        }\n        return actualColumns;\n    };\n    ExportHelper.prototype.processHeaderCells = function (rows) {\n        var columns = this.parent.enableColumnVirtualization ? this.parent.getColumns() : this.parent.columns;\n        for (var i = 0; i < columns.length; i++) {\n            if (!columns[i].commands) {\n                rows = this.appendGridCells(columns[i], rows, 0);\n            }\n        }\n        return rows;\n    };\n    ExportHelper.prototype.appendGridCells = function (cols, gridRows, index) {\n        if (!cols.columns && (cols.visible !== false || this.hideColumnInclude) && !cols.commands) {\n            gridRows[index].cells.push(this.generateCell(cols, CellType.Header, this.colDepth - index, index));\n        }\n        else if (cols.columns) {\n            var colSpan = this.getCellCount(cols, 0);\n            if (colSpan) {\n                gridRows[index].cells.push(new Cell({\n                    cellType: CellType.StackedHeader, column: cols, colSpan: colSpan\n                }));\n            }\n            var isIgnoreFirstCell = void 0;\n            for (var i = 0, len = cols.columns.length; i < len; i++) {\n                if (cols.columns[i].visible && !isIgnoreFirstCell) {\n                    isIgnoreFirstCell = true;\n                }\n                gridRows = this.appendGridCells(cols.columns[i], gridRows, index + 1);\n            }\n        }\n        return gridRows;\n    };\n    ExportHelper.prototype.generateCell = function (gridColumn, cellType, rowSpan, rowIndex) {\n        var option = {\n            'visible': gridColumn.visible,\n            'isDataCell': cellType === CellType.Data,\n            'column': gridColumn,\n            'cellType': cellType,\n            'rowSpan': rowSpan,\n            'index': rowIndex\n        };\n        if (!option.rowSpan || option.rowSpan < 2) {\n            delete option.rowSpan;\n        }\n        return new Cell(option);\n    };\n    ExportHelper.prototype.processColumns = function (rows) {\n        //TODO: generate dummy column for group, detail, stacked row here; ensureColumns here\n        var gridObj = this.parent;\n        var columnIndexes = [];\n        if (gridObj.enableColumnVirtualization) {\n            columnIndexes = gridObj.getColumnIndexesInView();\n        }\n        for (var i = 0, len = rows.length; i < len; i++) {\n            if (gridObj.allowGrouping) {\n                for (var j = 0, len_1 = gridObj.groupSettings.columns.length; j < len_1; j++) {\n                    if (gridObj.enableColumnVirtualization && columnIndexes.indexOf(j) === -1) {\n                        continue;\n                    }\n                    rows[i].cells.splice(0, 0, this.generateCell({}, CellType.HeaderIndent));\n                }\n            }\n        }\n        return rows;\n    };\n    ExportHelper.prototype.getCellCount = function (column, count) {\n        if (column.columns) {\n            for (var i = 0; i < column.columns.length; i++) {\n                count = this.getCellCount(column.columns[i], count);\n            }\n        }\n        else {\n            if (column.visible || this.hideColumnInclude) {\n                count++;\n            }\n        }\n        return count;\n    };\n    ExportHelper.prototype.checkAndExport = function (gridPool, globalResolve) {\n        var bool = Object.keys(gridPool).some(function (key) {\n            return !gridPool[key];\n        });\n        if (!bool) {\n            globalResolve();\n        }\n    };\n    ExportHelper.prototype.failureHandler = function (gridPool, childGridObj, resolve) {\n        var _this = this;\n        return function () {\n            gridPool[childGridObj.id] = true;\n            _this.checkAndExport(gridPool, resolve);\n        };\n    };\n    // tslint:disable-next-line:no-any\n    ExportHelper.prototype.createChildGrid = function (gObj, row, exportType, gridPool) {\n        var childGridObj = new Grid(this.parent.detailRowModule.getGridModel(gObj, row, exportType));\n        gObj.isPrinting = false;\n        var parent = 'parentDetails';\n        childGridObj[parent] = {\n            parentID: gObj.element.id,\n            parentPrimaryKeys: gObj.getPrimaryKeyFieldNames(),\n            parentKeyField: gObj.childGrid.queryString,\n            parentKeyFieldValue: getValue(childGridObj.queryString, row.data),\n            parentRowData: row.data\n        };\n        var exportId = getUid('child-grid');\n        var element = createElement('div', {\n            id: exportId, styles: 'display: none'\n        });\n        document.body.appendChild(element);\n        childGridObj.id = exportId;\n        gridPool[exportId] = false;\n        return { childGrid: childGridObj, element: element };\n    };\n    return ExportHelper;\n}());\nexport { ExportHelper };\n/**\n * @hidden\n * `ExportValueFormatter` for `PdfExport` & `ExcelExport`\n */\nvar ExportValueFormatter = /** @class */ (function () {\n    function ExportValueFormatter(culture) {\n        this.valueFormatter = new ValueFormatter(culture);\n        this.internationalization = new Internationalization(culture);\n    }\n    /* tslint:disable-next-line:no-any */\n    ExportValueFormatter.prototype.returnFormattedValue = function (args, customFormat) {\n        if (!isNullOrUndefined(args.value) && args.value) {\n            return this.valueFormatter.getFormatFunction(customFormat)(args.value);\n        }\n        else {\n            return '';\n        }\n    };\n    /* tslint:disable-next-line:no-any */\n    ExportValueFormatter.prototype.formatCellValue = function (args) {\n        if (args.isForeignKey) {\n            args.value = getValue(args.column.foreignKeyValue, getForeignData(args.column, {}, args.value)[0]);\n        }\n        if (args.column.type === 'number' && args.column.format !== undefined && args.column.format !== '') {\n            return args.value ? this.internationalization.getNumberFormat({ format: args.column.format })(args.value) : '';\n        }\n        else if (args.column.type === 'boolean') {\n            return args.value ? 'true' : 'false';\n            /* tslint:disable-next-line:max-line-length */\n        }\n        else if ((args.column.type === 'date' || args.column.type === 'datetime' || args.column.type === 'time') && args.column.format !== undefined) {\n            if (typeof args.column.format === 'string') {\n                var format = void 0;\n                if (args.column.type === 'date') {\n                    format = { type: 'date', skeleton: args.column.format };\n                }\n                else if (args.column.type === 'time') {\n                    format = { type: 'time', skeleton: args.column.format };\n                }\n                else {\n                    format = { type: 'dateTime', skeleton: args.column.format };\n                }\n                return this.returnFormattedValue(args, format);\n            }\n            else {\n                if (args.column.format instanceof Object && args.column.format.type === undefined) {\n                    return (args.value.toString());\n                }\n                else {\n                    /* tslint:disable-next-line:max-line-length */\n                    var customFormat = void 0;\n                    if (args.column.type === 'date') {\n                        /* tslint:disable-next-line:max-line-length */\n                        customFormat = { type: args.column.format.type, format: args.column.format.format, skeleton: args.column.format.skeleton };\n                    }\n                    else if (args.column.type === 'time') {\n                        customFormat = { type: 'time', format: args.column.format.format, skeleton: args.column.format.skeleton };\n                    }\n                    else {\n                        customFormat = { type: 'dateTime', format: args.column.format.format, skeleton: args.column.format.skeleton };\n                    }\n                    return this.returnFormattedValue(args, customFormat);\n                }\n            }\n        }\n        else {\n            if ((!isNullOrUndefined(args.column.type) && !isNullOrUndefined(args.value)) || !isNullOrUndefined(args.value)) {\n                return (args.value).toString();\n            }\n            else {\n                return '';\n            }\n        }\n    };\n    return ExportValueFormatter;\n}());\nexport { ExportValueFormatter };\n","import { EventHandler, extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { remove } from '@syncfusion/ej2-base';\nimport { Toolbar as tool } from '@syncfusion/ej2-navigations';\nimport * as events from '../base/constant';\nimport { templateCompiler, appendChildren } from '../base/util';\nimport { SearchBox } from '../services/focus-strategy';\n/**\n * The `Toolbar` module is used to handle ToolBar actions.\n * @hidden\n */\nvar Toolbar = /** @class */ (function () {\n    function Toolbar(parent, serviceLocator) {\n        this.predefinedItems = {};\n        this.items = ['Add', 'Edit', 'Update', 'Delete', 'Cancel', 'Print', 'Search',\n            'ColumnChooser', 'PdfExport', 'ExcelExport', 'CsvExport', 'WordExport'];\n        this.parent = parent;\n        this.gridID = parent.element.id;\n        this.serviceLocator = serviceLocator;\n        this.addEventListener();\n    }\n    Toolbar.prototype.render = function () {\n        this.l10n = this.serviceLocator.getService('localization');\n        var preItems = ['Add', 'Edit', 'Update', 'Delete', 'Cancel', 'Print',\n            'PdfExport', 'ExcelExport', 'WordExport', 'CsvExport'];\n        for (var _i = 0, preItems_1 = preItems; _i < preItems_1.length; _i++) {\n            var item = preItems_1[_i];\n            var itemStr = item.toLowerCase();\n            var localeName = itemStr[0].toUpperCase() + itemStr.slice(1);\n            this.predefinedItems[item] = {\n                id: this.gridID + '_' + itemStr, prefixIcon: 'e-' + itemStr,\n                text: this.l10n.getConstant(localeName), tooltipText: this.l10n.getConstant(localeName)\n            };\n        }\n        this.predefinedItems.Search = {\n            id: this.gridID + '_search',\n            template: '<div class=\"e-input-group e-search\" role=\"search\">\\\n            <input id=\"' + this.gridID + '_searchbar\" class=\"e-input\" name=\"input\" type=\"search\" \\\n            placeholder= \\\"' + this.l10n.getConstant('Search') + '\\\"/>\\\n            <span id=\"' + this.gridID + '_searchbutton\" class=\"e-input-group-icon e-search-icon e-icons\" \\\n            tabindex=\"-1\" title=\"' + this.l10n.getConstant('Search') + '\" aria-label= \"search\"></span> \\\n            </div>',\n            tooltipText: this.l10n.getConstant('Search'), align: 'Right', cssClass: 'e-search-wrapper'\n        };\n        this.predefinedItems.ColumnChooser = {\n            id: this.gridID + '_' + 'columnchooser', cssClass: 'e-cc e-ccdiv e-cc-toolbar', suffixIcon: 'e-' + 'columnchooser-btn',\n            text: this.l10n.getConstant('Columnchooser'), tooltipText: this.l10n.getConstant('Columnchooser'), align: 'Right',\n        };\n        this.createToolbar();\n    };\n    /**\n     * Gets the toolbar of the Grid.\n     * @return {Element}\n     * @hidden\n     */\n    Toolbar.prototype.getToolbar = function () {\n        return this.toolbar.element;\n    };\n    /**\n     * Destroys the ToolBar.\n     * @method destroy\n     * @return {void}\n     */\n    Toolbar.prototype.destroy = function () {\n        if (this.toolbar && !this.toolbar.isDestroyed) {\n            if (!this.toolbar.element) {\n                this.parent.destroyTemplate(['toolbarTemplate']);\n            }\n            else {\n                this.toolbar.destroy();\n            }\n            this.unWireEvent();\n            this.removeEventListener();\n            remove(this.element);\n        }\n    };\n    Toolbar.prototype.createToolbar = function () {\n        var items = this.getItems();\n        this.toolbar = new tool({\n            items: items,\n            clicked: this.toolbarClickHandler.bind(this),\n            enablePersistence: this.parent.enablePersistence,\n            enableRtl: this.parent.enableRtl\n        });\n        var viewStr = 'viewContainerRef';\n        var registerTemp = 'registeredTemplate';\n        if (this.parent[viewStr]) {\n            this.toolbar[registerTemp] = {};\n            this.toolbar[viewStr] = this.parent[viewStr];\n        }\n        this.element = this.parent.createElement('div', { id: this.gridID + '_toolbarItems' });\n        if (this.parent.toolbarTemplate) {\n            if (typeof (this.parent.toolbarTemplate) === 'string') {\n                this.toolbar.appendTo(this.parent.toolbarTemplate);\n                this.element = this.toolbar.element;\n            }\n            else {\n                appendChildren(this.element, templateCompiler(this.parent.toolbarTemplate)({}, this.parent, 'toolbarTemplate'));\n            }\n        }\n        else {\n            this.toolbar.appendTo(this.element);\n        }\n        this.parent.element.insertBefore(this.element, this.parent.getHeaderContent());\n        this.searchElement = this.element.querySelector('#' + this.gridID + '_searchbar');\n        this.wireEvent();\n        this.refreshToolbarItems();\n        if (this.parent.searchSettings) {\n            this.updateSearchBox();\n        }\n    };\n    Toolbar.prototype.refreshToolbarItems = function (args) {\n        var gObj = this.parent;\n        var enableItems = [];\n        var disableItems = [];\n        var edit = gObj.editSettings;\n        var hasData = gObj.currentViewData && gObj.currentViewData.length;\n        edit.allowAdding ? enableItems.push(this.gridID + '_add') : disableItems.push(this.gridID + '_add');\n        edit.allowEditing && hasData ? enableItems.push(this.gridID + '_edit') : disableItems.push(this.gridID + '_edit');\n        edit.allowDeleting && hasData ? enableItems.push(this.gridID + '_delete') : disableItems.push(this.gridID + '_delete');\n        if (gObj.editSettings.mode === 'Batch') {\n            if (gObj.element.querySelectorAll('.e-updatedtd').length && (edit.allowAdding || edit.allowEditing)) {\n                enableItems.push(this.gridID + '_update');\n                enableItems.push(this.gridID + '_cancel');\n            }\n            else {\n                disableItems.push(this.gridID + '_update');\n                disableItems.push(this.gridID + '_cancel');\n            }\n        }\n        else {\n            if (gObj.isEdit && (edit.allowAdding || edit.allowEditing)) {\n                enableItems = [this.gridID + '_update', this.gridID + '_cancel'];\n                disableItems = [this.gridID + '_add', this.gridID + '_edit', this.gridID + '_delete'];\n            }\n            else {\n                disableItems.push(this.gridID + '_update');\n                disableItems.push(this.gridID + '_cancel');\n            }\n        }\n        this.enableItems(enableItems, true);\n        this.enableItems(disableItems, false);\n    };\n    Toolbar.prototype.getItems = function () {\n        var items = [];\n        var toolbarItems = this.parent.toolbar || [];\n        if (typeof (this.parent.toolbar) === 'string') {\n            return [];\n        }\n        for (var _i = 0, toolbarItems_1 = toolbarItems; _i < toolbarItems_1.length; _i++) {\n            var item = toolbarItems_1[_i];\n            switch (typeof item) {\n                case 'number':\n                    items.push(this.getItemObject(this.items[item]));\n                    break;\n                case 'string':\n                    items.push(this.getItemObject(item));\n                    break;\n                default:\n                    items.push(this.getItem(item));\n            }\n        }\n        return items;\n    };\n    Toolbar.prototype.getItem = function (itemObject) {\n        var item = this.predefinedItems[itemObject.text];\n        return item ? extend(item, item, itemObject) : itemObject;\n    };\n    Toolbar.prototype.getItemObject = function (itemName) {\n        return this.predefinedItems[itemName] || { text: itemName, id: this.gridID + '_' + itemName };\n    };\n    /**\n     * Enables or disables ToolBar items.\n     * @param {string[]} items - Defines the collection of itemID of ToolBar items.\n     * @param {boolean} isEnable - Defines the items to be enabled or disabled.\n     * @return {void}\n     * @hidden\n     */\n    Toolbar.prototype.enableItems = function (items, isEnable) {\n        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {\n            var item = items_1[_i];\n            var element = this.element.querySelector('#' + item);\n            if (element) {\n                this.toolbar.enableItems(element.parentElement, isEnable);\n            }\n        }\n    };\n    Toolbar.prototype.toolbarClickHandler = function (args) {\n        var gObj = this.parent;\n        var gID = this.gridID;\n        extend(args, { cancel: false });\n        gObj.trigger(events.toolbarClick, args);\n        if (args.cancel) {\n            return;\n        }\n        switch (!isNullOrUndefined(args.item) && args.item.id) {\n            case gID + '_print':\n                gObj.print();\n                break;\n            case gID + '_edit':\n                gObj.startEdit();\n                break;\n            case gID + '_update':\n                gObj.endEdit();\n                break;\n            case gID + '_cancel':\n                gObj.closeEdit();\n                break;\n            case gID + '_add':\n                gObj.addRecord();\n                break;\n            case gID + '_delete':\n                gObj.deleteRecord();\n                break;\n            case gID + '_search':\n                if (args.originalEvent.target.id === gID + '_searchbutton') {\n                    this.search();\n                }\n                break;\n            case gID + '_columnchooser':\n                var tarElement = this.parent.element.querySelector('.e-ccdiv');\n                var y = tarElement.getBoundingClientRect().top;\n                var x = tarElement.getBoundingClientRect().left;\n                var targetEle = args.originalEvent.target;\n                y = tarElement.getBoundingClientRect().top + tarElement.offsetTop;\n                gObj.createColumnchooser(x, y, targetEle);\n                break;\n        }\n    };\n    Toolbar.prototype.modelChanged = function (e) {\n        if (e.module === 'edit') {\n            this.refreshToolbarItems();\n        }\n    };\n    Toolbar.prototype.onPropertyChanged = function (e) {\n        if (e.module !== this.getModuleName() || !this.parent.toolbar) {\n            return;\n        }\n        if (this.element) {\n            remove(this.element);\n        }\n        this.render();\n    };\n    Toolbar.prototype.keyUpHandler = function (e) {\n        if (e.keyCode === 13) {\n            this.search();\n        }\n    };\n    Toolbar.prototype.search = function () {\n        this.parent.search(this.searchElement.value);\n    };\n    Toolbar.prototype.updateSearchBox = function () {\n        if (this.searchElement) {\n            this.searchElement.value = this.parent.searchSettings.key;\n        }\n    };\n    Toolbar.prototype.wireEvent = function () {\n        if (this.searchElement) {\n            this.searchBoxObj = new SearchBox(this.searchElement);\n            EventHandler.add(this.searchElement, 'keyup', this.keyUpHandler, this);\n            this.searchBoxObj.wireEvent();\n        }\n    };\n    Toolbar.prototype.unWireEvent = function () {\n        if (this.searchElement) {\n            EventHandler.remove(this.searchElement, 'keyup', this.keyUpHandler);\n            this.searchBoxObj.unWireEvent();\n        }\n    };\n    Toolbar.prototype.addEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.on(events.initialEnd, this.render, this);\n        this.parent.on(events.uiUpdate, this.onPropertyChanged, this);\n        this.parent.on(events.inBoundModelChanged, this.updateSearchBox.bind(this));\n        this.parent.on(events.modelChanged, this.refreshToolbarItems, this);\n        this.parent.on(events.toolbarRefresh, this.refreshToolbarItems, this);\n        this.parent.on(events.inBoundModelChanged, this.modelChanged, this);\n        this.parent.on(events.dataBound, this.refreshToolbarItems, this);\n    };\n    Toolbar.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(events.initialEnd, this.render);\n        this.parent.off(events.uiUpdate, this.onPropertyChanged);\n        this.parent.off(events.inBoundModelChanged, this.updateSearchBox);\n        this.parent.off(events.modelChanged, this.refreshToolbarItems);\n        this.parent.off(events.toolbarRefresh, this.refreshToolbarItems);\n        this.parent.off(events.inBoundModelChanged, this.modelChanged);\n        this.parent.off(events.dataBound, this.refreshToolbarItems);\n    };\n    /**\n     * For internal use only - Get the module name.\n     */\n    Toolbar.prototype.getModuleName = function () {\n        return 'toolbar';\n    };\n    return Toolbar;\n}());\nexport { Toolbar };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { PdfDictionary } from './pdf-dictionary';\nimport { PdfNumber } from './pdf-number';\nimport { Operators } from './../input-output/pdf-operators';\nimport { PdfName } from './pdf-name';\nimport { PdfArray } from './pdf-array';\nimport { PdfReferenceHolder } from './pdf-reference';\nimport { CompressedStreamWriter } from '@syncfusion/ej2-compression';\n/**\n * `PdfStream` class is used to perform stream related primitive operations.\n * @private\n */\nvar PdfStream = /** @class */ (function (_super) {\n    __extends(PdfStream, _super);\n    function PdfStream(dictionary, data) {\n        var _this = _super.call(this, dictionary) || this;\n        //Constants\n        /**\n         * @hidden\n         * @private\n         */\n        _this.dicPrefix = 'stream';\n        /**\n         * @hidden\n         * @private\n         */\n        _this.dicSuffix = 'endstream';\n        /**\n         * Internal variable to hold `cloned object`.\n         * @private\n         */\n        _this.clonedObject2 = null;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.bCompress = true;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.isImageStream = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.isFontStream = false;\n        if (typeof dictionary !== 'undefined' || typeof data !== 'undefined') {\n            _this.dataStream2 = [];\n            _this.dataStream2 = data;\n            _this.bCompress2 = false;\n        }\n        else {\n            _this.dataStream2 = [];\n            _this.bCompress2 = true;\n            //Pending\n        }\n        return _this;\n    }\n    Object.defineProperty(PdfStream.prototype, \"internalStream\", {\n        /**\n         * Gets the `internal` stream.\n         * @private\n         */\n        get: function () {\n            return this.dataStream2;\n        },\n        set: function (value) {\n            this.dataStream2 = [];\n            this.dataStream2 = value;\n            this.modify();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStream.prototype, \"isImage\", {\n        /**\n         * Gets or sets 'is image' flag.\n         * @private\n         */\n        get: function () {\n            return this.isImageStream;\n        },\n        set: function (value) {\n            this.isImageStream = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStream.prototype, \"isFont\", {\n        /**\n         * Gets or sets 'is font' flag.\n         * @private\n         */\n        get: function () {\n            return this.isFontStream;\n        },\n        set: function (value) {\n            this.isFontStream = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStream.prototype, \"compress\", {\n        /**\n         * Gets or sets `compression` flag.\n         * @private\n         */\n        get: function () {\n            return this.bCompress;\n        },\n        set: function (value) {\n            this.bCompress = value;\n            this.modify();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfStream.prototype, \"data\", {\n        /**\n         * Gets or sets the `data`.\n         * @private\n         */\n        get: function () {\n            return this.dataStream2;\n        },\n        set: function (value) {\n            this.dataStream2 = [];\n            this.dataStream2 = value;\n            this.modify();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * `Clear` the internal stream.\n     * @private\n     */\n    PdfStream.prototype.clearStream = function () {\n        this.internalStream = [];\n        if (this.items.containsKey(this.dictionaryProperties.filter)) {\n            this.remove(this.dictionaryProperties.filter);\n        }\n        this.bCompress = true;\n        this.modify();\n    };\n    /**\n     * `Writes` the specified string.\n     * @private\n     */\n    PdfStream.prototype.write = function (text) {\n        if (text == null) {\n            throw new Error('ArgumentNullException:text');\n        }\n        if (text.length <= 0) {\n            throw new Error('ArgumentException: Can not write an empty string, text');\n        }\n        this.dataStream2.push(text);\n        this.modify();\n    };\n    /**\n     * `Writes` the specified bytes.\n     * @private\n     */\n    PdfStream.prototype.writeBytes = function (data) {\n        if (data === null) {\n            throw new Error('ArgumentNullException:data');\n        }\n        if (data.length <= 0) {\n            throw new Error('ArgumentException: Can not write an empty bytes, data');\n        }\n        var text = '';\n        for (var i = 0; i < data.length; i++) {\n            text += String.fromCharCode(data[i]);\n        }\n        this.dataStream2.push(text);\n        this.modify();\n    };\n    /**\n     * Raises event `Cmap BeginSave`.\n     * @private\n     */\n    PdfStream.prototype.onCmapBeginSave = function () {\n        this.cmapBeginSave.sender.cmapBeginSave();\n    };\n    /**\n     * Raises event `Font Program BeginSave`.\n     * @private\n     */\n    PdfStream.prototype.onFontProgramBeginSave = function () {\n        this.fontProgramBeginSave.sender.fontProgramBeginSave();\n    };\n    /**\n     * `Compresses the content` if it's required.\n     * @private\n     */\n    PdfStream.prototype.compressContent = function (data, writer) {\n        if (this.bCompress) {\n            var byteArray = [];\n            for (var i = 0; i < data.length; i++) {\n                byteArray.push(data.charCodeAt(i));\n            }\n            var dataArray = new Uint8Array(byteArray);\n            var sw = new CompressedStreamWriter();\n            // data = 'Hello World!!!';\n            sw.write(dataArray, 0, dataArray.length);\n            sw.close();\n            data = sw.getCompressedString;\n            this.addFilter(this.dictionaryProperties.flatedecode);\n        }\n        return data;\n    };\n    /**\n     * `Adds a filter` to the filter array.\n     * @private\n     */\n    PdfStream.prototype.addFilter = function (filterName) {\n        var obj = this.items.getValue(this.dictionaryProperties.filter);\n        if (obj instanceof PdfReferenceHolder) {\n            var rh = obj;\n            obj = rh.object;\n        }\n        var array = obj;\n        var name = obj;\n        if (name != null) {\n            array = new PdfArray();\n            array.insert(0, name);\n            this.items.setValue(this.dictionaryProperties.filter, array);\n        }\n        name = new PdfName(filterName);\n        if (array == null) {\n            this.items.setValue(this.dictionaryProperties.filter, name);\n        }\n        else {\n            array.insert(0, name);\n        }\n    };\n    /**\n     * `Saves` the object using the specified writer.\n     * @private\n     */\n    PdfStream.prototype.save = function (writer) {\n        if (typeof this.cmapBeginSave !== 'undefined') {\n            this.onCmapBeginSave();\n        }\n        if (typeof this.fontProgramBeginSave !== 'undefined') {\n            this.onFontProgramBeginSave();\n        }\n        var data = '';\n        for (var i = 0; i < this.data.length; i++) {\n            data = data + this.data[i];\n        }\n        if (data.length > 1 && !this.isImage && !this.isFont) {\n            data = 'q\\r\\n' + data + 'Q\\r\\n';\n        }\n        data = this.compressContent(data, writer);\n        var length = data.length;\n        this.items.setValue(this.dictionaryProperties.length, new PdfNumber(length));\n        _super.prototype.save.call(this, writer, false);\n        writer.write(this.dicPrefix);\n        writer.write(Operators.newLine);\n        if (data.length > 0) {\n            writer.write(data);\n        }\n        writer.write(Operators.newLine);\n        writer.write(this.dicSuffix);\n        writer.write(Operators.newLine);\n    };\n    /**\n     * Converts `bytes to string`.\n     * @private\n     */\n    PdfStream.bytesToString = function (byteArray) {\n        var output = '';\n        for (var i = 0; i < byteArray.length; i++) {\n            output = output + String.fromCharCode(byteArray[i]);\n        }\n        return output;\n    };\n    return PdfStream;\n}(PdfDictionary));\nexport { PdfStream };\nvar SaveCmapEventHandler = /** @class */ (function () {\n    /**\n     * New instance for `save section collection event handler` class.\n     * @private\n     */\n    function SaveCmapEventHandler(sender) {\n        this.sender = sender;\n    }\n    return SaveCmapEventHandler;\n}());\nexport { SaveCmapEventHandler };\nvar SaveFontProgramEventHandler = /** @class */ (function () {\n    /**\n     * New instance for `save section collection event handler` class.\n     * @private\n     */\n    function SaveFontProgramEventHandler(sender) {\n        this.sender = sender;\n    }\n    return SaveFontProgramEventHandler;\n}());\nexport { SaveFontProgramEventHandler };\n","/**\n * Coordinates of Position for `PointF`.\n * @private\n */\nvar PointF = /** @class */ (function () {\n    function PointF(x, y) {\n        if (typeof x === 'undefined') {\n            this.x = 0;\n            this.y = 0;\n        }\n        else {\n            if (x !== null) {\n                this.x = x;\n            }\n            else {\n                this.x = 0;\n            }\n            if (y !== null) {\n                this.y = y;\n            }\n            else {\n                this.y = 0;\n            }\n        }\n    }\n    return PointF;\n}());\nexport { PointF };\n/**\n * Width and Height as `Size`.\n * @private\n */\nvar SizeF = /** @class */ (function () {\n    function SizeF(width, height) {\n        if (typeof height === 'undefined') {\n            this.height = 0;\n            this.width = 0;\n        }\n        else {\n            if (height !== null) {\n                this.height = height;\n            }\n            else {\n                this.height = 0;\n            }\n            if (width !== null) {\n                this.width = width;\n            }\n            else {\n                this.width = 0;\n            }\n        }\n    }\n    return SizeF;\n}());\nexport { SizeF };\n/**\n * `RectangleF` with Position and size.\n * @private\n */\nvar RectangleF = /** @class */ (function () {\n    function RectangleF(arg1, arg2, arg3, arg4) {\n        if (typeof arg1 === typeof arg1 && typeof arg1 === 'undefined') {\n            this.x = 0;\n            this.y = 0;\n            this.height = 0;\n            this.width = 0;\n        }\n        else {\n            if (arg1 instanceof PointF && arg2 instanceof SizeF && typeof arg3 === 'undefined') {\n                var pointf = arg1;\n                this.x = pointf.x;\n                this.y = pointf.y;\n                var sizef = arg2;\n                this.height = sizef.height;\n                this.width = sizef.width;\n            }\n            else {\n                var x = arg1;\n                var y = arg2;\n                var width = arg3;\n                var height = arg4;\n                this.x = x;\n                this.y = y;\n                this.height = height;\n                this.width = width;\n            }\n        }\n    }\n    return RectangleF;\n}());\nexport { RectangleF };\n/**\n * `Rectangle` with left, right, top and bottom.\n * @private\n */\nvar Rectangle = /** @class */ (function () {\n    /**\n     * Instance of `RectangleF` class with X, Y, Width and Height.\n     * @private\n     */\n    function Rectangle(left, top, right, bottom) {\n        this.left = left;\n        this.top = top;\n        this.right = right;\n        this.bottom = bottom;\n    }\n    Object.defineProperty(Rectangle.prototype, \"width\", {\n        /**\n         * Gets a value of width\n         */\n        get: function () {\n            return this.right - this.left;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rectangle.prototype, \"height\", {\n        /**\n         * Gets a value of height\n         */\n        get: function () {\n            return this.bottom - this.top;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rectangle.prototype, \"topLeft\", {\n        /**\n         * Gets a value of Top and Left\n         */\n        get: function () {\n            return new PointF(this.left, this.top);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rectangle.prototype, \"size\", {\n        /**\n         * Gets a value of size\n         */\n        get: function () {\n            return new SizeF(this.width, this.height);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Rectangle.prototype.toString = function () {\n        return this.topLeft + 'x' + this.size;\n    };\n    return Rectangle;\n}());\nexport { Rectangle };\n","/**\n * Save class provide method to save file\n * ```typescript\n * let blob : Blob = new Blob([''], { type: 'text/plain' });\n * Save.save('fileName.txt',blob);\n */\nvar Save = /** @class */ (function () {\n    /**\n     * Initialize new instance of {save}\n     */\n    function Save() {\n        // tslint:disable\n    }\n    /**\n     * Saves the file with specified name and sends the file to client browser\n     * @param  {string} fileName- file name to save.\n     * @param  {Blob} buffer- the content to write in file\n     * @param  {boolean} isMicrosoftBrowser- specify whether microsoft browser or not\n     * @returns {void}\n     */\n    Save.save = function (fileName, buffer) {\n        if (fileName === null || fileName === undefined || fileName === '') {\n            throw new Error('ArgumentException: fileName cannot be undefined, null or empty');\n        }\n        var extension = fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length);\n        var mimeType = this.getMimeType(extension);\n        if (mimeType !== '') {\n            buffer = new Blob([buffer], { type: mimeType });\n        }\n        if (this.isMicrosoftBrowser) {\n            navigator.msSaveBlob(buffer, fileName);\n        }\n        else {\n            var downloadLink = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');\n            this.saveInternal(fileName, extension, buffer, downloadLink, 'download' in downloadLink);\n        }\n    };\n    Save.saveInternal = function (fileName, extension, buffer, downloadLink, hasDownloadAttribute) {\n        if (hasDownloadAttribute) {\n            downloadLink.download = fileName;\n            var dataUrl_1 = window.URL.createObjectURL(buffer);\n            downloadLink.href = dataUrl_1;\n            var event_1 = document.createEvent('MouseEvent');\n            event_1.initEvent('click', true, true);\n            downloadLink.dispatchEvent(event_1);\n            setTimeout(function () {\n                window.URL.revokeObjectURL(dataUrl_1);\n                dataUrl_1 = undefined;\n            });\n        }\n        else {\n            if (extension !== 'docx' && extension !== 'xlsx') {\n                var url = window.URL.createObjectURL(buffer);\n                var isPopupBlocked = window.open(url, '_blank');\n                if (!isPopupBlocked) {\n                    window.location.href = url;\n                }\n            }\n            else {\n                var reader_1 = new FileReader();\n                reader_1.onloadend = function () {\n                    var isPopupBlocked = window.open(reader_1.result, '_blank');\n                    if (!isPopupBlocked) {\n                        window.location.href = reader_1.result;\n                    }\n                };\n                reader_1.readAsDataURL(buffer);\n            }\n        }\n    };\n    /**\n     *\n     * @param {string} extension - get mime type of the specified extension\n     * @private\n     */\n    Save.getMimeType = function (extension) {\n        var mimeType = '';\n        switch (extension) {\n            case 'html':\n                mimeType = 'text/html';\n                break;\n            case 'pdf':\n                mimeType = 'application/pdf';\n                break;\n            case 'docx':\n                mimeType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\n                break;\n            case 'xlsx':\n                mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n                break;\n            case 'txt':\n                mimeType = 'text/plain';\n                break;\n        }\n        return mimeType;\n    };\n    return Save;\n}());\nexport { Save };\n","/**\n * PdfPageSize.ts class for EJ2-PDF\n */\nimport { SizeF } from './../drawing/pdf-drawing';\n/**\n * Represents information about various predefined `page sizes`.\n */\nvar PdfPageSize = /** @class */ (function () {\n    //constructor\n    /**\n     * Initialize an instance for `PdfPageSize` class.\n     * @private\n     */\n    function PdfPageSize() {\n        // \n    }\n    /**\n     * Specifies the size of `letter`.\n     * @private\n     */\n    PdfPageSize.letter = new SizeF(612, 792);\n    /**\n     * Specifies the size of `note`.\n     * @private\n     */\n    PdfPageSize.note = new SizeF(540, 720);\n    /**\n     * Specifies the size of `legal`.\n     * @private\n     */\n    PdfPageSize.legal = new SizeF(612, 1008);\n    /**\n     * Specifies the size of `a0`.\n     * @private\n     */\n    PdfPageSize.a0 = new SizeF(2380, 3368);\n    /**\n     * Specifies the size of `a1`.\n     * @private\n     */\n    PdfPageSize.a1 = new SizeF(1684, 2380);\n    /**\n     * Specifies the size of `a2`.\n     * @private\n     */\n    PdfPageSize.a2 = new SizeF(1190, 1684);\n    /**\n     * Specifies the size of `a3`.\n     * @private\n     */\n    PdfPageSize.a3 = new SizeF(842, 1190);\n    /**\n     * Specifies the size of `a4`.\n     * @private\n     */\n    PdfPageSize.a4 = new SizeF(595, 842);\n    /**\n     * Specifies the size of `a5`.\n     * @private\n     */\n    PdfPageSize.a5 = new SizeF(421, 595);\n    /**\n     * Specifies the size of `a6`.\n     * @private\n     */\n    PdfPageSize.a6 = new SizeF(297, 421);\n    /**\n     * Specifies the size of `a7`.\n     * @private\n     */\n    PdfPageSize.a7 = new SizeF(210, 297);\n    /**\n     * Specifies the size of `a8`.\n     * @private\n     */\n    PdfPageSize.a8 = new SizeF(148, 210);\n    /**\n     * Specifies the size of `a9`.\n     * @private\n     */\n    PdfPageSize.a9 = new SizeF(105, 148);\n    /**\n     * Specifies the size of `a10`.\n     * @private\n     */\n    PdfPageSize.a10 = new SizeF(74, 105);\n    /**\n     * Specifies the size of `b0`.\n     * @private\n     */\n    PdfPageSize.b0 = new SizeF(2836, 4008);\n    /**\n     * Specifies the size of `b1`.\n     * @private\n     */\n    PdfPageSize.b1 = new SizeF(2004, 2836);\n    /**\n     * Specifies the size of `b2`.\n     * @private\n     */\n    PdfPageSize.b2 = new SizeF(1418, 2004);\n    /**\n     * Specifies the size of `b3`.\n     * @private\n     */\n    PdfPageSize.b3 = new SizeF(1002, 1418);\n    /**\n     * Specifies the size of `b4`.\n     * @private\n     */\n    PdfPageSize.b4 = new SizeF(709, 1002);\n    /**\n     * Specifies the size of `b5`.\n     * @private\n     */\n    PdfPageSize.b5 = new SizeF(501, 709);\n    /**\n     * Specifies the size of `archE`.\n     * @private\n     */\n    PdfPageSize.archE = new SizeF(2592, 3456);\n    /**\n     * Specifies the size of `archD`.\n     * @private\n     */\n    PdfPageSize.archD = new SizeF(1728, 2592);\n    /**\n     * Specifies the size of `archC`.\n     * @private\n     */\n    PdfPageSize.archC = new SizeF(1296, 1728);\n    /**\n     * Specifies the size of `archB`.\n     * @private\n     */\n    PdfPageSize.archB = new SizeF(864, 1296);\n    /**\n     * Specifies the size of `archA`.\n     * @private\n     */\n    PdfPageSize.archA = new SizeF(648, 864);\n    /**\n     * Specifies the size of `flsa`.\n     * @private\n     */\n    PdfPageSize.flsa = new SizeF(612, 936);\n    /**\n     * Specifies the size of `halfLetter`.\n     * @private\n     */\n    PdfPageSize.halfLetter = new SizeF(396, 612);\n    /**\n     * Specifies the size of `letter11x17`.\n     * @private\n     */\n    PdfPageSize.letter11x17 = new SizeF(792, 1224);\n    /**\n     * Specifies the size of `ledger`.\n     * @private\n     */\n    PdfPageSize.ledger = new SizeF(1224, 792);\n    return PdfPageSize;\n}());\nexport { PdfPageSize };\n","/**\n * PdfMargins.ts class for EJ2-PDF\n * A class representing PDF page margins.\n */\nvar PdfMargins = /** @class */ (function () {\n    /**\n     * Initializes a new instance of the `PdfMargins` class.\n     * @private\n     */\n    function PdfMargins() {\n        /**\n         * Represents the `Default Page Margin` value.\n         * @default 0.0\n         * @private\n         */\n        this.pdfMargin = 40.0;\n        this.setMargins(this.pdfMargin);\n    }\n    Object.defineProperty(PdfMargins.prototype, \"left\", {\n        //Properties\n        /**\n         * Gets or sets the `left margin` size.\n         * @private\n         */\n        get: function () {\n            return this.leftMargin;\n        },\n        set: function (value) {\n            this.leftMargin = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfMargins.prototype, \"top\", {\n        /**\n         * Gets or sets the `top margin` size.\n         * @private\n         */\n        get: function () {\n            return this.topMargin;\n        },\n        set: function (value) {\n            this.topMargin = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfMargins.prototype, \"right\", {\n        /**\n         * Gets or sets the `right margin` size.\n         * @private\n         */\n        get: function () {\n            return this.rightMargin;\n        },\n        set: function (value) {\n            this.rightMargin = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfMargins.prototype, \"bottom\", {\n        /**\n         * Gets or sets the `bottom margin` size.\n         * @private\n         */\n        get: function () {\n            return this.bottomMargin;\n        },\n        set: function (value) {\n            this.bottomMargin = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfMargins.prototype, \"all\", {\n        /**\n         * Sets the `margins`.\n         * @private\n         */\n        set: function (value) {\n            this.setMargins(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfMargins.prototype.setMargins = function (margin1, margin2, margin3, margin4) {\n        if (typeof margin2 === 'undefined') {\n            this.leftMargin = this.topMargin = this.rightMargin = this.bottomMargin = margin1;\n        }\n        else {\n            if (typeof margin3 === 'undefined') {\n                this.leftMargin = this.rightMargin = margin1;\n                this.bottomMargin = this.topMargin = margin2;\n            }\n            else {\n                this.leftMargin = margin1;\n                this.topMargin = margin2;\n                this.rightMargin = margin3;\n                this.bottomMargin = margin4;\n            }\n        }\n    };\n    /**\n     * `Clones` the object.\n     * @private\n     */\n    PdfMargins.prototype.clone = function () {\n        return this;\n    };\n    return PdfMargins;\n}());\nexport { PdfMargins };\n","/**\n * PdfPageSettings.ts class for EJ2-PDF\n */\nimport { SizeF, PointF } from './../drawing/pdf-drawing';\nimport { PdfPageSize } from './pdf-page-size';\nimport { PdfPageRotateAngle, PdfPageOrientation } from './enum';\nimport { PdfMargins } from './../graphics/pdf-margins';\n/**\n * The class provides various `setting` related with PDF pages.\n */\nvar PdfPageSettings = /** @class */ (function () {\n    function PdfPageSettings(margins) {\n        //Fields\n        /**\n         * The page `margins`.\n         * @private\n         */\n        this.pageMargins = new PdfMargins();\n        /**\n         * The page `size`.\n         * @default a4\n         * @private\n         */\n        this.pageSize = PdfPageSize.a4;\n        /**\n         * The page `rotation angle`.\n         * @default PdfPageRotateAngle.RotateAngle0\n         * @private\n         */\n        this.rotateAngle = PdfPageRotateAngle.RotateAngle0;\n        /**\n         * The page `orientation`.\n         * @default PdfPageOrientation.Portrait\n         * @private\n         */\n        this.pageOrientation = PdfPageOrientation.Portrait;\n        /**\n         * The page `origin`.\n         * @default 0,0\n         * @private\n         */\n        this.pageOrigin = new PointF(0, 0);\n        /**\n         * Checks the Whether the `rotation` is applied or not.\n         * @default false\n         * @private\n         */\n        this.isRotation = false;\n        if (typeof margins === 'number') {\n            this.pageMargins.setMargins(margins);\n        }\n    }\n    Object.defineProperty(PdfPageSettings.prototype, \"size\", {\n        //Properties\n        /**\n         * Gets or sets the `size` of the page.\n         * @private\n         */\n        get: function () {\n            return this.pageSize;\n        },\n        set: function (value) {\n            this.setSize(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageSettings.prototype, \"orientation\", {\n        /**\n         * Gets or sets the page `orientation`.\n         * @private\n         */\n        get: function () {\n            return this.pageOrientation;\n        },\n        set: function (orientation) {\n            if (this.pageOrientation !== orientation) {\n                this.pageOrientation = orientation;\n                this.updateSize(orientation);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageSettings.prototype, \"margins\", {\n        /**\n         * Gets or sets the `margins` of the page.\n         * @private\n         */\n        get: function () {\n            return this.pageMargins;\n        },\n        set: function (value) {\n            this.pageMargins = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageSettings.prototype, \"width\", {\n        /**\n         * Gets or sets the `width` of the page.\n         * @private\n         */\n        get: function () {\n            return this.pageSize.width;\n        },\n        set: function (value) {\n            this.pageSize.width = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageSettings.prototype, \"height\", {\n        /**\n         * Gets or sets the `height` of the page.\n         * @private\n         */\n        get: function () {\n            return this.pageSize.height;\n        },\n        set: function (value) {\n            this.pageSize.height = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageSettings.prototype, \"origin\", {\n        /**\n         * Gets or sets the `origin` of the page.\n         * @private\n         */\n        get: function () {\n            return this.pageOrigin;\n        },\n        set: function (value) {\n            this.pageOrigin = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfPageSettings.prototype, \"rotate\", {\n        /**\n         * Gets or sets the number of degrees by which the page should be `rotated` clockwise when displayed or printed.\n         * @private\n         */\n        get: function () {\n            return this.rotateAngle;\n        },\n        set: function (value) {\n            this.rotateAngle = value;\n            this.isRotation = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Methods\n    /**\n     * `Update page size` depending on orientation.\n     * @private\n     */\n    PdfPageSettings.prototype.updateSize = function (orientation) {\n        var min = Math.min(this.pageSize.width, this.pageSize.height);\n        var max = Math.max(this.pageSize.width, this.pageSize.height);\n        switch (orientation) {\n            case PdfPageOrientation.Portrait:\n                this.pageSize = new SizeF(min, max);\n                break;\n            case PdfPageOrientation.Landscape:\n                this.pageSize = new SizeF(max, min);\n                break;\n        }\n    };\n    /**\n     * Creates a `clone` of the object.\n     * @private\n     */\n    PdfPageSettings.prototype.clone = function () {\n        var settings = this;\n        settings.pageMargins = this.pageMargins.clone();\n        // if (GetTransition() != null)\n        // {\n        //     settings.Transition = (PdfPageTransition)Transition.clone();\n        // }\n        return settings;\n    };\n    /**\n     * Returns `size`, shrinked by the margins.\n     * @private\n     */\n    PdfPageSettings.prototype.getActualSize = function () {\n        var width = this.width - (this.margins.left + this.margins.right);\n        var height = this.height - (this.margins.top + this.margins.bottom);\n        var size = new SizeF(width, height);\n        return size;\n    };\n    /**\n     * Sets `size` to the page aaccording to the orientation.\n     * @private\n     */\n    PdfPageSettings.prototype.setSize = function (size) {\n        var min = Math.min(size.width, size.height);\n        var max = Math.max(size.width, size.height);\n        if (this.orientation === PdfPageOrientation.Portrait) {\n            this.pageSize = new SizeF(min, max);\n        }\n        else {\n            this.pageSize = new SizeF(max, min);\n        }\n    };\n    return PdfPageSettings;\n}());\nexport { PdfPageSettings };\n","/**\n * Encoding class: Contains the details about encoding type, whether to write a Unicode byte order mark (BOM).\n * ```typescript\n * let encoding : Encoding = new Encoding();\n * encoding.type = 'Utf8';\n * encoding.getBytes('Encoding', 0, 5);\n * ```\n */\nvar Encoding = /** @class */ (function () {\n    /**\n     * Initializes a new instance of the Encoding class. A parameter specifies whether to write a Unicode byte order mark\n     * @param  {boolean} includeBom?-true to specify that a Unicode byte order mark is written; otherwise, false.\n     */\n    function Encoding(includeBom) {\n        this.emitBOM = true;\n        this.encodingType = 'Ansi';\n        this.initBOM(includeBom);\n    }\n    Object.defineProperty(Encoding.prototype, \"includeBom\", {\n        /**\n         * Gets a value indicating whether to write a Unicode byte order mark\n         * @returns boolean- true to specify that a Unicode byte order mark is written; otherwise, false\n         */\n        get: function () {\n            return this.emitBOM;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Encoding.prototype, \"type\", {\n        /**\n         * Gets the encoding type.\n         * @returns EncodingType\n         */\n        get: function () {\n            return this.encodingType;\n        },\n        /**\n         * Sets the encoding type.\n         * @param  {EncodingType} value\n         */\n        set: function (value) {\n            this.encodingType = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Initialize the includeBom to emit BOM or Not\n     * @param  {boolean} includeBom\n     */\n    Encoding.prototype.initBOM = function (includeBom) {\n        if (includeBom === undefined || includeBom === null) {\n            this.emitBOM = true;\n        }\n        else {\n            this.emitBOM = includeBom;\n        }\n    };\n    /**\n     * Calculates the number of bytes produced by encoding the characters in the specified string\n     * @param  {string} chars - The string containing the set of characters to encode\n     * @returns {number} - The number of bytes produced by encoding the specified characters\n     */\n    Encoding.prototype.getByteCount = function (chars) {\n        var byteCount = 0;\n        validateNullOrUndefined(chars, 'string');\n        if (chars === '') {\n            var byte = this.utf8Len(chars.charCodeAt(0));\n            return byte;\n        }\n        if (this.type === null || this.type === undefined) {\n            this.type = 'Ansi';\n        }\n        return this.getByteCountInternal(chars, 0, chars.length);\n    };\n    /**\n     * Return the Byte of character\n     * @param  {number} codePoint\n     * @returns {number}\n     */\n    Encoding.prototype.utf8Len = function (codePoint) {\n        var bytes = codePoint <= 0x7F ? 1 :\n            codePoint <= 0x7FF ? 2 :\n                codePoint <= 0xFFFF ? 3 :\n                    codePoint <= 0x1FFFFF ? 4 : 0;\n        return bytes;\n    };\n    /**\n     * for 4 byte character return surrogate pair true, otherwise false\n     * @param  {number} codeUnit\n     * @returns {boolean}\n     */\n    Encoding.prototype.isHighSurrogate = function (codeUnit) {\n        return codeUnit >= 0xD800 && codeUnit <= 0xDBFF;\n    };\n    /**\n     * for 4byte character generate the surrogate pair\n     * @param  {number} highCodeUnit\n     * @param  {number} lowCodeUnit\n     */\n    Encoding.prototype.toCodepoint = function (highCodeUnit, lowCodeUnit) {\n        highCodeUnit = (0x3FF & highCodeUnit) << 10;\n        var u = highCodeUnit | (0x3FF & lowCodeUnit);\n        return u + 0x10000;\n    };\n    /**\n     * private method to get the byte count for specific charindex and count\n     * @param  {string} chars\n     * @param  {number} charIndex\n     * @param  {number} charCount\n     */\n    Encoding.prototype.getByteCountInternal = function (chars, charIndex, charCount) {\n        var byteCount = 0;\n        if (this.encodingType === 'Utf8' || this.encodingType === 'Unicode') {\n            var isUtf8 = this.encodingType === 'Utf8';\n            for (var i = 0; i < charCount; i++) {\n                var charCode = chars.charCodeAt(isUtf8 ? charIndex : charIndex++);\n                if (this.isHighSurrogate(charCode)) {\n                    if (isUtf8) {\n                        var high = charCode;\n                        var low = chars.charCodeAt(++charIndex);\n                        byteCount += this.utf8Len(this.toCodepoint(high, low));\n                    }\n                    else {\n                        byteCount += 4;\n                        ++i;\n                    }\n                }\n                else {\n                    if (isUtf8) {\n                        byteCount += this.utf8Len(charCode);\n                    }\n                    else {\n                        byteCount += 2;\n                    }\n                }\n                if (isUtf8) {\n                    charIndex++;\n                }\n            }\n            return byteCount;\n        }\n        else {\n            byteCount = charCount;\n            return byteCount;\n        }\n    };\n    /**\n     * Encodes a set of characters from the specified string into the ArrayBuffer.\n     * @param  {string} s- The string containing the set of characters to encode\n     * @param  {number} charIndex-The index of the first character to encode.\n     * @param  {number} charCount- The number of characters to encode.\n     * @returns {ArrayBuffer} - The ArrayBuffer that contains the resulting sequence of bytes.\n     */\n    Encoding.prototype.getBytes = function (s, charIndex, charCount) {\n        validateNullOrUndefined(s, 'string');\n        validateNullOrUndefined(charIndex, 'charIndex');\n        validateNullOrUndefined(charCount, 'charCount');\n        if (charIndex < 0 || charCount < 0) {\n            throw new RangeError('Argument Out Of Range Exception: charIndex or charCount is less than zero');\n        }\n        if (s.length - charIndex < charCount) {\n            throw new RangeError('Argument Out Of Range Exception: charIndex and charCount do not denote a valid range in string');\n        }\n        var bytes;\n        if (s === '') {\n            bytes = new ArrayBuffer(0);\n            return bytes;\n        }\n        if (this.type === null || this.type === undefined) {\n            this.type = 'Ansi';\n        }\n        var byteCount = this.getByteCountInternal(s, charIndex, charCount);\n        switch (this.type) {\n            case 'Utf8':\n                bytes = this.getBytesOfUtf8Encoding(byteCount, s, charIndex, charCount);\n                return bytes;\n            case 'Unicode':\n                bytes = this.getBytesOfUnicodeEncoding(byteCount, s, charIndex, charCount);\n                return bytes;\n            default:\n                bytes = this.getBytesOfAnsiEncoding(byteCount, s, charIndex, charCount);\n                return bytes;\n        }\n    };\n    /**\n     * Decodes a sequence of bytes from the specified ArrayBuffer into the string.\n     * @param  {ArrayBuffer} bytes- The ArrayBuffer containing the sequence of bytes to decode.\n     * @param  {number} index- The index of the first byte to decode.\n     * @param  {number} count- The number of bytes to decode.\n     * @returns {string} - The string that contains the resulting set of characters.\n     */\n    Encoding.prototype.getString = function (bytes, index, count) {\n        validateNullOrUndefined(bytes, 'bytes');\n        validateNullOrUndefined(index, 'index');\n        validateNullOrUndefined(count, 'count');\n        if (index < 0 || count < 0) {\n            throw new RangeError('Argument Out Of Range Exception: index or count is less than zero');\n        }\n        if (bytes.byteLength - index < count) {\n            throw new RangeError('Argument Out Of Range Exception: index and count do not denote a valid range in bytes');\n        }\n        if (bytes.byteLength === 0 || count === 0) {\n            return '';\n        }\n        if (this.type === null || this.type === undefined) {\n            this.type = 'Ansi';\n        }\n        var out = '';\n        var byteCal = new Uint8Array(bytes);\n        switch (this.type) {\n            case 'Utf8':\n                var s = this.getStringOfUtf8Encoding(byteCal, index, count);\n                return s;\n            case 'Unicode':\n                var byteUnicode = new Uint16Array(bytes);\n                out = this.getStringofUnicodeEncoding(byteUnicode, index, count);\n                return out;\n            default:\n                var j = index;\n                for (var i = 0; i < count; i++) {\n                    var c = byteCal[j];\n                    out += String.fromCharCode(c); // 1 byte(ASCII) character                  \n                    j++;\n                }\n                return out;\n        }\n    };\n    Encoding.prototype.getBytesOfAnsiEncoding = function (byteCount, s, charIndex, charCount) {\n        var bytes = new ArrayBuffer(byteCount);\n        var bufview = new Uint8Array(bytes);\n        var k = 0;\n        for (var i = 0; i < charCount; i++) {\n            var charcode = s.charCodeAt(charIndex++);\n            if (charcode < 0x800) {\n                bufview[k] = charcode;\n            }\n            else {\n                bufview[k] = 63; //replacement character '?'\n            }\n            k++;\n        }\n        return bytes;\n    };\n    Encoding.prototype.getBytesOfUtf8Encoding = function (byteCount, s, charIndex, charCount) {\n        var bytes = new ArrayBuffer(byteCount);\n        var uint = new Uint8Array(bytes);\n        var index = charIndex;\n        var j = 0;\n        for (var i = 0; i < charCount; i++) {\n            var charcode = s.charCodeAt(index);\n            if (charcode <= 0x7F) { // 1 byte character 2^7\n                uint[j] = charcode;\n            }\n            else if (charcode < 0x800) { // 2 byte character 2^11\n                uint[j] = 0xc0 | (charcode >> 6);\n                uint[++j] = 0x80 | (charcode & 0x3f);\n            }\n            else if ((charcode < 0xd800 || charcode >= 0xe000)) { // 3 byte character 2^16        \n                uint[j] = 0xe0 | (charcode >> 12);\n                uint[++j] = 0x80 | ((charcode >> 6) & 0x3f);\n                uint[++j] = 0x80 | (charcode & 0x3f);\n            }\n            else {\n                uint[j] = 0xef;\n                uint[++j] = 0xbf;\n                uint[++j] = 0xbd; // U+FFFE \"replacement character\"\n            }\n            ++j;\n            ++index;\n        }\n        return bytes;\n    };\n    Encoding.prototype.getBytesOfUnicodeEncoding = function (byteCount, s, charIndex, charCount) {\n        var bytes = new ArrayBuffer(byteCount);\n        var uint16 = new Uint16Array(bytes);\n        for (var i = 0; i < charCount; i++) {\n            var charcode = s.charCodeAt(i);\n            uint16[i] = charcode;\n        }\n        return bytes;\n    };\n    Encoding.prototype.getStringOfUtf8Encoding = function (byteCal, index, count) {\n        var j = 0;\n        var i = index;\n        var s = '';\n        for (j; j < count; j++) {\n            var c = byteCal[i++];\n            while (i > byteCal.length) {\n                return s;\n            }\n            if (c > 127) {\n                if (c > 191 && c < 224 && i < count) {\n                    c = (c & 31) << 6 | byteCal[i] & 63;\n                }\n                else if (c > 223 && c < 240 && i < byteCal.byteLength) {\n                    c = (c & 15) << 12 | (byteCal[i] & 63) << 6 | byteCal[++i] & 63;\n                }\n                else if (c > 239 && c < 248 && i < byteCal.byteLength) {\n                    c = (c & 7) << 18 | (byteCal[i] & 63) << 12 | (byteCal[++i] & 63) << 6 | byteCal[++i] & 63;\n                }\n                ++i;\n            }\n            s += String.fromCharCode(c); // 1 byte(ASCII) character                          \n        }\n        return s;\n    };\n    Encoding.prototype.getStringofUnicodeEncoding = function (byteUni, index, count) {\n        if (count > byteUni.length) {\n            throw new RangeError('ArgumentOutOfRange_Count');\n        }\n        var byte16 = new Uint16Array(count);\n        var out = '';\n        for (var i = 0; i < count && i < byteUni.length; i++) {\n            byte16[i] = byteUni[index++];\n        }\n        out = String.fromCharCode.apply(null, byte16);\n        return out;\n    };\n    /**\n     * To clear the encoding instance\n     * @return {void}\n     */\n    Encoding.prototype.destroy = function () {\n        this.emitBOM = undefined;\n        this.encodingType = undefined;\n    };\n    return Encoding;\n}());\nexport { Encoding };\n/**\n * To check the object is null or undefined and throw error if it is null or undefined\n * @param {Object} value - object to check is null or undefined\n * @return {boolean}\n * @throws {ArgumentException} - if the value is null or undefined\n * @private\n */\nexport function validateNullOrUndefined(value, message) {\n    if (value === null || value === undefined) {\n        throw new Error('ArgumentException: ' + message + ' cannot be null or undefined');\n    }\n}\n","/**\n * PdfOperators.ts class for EJ2-PDF\n * Class of string PDF common operators.\n * @private\n */\nvar Operators = /** @class */ (function () {\n    /**\n     * Create an instance of `PdfOperator` class.\n     * @private\n     */\n    function Operators() {\n        /**\n         * Specifies the value of `test`.\n         * @private\n         */\n        this.forTest = 'test';\n        this.forTest = Operators.obj;\n    }\n    /**\n     * Specifies the value of `obj`.\n     * @private\n     */\n    Operators.obj = 'obj';\n    /**\n     * Specifies the value of `endObj`.\n     * @private\n     */\n    Operators.endObj = 'endobj';\n    /**\n     * Specifies the value of `R`.\n     * @private\n     */\n    Operators.r = 'R';\n    /**\n     * Specifies the value of ` `.\n     * @private\n     */\n    Operators.whiteSpace = ' ';\n    /**\n     * Specifies the value of `/`.\n     * @private\n     */\n    Operators.slash = '/';\n    /**\n     * Specifies the value of `\\r\\n`.\n     * @private\n     */\n    Operators.newLine = '\\r\\n';\n    /**\n     * Specifies the value of `stream`.\n     * @private\n     */\n    Operators.stream = 'stream';\n    /**\n     * Specifies the value of `endStream`.\n     * @private\n     */\n    Operators.endStream = 'endstream';\n    /**\n     * Specifies the value of `xref`.\n     * @private\n     */\n    Operators.xref = 'xref';\n    /**\n     * Specifies the value of `f`.\n     * @private\n     */\n    Operators.f = 'f';\n    /**\n     * Specifies the value of `n`.\n     * @private\n     */\n    Operators.n = 'n';\n    /**\n     * Specifies the value of `trailer`.\n     * @private\n     */\n    Operators.trailer = 'trailer';\n    /**\n     * Specifies the value of `startxref`.\n     * @private\n     */\n    Operators.startxref = 'startxref';\n    /**\n     * Specifies the value of `eof`.\n     * @private\n     */\n    Operators.eof = '%%EOF';\n    /**\n     * Specifies the value of `header`.\n     * @private\n     */\n    Operators.header = '%PDF-1.5';\n    /**\n     * Specifies the value of `beginText`.\n     * @private\n     */\n    Operators.beginText = 'BT';\n    /**\n     * Specifies the value of `endText`.\n     * @private\n     */\n    Operators.endText = 'ET';\n    /**\n     * Specifies the value of `m`.\n     * @private\n     */\n    Operators.beginPath = 'm';\n    /**\n     * Specifies the value of `l`.\n     * @private\n     */\n    Operators.appendLineSegment = 'l';\n    /**\n     * Specifies the value of `S`.\n     * @private\n     */\n    Operators.stroke = 'S';\n    /**\n     * Specifies the value of `f`.\n     * @private\n     */\n    Operators.fill = 'f';\n    /**\n     * Specifies the value of `f*`.\n     * @private\n     */\n    Operators.fillEvenOdd = 'f*';\n    /**\n     * Specifies the value of `B`.\n     * @private\n     */\n    Operators.fillStroke = 'B';\n    /**\n     * Specifies the value of `B*`.\n     * @private\n     */\n    Operators.fillStrokeEvenOdd = 'B*';\n    /**\n     * Specifies the value of `c`.\n     * @private\n     */\n    Operators.appendbeziercurve = 'c';\n    /**\n     * Specifies the value of `re`.\n     * @private\n     */\n    Operators.appendRectangle = 're';\n    /**\n     * Specifies the value of `q`.\n     * @private\n     */\n    Operators.saveState = 'q';\n    /**\n     * Specifies the value of `Q`.\n     * @private\n     */\n    Operators.restoreState = 'Q';\n    /**\n     * Specifies the value of `Do`.\n     * @private\n     */\n    Operators.paintXObject = 'Do';\n    /**\n     * Specifies the value of `cm`.\n     * @private\n     */\n    Operators.modifyCtm = 'cm';\n    /**\n     * Specifies the value of `Tm`.\n     * @private\n     */\n    Operators.modifyTM = 'Tm';\n    /**\n     * Specifies the value of `w`.\n     * @private\n     */\n    Operators.setLineWidth = 'w';\n    /**\n     * Specifies the value of `J`.\n     * @private\n     */\n    Operators.setLineCapStyle = 'J';\n    /**\n     * Specifies the value of `j`.\n     * @private\n     */\n    Operators.setLineJoinStyle = 'j';\n    /**\n     * Specifies the value of `d`.\n     * @private\n     */\n    Operators.setDashPattern = 'd';\n    /**\n     * Specifies the value of `i`.\n     * @private\n     */\n    Operators.setFlatnessTolerance = 'i';\n    /**\n     * Specifies the value of `h`.\n     * @private\n     */\n    Operators.closePath = 'h';\n    /**\n     * Specifies the value of `s`.\n     * @private\n     */\n    Operators.closeStrokePath = 's';\n    /**\n     * Specifies the value of `b`.\n     * @private\n     */\n    Operators.closeFillStrokePath = 'b';\n    /**\n     * Specifies the value of `setCharacterSpace`.\n     * @private\n     */\n    Operators.setCharacterSpace = 'Tc';\n    /**\n     * Specifies the value of `setWordSpace`.\n     * @private\n     */\n    Operators.setWordSpace = 'Tw';\n    /**\n     * Specifies the value of `setHorizontalScaling`.\n     * @private\n     */\n    Operators.setHorizontalScaling = 'Tz';\n    /**\n     * Specifies the value of `setTextLeading`.\n     * @private\n     */\n    Operators.setTextLeading = 'TL';\n    /**\n     * Specifies the value of `setFont`.\n     * @private\n     */\n    Operators.setFont = 'Tf';\n    /**\n     * Specifies the value of `setRenderingMode`.\n     * @private\n     */\n    Operators.setRenderingMode = 'Tr';\n    /**\n     * Specifies the value of `setTextRise`.\n     * @private\n     */\n    Operators.setTextRise = 'Ts';\n    /**\n     * Specifies the value of `setTextScaling`.\n     * @private\n     */\n    Operators.setTextScaling = 'Tz';\n    /**\n     * Specifies the value of `setCoords`.\n     * @private\n     */\n    Operators.setCoords = 'Td';\n    /**\n     * Specifies the value of `goToNextLine`.\n     * @private\n     */\n    Operators.goToNextLine = 'T*';\n    /**\n     * Specifies the value of `setText`.\n     * @private\n     */\n    Operators.setText = 'Tj';\n    /**\n     * Specifies the value of `setTextWithFormatting`.\n     * @private\n     */\n    Operators.setTextWithFormatting = 'TJ';\n    /**\n     * Specifies the value of `setTextOnNewLine`.\n     * @private\n     */\n    Operators.setTextOnNewLine = '\\'';\n    /**\n     * Specifies the value of `selectcolorspaceforstroking`.\n     * @private\n     */\n    Operators.selectcolorspaceforstroking = 'CS';\n    /**\n     * Specifies the value of `selectcolorspacefornonstroking`.\n     * @private\n     */\n    Operators.selectcolorspacefornonstroking = 'cs';\n    /**\n     * Specifies the value of `setrbgcolorforstroking`.\n     * @private\n     */\n    Operators.setrbgcolorforstroking = 'RG';\n    /**\n     * Specifies the value of `setrbgcolorfornonstroking`.\n     * @private\n     */\n    Operators.setrbgcolorfornonstroking = 'rg';\n    /**\n     * Specifies the value of `K`.\n     * @private\n     */\n    Operators.setcmykcolorforstroking = 'K';\n    /**\n     * Specifies the value of `k`.\n     * @private\n     */\n    Operators.setcmykcolorfornonstroking = 'k';\n    /**\n     * Specifies the value of `G`.\n     * @private\n     */\n    Operators.setgraycolorforstroking = 'G';\n    /**\n     * Specifies the value of `g`.\n     * @private\n     */\n    Operators.setgraycolorfornonstroking = 'g';\n    /**\n     * Specifies the value of `W`.\n     * @private\n     */\n    Operators.clipPath = 'W';\n    /**\n     * Specifies the value of `clipPathEvenOdd`.\n     * @private\n     */\n    Operators.clipPathEvenOdd = 'W*';\n    /**\n     * Specifies the value of `n`.\n     * @private\n     */\n    Operators.endPath = 'n';\n    /**\n     * Specifies the value of `setGraphicsState`.\n     * @private\n     */\n    Operators.setGraphicsState = 'gs';\n    /**\n     * Specifies the value of `%`.\n     * @private\n     */\n    Operators.comment = '%';\n    /**\n     * Specifies the value of `*`.\n     * @private\n     */\n    Operators.evenOdd = '*';\n    /**\n     * Specifies the value of `M`.\n     * @private\n     */\n    Operators.setMiterLimit = 'M';\n    return Operators;\n}());\nexport { Operators };\n"],"sourceRoot":""}